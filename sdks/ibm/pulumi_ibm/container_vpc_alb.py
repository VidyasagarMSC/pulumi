# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerVpcAlbArgs', 'ContainerVpcAlb']

@pulumi.input_type
class ContainerVpcAlbArgs:
    def __init__(__self__, *,
                 alb_id: pulumi.Input[_builtins.str],
                 container_vpc_alb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_deployment: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerVpcAlbTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ContainerVpcAlb resource.
        :param pulumi.Input[_builtins.str] alb_id: ALB ID
        :param pulumi.Input[_builtins.bool] disable_deployment: Disable the ALB instance in the cluster
        :param pulumi.Input[_builtins.bool] enable: Enable the ALB instance in the cluster
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        pulumi.set(__self__, "alb_id", alb_id)
        if container_vpc_alb_id is not None:
            pulumi.set(__self__, "container_vpc_alb_id", container_vpc_alb_id)
        if disable_deployment is not None:
            pulumi.set(__self__, "disable_deployment", disable_deployment)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="albId")
    def alb_id(self) -> pulumi.Input[_builtins.str]:
        """
        ALB ID
        """
        return pulumi.get(self, "alb_id")

    @alb_id.setter
    def alb_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alb_id", value)

    @_builtins.property
    @pulumi.getter(name="containerVpcAlbId")
    def container_vpc_alb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_vpc_alb_id")

    @container_vpc_alb_id.setter
    def container_vpc_alb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_vpc_alb_id", value)

    @_builtins.property
    @pulumi.getter(name="disableDeployment")
    def disable_deployment(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disable the ALB instance in the cluster
        """
        return pulumi.get(self, "disable_deployment")

    @disable_deployment.setter
    def disable_deployment(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_deployment", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable the ALB instance in the cluster
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerVpcAlbTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerVpcAlbTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ContainerVpcAlbState:
    def __init__(__self__, *,
                 alb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 alb_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_vpc_alb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_deployment: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 load_balancer_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resize: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerVpcAlbTimeoutsArgs']] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ContainerVpcAlb resources.
        :param pulumi.Input[_builtins.str] alb_id: ALB ID
        :param pulumi.Input[_builtins.str] alb_type: Type of the ALB
        :param pulumi.Input[_builtins.str] cluster: cluster id
        :param pulumi.Input[_builtins.bool] disable_deployment: Disable the ALB instance in the cluster
        :param pulumi.Input[_builtins.bool] enable: Enable the ALB instance in the cluster
        :param pulumi.Input[_builtins.str] load_balancer_hostname: Load balancer host name
        :param pulumi.Input[_builtins.str] name: ALB name
        :param pulumi.Input[_builtins.bool] resize: boolean value to resize the albs
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] state: ALB state
        :param pulumi.Input[_builtins.str] status: Status of the ALB
        :param pulumi.Input[_builtins.str] zone: Zone info.
        """
        if alb_id is not None:
            pulumi.set(__self__, "alb_id", alb_id)
        if alb_type is not None:
            pulumi.set(__self__, "alb_type", alb_type)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if container_vpc_alb_id is not None:
            pulumi.set(__self__, "container_vpc_alb_id", container_vpc_alb_id)
        if disable_deployment is not None:
            pulumi.set(__self__, "disable_deployment", disable_deployment)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if load_balancer_hostname is not None:
            pulumi.set(__self__, "load_balancer_hostname", load_balancer_hostname)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="albId")
    def alb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ALB ID
        """
        return pulumi.get(self, "alb_id")

    @alb_id.setter
    def alb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alb_id", value)

    @_builtins.property
    @pulumi.getter(name="albType")
    def alb_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the ALB
        """
        return pulumi.get(self, "alb_type")

    @alb_type.setter
    def alb_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alb_type", value)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        cluster id
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerVpcAlbId")
    def container_vpc_alb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_vpc_alb_id")

    @container_vpc_alb_id.setter
    def container_vpc_alb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_vpc_alb_id", value)

    @_builtins.property
    @pulumi.getter(name="disableDeployment")
    def disable_deployment(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disable the ALB instance in the cluster
        """
        return pulumi.get(self, "disable_deployment")

    @disable_deployment.setter
    def disable_deployment(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_deployment", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable the ALB instance in the cluster
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="loadBalancerHostname")
    def load_balancer_hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load balancer host name
        """
        return pulumi.get(self, "load_balancer_hostname")

    @load_balancer_hostname.setter
    def load_balancer_hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "load_balancer_hostname", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ALB name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def resize(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        boolean value to resize the albs
        """
        return pulumi.get(self, "resize")

    @resize.setter
    def resize(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resize", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ALB state
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the ALB
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerVpcAlbTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerVpcAlbTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Zone info.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/containerVpcAlb:ContainerVpcAlb")
class ContainerVpcAlb(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_vpc_alb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_deployment: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerVpcAlbTimeoutsArgs', 'ContainerVpcAlbTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a ContainerVpcAlb resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alb_id: ALB ID
        :param pulumi.Input[_builtins.bool] disable_deployment: Disable the ALB instance in the cluster
        :param pulumi.Input[_builtins.bool] enable: Enable the ALB instance in the cluster
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerVpcAlbArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerVpcAlb resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerVpcAlbArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerVpcAlbArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_vpc_alb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_deployment: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerVpcAlbTimeoutsArgs', 'ContainerVpcAlbTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerVpcAlbArgs.__new__(ContainerVpcAlbArgs)

            if alb_id is None and not opts.urn:
                raise TypeError("Missing required property 'alb_id'")
            __props__.__dict__["alb_id"] = alb_id
            __props__.__dict__["container_vpc_alb_id"] = container_vpc_alb_id
            __props__.__dict__["disable_deployment"] = disable_deployment
            __props__.__dict__["enable"] = enable
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["alb_type"] = None
            __props__.__dict__["cluster"] = None
            __props__.__dict__["load_balancer_hostname"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["resize"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["zone"] = None
        super(ContainerVpcAlb, __self__).__init__(
            'ibm:index/containerVpcAlb:ContainerVpcAlb',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alb_id: Optional[pulumi.Input[_builtins.str]] = None,
            alb_type: Optional[pulumi.Input[_builtins.str]] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            container_vpc_alb_id: Optional[pulumi.Input[_builtins.str]] = None,
            disable_deployment: Optional[pulumi.Input[_builtins.bool]] = None,
            enable: Optional[pulumi.Input[_builtins.bool]] = None,
            load_balancer_hostname: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resize: Optional[pulumi.Input[_builtins.bool]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerVpcAlbTimeoutsArgs', 'ContainerVpcAlbTimeoutsArgsDict']]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'ContainerVpcAlb':
        """
        Get an existing ContainerVpcAlb resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alb_id: ALB ID
        :param pulumi.Input[_builtins.str] alb_type: Type of the ALB
        :param pulumi.Input[_builtins.str] cluster: cluster id
        :param pulumi.Input[_builtins.bool] disable_deployment: Disable the ALB instance in the cluster
        :param pulumi.Input[_builtins.bool] enable: Enable the ALB instance in the cluster
        :param pulumi.Input[_builtins.str] load_balancer_hostname: Load balancer host name
        :param pulumi.Input[_builtins.str] name: ALB name
        :param pulumi.Input[_builtins.bool] resize: boolean value to resize the albs
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] state: ALB state
        :param pulumi.Input[_builtins.str] status: Status of the ALB
        :param pulumi.Input[_builtins.str] zone: Zone info.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerVpcAlbState.__new__(_ContainerVpcAlbState)

        __props__.__dict__["alb_id"] = alb_id
        __props__.__dict__["alb_type"] = alb_type
        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["container_vpc_alb_id"] = container_vpc_alb_id
        __props__.__dict__["disable_deployment"] = disable_deployment
        __props__.__dict__["enable"] = enable
        __props__.__dict__["load_balancer_hostname"] = load_balancer_hostname
        __props__.__dict__["name"] = name
        __props__.__dict__["resize"] = resize
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["state"] = state
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["zone"] = zone
        return ContainerVpcAlb(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="albId")
    def alb_id(self) -> pulumi.Output[_builtins.str]:
        """
        ALB ID
        """
        return pulumi.get(self, "alb_id")

    @_builtins.property
    @pulumi.getter(name="albType")
    def alb_type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the ALB
        """
        return pulumi.get(self, "alb_type")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        cluster id
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="containerVpcAlbId")
    def container_vpc_alb_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_vpc_alb_id")

    @_builtins.property
    @pulumi.getter(name="disableDeployment")
    def disable_deployment(self) -> pulumi.Output[_builtins.bool]:
        """
        Disable the ALB instance in the cluster
        """
        return pulumi.get(self, "disable_deployment")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable the ALB instance in the cluster
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="loadBalancerHostname")
    def load_balancer_hostname(self) -> pulumi.Output[_builtins.str]:
        """
        Load balancer host name
        """
        return pulumi.get(self, "load_balancer_hostname")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        ALB name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resize(self) -> pulumi.Output[_builtins.bool]:
        """
        boolean value to resize the albs
        """
        return pulumi.get(self, "resize")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        ALB state
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the ALB
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerVpcAlbTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        Zone info.
        """
        return pulumi.get(self, "zone")

