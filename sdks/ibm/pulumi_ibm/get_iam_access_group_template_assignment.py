# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamAccessGroupTemplateAssignmentResult',
    'AwaitableGetIamAccessGroupTemplateAssignmentResult',
    'get_iam_access_group_template_assignment',
    'get_iam_access_group_template_assignment_output',
]

@pulumi.output_type
class GetIamAccessGroupTemplateAssignmentResult:
    """
    A collection of values returned by getIamAccessGroupTemplateAssignment.
    """
    def __init__(__self__, account_id=None, assignments=None, firsts=None, id=None, lasts=None, limit=None, offset=None, status=None, target=None, template_id=None, template_version=None, total_count=None, transaction_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if assignments and not isinstance(assignments, list):
            raise TypeError("Expected argument 'assignments' to be a list")
        pulumi.set(__self__, "assignments", assignments)
        if firsts and not isinstance(firsts, list):
            raise TypeError("Expected argument 'firsts' to be a list")
        pulumi.set(__self__, "firsts", firsts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lasts and not isinstance(lasts, list):
            raise TypeError("Expected argument 'lasts' to be a list")
        pulumi.set(__self__, "lasts", lasts)
        if limit and not isinstance(limit, float):
            raise TypeError("Expected argument 'limit' to be a float")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, float):
            raise TypeError("Expected argument 'offset' to be a float")
        pulumi.set(__self__, "offset", offset)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if target and not isinstance(target, str):
            raise TypeError("Expected argument 'target' to be a str")
        pulumi.set(__self__, "target", target)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)
        if template_version and not isinstance(template_version, str):
            raise TypeError("Expected argument 'template_version' to be a str")
        pulumi.set(__self__, "template_version", template_version)
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        pulumi.set(__self__, "total_count", total_count)
        if transaction_id and not isinstance(transaction_id, str):
            raise TypeError("Expected argument 'transaction_id' to be a str")
        pulumi.set(__self__, "transaction_id", transaction_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> Sequence['outputs.GetIamAccessGroupTemplateAssignmentAssignmentResult']:
        return pulumi.get(self, "assignments")

    @_builtins.property
    @pulumi.getter
    def firsts(self) -> Sequence['outputs.GetIamAccessGroupTemplateAssignmentFirstResult']:
        return pulumi.get(self, "firsts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lasts(self) -> Sequence['outputs.GetIamAccessGroupTemplateAssignmentLastResult']:
        return pulumi.get(self, "lasts")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.float:
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def offset(self) -> _builtins.float:
        return pulumi.get(self, "offset")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "template_version")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.float:
        return pulumi.get(self, "total_count")

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "transaction_id")


class AwaitableGetIamAccessGroupTemplateAssignmentResult(GetIamAccessGroupTemplateAssignmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamAccessGroupTemplateAssignmentResult(
            account_id=self.account_id,
            assignments=self.assignments,
            firsts=self.firsts,
            id=self.id,
            lasts=self.lasts,
            limit=self.limit,
            offset=self.offset,
            status=self.status,
            target=self.target,
            template_id=self.template_id,
            template_version=self.template_version,
            total_count=self.total_count,
            transaction_id=self.transaction_id)


def get_iam_access_group_template_assignment(id: Optional[_builtins.str] = None,
                                             status: Optional[_builtins.str] = None,
                                             target: Optional[_builtins.str] = None,
                                             template_id: Optional[_builtins.str] = None,
                                             template_version: Optional[_builtins.str] = None,
                                             transaction_id: Optional[_builtins.str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamAccessGroupTemplateAssignmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['status'] = status
    __args__['target'] = target
    __args__['templateId'] = template_id
    __args__['templateVersion'] = template_version
    __args__['transactionId'] = transaction_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamAccessGroupTemplateAssignment:getIamAccessGroupTemplateAssignment', __args__, opts=opts, typ=GetIamAccessGroupTemplateAssignmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamAccessGroupTemplateAssignmentResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        assignments=pulumi.get(__ret__, 'assignments'),
        firsts=pulumi.get(__ret__, 'firsts'),
        id=pulumi.get(__ret__, 'id'),
        lasts=pulumi.get(__ret__, 'lasts'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        status=pulumi.get(__ret__, 'status'),
        target=pulumi.get(__ret__, 'target'),
        template_id=pulumi.get(__ret__, 'template_id'),
        template_version=pulumi.get(__ret__, 'template_version'),
        total_count=pulumi.get(__ret__, 'total_count'),
        transaction_id=pulumi.get(__ret__, 'transaction_id'))
def get_iam_access_group_template_assignment_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    target: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    template_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    template_version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    transaction_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamAccessGroupTemplateAssignmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['status'] = status
    __args__['target'] = target
    __args__['templateId'] = template_id
    __args__['templateVersion'] = template_version
    __args__['transactionId'] = transaction_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamAccessGroupTemplateAssignment:getIamAccessGroupTemplateAssignment', __args__, opts=opts, typ=GetIamAccessGroupTemplateAssignmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamAccessGroupTemplateAssignmentResult(
        account_id=pulumi.get(__response__, 'account_id'),
        assignments=pulumi.get(__response__, 'assignments'),
        firsts=pulumi.get(__response__, 'firsts'),
        id=pulumi.get(__response__, 'id'),
        lasts=pulumi.get(__response__, 'lasts'),
        limit=pulumi.get(__response__, 'limit'),
        offset=pulumi.get(__response__, 'offset'),
        status=pulumi.get(__response__, 'status'),
        target=pulumi.get(__response__, 'target'),
        template_id=pulumi.get(__response__, 'template_id'),
        template_version=pulumi.get(__response__, 'template_version'),
        total_count=pulumi.get(__response__, 'total_count'),
        transaction_id=pulumi.get(__response__, 'transaction_id')))
