# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetKpKeyResult',
    'AwaitableGetKpKeyResult',
    'get_kp_key',
    'get_kp_key_output',
]

@pulumi.output_type
class GetKpKeyResult:
    """
    A collection of values returned by getKpKey.
    """
    def __init__(__self__, id=None, key_name=None, key_protect_id=None, keys=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_name and not isinstance(key_name, str):
            raise TypeError("Expected argument 'key_name' to be a str")
        pulumi.set(__self__, "key_name", key_name)
        if key_protect_id and not isinstance(key_protect_id, str):
            raise TypeError("Expected argument 'key_protect_id' to be a str")
        pulumi.set(__self__, "key_protect_id", key_protect_id)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key_name")

    @_builtins.property
    @pulumi.getter(name="keyProtectId")
    def key_protect_id(self) -> _builtins.str:
        return pulumi.get(self, "key_protect_id")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Sequence['outputs.GetKpKeyKeyResult']:
        return pulumi.get(self, "keys")


class AwaitableGetKpKeyResult(GetKpKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKpKeyResult(
            id=self.id,
            key_name=self.key_name,
            key_protect_id=self.key_protect_id,
            keys=self.keys)


def get_kp_key(id: Optional[_builtins.str] = None,
               key_name: Optional[_builtins.str] = None,
               key_protect_id: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKpKeyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['keyName'] = key_name
    __args__['keyProtectId'] = key_protect_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getKpKey:getKpKey', __args__, opts=opts, typ=GetKpKeyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetKpKeyResult(
        id=pulumi.get(__ret__, 'id'),
        key_name=pulumi.get(__ret__, 'key_name'),
        key_protect_id=pulumi.get(__ret__, 'key_protect_id'),
        keys=pulumi.get(__ret__, 'keys'))
def get_kp_key_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      key_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      key_protect_id: Optional[pulumi.Input[_builtins.str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKpKeyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['keyName'] = key_name
    __args__['keyProtectId'] = key_protect_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getKpKey:getKpKey', __args__, opts=opts, typ=GetKpKeyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetKpKeyResult(
        id=pulumi.get(__response__, 'id'),
        key_name=pulumi.get(__response__, 'key_name'),
        key_protect_id=pulumi.get(__response__, 'key_protect_id'),
        keys=pulumi.get(__response__, 'keys')))
