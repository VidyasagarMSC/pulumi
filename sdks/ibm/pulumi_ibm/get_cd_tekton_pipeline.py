# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCdTektonPipelineResult',
    'AwaitableGetCdTektonPipelineResult',
    'get_cd_tekton_pipeline',
    'get_cd_tekton_pipeline_output',
]

@pulumi.output_type
class GetCdTektonPipelineResult:
    """
    A collection of values returned by getCdTektonPipeline.
    """
    def __init__(__self__, build_number=None, created_at=None, definitions=None, enable_notifications=None, enable_partial_cloning=None, enabled=None, href=None, id=None, name=None, next_build_number=None, pipeline_id=None, properties=None, resource_groups=None, runs_url=None, status=None, toolchains=None, triggers=None, updated_at=None, workers=None):
        if build_number and not isinstance(build_number, float):
            raise TypeError("Expected argument 'build_number' to be a float")
        pulumi.set(__self__, "build_number", build_number)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if definitions and not isinstance(definitions, list):
            raise TypeError("Expected argument 'definitions' to be a list")
        pulumi.set(__self__, "definitions", definitions)
        if enable_notifications and not isinstance(enable_notifications, bool):
            raise TypeError("Expected argument 'enable_notifications' to be a bool")
        pulumi.set(__self__, "enable_notifications", enable_notifications)
        if enable_partial_cloning and not isinstance(enable_partial_cloning, bool):
            raise TypeError("Expected argument 'enable_partial_cloning' to be a bool")
        pulumi.set(__self__, "enable_partial_cloning", enable_partial_cloning)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if next_build_number and not isinstance(next_build_number, float):
            raise TypeError("Expected argument 'next_build_number' to be a float")
        pulumi.set(__self__, "next_build_number", next_build_number)
        if pipeline_id and not isinstance(pipeline_id, str):
            raise TypeError("Expected argument 'pipeline_id' to be a str")
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        if properties and not isinstance(properties, list):
            raise TypeError("Expected argument 'properties' to be a list")
        pulumi.set(__self__, "properties", properties)
        if resource_groups and not isinstance(resource_groups, list):
            raise TypeError("Expected argument 'resource_groups' to be a list")
        pulumi.set(__self__, "resource_groups", resource_groups)
        if runs_url and not isinstance(runs_url, str):
            raise TypeError("Expected argument 'runs_url' to be a str")
        pulumi.set(__self__, "runs_url", runs_url)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if toolchains and not isinstance(toolchains, list):
            raise TypeError("Expected argument 'toolchains' to be a list")
        pulumi.set(__self__, "toolchains", toolchains)
        if triggers and not isinstance(triggers, list):
            raise TypeError("Expected argument 'triggers' to be a list")
        pulumi.set(__self__, "triggers", triggers)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if workers and not isinstance(workers, list):
            raise TypeError("Expected argument 'workers' to be a list")
        pulumi.set(__self__, "workers", workers)

    @_builtins.property
    @pulumi.getter(name="buildNumber")
    def build_number(self) -> _builtins.float:
        return pulumi.get(self, "build_number")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def definitions(self) -> Sequence['outputs.GetCdTektonPipelineDefinitionResult']:
        return pulumi.get(self, "definitions")

    @_builtins.property
    @pulumi.getter(name="enableNotifications")
    def enable_notifications(self) -> _builtins.bool:
        return pulumi.get(self, "enable_notifications")

    @_builtins.property
    @pulumi.getter(name="enablePartialCloning")
    def enable_partial_cloning(self) -> _builtins.bool:
        return pulumi.get(self, "enable_partial_cloning")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextBuildNumber")
    def next_build_number(self) -> _builtins.float:
        return pulumi.get(self, "next_build_number")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> _builtins.str:
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetCdTektonPipelinePropertyResult']:
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Sequence['outputs.GetCdTektonPipelineResourceGroupResult']:
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="runsUrl")
    def runs_url(self) -> _builtins.str:
        return pulumi.get(self, "runs_url")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def toolchains(self) -> Sequence['outputs.GetCdTektonPipelineToolchainResult']:
        return pulumi.get(self, "toolchains")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Sequence['outputs.GetCdTektonPipelineTriggerResult']:
        return pulumi.get(self, "triggers")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def workers(self) -> Sequence['outputs.GetCdTektonPipelineWorkerResult']:
        return pulumi.get(self, "workers")


class AwaitableGetCdTektonPipelineResult(GetCdTektonPipelineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCdTektonPipelineResult(
            build_number=self.build_number,
            created_at=self.created_at,
            definitions=self.definitions,
            enable_notifications=self.enable_notifications,
            enable_partial_cloning=self.enable_partial_cloning,
            enabled=self.enabled,
            href=self.href,
            id=self.id,
            name=self.name,
            next_build_number=self.next_build_number,
            pipeline_id=self.pipeline_id,
            properties=self.properties,
            resource_groups=self.resource_groups,
            runs_url=self.runs_url,
            status=self.status,
            toolchains=self.toolchains,
            triggers=self.triggers,
            updated_at=self.updated_at,
            workers=self.workers)


def get_cd_tekton_pipeline(id: Optional[_builtins.str] = None,
                           pipeline_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCdTektonPipelineResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['pipelineId'] = pipeline_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCdTektonPipeline:getCdTektonPipeline', __args__, opts=opts, typ=GetCdTektonPipelineResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCdTektonPipelineResult(
        build_number=pulumi.get(__ret__, 'build_number'),
        created_at=pulumi.get(__ret__, 'created_at'),
        definitions=pulumi.get(__ret__, 'definitions'),
        enable_notifications=pulumi.get(__ret__, 'enable_notifications'),
        enable_partial_cloning=pulumi.get(__ret__, 'enable_partial_cloning'),
        enabled=pulumi.get(__ret__, 'enabled'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        next_build_number=pulumi.get(__ret__, 'next_build_number'),
        pipeline_id=pulumi.get(__ret__, 'pipeline_id'),
        properties=pulumi.get(__ret__, 'properties'),
        resource_groups=pulumi.get(__ret__, 'resource_groups'),
        runs_url=pulumi.get(__ret__, 'runs_url'),
        status=pulumi.get(__ret__, 'status'),
        toolchains=pulumi.get(__ret__, 'toolchains'),
        triggers=pulumi.get(__ret__, 'triggers'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        workers=pulumi.get(__ret__, 'workers'))
def get_cd_tekton_pipeline_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCdTektonPipelineResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['pipelineId'] = pipeline_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCdTektonPipeline:getCdTektonPipeline', __args__, opts=opts, typ=GetCdTektonPipelineResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCdTektonPipelineResult(
        build_number=pulumi.get(__response__, 'build_number'),
        created_at=pulumi.get(__response__, 'created_at'),
        definitions=pulumi.get(__response__, 'definitions'),
        enable_notifications=pulumi.get(__response__, 'enable_notifications'),
        enable_partial_cloning=pulumi.get(__response__, 'enable_partial_cloning'),
        enabled=pulumi.get(__response__, 'enabled'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        next_build_number=pulumi.get(__response__, 'next_build_number'),
        pipeline_id=pulumi.get(__response__, 'pipeline_id'),
        properties=pulumi.get(__response__, 'properties'),
        resource_groups=pulumi.get(__response__, 'resource_groups'),
        runs_url=pulumi.get(__response__, 'runs_url'),
        status=pulumi.get(__response__, 'status'),
        toolchains=pulumi.get(__response__, 'toolchains'),
        triggers=pulumi.get(__response__, 'triggers'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        workers=pulumi.get(__response__, 'workers')))
