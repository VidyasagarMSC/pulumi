# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CisAlertArgs', 'CisAlert']

@pulumi.input_type
class CisAlertArgs:
    def __init__(__self__, *,
                 alert_type: pulumi.Input[_builtins.str],
                 cis_id: pulumi.Input[_builtins.str],
                 enabled: pulumi.Input[_builtins.bool],
                 mechanisms: pulumi.Input[Sequence[pulumi.Input['CisAlertMechanismArgs']]],
                 cis_alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 filters: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisAlert resource.
        :param pulumi.Input[_builtins.str] alert_type: Condition for the alert
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.bool] enabled: Is the alert policy active
        :param pulumi.Input[Sequence[pulumi.Input['CisAlertMechanismArgs']]] mechanisms: Delivery mechanisms for the alert, can include an email, a webhook, or both.
        :param pulumi.Input[_builtins.str] conditions: Conditions based on filter type
        :param pulumi.Input[_builtins.str] description: Policy Description
        :param pulumi.Input[_builtins.str] filters: Filters based on filter type
        :param pulumi.Input[_builtins.str] name: Policy name
        """
        pulumi.set(__self__, "alert_type", alert_type)
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "mechanisms", mechanisms)
        if cis_alert_id is not None:
            pulumi.set(__self__, "cis_alert_id", cis_alert_id)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> pulumi.Input[_builtins.str]:
        """
        Condition for the alert
        """
        return pulumi.get(self, "alert_type")

    @alert_type.setter
    def alert_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alert_type", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        Is the alert policy active
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def mechanisms(self) -> pulumi.Input[Sequence[pulumi.Input['CisAlertMechanismArgs']]]:
        """
        Delivery mechanisms for the alert, can include an email, a webhook, or both.
        """
        return pulumi.get(self, "mechanisms")

    @mechanisms.setter
    def mechanisms(self, value: pulumi.Input[Sequence[pulumi.Input['CisAlertMechanismArgs']]]):
        pulumi.set(self, "mechanisms", value)

    @_builtins.property
    @pulumi.getter(name="cisAlertId")
    def cis_alert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_alert_id")

    @cis_alert_id.setter
    def cis_alert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_alert_id", value)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Conditions based on filter type
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Filters based on filter type
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filters", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CisAlertState:
    def __init__(__self__, *,
                 alert_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 filters: Optional[pulumi.Input[_builtins.str]] = None,
                 mechanisms: Optional[pulumi.Input[Sequence[pulumi.Input['CisAlertMechanismArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisAlert resources.
        :param pulumi.Input[_builtins.str] alert_type: Condition for the alert
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] conditions: Conditions based on filter type
        :param pulumi.Input[_builtins.str] description: Policy Description
        :param pulumi.Input[_builtins.bool] enabled: Is the alert policy active
        :param pulumi.Input[_builtins.str] filters: Filters based on filter type
        :param pulumi.Input[Sequence[pulumi.Input['CisAlertMechanismArgs']]] mechanisms: Delivery mechanisms for the alert, can include an email, a webhook, or both.
        :param pulumi.Input[_builtins.str] name: Policy name
        :param pulumi.Input[_builtins.str] policy_id: Identifier of the Alert Policy
        """
        if alert_type is not None:
            pulumi.set(__self__, "alert_type", alert_type)
        if cis_alert_id is not None:
            pulumi.set(__self__, "cis_alert_id", cis_alert_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if mechanisms is not None:
            pulumi.set(__self__, "mechanisms", mechanisms)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)

    @_builtins.property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Condition for the alert
        """
        return pulumi.get(self, "alert_type")

    @alert_type.setter
    def alert_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alert_type", value)

    @_builtins.property
    @pulumi.getter(name="cisAlertId")
    def cis_alert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_alert_id")

    @cis_alert_id.setter
    def cis_alert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_alert_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Conditions based on filter type
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Is the alert policy active
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Filters based on filter type
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filters", value)

    @_builtins.property
    @pulumi.getter
    def mechanisms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CisAlertMechanismArgs']]]]:
        """
        Delivery mechanisms for the alert, can include an email, a webhook, or both.
        """
        return pulumi.get(self, "mechanisms")

    @mechanisms.setter
    def mechanisms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CisAlertMechanismArgs']]]]):
        pulumi.set(self, "mechanisms", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier of the Alert Policy
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)


@pulumi.type_token("ibm:index/cisAlert:CisAlert")
class CisAlert(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 filters: Optional[pulumi.Input[_builtins.str]] = None,
                 mechanisms: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisAlertMechanismArgs', 'CisAlertMechanismArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisAlert resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alert_type: Condition for the alert
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] conditions: Conditions based on filter type
        :param pulumi.Input[_builtins.str] description: Policy Description
        :param pulumi.Input[_builtins.bool] enabled: Is the alert policy active
        :param pulumi.Input[_builtins.str] filters: Filters based on filter type
        :param pulumi.Input[Sequence[pulumi.Input[Union['CisAlertMechanismArgs', 'CisAlertMechanismArgsDict']]]] mechanisms: Delivery mechanisms for the alert, can include an email, a webhook, or both.
        :param pulumi.Input[_builtins.str] name: Policy name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisAlertArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisAlert resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisAlertArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisAlertArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 filters: Optional[pulumi.Input[_builtins.str]] = None,
                 mechanisms: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisAlertMechanismArgs', 'CisAlertMechanismArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisAlertArgs.__new__(CisAlertArgs)

            if alert_type is None and not opts.urn:
                raise TypeError("Missing required property 'alert_type'")
            __props__.__dict__["alert_type"] = alert_type
            __props__.__dict__["cis_alert_id"] = cis_alert_id
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["description"] = description
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["filters"] = filters
            if mechanisms is None and not opts.urn:
                raise TypeError("Missing required property 'mechanisms'")
            __props__.__dict__["mechanisms"] = mechanisms
            __props__.__dict__["name"] = name
            __props__.__dict__["policy_id"] = None
        super(CisAlert, __self__).__init__(
            'ibm:index/cisAlert:CisAlert',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alert_type: Optional[pulumi.Input[_builtins.str]] = None,
            cis_alert_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            conditions: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            filters: Optional[pulumi.Input[_builtins.str]] = None,
            mechanisms: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisAlertMechanismArgs', 'CisAlertMechanismArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisAlert':
        """
        Get an existing CisAlert resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alert_type: Condition for the alert
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] conditions: Conditions based on filter type
        :param pulumi.Input[_builtins.str] description: Policy Description
        :param pulumi.Input[_builtins.bool] enabled: Is the alert policy active
        :param pulumi.Input[_builtins.str] filters: Filters based on filter type
        :param pulumi.Input[Sequence[pulumi.Input[Union['CisAlertMechanismArgs', 'CisAlertMechanismArgsDict']]]] mechanisms: Delivery mechanisms for the alert, can include an email, a webhook, or both.
        :param pulumi.Input[_builtins.str] name: Policy name
        :param pulumi.Input[_builtins.str] policy_id: Identifier of the Alert Policy
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisAlertState.__new__(_CisAlertState)

        __props__.__dict__["alert_type"] = alert_type
        __props__.__dict__["cis_alert_id"] = cis_alert_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["filters"] = filters
        __props__.__dict__["mechanisms"] = mechanisms
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_id"] = policy_id
        return CisAlert(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> pulumi.Output[_builtins.str]:
        """
        Condition for the alert
        """
        return pulumi.get(self, "alert_type")

    @_builtins.property
    @pulumi.getter(name="cisAlertId")
    def cis_alert_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_alert_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Conditions based on filter type
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Policy Description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Is the alert policy active
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Filters based on filter type
        """
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def mechanisms(self) -> pulumi.Output[Sequence['outputs.CisAlertMechanism']]:
        """
        Delivery mechanisms for the alert, can include an email, a webhook, or both.
        """
        return pulumi.get(self, "mechanisms")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Policy name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Identifier of the Alert Policy
        """
        return pulumi.get(self, "policy_id")

