# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamUserPolicyResult',
    'AwaitableGetIamUserPolicyResult',
    'get_iam_user_policy',
    'get_iam_user_policy_output',
]

@pulumi.output_type
class GetIamUserPolicyResult:
    """
    A collection of values returned by getIamUserPolicy.
    """
    def __init__(__self__, ibm_id=None, id=None, policies=None, sort=None, transaction_id=None):
        if ibm_id and not isinstance(ibm_id, str):
            raise TypeError("Expected argument 'ibm_id' to be a str")
        pulumi.set(__self__, "ibm_id", ibm_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)
        if transaction_id and not isinstance(transaction_id, str):
            raise TypeError("Expected argument 'transaction_id' to be a str")
        pulumi.set(__self__, "transaction_id", transaction_id)

    @_builtins.property
    @pulumi.getter(name="ibmId")
    def ibm_id(self) -> _builtins.str:
        return pulumi.get(self, "ibm_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetIamUserPolicyPolicyResult']:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> _builtins.str:
        return pulumi.get(self, "transaction_id")


class AwaitableGetIamUserPolicyResult(GetIamUserPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamUserPolicyResult(
            ibm_id=self.ibm_id,
            id=self.id,
            policies=self.policies,
            sort=self.sort,
            transaction_id=self.transaction_id)


def get_iam_user_policy(ibm_id: Optional[_builtins.str] = None,
                        id: Optional[_builtins.str] = None,
                        sort: Optional[_builtins.str] = None,
                        transaction_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamUserPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['ibmId'] = ibm_id
    __args__['id'] = id
    __args__['sort'] = sort
    __args__['transactionId'] = transaction_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamUserPolicy:getIamUserPolicy', __args__, opts=opts, typ=GetIamUserPolicyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamUserPolicyResult(
        ibm_id=pulumi.get(__ret__, 'ibm_id'),
        id=pulumi.get(__ret__, 'id'),
        policies=pulumi.get(__ret__, 'policies'),
        sort=pulumi.get(__ret__, 'sort'),
        transaction_id=pulumi.get(__ret__, 'transaction_id'))
def get_iam_user_policy_output(ibm_id: Optional[pulumi.Input[_builtins.str]] = None,
                               id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               transaction_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamUserPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['ibmId'] = ibm_id
    __args__['id'] = id
    __args__['sort'] = sort
    __args__['transactionId'] = transaction_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamUserPolicy:getIamUserPolicy', __args__, opts=opts, typ=GetIamUserPolicyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamUserPolicyResult(
        ibm_id=pulumi.get(__response__, 'ibm_id'),
        id=pulumi.get(__response__, 'id'),
        policies=pulumi.get(__response__, 'policies'),
        sort=pulumi.get(__response__, 'sort'),
        transaction_id=pulumi.get(__response__, 'transaction_id')))
