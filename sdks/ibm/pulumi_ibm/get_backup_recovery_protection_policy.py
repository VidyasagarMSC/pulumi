# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryProtectionPolicyResult',
    'AwaitableGetBackupRecoveryProtectionPolicyResult',
    'get_backup_recovery_protection_policy',
    'get_backup_recovery_protection_policy_output',
]

@pulumi.output_type
class GetBackupRecoveryProtectionPolicyResult:
    """
    A collection of values returned by getBackupRecoveryProtectionPolicy.
    """
    def __init__(__self__, backup_policies=None, blackout_windows=None, cascaded_targets_configs=None, data_lock=None, description=None, extended_retentions=None, id=None, is_cbs_enabled=None, is_replicated=None, is_usable=None, last_modification_time_usecs=None, name=None, num_protected_objects=None, num_protection_groups=None, policy_id=None, protection_policy_id=None, remote_target_policies=None, request_initiator_type=None, retry_options=None, template_id=None, version=None, x_ibm_tenant_id=None):
        if backup_policies and not isinstance(backup_policies, list):
            raise TypeError("Expected argument 'backup_policies' to be a list")
        pulumi.set(__self__, "backup_policies", backup_policies)
        if blackout_windows and not isinstance(blackout_windows, list):
            raise TypeError("Expected argument 'blackout_windows' to be a list")
        pulumi.set(__self__, "blackout_windows", blackout_windows)
        if cascaded_targets_configs and not isinstance(cascaded_targets_configs, list):
            raise TypeError("Expected argument 'cascaded_targets_configs' to be a list")
        pulumi.set(__self__, "cascaded_targets_configs", cascaded_targets_configs)
        if data_lock and not isinstance(data_lock, str):
            raise TypeError("Expected argument 'data_lock' to be a str")
        pulumi.set(__self__, "data_lock", data_lock)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if extended_retentions and not isinstance(extended_retentions, list):
            raise TypeError("Expected argument 'extended_retentions' to be a list")
        pulumi.set(__self__, "extended_retentions", extended_retentions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_cbs_enabled and not isinstance(is_cbs_enabled, bool):
            raise TypeError("Expected argument 'is_cbs_enabled' to be a bool")
        pulumi.set(__self__, "is_cbs_enabled", is_cbs_enabled)
        if is_replicated and not isinstance(is_replicated, bool):
            raise TypeError("Expected argument 'is_replicated' to be a bool")
        pulumi.set(__self__, "is_replicated", is_replicated)
        if is_usable and not isinstance(is_usable, bool):
            raise TypeError("Expected argument 'is_usable' to be a bool")
        pulumi.set(__self__, "is_usable", is_usable)
        if last_modification_time_usecs and not isinstance(last_modification_time_usecs, float):
            raise TypeError("Expected argument 'last_modification_time_usecs' to be a float")
        pulumi.set(__self__, "last_modification_time_usecs", last_modification_time_usecs)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if num_protected_objects and not isinstance(num_protected_objects, float):
            raise TypeError("Expected argument 'num_protected_objects' to be a float")
        pulumi.set(__self__, "num_protected_objects", num_protected_objects)
        if num_protection_groups and not isinstance(num_protection_groups, float):
            raise TypeError("Expected argument 'num_protection_groups' to be a float")
        pulumi.set(__self__, "num_protection_groups", num_protection_groups)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if protection_policy_id and not isinstance(protection_policy_id, str):
            raise TypeError("Expected argument 'protection_policy_id' to be a str")
        pulumi.set(__self__, "protection_policy_id", protection_policy_id)
        if remote_target_policies and not isinstance(remote_target_policies, list):
            raise TypeError("Expected argument 'remote_target_policies' to be a list")
        pulumi.set(__self__, "remote_target_policies", remote_target_policies)
        if request_initiator_type and not isinstance(request_initiator_type, str):
            raise TypeError("Expected argument 'request_initiator_type' to be a str")
        pulumi.set(__self__, "request_initiator_type", request_initiator_type)
        if retry_options and not isinstance(retry_options, list):
            raise TypeError("Expected argument 'retry_options' to be a list")
        pulumi.set(__self__, "retry_options", retry_options)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)
        if version and not isinstance(version, float):
            raise TypeError("Expected argument 'version' to be a float")
        pulumi.set(__self__, "version", version)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="backupPolicies")
    def backup_policies(self) -> Sequence['outputs.GetBackupRecoveryProtectionPolicyBackupPolicyResult']:
        return pulumi.get(self, "backup_policies")

    @_builtins.property
    @pulumi.getter(name="blackoutWindows")
    def blackout_windows(self) -> Sequence['outputs.GetBackupRecoveryProtectionPolicyBlackoutWindowResult']:
        return pulumi.get(self, "blackout_windows")

    @_builtins.property
    @pulumi.getter(name="cascadedTargetsConfigs")
    def cascaded_targets_configs(self) -> Sequence['outputs.GetBackupRecoveryProtectionPolicyCascadedTargetsConfigResult']:
        return pulumi.get(self, "cascaded_targets_configs")

    @_builtins.property
    @pulumi.getter(name="dataLock")
    def data_lock(self) -> _builtins.str:
        return pulumi.get(self, "data_lock")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="extendedRetentions")
    def extended_retentions(self) -> Sequence['outputs.GetBackupRecoveryProtectionPolicyExtendedRetentionResult']:
        return pulumi.get(self, "extended_retentions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCbsEnabled")
    def is_cbs_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "is_cbs_enabled")

    @_builtins.property
    @pulumi.getter(name="isReplicated")
    def is_replicated(self) -> _builtins.bool:
        return pulumi.get(self, "is_replicated")

    @_builtins.property
    @pulumi.getter(name="isUsable")
    def is_usable(self) -> _builtins.bool:
        return pulumi.get(self, "is_usable")

    @_builtins.property
    @pulumi.getter(name="lastModificationTimeUsecs")
    def last_modification_time_usecs(self) -> _builtins.float:
        return pulumi.get(self, "last_modification_time_usecs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="numProtectedObjects")
    def num_protected_objects(self) -> _builtins.float:
        return pulumi.get(self, "num_protected_objects")

    @_builtins.property
    @pulumi.getter(name="numProtectionGroups")
    def num_protection_groups(self) -> _builtins.float:
        return pulumi.get(self, "num_protection_groups")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="protectionPolicyId")
    def protection_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "protection_policy_id")

    @_builtins.property
    @pulumi.getter(name="remoteTargetPolicies")
    def remote_target_policies(self) -> Sequence['outputs.GetBackupRecoveryProtectionPolicyRemoteTargetPolicyResult']:
        return pulumi.get(self, "remote_target_policies")

    @_builtins.property
    @pulumi.getter(name="requestInitiatorType")
    def request_initiator_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "request_initiator_type")

    @_builtins.property
    @pulumi.getter(name="retryOptions")
    def retry_options(self) -> Sequence['outputs.GetBackupRecoveryProtectionPolicyRetryOptionResult']:
        return pulumi.get(self, "retry_options")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> _builtins.str:
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.float:
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryProtectionPolicyResult(GetBackupRecoveryProtectionPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryProtectionPolicyResult(
            backup_policies=self.backup_policies,
            blackout_windows=self.blackout_windows,
            cascaded_targets_configs=self.cascaded_targets_configs,
            data_lock=self.data_lock,
            description=self.description,
            extended_retentions=self.extended_retentions,
            id=self.id,
            is_cbs_enabled=self.is_cbs_enabled,
            is_replicated=self.is_replicated,
            is_usable=self.is_usable,
            last_modification_time_usecs=self.last_modification_time_usecs,
            name=self.name,
            num_protected_objects=self.num_protected_objects,
            num_protection_groups=self.num_protection_groups,
            policy_id=self.policy_id,
            protection_policy_id=self.protection_policy_id,
            remote_target_policies=self.remote_target_policies,
            request_initiator_type=self.request_initiator_type,
            retry_options=self.retry_options,
            template_id=self.template_id,
            version=self.version,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_protection_policy(id: Optional[_builtins.str] = None,
                                          protection_policy_id: Optional[_builtins.str] = None,
                                          request_initiator_type: Optional[_builtins.str] = None,
                                          x_ibm_tenant_id: Optional[_builtins.str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryProtectionPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['protectionPolicyId'] = protection_policy_id
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryProtectionPolicy:getBackupRecoveryProtectionPolicy', __args__, opts=opts, typ=GetBackupRecoveryProtectionPolicyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryProtectionPolicyResult(
        backup_policies=pulumi.get(__ret__, 'backup_policies'),
        blackout_windows=pulumi.get(__ret__, 'blackout_windows'),
        cascaded_targets_configs=pulumi.get(__ret__, 'cascaded_targets_configs'),
        data_lock=pulumi.get(__ret__, 'data_lock'),
        description=pulumi.get(__ret__, 'description'),
        extended_retentions=pulumi.get(__ret__, 'extended_retentions'),
        id=pulumi.get(__ret__, 'id'),
        is_cbs_enabled=pulumi.get(__ret__, 'is_cbs_enabled'),
        is_replicated=pulumi.get(__ret__, 'is_replicated'),
        is_usable=pulumi.get(__ret__, 'is_usable'),
        last_modification_time_usecs=pulumi.get(__ret__, 'last_modification_time_usecs'),
        name=pulumi.get(__ret__, 'name'),
        num_protected_objects=pulumi.get(__ret__, 'num_protected_objects'),
        num_protection_groups=pulumi.get(__ret__, 'num_protection_groups'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        protection_policy_id=pulumi.get(__ret__, 'protection_policy_id'),
        remote_target_policies=pulumi.get(__ret__, 'remote_target_policies'),
        request_initiator_type=pulumi.get(__ret__, 'request_initiator_type'),
        retry_options=pulumi.get(__ret__, 'retry_options'),
        template_id=pulumi.get(__ret__, 'template_id'),
        version=pulumi.get(__ret__, 'version'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_protection_policy_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 protection_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                 request_initiator_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryProtectionPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['protectionPolicyId'] = protection_policy_id
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryProtectionPolicy:getBackupRecoveryProtectionPolicy', __args__, opts=opts, typ=GetBackupRecoveryProtectionPolicyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryProtectionPolicyResult(
        backup_policies=pulumi.get(__response__, 'backup_policies'),
        blackout_windows=pulumi.get(__response__, 'blackout_windows'),
        cascaded_targets_configs=pulumi.get(__response__, 'cascaded_targets_configs'),
        data_lock=pulumi.get(__response__, 'data_lock'),
        description=pulumi.get(__response__, 'description'),
        extended_retentions=pulumi.get(__response__, 'extended_retentions'),
        id=pulumi.get(__response__, 'id'),
        is_cbs_enabled=pulumi.get(__response__, 'is_cbs_enabled'),
        is_replicated=pulumi.get(__response__, 'is_replicated'),
        is_usable=pulumi.get(__response__, 'is_usable'),
        last_modification_time_usecs=pulumi.get(__response__, 'last_modification_time_usecs'),
        name=pulumi.get(__response__, 'name'),
        num_protected_objects=pulumi.get(__response__, 'num_protected_objects'),
        num_protection_groups=pulumi.get(__response__, 'num_protection_groups'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        protection_policy_id=pulumi.get(__response__, 'protection_policy_id'),
        remote_target_policies=pulumi.get(__response__, 'remote_target_policies'),
        request_initiator_type=pulumi.get(__response__, 'request_initiator_type'),
        retry_options=pulumi.get(__response__, 'retry_options'),
        template_id=pulumi.get(__response__, 'template_id'),
        version=pulumi.get(__response__, 'version'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
