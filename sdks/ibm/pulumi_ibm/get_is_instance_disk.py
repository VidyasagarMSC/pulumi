# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsInstanceDiskResult',
    'AwaitableGetIsInstanceDiskResult',
    'get_is_instance_disk',
    'get_is_instance_disk_output',
]

@pulumi.output_type
class GetIsInstanceDiskResult:
    """
    A collection of values returned by getIsInstanceDisk.
    """
    def __init__(__self__, created_at=None, disk=None, href=None, id=None, instance=None, interface_type=None, name=None, resource_type=None, size=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if disk and not isinstance(disk, str):
            raise TypeError("Expected argument 'disk' to be a str")
        pulumi.set(__self__, "disk", disk)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance and not isinstance(instance, str):
            raise TypeError("Expected argument 'instance' to be a str")
        pulumi.set(__self__, "instance", instance)
        if interface_type and not isinstance(interface_type, str):
            raise TypeError("Expected argument 'interface_type' to be a str")
        pulumi.set(__self__, "interface_type", interface_type)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if size and not isinstance(size, float):
            raise TypeError("Expected argument 'size' to be a float")
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def disk(self) -> _builtins.str:
        return pulumi.get(self, "disk")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instance(self) -> _builtins.str:
        return pulumi.get(self, "instance")

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> _builtins.str:
        return pulumi.get(self, "interface_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.float:
        return pulumi.get(self, "size")


class AwaitableGetIsInstanceDiskResult(GetIsInstanceDiskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceDiskResult(
            created_at=self.created_at,
            disk=self.disk,
            href=self.href,
            id=self.id,
            instance=self.instance,
            interface_type=self.interface_type,
            name=self.name,
            resource_type=self.resource_type,
            size=self.size)


def get_is_instance_disk(disk: Optional[_builtins.str] = None,
                         id: Optional[_builtins.str] = None,
                         instance: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceDiskResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['disk'] = disk
    __args__['id'] = id
    __args__['instance'] = instance
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceDisk:getIsInstanceDisk', __args__, opts=opts, typ=GetIsInstanceDiskResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceDiskResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        disk=pulumi.get(__ret__, 'disk'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        instance=pulumi.get(__ret__, 'instance'),
        interface_type=pulumi.get(__ret__, 'interface_type'),
        name=pulumi.get(__ret__, 'name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        size=pulumi.get(__ret__, 'size'))
def get_is_instance_disk_output(disk: Optional[pulumi.Input[_builtins.str]] = None,
                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                instance: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceDiskResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['disk'] = disk
    __args__['id'] = id
    __args__['instance'] = instance
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceDisk:getIsInstanceDisk', __args__, opts=opts, typ=GetIsInstanceDiskResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceDiskResult(
        created_at=pulumi.get(__response__, 'created_at'),
        disk=pulumi.get(__response__, 'disk'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        instance=pulumi.get(__response__, 'instance'),
        interface_type=pulumi.get(__response__, 'interface_type'),
        name=pulumi.get(__response__, 'name'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        size=pulumi.get(__response__, 'size')))
