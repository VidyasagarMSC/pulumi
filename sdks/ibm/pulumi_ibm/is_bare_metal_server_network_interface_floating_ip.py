# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsBareMetalServerNetworkInterfaceFloatingIpInitArgs', 'IsBareMetalServerNetworkInterfaceFloatingIp']

@pulumi.input_type
class IsBareMetalServerNetworkInterfaceFloatingIpInitArgs:
    def __init__(__self__, *,
                 bare_metal_server: pulumi.Input[_builtins.str],
                 floating_ip: pulumi.Input[_builtins.str],
                 network_interface: pulumi.Input[_builtins.str],
                 is_bare_metal_server_network_interface_floating_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsBareMetalServerNetworkInterfaceFloatingIpTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsBareMetalServerNetworkInterfaceFloatingIp resource.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] floating_ip: The floating ip identifier of the network interface associated with the bare metal server
        :param pulumi.Input[_builtins.str] network_interface: Bare metal server network interface identifier
        """
        pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        pulumi.set(__self__, "floating_ip", floating_ip)
        pulumi.set(__self__, "network_interface", network_interface)
        if is_bare_metal_server_network_interface_floating_ip_id is not None:
            pulumi.set(__self__, "is_bare_metal_server_network_interface_floating_ip_id", is_bare_metal_server_network_interface_floating_ip_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> pulumi.Input[_builtins.str]:
        """
        Bare metal server identifier
        """
        return pulumi.get(self, "bare_metal_server")

    @bare_metal_server.setter
    def bare_metal_server(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bare_metal_server", value)

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> pulumi.Input[_builtins.str]:
        """
        The floating ip identifier of the network interface associated with the bare metal server
        """
        return pulumi.get(self, "floating_ip")

    @floating_ip.setter
    def floating_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "floating_ip", value)

    @_builtins.property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> pulumi.Input[_builtins.str]:
        """
        Bare metal server network interface identifier
        """
        return pulumi.get(self, "network_interface")

    @network_interface.setter
    def network_interface(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "network_interface", value)

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerNetworkInterfaceFloatingIpId")
    def is_bare_metal_server_network_interface_floating_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_bare_metal_server_network_interface_floating_ip_id")

    @is_bare_metal_server_network_interface_floating_ip_id.setter
    def is_bare_metal_server_network_interface_floating_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_bare_metal_server_network_interface_floating_ip_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsBareMetalServerNetworkInterfaceFloatingIpTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsBareMetalServerNetworkInterfaceFloatingIpTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsBareMetalServerNetworkInterfaceFloatingIpState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_network_interface_floating_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsBareMetalServerNetworkInterfaceFloatingIpTimeoutsArgs']] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsBareMetalServerNetworkInterfaceFloatingIp resources.
        :param pulumi.Input[_builtins.str] address: Floating IP address
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] crn: Floating IP crn
        :param pulumi.Input[_builtins.str] floating_ip: The floating ip identifier of the network interface associated with the bare metal server
        :param pulumi.Input[_builtins.str] name: Name of the floating IP
        :param pulumi.Input[_builtins.str] network_interface: Bare metal server network interface identifier
        :param pulumi.Input[_builtins.str] status: Floating IP status
        :param pulumi.Input[_builtins.str] target: Target info
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if bare_metal_server is not None:
            pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if floating_ip is not None:
            pulumi.set(__self__, "floating_ip", floating_ip)
        if is_bare_metal_server_network_interface_floating_ip_id is not None:
            pulumi.set(__self__, "is_bare_metal_server_network_interface_floating_ip_id", is_bare_metal_server_network_interface_floating_ip_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_interface is not None:
            pulumi.set(__self__, "network_interface", network_interface)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Floating IP address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server identifier
        """
        return pulumi.get(self, "bare_metal_server")

    @bare_metal_server.setter
    def bare_metal_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bare_metal_server", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Floating IP crn
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The floating ip identifier of the network interface associated with the bare metal server
        """
        return pulumi.get(self, "floating_ip")

    @floating_ip.setter
    def floating_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "floating_ip", value)

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerNetworkInterfaceFloatingIpId")
    def is_bare_metal_server_network_interface_floating_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_bare_metal_server_network_interface_floating_ip_id")

    @is_bare_metal_server_network_interface_floating_ip_id.setter
    def is_bare_metal_server_network_interface_floating_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_bare_metal_server_network_interface_floating_ip_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the floating IP
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server network interface identifier
        """
        return pulumi.get(self, "network_interface")

    @network_interface.setter
    def network_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_interface", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Floating IP status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Target info
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsBareMetalServerNetworkInterfaceFloatingIpTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsBareMetalServerNetworkInterfaceFloatingIpTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isBareMetalServerNetworkInterfaceFloatingIp:IsBareMetalServerNetworkInterfaceFloatingIp")
class IsBareMetalServerNetworkInterfaceFloatingIp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_network_interface_floating_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsBareMetalServerNetworkInterfaceFloatingIpTimeoutsArgs', 'IsBareMetalServerNetworkInterfaceFloatingIpTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsBareMetalServerNetworkInterfaceFloatingIp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] floating_ip: The floating ip identifier of the network interface associated with the bare metal server
        :param pulumi.Input[_builtins.str] network_interface: Bare metal server network interface identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsBareMetalServerNetworkInterfaceFloatingIpInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsBareMetalServerNetworkInterfaceFloatingIp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsBareMetalServerNetworkInterfaceFloatingIpInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsBareMetalServerNetworkInterfaceFloatingIpInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_network_interface_floating_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsBareMetalServerNetworkInterfaceFloatingIpTimeoutsArgs', 'IsBareMetalServerNetworkInterfaceFloatingIpTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsBareMetalServerNetworkInterfaceFloatingIpInitArgs.__new__(IsBareMetalServerNetworkInterfaceFloatingIpInitArgs)

            if bare_metal_server is None and not opts.urn:
                raise TypeError("Missing required property 'bare_metal_server'")
            __props__.__dict__["bare_metal_server"] = bare_metal_server
            if floating_ip is None and not opts.urn:
                raise TypeError("Missing required property 'floating_ip'")
            __props__.__dict__["floating_ip"] = floating_ip
            __props__.__dict__["is_bare_metal_server_network_interface_floating_ip_id"] = is_bare_metal_server_network_interface_floating_ip_id
            if network_interface is None and not opts.urn:
                raise TypeError("Missing required property 'network_interface'")
            __props__.__dict__["network_interface"] = network_interface
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["address"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["target"] = None
            __props__.__dict__["zone"] = None
        super(IsBareMetalServerNetworkInterfaceFloatingIp, __self__).__init__(
            'ibm:index/isBareMetalServerNetworkInterfaceFloatingIp:IsBareMetalServerNetworkInterfaceFloatingIp',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[_builtins.str]] = None,
            bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
            is_bare_metal_server_network_interface_floating_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_interface: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            target: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsBareMetalServerNetworkInterfaceFloatingIpTimeoutsArgs', 'IsBareMetalServerNetworkInterfaceFloatingIpTimeoutsArgsDict']]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsBareMetalServerNetworkInterfaceFloatingIp':
        """
        Get an existing IsBareMetalServerNetworkInterfaceFloatingIp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] address: Floating IP address
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] crn: Floating IP crn
        :param pulumi.Input[_builtins.str] floating_ip: The floating ip identifier of the network interface associated with the bare metal server
        :param pulumi.Input[_builtins.str] name: Name of the floating IP
        :param pulumi.Input[_builtins.str] network_interface: Bare metal server network interface identifier
        :param pulumi.Input[_builtins.str] status: Floating IP status
        :param pulumi.Input[_builtins.str] target: Target info
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsBareMetalServerNetworkInterfaceFloatingIpState.__new__(_IsBareMetalServerNetworkInterfaceFloatingIpState)

        __props__.__dict__["address"] = address
        __props__.__dict__["bare_metal_server"] = bare_metal_server
        __props__.__dict__["crn"] = crn
        __props__.__dict__["floating_ip"] = floating_ip
        __props__.__dict__["is_bare_metal_server_network_interface_floating_ip_id"] = is_bare_metal_server_network_interface_floating_ip_id
        __props__.__dict__["name"] = name
        __props__.__dict__["network_interface"] = network_interface
        __props__.__dict__["status"] = status
        __props__.__dict__["target"] = target
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["zone"] = zone
        return IsBareMetalServerNetworkInterfaceFloatingIp(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def address(self) -> pulumi.Output[_builtins.str]:
        """
        Floating IP address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> pulumi.Output[_builtins.str]:
        """
        Bare metal server identifier
        """
        return pulumi.get(self, "bare_metal_server")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        Floating IP crn
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> pulumi.Output[_builtins.str]:
        """
        The floating ip identifier of the network interface associated with the bare metal server
        """
        return pulumi.get(self, "floating_ip")

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerNetworkInterfaceFloatingIpId")
    def is_bare_metal_server_network_interface_floating_ip_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_bare_metal_server_network_interface_floating_ip_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the floating IP
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> pulumi.Output[_builtins.str]:
        """
        Bare metal server network interface identifier
        """
        return pulumi.get(self, "network_interface")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Floating IP status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Output[_builtins.str]:
        """
        Target info
        """
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsBareMetalServerNetworkInterfaceFloatingIpTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

