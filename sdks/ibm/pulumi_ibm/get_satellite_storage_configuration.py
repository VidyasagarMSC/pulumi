# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSatelliteStorageConfigurationResult',
    'AwaitableGetSatelliteStorageConfigurationResult',
    'get_satellite_storage_configuration',
    'get_satellite_storage_configuration_output',
]

@pulumi.output_type
class GetSatelliteStorageConfigurationResult:
    """
    A collection of values returned by getSatelliteStorageConfiguration.
    """
    def __init__(__self__, config_name=None, config_version=None, id=None, location=None, storage_class_parameters=None, storage_template_name=None, storage_template_version=None, user_config_parameters=None, uuid=None):
        if config_name and not isinstance(config_name, str):
            raise TypeError("Expected argument 'config_name' to be a str")
        pulumi.set(__self__, "config_name", config_name)
        if config_version and not isinstance(config_version, str):
            raise TypeError("Expected argument 'config_version' to be a str")
        pulumi.set(__self__, "config_version", config_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if storage_class_parameters and not isinstance(storage_class_parameters, list):
            raise TypeError("Expected argument 'storage_class_parameters' to be a list")
        pulumi.set(__self__, "storage_class_parameters", storage_class_parameters)
        if storage_template_name and not isinstance(storage_template_name, str):
            raise TypeError("Expected argument 'storage_template_name' to be a str")
        pulumi.set(__self__, "storage_template_name", storage_template_name)
        if storage_template_version and not isinstance(storage_template_version, str):
            raise TypeError("Expected argument 'storage_template_version' to be a str")
        pulumi.set(__self__, "storage_template_version", storage_template_version)
        if user_config_parameters and not isinstance(user_config_parameters, dict):
            raise TypeError("Expected argument 'user_config_parameters' to be a dict")
        pulumi.set(__self__, "user_config_parameters", user_config_parameters)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="configName")
    def config_name(self) -> _builtins.str:
        return pulumi.get(self, "config_name")

    @_builtins.property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> _builtins.str:
        return pulumi.get(self, "config_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="storageClassParameters")
    def storage_class_parameters(self) -> Sequence[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "storage_class_parameters")

    @_builtins.property
    @pulumi.getter(name="storageTemplateName")
    def storage_template_name(self) -> _builtins.str:
        return pulumi.get(self, "storage_template_name")

    @_builtins.property
    @pulumi.getter(name="storageTemplateVersion")
    def storage_template_version(self) -> _builtins.str:
        return pulumi.get(self, "storage_template_version")

    @_builtins.property
    @pulumi.getter(name="userConfigParameters")
    def user_config_parameters(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "user_config_parameters")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> _builtins.str:
        return pulumi.get(self, "uuid")


class AwaitableGetSatelliteStorageConfigurationResult(GetSatelliteStorageConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSatelliteStorageConfigurationResult(
            config_name=self.config_name,
            config_version=self.config_version,
            id=self.id,
            location=self.location,
            storage_class_parameters=self.storage_class_parameters,
            storage_template_name=self.storage_template_name,
            storage_template_version=self.storage_template_version,
            user_config_parameters=self.user_config_parameters,
            uuid=self.uuid)


def get_satellite_storage_configuration(config_name: Optional[_builtins.str] = None,
                                        id: Optional[_builtins.str] = None,
                                        location: Optional[_builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSatelliteStorageConfigurationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['configName'] = config_name
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSatelliteStorageConfiguration:getSatelliteStorageConfiguration', __args__, opts=opts, typ=GetSatelliteStorageConfigurationResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSatelliteStorageConfigurationResult(
        config_name=pulumi.get(__ret__, 'config_name'),
        config_version=pulumi.get(__ret__, 'config_version'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        storage_class_parameters=pulumi.get(__ret__, 'storage_class_parameters'),
        storage_template_name=pulumi.get(__ret__, 'storage_template_name'),
        storage_template_version=pulumi.get(__ret__, 'storage_template_version'),
        user_config_parameters=pulumi.get(__ret__, 'user_config_parameters'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_satellite_storage_configuration_output(config_name: Optional[pulumi.Input[_builtins.str]] = None,
                                               id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               location: Optional[pulumi.Input[_builtins.str]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSatelliteStorageConfigurationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['configName'] = config_name
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSatelliteStorageConfiguration:getSatelliteStorageConfiguration', __args__, opts=opts, typ=GetSatelliteStorageConfigurationResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSatelliteStorageConfigurationResult(
        config_name=pulumi.get(__response__, 'config_name'),
        config_version=pulumi.get(__response__, 'config_version'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        storage_class_parameters=pulumi.get(__response__, 'storage_class_parameters'),
        storage_template_name=pulumi.get(__response__, 'storage_template_name'),
        storage_template_version=pulumi.get(__response__, 'storage_template_version'),
        user_config_parameters=pulumi.get(__response__, 'user_config_parameters'),
        uuid=pulumi.get(__response__, 'uuid')))
