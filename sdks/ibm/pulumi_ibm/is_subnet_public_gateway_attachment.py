# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsSubnetPublicGatewayAttachmentArgs', 'IsSubnetPublicGatewayAttachment']

@pulumi.input_type
class IsSubnetPublicGatewayAttachmentArgs:
    def __init__(__self__, *,
                 public_gateway: pulumi.Input[_builtins.str],
                 subnet: pulumi.Input[_builtins.str],
                 is_subnet_public_gateway_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsSubnetPublicGatewayAttachmentTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsSubnetPublicGatewayAttachment resource.
        :param pulumi.Input[_builtins.str] public_gateway: The unique identifier of public gateway
        :param pulumi.Input[_builtins.str] subnet: The subnet identifier
        """
        pulumi.set(__self__, "public_gateway", public_gateway)
        pulumi.set(__self__, "subnet", subnet)
        if is_subnet_public_gateway_attachment_id is not None:
            pulumi.set(__self__, "is_subnet_public_gateway_attachment_id", is_subnet_public_gateway_attachment_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="publicGateway")
    def public_gateway(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of public gateway
        """
        return pulumi.get(self, "public_gateway")

    @public_gateway.setter
    def public_gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "public_gateway", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[_builtins.str]:
        """
        The subnet identifier
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter(name="isSubnetPublicGatewayAttachmentId")
    def is_subnet_public_gateway_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_subnet_public_gateway_attachment_id")

    @is_subnet_public_gateway_attachment_id.setter
    def is_subnet_public_gateway_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_subnet_public_gateway_attachment_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsSubnetPublicGatewayAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsSubnetPublicGatewayAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsSubnetPublicGatewayAttachmentState:
    def __init__(__self__, *,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 floating_ip: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 is_subnet_public_gateway_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 public_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsSubnetPublicGatewayAttachmentTimeoutsArgs']] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsSubnetPublicGatewayAttachment resources.
        :param pulumi.Input[_builtins.str] crn: The crn of the resource
        :param pulumi.Input[_builtins.str] name: Name of the Public gateway instance
        :param pulumi.Input[_builtins.str] public_gateway: The unique identifier of public gateway
        :param pulumi.Input[_builtins.str] resource_group: Public gateway resource group info
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_type: The name of the resource
        :param pulumi.Input[_builtins.str] status: Public gateway instance status
        :param pulumi.Input[_builtins.str] subnet: The subnet identifier
        :param pulumi.Input[_builtins.str] vpc: Public gateway VPC info
        :param pulumi.Input[_builtins.str] zone: Public gateway zone info
        """
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if floating_ip is not None:
            pulumi.set(__self__, "floating_ip", floating_ip)
        if is_subnet_public_gateway_attachment_id is not None:
            pulumi.set(__self__, "is_subnet_public_gateway_attachment_id", is_subnet_public_gateway_attachment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_gateway is not None:
            pulumi.set(__self__, "public_gateway", public_gateway)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "floating_ip")

    @floating_ip.setter
    def floating_ip(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "floating_ip", value)

    @_builtins.property
    @pulumi.getter(name="isSubnetPublicGatewayAttachmentId")
    def is_subnet_public_gateway_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_subnet_public_gateway_attachment_id")

    @is_subnet_public_gateway_attachment_id.setter
    def is_subnet_public_gateway_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_subnet_public_gateway_attachment_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Public gateway instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="publicGateway")
    def public_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of public gateway
        """
        return pulumi.get(self, "public_gateway")

    @public_gateway.setter
    def public_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_gateway", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public gateway resource group info
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public gateway instance status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subnet identifier
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsSubnetPublicGatewayAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsSubnetPublicGatewayAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public gateway VPC info
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public gateway zone info
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isSubnetPublicGatewayAttachment:IsSubnetPublicGatewayAttachment")
class IsSubnetPublicGatewayAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_subnet_public_gateway_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsSubnetPublicGatewayAttachmentTimeoutsArgs', 'IsSubnetPublicGatewayAttachmentTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsSubnetPublicGatewayAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] public_gateway: The unique identifier of public gateway
        :param pulumi.Input[_builtins.str] subnet: The subnet identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsSubnetPublicGatewayAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsSubnetPublicGatewayAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsSubnetPublicGatewayAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsSubnetPublicGatewayAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_subnet_public_gateway_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsSubnetPublicGatewayAttachmentTimeoutsArgs', 'IsSubnetPublicGatewayAttachmentTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsSubnetPublicGatewayAttachmentArgs.__new__(IsSubnetPublicGatewayAttachmentArgs)

            __props__.__dict__["is_subnet_public_gateway_attachment_id"] = is_subnet_public_gateway_attachment_id
            if public_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'public_gateway'")
            __props__.__dict__["public_gateway"] = public_gateway
            if subnet is None and not opts.urn:
                raise TypeError("Missing required property 'subnet'")
            __props__.__dict__["subnet"] = subnet
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["floating_ip"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["resource_group"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["vpc"] = None
            __props__.__dict__["zone"] = None
        super(IsSubnetPublicGatewayAttachment, __self__).__init__(
            'ibm:index/isSubnetPublicGatewayAttachment:IsSubnetPublicGatewayAttachment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            floating_ip: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            is_subnet_public_gateway_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            public_gateway: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsSubnetPublicGatewayAttachmentTimeoutsArgs', 'IsSubnetPublicGatewayAttachmentTimeoutsArgsDict']]] = None,
            vpc: Optional[pulumi.Input[_builtins.str]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsSubnetPublicGatewayAttachment':
        """
        Get an existing IsSubnetPublicGatewayAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: The crn of the resource
        :param pulumi.Input[_builtins.str] name: Name of the Public gateway instance
        :param pulumi.Input[_builtins.str] public_gateway: The unique identifier of public gateway
        :param pulumi.Input[_builtins.str] resource_group: Public gateway resource group info
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_type: The name of the resource
        :param pulumi.Input[_builtins.str] status: Public gateway instance status
        :param pulumi.Input[_builtins.str] subnet: The subnet identifier
        :param pulumi.Input[_builtins.str] vpc: Public gateway VPC info
        :param pulumi.Input[_builtins.str] zone: Public gateway zone info
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsSubnetPublicGatewayAttachmentState.__new__(_IsSubnetPublicGatewayAttachmentState)

        __props__.__dict__["crn"] = crn
        __props__.__dict__["floating_ip"] = floating_ip
        __props__.__dict__["is_subnet_public_gateway_attachment_id"] = is_subnet_public_gateway_attachment_id
        __props__.__dict__["name"] = name
        __props__.__dict__["public_gateway"] = public_gateway
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpc"] = vpc
        __props__.__dict__["zone"] = zone
        return IsSubnetPublicGatewayAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "floating_ip")

    @_builtins.property
    @pulumi.getter(name="isSubnetPublicGatewayAttachmentId")
    def is_subnet_public_gateway_attachment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_subnet_public_gateway_attachment_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Public gateway instance
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publicGateway")
    def public_gateway(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of public gateway
        """
        return pulumi.get(self, "public_gateway")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Public gateway resource group info
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Public gateway instance status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[_builtins.str]:
        """
        The subnet identifier
        """
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsSubnetPublicGatewayAttachmentTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[_builtins.str]:
        """
        Public gateway VPC info
        """
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        Public gateway zone info
        """
        return pulumi.get(self, "zone")

