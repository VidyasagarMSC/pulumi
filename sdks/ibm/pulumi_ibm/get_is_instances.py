# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsInstancesResult',
    'AwaitableGetIsInstancesResult',
    'get_is_instances',
    'get_is_instances_output',
]

@pulumi.output_type
class GetIsInstancesResult:
    """
    A collection of values returned by getIsInstances.
    """
    def __init__(__self__, cluster_network_crn=None, cluster_network_id=None, cluster_network_name=None, dedicated_host=None, dedicated_host_name=None, id=None, instance_group=None, instance_group_name=None, instances=None, placement_group=None, placement_group_name=None, resource_group=None, vpc=None, vpc_crn=None, vpc_name=None):
        if cluster_network_crn and not isinstance(cluster_network_crn, str):
            raise TypeError("Expected argument 'cluster_network_crn' to be a str")
        pulumi.set(__self__, "cluster_network_crn", cluster_network_crn)
        if cluster_network_id and not isinstance(cluster_network_id, str):
            raise TypeError("Expected argument 'cluster_network_id' to be a str")
        pulumi.set(__self__, "cluster_network_id", cluster_network_id)
        if cluster_network_name and not isinstance(cluster_network_name, str):
            raise TypeError("Expected argument 'cluster_network_name' to be a str")
        pulumi.set(__self__, "cluster_network_name", cluster_network_name)
        if dedicated_host and not isinstance(dedicated_host, str):
            raise TypeError("Expected argument 'dedicated_host' to be a str")
        pulumi.set(__self__, "dedicated_host", dedicated_host)
        if dedicated_host_name and not isinstance(dedicated_host_name, str):
            raise TypeError("Expected argument 'dedicated_host_name' to be a str")
        pulumi.set(__self__, "dedicated_host_name", dedicated_host_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_group and not isinstance(instance_group, str):
            raise TypeError("Expected argument 'instance_group' to be a str")
        pulumi.set(__self__, "instance_group", instance_group)
        if instance_group_name and not isinstance(instance_group_name, str):
            raise TypeError("Expected argument 'instance_group_name' to be a str")
        pulumi.set(__self__, "instance_group_name", instance_group_name)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if placement_group and not isinstance(placement_group, str):
            raise TypeError("Expected argument 'placement_group' to be a str")
        pulumi.set(__self__, "placement_group", placement_group)
        if placement_group_name and not isinstance(placement_group_name, str):
            raise TypeError("Expected argument 'placement_group_name' to be a str")
        pulumi.set(__self__, "placement_group_name", placement_group_name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)
        if vpc_crn and not isinstance(vpc_crn, str):
            raise TypeError("Expected argument 'vpc_crn' to be a str")
        pulumi.set(__self__, "vpc_crn", vpc_crn)
        if vpc_name and not isinstance(vpc_name, str):
            raise TypeError("Expected argument 'vpc_name' to be a str")
        pulumi.set(__self__, "vpc_name", vpc_name)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkCrn")
    def cluster_network_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cluster_network_crn")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkId")
    def cluster_network_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cluster_network_id")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkName")
    def cluster_network_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cluster_network_name")

    @_builtins.property
    @pulumi.getter(name="dedicatedHost")
    def dedicated_host(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dedicated_host")

    @_builtins.property
    @pulumi.getter(name="dedicatedHostName")
    def dedicated_host_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dedicated_host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_group")

    @_builtins.property
    @pulumi.getter(name="instanceGroupName")
    def instance_group_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_group_name")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetIsInstancesInstanceResult']:
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="placementGroup")
    def placement_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "placement_group")

    @_builtins.property
    @pulumi.getter(name="placementGroupName")
    def placement_group_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "placement_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter(name="vpcCrn")
    def vpc_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_crn")

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_name")


class AwaitableGetIsInstancesResult(GetIsInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstancesResult(
            cluster_network_crn=self.cluster_network_crn,
            cluster_network_id=self.cluster_network_id,
            cluster_network_name=self.cluster_network_name,
            dedicated_host=self.dedicated_host,
            dedicated_host_name=self.dedicated_host_name,
            id=self.id,
            instance_group=self.instance_group,
            instance_group_name=self.instance_group_name,
            instances=self.instances,
            placement_group=self.placement_group,
            placement_group_name=self.placement_group_name,
            resource_group=self.resource_group,
            vpc=self.vpc,
            vpc_crn=self.vpc_crn,
            vpc_name=self.vpc_name)


def get_is_instances(cluster_network_crn: Optional[_builtins.str] = None,
                     cluster_network_id: Optional[_builtins.str] = None,
                     cluster_network_name: Optional[_builtins.str] = None,
                     dedicated_host: Optional[_builtins.str] = None,
                     dedicated_host_name: Optional[_builtins.str] = None,
                     id: Optional[_builtins.str] = None,
                     instance_group: Optional[_builtins.str] = None,
                     instance_group_name: Optional[_builtins.str] = None,
                     placement_group: Optional[_builtins.str] = None,
                     placement_group_name: Optional[_builtins.str] = None,
                     resource_group: Optional[_builtins.str] = None,
                     vpc: Optional[_builtins.str] = None,
                     vpc_crn: Optional[_builtins.str] = None,
                     vpc_name: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstancesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNetworkCrn'] = cluster_network_crn
    __args__['clusterNetworkId'] = cluster_network_id
    __args__['clusterNetworkName'] = cluster_network_name
    __args__['dedicatedHost'] = dedicated_host
    __args__['dedicatedHostName'] = dedicated_host_name
    __args__['id'] = id
    __args__['instanceGroup'] = instance_group
    __args__['instanceGroupName'] = instance_group_name
    __args__['placementGroup'] = placement_group
    __args__['placementGroupName'] = placement_group_name
    __args__['resourceGroup'] = resource_group
    __args__['vpc'] = vpc
    __args__['vpcCrn'] = vpc_crn
    __args__['vpcName'] = vpc_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstances:getIsInstances', __args__, opts=opts, typ=GetIsInstancesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstancesResult(
        cluster_network_crn=pulumi.get(__ret__, 'cluster_network_crn'),
        cluster_network_id=pulumi.get(__ret__, 'cluster_network_id'),
        cluster_network_name=pulumi.get(__ret__, 'cluster_network_name'),
        dedicated_host=pulumi.get(__ret__, 'dedicated_host'),
        dedicated_host_name=pulumi.get(__ret__, 'dedicated_host_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_group=pulumi.get(__ret__, 'instance_group'),
        instance_group_name=pulumi.get(__ret__, 'instance_group_name'),
        instances=pulumi.get(__ret__, 'instances'),
        placement_group=pulumi.get(__ret__, 'placement_group'),
        placement_group_name=pulumi.get(__ret__, 'placement_group_name'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        vpc=pulumi.get(__ret__, 'vpc'),
        vpc_crn=pulumi.get(__ret__, 'vpc_crn'),
        vpc_name=pulumi.get(__ret__, 'vpc_name'))
def get_is_instances_output(cluster_network_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            cluster_network_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            cluster_network_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            dedicated_host: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            dedicated_host_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            instance_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            instance_group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            placement_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            placement_group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            vpc: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            vpc_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            vpc_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstancesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNetworkCrn'] = cluster_network_crn
    __args__['clusterNetworkId'] = cluster_network_id
    __args__['clusterNetworkName'] = cluster_network_name
    __args__['dedicatedHost'] = dedicated_host
    __args__['dedicatedHostName'] = dedicated_host_name
    __args__['id'] = id
    __args__['instanceGroup'] = instance_group
    __args__['instanceGroupName'] = instance_group_name
    __args__['placementGroup'] = placement_group
    __args__['placementGroupName'] = placement_group_name
    __args__['resourceGroup'] = resource_group
    __args__['vpc'] = vpc
    __args__['vpcCrn'] = vpc_crn
    __args__['vpcName'] = vpc_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstances:getIsInstances', __args__, opts=opts, typ=GetIsInstancesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstancesResult(
        cluster_network_crn=pulumi.get(__response__, 'cluster_network_crn'),
        cluster_network_id=pulumi.get(__response__, 'cluster_network_id'),
        cluster_network_name=pulumi.get(__response__, 'cluster_network_name'),
        dedicated_host=pulumi.get(__response__, 'dedicated_host'),
        dedicated_host_name=pulumi.get(__response__, 'dedicated_host_name'),
        id=pulumi.get(__response__, 'id'),
        instance_group=pulumi.get(__response__, 'instance_group'),
        instance_group_name=pulumi.get(__response__, 'instance_group_name'),
        instances=pulumi.get(__response__, 'instances'),
        placement_group=pulumi.get(__response__, 'placement_group'),
        placement_group_name=pulumi.get(__response__, 'placement_group_name'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        vpc=pulumi.get(__response__, 'vpc'),
        vpc_crn=pulumi.get(__response__, 'vpc_crn'),
        vpc_name=pulumi.get(__response__, 'vpc_name')))
