# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetContainerBindServiceResult',
    'AwaitableGetContainerBindServiceResult',
    'get_container_bind_service',
    'get_container_bind_service_output',
]

@pulumi.output_type
class GetContainerBindServiceResult:
    """
    A collection of values returned by getContainerBindService.
    """
    def __init__(__self__, cluster_name_id=None, id=None, namespace_id=None, service_instance_id=None, service_instance_name=None, service_key_name=None):
        if cluster_name_id and not isinstance(cluster_name_id, str):
            raise TypeError("Expected argument 'cluster_name_id' to be a str")
        pulumi.set(__self__, "cluster_name_id", cluster_name_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespace_id and not isinstance(namespace_id, str):
            raise TypeError("Expected argument 'namespace_id' to be a str")
        pulumi.set(__self__, "namespace_id", namespace_id)
        if service_instance_id and not isinstance(service_instance_id, str):
            raise TypeError("Expected argument 'service_instance_id' to be a str")
        pulumi.set(__self__, "service_instance_id", service_instance_id)
        if service_instance_name and not isinstance(service_instance_name, str):
            raise TypeError("Expected argument 'service_instance_name' to be a str")
        pulumi.set(__self__, "service_instance_name", service_instance_name)
        if service_key_name and not isinstance(service_key_name, str):
            raise TypeError("Expected argument 'service_key_name' to be a str")
        pulumi.set(__self__, "service_key_name", service_key_name)

    @_builtins.property
    @pulumi.getter(name="clusterNameId")
    def cluster_name_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_name_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> _builtins.str:
        return pulumi.get(self, "namespace_id")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "service_instance_id")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceName")
    def service_instance_name(self) -> _builtins.str:
        return pulumi.get(self, "service_instance_name")

    @_builtins.property
    @pulumi.getter(name="serviceKeyName")
    def service_key_name(self) -> _builtins.str:
        return pulumi.get(self, "service_key_name")


class AwaitableGetContainerBindServiceResult(GetContainerBindServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerBindServiceResult(
            cluster_name_id=self.cluster_name_id,
            id=self.id,
            namespace_id=self.namespace_id,
            service_instance_id=self.service_instance_id,
            service_instance_name=self.service_instance_name,
            service_key_name=self.service_key_name)


def get_container_bind_service(cluster_name_id: Optional[_builtins.str] = None,
                               id: Optional[_builtins.str] = None,
                               namespace_id: Optional[_builtins.str] = None,
                               service_instance_id: Optional[_builtins.str] = None,
                               service_instance_name: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerBindServiceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNameId'] = cluster_name_id
    __args__['id'] = id
    __args__['namespaceId'] = namespace_id
    __args__['serviceInstanceId'] = service_instance_id
    __args__['serviceInstanceName'] = service_instance_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerBindService:getContainerBindService', __args__, opts=opts, typ=GetContainerBindServiceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerBindServiceResult(
        cluster_name_id=pulumi.get(__ret__, 'cluster_name_id'),
        id=pulumi.get(__ret__, 'id'),
        namespace_id=pulumi.get(__ret__, 'namespace_id'),
        service_instance_id=pulumi.get(__ret__, 'service_instance_id'),
        service_instance_name=pulumi.get(__ret__, 'service_instance_name'),
        service_key_name=pulumi.get(__ret__, 'service_key_name'))
def get_container_bind_service_output(cluster_name_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      service_instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      service_instance_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerBindServiceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNameId'] = cluster_name_id
    __args__['id'] = id
    __args__['namespaceId'] = namespace_id
    __args__['serviceInstanceId'] = service_instance_id
    __args__['serviceInstanceName'] = service_instance_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerBindService:getContainerBindService', __args__, opts=opts, typ=GetContainerBindServiceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerBindServiceResult(
        cluster_name_id=pulumi.get(__response__, 'cluster_name_id'),
        id=pulumi.get(__response__, 'id'),
        namespace_id=pulumi.get(__response__, 'namespace_id'),
        service_instance_id=pulumi.get(__response__, 'service_instance_id'),
        service_instance_name=pulumi.get(__response__, 'service_instance_name'),
        service_key_name=pulumi.get(__response__, 'service_key_name')))
