# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsLbProfileResult',
    'AwaitableGetIsLbProfileResult',
    'get_is_lb_profile',
    'get_is_lb_profile_output',
]

@pulumi.output_type
class GetIsLbProfileResult:
    """
    A collection of values returned by getIsLbProfile.
    """
    def __init__(__self__, access_modes=None, failsafe_policy_actions=None, family=None, href=None, id=None, name=None, route_mode_supported=None, route_mode_type=None, targetable_load_balancer_profiles=None, udp_supported=None, udp_supported_type=None):
        if access_modes and not isinstance(access_modes, list):
            raise TypeError("Expected argument 'access_modes' to be a list")
        pulumi.set(__self__, "access_modes", access_modes)
        if failsafe_policy_actions and not isinstance(failsafe_policy_actions, list):
            raise TypeError("Expected argument 'failsafe_policy_actions' to be a list")
        pulumi.set(__self__, "failsafe_policy_actions", failsafe_policy_actions)
        if family and not isinstance(family, str):
            raise TypeError("Expected argument 'family' to be a str")
        pulumi.set(__self__, "family", family)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if route_mode_supported and not isinstance(route_mode_supported, bool):
            raise TypeError("Expected argument 'route_mode_supported' to be a bool")
        pulumi.set(__self__, "route_mode_supported", route_mode_supported)
        if route_mode_type and not isinstance(route_mode_type, str):
            raise TypeError("Expected argument 'route_mode_type' to be a str")
        pulumi.set(__self__, "route_mode_type", route_mode_type)
        if targetable_load_balancer_profiles and not isinstance(targetable_load_balancer_profiles, list):
            raise TypeError("Expected argument 'targetable_load_balancer_profiles' to be a list")
        pulumi.set(__self__, "targetable_load_balancer_profiles", targetable_load_balancer_profiles)
        if udp_supported and not isinstance(udp_supported, bool):
            raise TypeError("Expected argument 'udp_supported' to be a bool")
        pulumi.set(__self__, "udp_supported", udp_supported)
        if udp_supported_type and not isinstance(udp_supported_type, str):
            raise TypeError("Expected argument 'udp_supported_type' to be a str")
        pulumi.set(__self__, "udp_supported_type", udp_supported_type)

    @_builtins.property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Sequence['outputs.GetIsLbProfileAccessModeResult']:
        return pulumi.get(self, "access_modes")

    @_builtins.property
    @pulumi.getter(name="failsafePolicyActions")
    def failsafe_policy_actions(self) -> Sequence['outputs.GetIsLbProfileFailsafePolicyActionResult']:
        return pulumi.get(self, "failsafe_policy_actions")

    @_builtins.property
    @pulumi.getter
    def family(self) -> _builtins.str:
        return pulumi.get(self, "family")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="routeModeSupported")
    def route_mode_supported(self) -> _builtins.bool:
        return pulumi.get(self, "route_mode_supported")

    @_builtins.property
    @pulumi.getter(name="routeModeType")
    def route_mode_type(self) -> _builtins.str:
        return pulumi.get(self, "route_mode_type")

    @_builtins.property
    @pulumi.getter(name="targetableLoadBalancerProfiles")
    def targetable_load_balancer_profiles(self) -> Sequence['outputs.GetIsLbProfileTargetableLoadBalancerProfileResult']:
        return pulumi.get(self, "targetable_load_balancer_profiles")

    @_builtins.property
    @pulumi.getter(name="udpSupported")
    def udp_supported(self) -> _builtins.bool:
        return pulumi.get(self, "udp_supported")

    @_builtins.property
    @pulumi.getter(name="udpSupportedType")
    def udp_supported_type(self) -> _builtins.str:
        return pulumi.get(self, "udp_supported_type")


class AwaitableGetIsLbProfileResult(GetIsLbProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsLbProfileResult(
            access_modes=self.access_modes,
            failsafe_policy_actions=self.failsafe_policy_actions,
            family=self.family,
            href=self.href,
            id=self.id,
            name=self.name,
            route_mode_supported=self.route_mode_supported,
            route_mode_type=self.route_mode_type,
            targetable_load_balancer_profiles=self.targetable_load_balancer_profiles,
            udp_supported=self.udp_supported,
            udp_supported_type=self.udp_supported_type)


def get_is_lb_profile(id: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsLbProfileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsLbProfile:getIsLbProfile', __args__, opts=opts, typ=GetIsLbProfileResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsLbProfileResult(
        access_modes=pulumi.get(__ret__, 'access_modes'),
        failsafe_policy_actions=pulumi.get(__ret__, 'failsafe_policy_actions'),
        family=pulumi.get(__ret__, 'family'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        route_mode_supported=pulumi.get(__ret__, 'route_mode_supported'),
        route_mode_type=pulumi.get(__ret__, 'route_mode_type'),
        targetable_load_balancer_profiles=pulumi.get(__ret__, 'targetable_load_balancer_profiles'),
        udp_supported=pulumi.get(__ret__, 'udp_supported'),
        udp_supported_type=pulumi.get(__ret__, 'udp_supported_type'))
def get_is_lb_profile_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsLbProfileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsLbProfile:getIsLbProfile', __args__, opts=opts, typ=GetIsLbProfileResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsLbProfileResult(
        access_modes=pulumi.get(__response__, 'access_modes'),
        failsafe_policy_actions=pulumi.get(__response__, 'failsafe_policy_actions'),
        family=pulumi.get(__response__, 'family'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        route_mode_supported=pulumi.get(__response__, 'route_mode_supported'),
        route_mode_type=pulumi.get(__response__, 'route_mode_type'),
        targetable_load_balancer_profiles=pulumi.get(__response__, 'targetable_load_balancer_profiles'),
        udp_supported=pulumi.get(__response__, 'udp_supported'),
        udp_supported_type=pulumi.get(__response__, 'udp_supported_type')))
