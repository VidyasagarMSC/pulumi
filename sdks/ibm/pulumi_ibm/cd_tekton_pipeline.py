# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CdTektonPipelineArgs', 'CdTektonPipeline']

@pulumi.input_type
class CdTektonPipelineArgs:
    def __init__(__self__, *,
                 pipeline_id: pulumi.Input[_builtins.str],
                 cd_tekton_pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_partial_cloning: Optional[pulumi.Input[_builtins.bool]] = None,
                 next_build_number: Optional[pulumi.Input[_builtins.float]] = None,
                 worker: Optional[pulumi.Input['CdTektonPipelineWorkerArgs']] = None):
        """
        The set of arguments for constructing a CdTektonPipeline resource.
        :param pulumi.Input[_builtins.str] pipeline_id: String.
        :param pulumi.Input[_builtins.bool] enable_notifications: Flag to enable notifications for this pipeline. If enabled, the Tekton pipeline run events will be published to all the
               destinations specified by the Slack and Event Notifications integrations in the parent toolchain. If omitted, this
               feature is disabled by default.
        :param pulumi.Input[_builtins.bool] enable_partial_cloning: Flag to enable partial cloning for this pipeline. When partial clone is enabled, only the files contained within the
               paths specified in definition repositories are read and cloned, this means that symbolic links might not work. If
               omitted, this feature is disabled by default.
        :param pulumi.Input[_builtins.float] next_build_number: The build number that will be used for the next pipeline run.
        :param pulumi.Input['CdTektonPipelineWorkerArgs'] worker: Details of the worker used to run the pipeline.
        """
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        if cd_tekton_pipeline_id is not None:
            pulumi.set(__self__, "cd_tekton_pipeline_id", cd_tekton_pipeline_id)
        if enable_notifications is not None:
            pulumi.set(__self__, "enable_notifications", enable_notifications)
        if enable_partial_cloning is not None:
            pulumi.set(__self__, "enable_partial_cloning", enable_partial_cloning)
        if next_build_number is not None:
            pulumi.set(__self__, "next_build_number", next_build_number)
        if worker is not None:
            pulumi.set(__self__, "worker", worker)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Input[_builtins.str]:
        """
        String.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter(name="cdTektonPipelineId")
    def cd_tekton_pipeline_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cd_tekton_pipeline_id")

    @cd_tekton_pipeline_id.setter
    def cd_tekton_pipeline_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cd_tekton_pipeline_id", value)

    @_builtins.property
    @pulumi.getter(name="enableNotifications")
    def enable_notifications(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag to enable notifications for this pipeline. If enabled, the Tekton pipeline run events will be published to all the
        destinations specified by the Slack and Event Notifications integrations in the parent toolchain. If omitted, this
        feature is disabled by default.
        """
        return pulumi.get(self, "enable_notifications")

    @enable_notifications.setter
    def enable_notifications(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_notifications", value)

    @_builtins.property
    @pulumi.getter(name="enablePartialCloning")
    def enable_partial_cloning(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag to enable partial cloning for this pipeline. When partial clone is enabled, only the files contained within the
        paths specified in definition repositories are read and cloned, this means that symbolic links might not work. If
        omitted, this feature is disabled by default.
        """
        return pulumi.get(self, "enable_partial_cloning")

    @enable_partial_cloning.setter
    def enable_partial_cloning(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_partial_cloning", value)

    @_builtins.property
    @pulumi.getter(name="nextBuildNumber")
    def next_build_number(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The build number that will be used for the next pipeline run.
        """
        return pulumi.get(self, "next_build_number")

    @next_build_number.setter
    def next_build_number(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "next_build_number", value)

    @_builtins.property
    @pulumi.getter
    def worker(self) -> Optional[pulumi.Input['CdTektonPipelineWorkerArgs']]:
        """
        Details of the worker used to run the pipeline.
        """
        return pulumi.get(self, "worker")

    @worker.setter
    def worker(self, value: Optional[pulumi.Input['CdTektonPipelineWorkerArgs']]):
        pulumi.set(self, "worker", value)


@pulumi.input_type
class _CdTektonPipelineState:
    def __init__(__self__, *,
                 build_number: Optional[pulumi.Input[_builtins.float]] = None,
                 cd_tekton_pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 definitions: Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineDefinitionArgs']]]] = None,
                 enable_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_partial_cloning: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 next_build_number: Optional[pulumi.Input[_builtins.float]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelinePropertyArgs']]]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineResourceGroupArgs']]]] = None,
                 runs_url: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 toolchains: Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineToolchainArgs']]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineTriggerArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 worker: Optional[pulumi.Input['CdTektonPipelineWorkerArgs']] = None):
        """
        Input properties used for looking up and filtering CdTektonPipeline resources.
        :param pulumi.Input[_builtins.float] build_number: The latest pipeline run build number. If this property is absent, the pipeline hasn't had any pipeline runs.
        :param pulumi.Input[_builtins.str] created_at: Standard RFC 3339 Date Time String.
        :param pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineDefinitionArgs']]] definitions: Definition list.
        :param pulumi.Input[_builtins.bool] enable_notifications: Flag to enable notifications for this pipeline. If enabled, the Tekton pipeline run events will be published to all the
               destinations specified by the Slack and Event Notifications integrations in the parent toolchain. If omitted, this
               feature is disabled by default.
        :param pulumi.Input[_builtins.bool] enable_partial_cloning: Flag to enable partial cloning for this pipeline. When partial clone is enabled, only the files contained within the
               paths specified in definition repositories are read and cloned, this means that symbolic links might not work. If
               omitted, this feature is disabled by default.
        :param pulumi.Input[_builtins.bool] enabled: Flag to check if the trigger is enabled.
        :param pulumi.Input[_builtins.str] href: API URL for interacting with the pipeline.
        :param pulumi.Input[_builtins.str] name: String.
        :param pulumi.Input[_builtins.float] next_build_number: The build number that will be used for the next pipeline run.
        :param pulumi.Input[_builtins.str] pipeline_id: String.
        :param pulumi.Input[Sequence[pulumi.Input['CdTektonPipelinePropertyArgs']]] properties: Tekton pipeline's environment properties.
        :param pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineResourceGroupArgs']]] resource_groups: The resource group in which the pipeline was created.
        :param pulumi.Input[_builtins.str] runs_url: URL for this pipeline showing the list of pipeline runs.
        :param pulumi.Input[_builtins.str] status: Pipeline status.
        :param pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineToolchainArgs']]] toolchains: Toolchain object containing references to the parent toolchain.
        :param pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineTriggerArgs']]] triggers: Tekton pipeline triggers list.
        :param pulumi.Input[_builtins.str] updated_at: Standard RFC 3339 Date Time String.
        :param pulumi.Input['CdTektonPipelineWorkerArgs'] worker: Details of the worker used to run the pipeline.
        """
        if build_number is not None:
            pulumi.set(__self__, "build_number", build_number)
        if cd_tekton_pipeline_id is not None:
            pulumi.set(__self__, "cd_tekton_pipeline_id", cd_tekton_pipeline_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if definitions is not None:
            pulumi.set(__self__, "definitions", definitions)
        if enable_notifications is not None:
            pulumi.set(__self__, "enable_notifications", enable_notifications)
        if enable_partial_cloning is not None:
            pulumi.set(__self__, "enable_partial_cloning", enable_partial_cloning)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_build_number is not None:
            pulumi.set(__self__, "next_build_number", next_build_number)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if resource_groups is not None:
            pulumi.set(__self__, "resource_groups", resource_groups)
        if runs_url is not None:
            pulumi.set(__self__, "runs_url", runs_url)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if toolchains is not None:
            pulumi.set(__self__, "toolchains", toolchains)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if worker is not None:
            pulumi.set(__self__, "worker", worker)

    @_builtins.property
    @pulumi.getter(name="buildNumber")
    def build_number(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The latest pipeline run build number. If this property is absent, the pipeline hasn't had any pipeline runs.
        """
        return pulumi.get(self, "build_number")

    @build_number.setter
    def build_number(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "build_number", value)

    @_builtins.property
    @pulumi.getter(name="cdTektonPipelineId")
    def cd_tekton_pipeline_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cd_tekton_pipeline_id")

    @cd_tekton_pipeline_id.setter
    def cd_tekton_pipeline_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cd_tekton_pipeline_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Standard RFC 3339 Date Time String.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def definitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineDefinitionArgs']]]]:
        """
        Definition list.
        """
        return pulumi.get(self, "definitions")

    @definitions.setter
    def definitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineDefinitionArgs']]]]):
        pulumi.set(self, "definitions", value)

    @_builtins.property
    @pulumi.getter(name="enableNotifications")
    def enable_notifications(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag to enable notifications for this pipeline. If enabled, the Tekton pipeline run events will be published to all the
        destinations specified by the Slack and Event Notifications integrations in the parent toolchain. If omitted, this
        feature is disabled by default.
        """
        return pulumi.get(self, "enable_notifications")

    @enable_notifications.setter
    def enable_notifications(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_notifications", value)

    @_builtins.property
    @pulumi.getter(name="enablePartialCloning")
    def enable_partial_cloning(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag to enable partial cloning for this pipeline. When partial clone is enabled, only the files contained within the
        paths specified in definition repositories are read and cloned, this means that symbolic links might not work. If
        omitted, this feature is disabled by default.
        """
        return pulumi.get(self, "enable_partial_cloning")

    @enable_partial_cloning.setter
    def enable_partial_cloning(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_partial_cloning", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag to check if the trigger is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API URL for interacting with the pipeline.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        String.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nextBuildNumber")
    def next_build_number(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The build number that will be used for the next pipeline run.
        """
        return pulumi.get(self, "next_build_number")

    @next_build_number.setter
    def next_build_number(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "next_build_number", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        String.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelinePropertyArgs']]]]:
        """
        Tekton pipeline's environment properties.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelinePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineResourceGroupArgs']]]]:
        """
        The resource group in which the pipeline was created.
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineResourceGroupArgs']]]]):
        pulumi.set(self, "resource_groups", value)

    @_builtins.property
    @pulumi.getter(name="runsUrl")
    def runs_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL for this pipeline showing the list of pipeline runs.
        """
        return pulumi.get(self, "runs_url")

    @runs_url.setter
    def runs_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "runs_url", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Pipeline status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def toolchains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineToolchainArgs']]]]:
        """
        Toolchain object containing references to the parent toolchain.
        """
        return pulumi.get(self, "toolchains")

    @toolchains.setter
    def toolchains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineToolchainArgs']]]]):
        pulumi.set(self, "toolchains", value)

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineTriggerArgs']]]]:
        """
        Tekton pipeline triggers list.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Standard RFC 3339 Date Time String.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def worker(self) -> Optional[pulumi.Input['CdTektonPipelineWorkerArgs']]:
        """
        Details of the worker used to run the pipeline.
        """
        return pulumi.get(self, "worker")

    @worker.setter
    def worker(self, value: Optional[pulumi.Input['CdTektonPipelineWorkerArgs']]):
        pulumi.set(self, "worker", value)


@pulumi.type_token("ibm:index/cdTektonPipeline:CdTektonPipeline")
class CdTektonPipeline(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cd_tekton_pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_partial_cloning: Optional[pulumi.Input[_builtins.bool]] = None,
                 next_build_number: Optional[pulumi.Input[_builtins.float]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 worker: Optional[pulumi.Input[Union['CdTektonPipelineWorkerArgs', 'CdTektonPipelineWorkerArgsDict']]] = None,
                 __props__=None):
        """
        Create a CdTektonPipeline resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enable_notifications: Flag to enable notifications for this pipeline. If enabled, the Tekton pipeline run events will be published to all the
               destinations specified by the Slack and Event Notifications integrations in the parent toolchain. If omitted, this
               feature is disabled by default.
        :param pulumi.Input[_builtins.bool] enable_partial_cloning: Flag to enable partial cloning for this pipeline. When partial clone is enabled, only the files contained within the
               paths specified in definition repositories are read and cloned, this means that symbolic links might not work. If
               omitted, this feature is disabled by default.
        :param pulumi.Input[_builtins.float] next_build_number: The build number that will be used for the next pipeline run.
        :param pulumi.Input[_builtins.str] pipeline_id: String.
        :param pulumi.Input[Union['CdTektonPipelineWorkerArgs', 'CdTektonPipelineWorkerArgsDict']] worker: Details of the worker used to run the pipeline.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CdTektonPipelineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CdTektonPipeline resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CdTektonPipelineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CdTektonPipelineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cd_tekton_pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_partial_cloning: Optional[pulumi.Input[_builtins.bool]] = None,
                 next_build_number: Optional[pulumi.Input[_builtins.float]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 worker: Optional[pulumi.Input[Union['CdTektonPipelineWorkerArgs', 'CdTektonPipelineWorkerArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CdTektonPipelineArgs.__new__(CdTektonPipelineArgs)

            __props__.__dict__["cd_tekton_pipeline_id"] = cd_tekton_pipeline_id
            __props__.__dict__["enable_notifications"] = enable_notifications
            __props__.__dict__["enable_partial_cloning"] = enable_partial_cloning
            __props__.__dict__["next_build_number"] = next_build_number
            if pipeline_id is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_id'")
            __props__.__dict__["pipeline_id"] = pipeline_id
            __props__.__dict__["worker"] = worker
            __props__.__dict__["build_number"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["definitions"] = None
            __props__.__dict__["enabled"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["properties"] = None
            __props__.__dict__["resource_groups"] = None
            __props__.__dict__["runs_url"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["toolchains"] = None
            __props__.__dict__["triggers"] = None
            __props__.__dict__["updated_at"] = None
        super(CdTektonPipeline, __self__).__init__(
            'ibm:index/cdTektonPipeline:CdTektonPipeline',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            build_number: Optional[pulumi.Input[_builtins.float]] = None,
            cd_tekton_pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CdTektonPipelineDefinitionArgs', 'CdTektonPipelineDefinitionArgsDict']]]]] = None,
            enable_notifications: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_partial_cloning: Optional[pulumi.Input[_builtins.bool]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            next_build_number: Optional[pulumi.Input[_builtins.float]] = None,
            pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
            properties: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CdTektonPipelinePropertyArgs', 'CdTektonPipelinePropertyArgsDict']]]]] = None,
            resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CdTektonPipelineResourceGroupArgs', 'CdTektonPipelineResourceGroupArgsDict']]]]] = None,
            runs_url: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            toolchains: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CdTektonPipelineToolchainArgs', 'CdTektonPipelineToolchainArgsDict']]]]] = None,
            triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CdTektonPipelineTriggerArgs', 'CdTektonPipelineTriggerArgsDict']]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            worker: Optional[pulumi.Input[Union['CdTektonPipelineWorkerArgs', 'CdTektonPipelineWorkerArgsDict']]] = None) -> 'CdTektonPipeline':
        """
        Get an existing CdTektonPipeline resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] build_number: The latest pipeline run build number. If this property is absent, the pipeline hasn't had any pipeline runs.
        :param pulumi.Input[_builtins.str] created_at: Standard RFC 3339 Date Time String.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CdTektonPipelineDefinitionArgs', 'CdTektonPipelineDefinitionArgsDict']]]] definitions: Definition list.
        :param pulumi.Input[_builtins.bool] enable_notifications: Flag to enable notifications for this pipeline. If enabled, the Tekton pipeline run events will be published to all the
               destinations specified by the Slack and Event Notifications integrations in the parent toolchain. If omitted, this
               feature is disabled by default.
        :param pulumi.Input[_builtins.bool] enable_partial_cloning: Flag to enable partial cloning for this pipeline. When partial clone is enabled, only the files contained within the
               paths specified in definition repositories are read and cloned, this means that symbolic links might not work. If
               omitted, this feature is disabled by default.
        :param pulumi.Input[_builtins.bool] enabled: Flag to check if the trigger is enabled.
        :param pulumi.Input[_builtins.str] href: API URL for interacting with the pipeline.
        :param pulumi.Input[_builtins.str] name: String.
        :param pulumi.Input[_builtins.float] next_build_number: The build number that will be used for the next pipeline run.
        :param pulumi.Input[_builtins.str] pipeline_id: String.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CdTektonPipelinePropertyArgs', 'CdTektonPipelinePropertyArgsDict']]]] properties: Tekton pipeline's environment properties.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CdTektonPipelineResourceGroupArgs', 'CdTektonPipelineResourceGroupArgsDict']]]] resource_groups: The resource group in which the pipeline was created.
        :param pulumi.Input[_builtins.str] runs_url: URL for this pipeline showing the list of pipeline runs.
        :param pulumi.Input[_builtins.str] status: Pipeline status.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CdTektonPipelineToolchainArgs', 'CdTektonPipelineToolchainArgsDict']]]] toolchains: Toolchain object containing references to the parent toolchain.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CdTektonPipelineTriggerArgs', 'CdTektonPipelineTriggerArgsDict']]]] triggers: Tekton pipeline triggers list.
        :param pulumi.Input[_builtins.str] updated_at: Standard RFC 3339 Date Time String.
        :param pulumi.Input[Union['CdTektonPipelineWorkerArgs', 'CdTektonPipelineWorkerArgsDict']] worker: Details of the worker used to run the pipeline.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CdTektonPipelineState.__new__(_CdTektonPipelineState)

        __props__.__dict__["build_number"] = build_number
        __props__.__dict__["cd_tekton_pipeline_id"] = cd_tekton_pipeline_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["definitions"] = definitions
        __props__.__dict__["enable_notifications"] = enable_notifications
        __props__.__dict__["enable_partial_cloning"] = enable_partial_cloning
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["next_build_number"] = next_build_number
        __props__.__dict__["pipeline_id"] = pipeline_id
        __props__.__dict__["properties"] = properties
        __props__.__dict__["resource_groups"] = resource_groups
        __props__.__dict__["runs_url"] = runs_url
        __props__.__dict__["status"] = status
        __props__.__dict__["toolchains"] = toolchains
        __props__.__dict__["triggers"] = triggers
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["worker"] = worker
        return CdTektonPipeline(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="buildNumber")
    def build_number(self) -> pulumi.Output[_builtins.float]:
        """
        The latest pipeline run build number. If this property is absent, the pipeline hasn't had any pipeline runs.
        """
        return pulumi.get(self, "build_number")

    @_builtins.property
    @pulumi.getter(name="cdTektonPipelineId")
    def cd_tekton_pipeline_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cd_tekton_pipeline_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Standard RFC 3339 Date Time String.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def definitions(self) -> pulumi.Output[Sequence['outputs.CdTektonPipelineDefinition']]:
        """
        Definition list.
        """
        return pulumi.get(self, "definitions")

    @_builtins.property
    @pulumi.getter(name="enableNotifications")
    def enable_notifications(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Flag to enable notifications for this pipeline. If enabled, the Tekton pipeline run events will be published to all the
        destinations specified by the Slack and Event Notifications integrations in the parent toolchain. If omitted, this
        feature is disabled by default.
        """
        return pulumi.get(self, "enable_notifications")

    @_builtins.property
    @pulumi.getter(name="enablePartialCloning")
    def enable_partial_cloning(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Flag to enable partial cloning for this pipeline. When partial clone is enabled, only the files contained within the
        paths specified in definition repositories are read and cloned, this means that symbolic links might not work. If
        omitted, this feature is disabled by default.
        """
        return pulumi.get(self, "enable_partial_cloning")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Flag to check if the trigger is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        API URL for interacting with the pipeline.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        String.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextBuildNumber")
    def next_build_number(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The build number that will be used for the next pipeline run.
        """
        return pulumi.get(self, "next_build_number")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Output[_builtins.str]:
        """
        String.
        """
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> pulumi.Output[Sequence['outputs.CdTektonPipelineProperty']]:
        """
        Tekton pipeline's environment properties.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> pulumi.Output[Sequence['outputs.CdTektonPipelineResourceGroup']]:
        """
        The resource group in which the pipeline was created.
        """
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="runsUrl")
    def runs_url(self) -> pulumi.Output[_builtins.str]:
        """
        URL for this pipeline showing the list of pipeline runs.
        """
        return pulumi.get(self, "runs_url")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Pipeline status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def toolchains(self) -> pulumi.Output[Sequence['outputs.CdTektonPipelineToolchain']]:
        """
        Toolchain object containing references to the parent toolchain.
        """
        return pulumi.get(self, "toolchains")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Sequence['outputs.CdTektonPipelineTrigger']]:
        """
        Tekton pipeline triggers list.
        """
        return pulumi.get(self, "triggers")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Standard RFC 3339 Date Time String.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def worker(self) -> pulumi.Output[Optional['outputs.CdTektonPipelineWorker']]:
        """
        Details of the worker used to run the pipeline.
        """
        return pulumi.get(self, "worker")

