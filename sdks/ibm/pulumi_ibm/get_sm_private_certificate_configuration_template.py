# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSmPrivateCertificateConfigurationTemplateResult',
    'AwaitableGetSmPrivateCertificateConfigurationTemplateResult',
    'get_sm_private_certificate_configuration_template',
    'get_sm_private_certificate_configuration_template_output',
]

@pulumi.output_type
class GetSmPrivateCertificateConfigurationTemplateResult:
    """
    A collection of values returned by getSmPrivateCertificateConfigurationTemplate.
    """
    def __init__(__self__, allow_any_name=None, allow_bare_domains=None, allow_glob_domains=None, allow_ip_sans=None, allow_localhost=None, allow_subdomains=None, allowed_domains=None, allowed_domains_template=None, allowed_other_sans=None, allowed_secret_groups=None, allowed_uri_sans=None, basic_constraints_valid_for_non_ca=None, certificate_authority=None, client_flag=None, code_signing_flag=None, config_type=None, countries=None, created_at=None, created_by=None, email_protection_flag=None, endpoint_type=None, enforce_hostnames=None, ext_key_usage_oids=None, ext_key_usages=None, id=None, instance_id=None, key_bits=None, key_type=None, key_usages=None, localities=None, max_ttl_seconds=None, name=None, not_before_duration_seconds=None, organizations=None, ous=None, policy_identifiers=None, postal_codes=None, provinces=None, region=None, require_cn=None, secret_type=None, serial_number=None, server_flag=None, street_addresses=None, ttl_seconds=None, updated_at=None, use_csr_common_name=None, use_csr_sans=None):
        if allow_any_name and not isinstance(allow_any_name, bool):
            raise TypeError("Expected argument 'allow_any_name' to be a bool")
        pulumi.set(__self__, "allow_any_name", allow_any_name)
        if allow_bare_domains and not isinstance(allow_bare_domains, bool):
            raise TypeError("Expected argument 'allow_bare_domains' to be a bool")
        pulumi.set(__self__, "allow_bare_domains", allow_bare_domains)
        if allow_glob_domains and not isinstance(allow_glob_domains, bool):
            raise TypeError("Expected argument 'allow_glob_domains' to be a bool")
        pulumi.set(__self__, "allow_glob_domains", allow_glob_domains)
        if allow_ip_sans and not isinstance(allow_ip_sans, bool):
            raise TypeError("Expected argument 'allow_ip_sans' to be a bool")
        pulumi.set(__self__, "allow_ip_sans", allow_ip_sans)
        if allow_localhost and not isinstance(allow_localhost, bool):
            raise TypeError("Expected argument 'allow_localhost' to be a bool")
        pulumi.set(__self__, "allow_localhost", allow_localhost)
        if allow_subdomains and not isinstance(allow_subdomains, bool):
            raise TypeError("Expected argument 'allow_subdomains' to be a bool")
        pulumi.set(__self__, "allow_subdomains", allow_subdomains)
        if allowed_domains and not isinstance(allowed_domains, list):
            raise TypeError("Expected argument 'allowed_domains' to be a list")
        pulumi.set(__self__, "allowed_domains", allowed_domains)
        if allowed_domains_template and not isinstance(allowed_domains_template, bool):
            raise TypeError("Expected argument 'allowed_domains_template' to be a bool")
        pulumi.set(__self__, "allowed_domains_template", allowed_domains_template)
        if allowed_other_sans and not isinstance(allowed_other_sans, list):
            raise TypeError("Expected argument 'allowed_other_sans' to be a list")
        pulumi.set(__self__, "allowed_other_sans", allowed_other_sans)
        if allowed_secret_groups and not isinstance(allowed_secret_groups, str):
            raise TypeError("Expected argument 'allowed_secret_groups' to be a str")
        pulumi.set(__self__, "allowed_secret_groups", allowed_secret_groups)
        if allowed_uri_sans and not isinstance(allowed_uri_sans, list):
            raise TypeError("Expected argument 'allowed_uri_sans' to be a list")
        pulumi.set(__self__, "allowed_uri_sans", allowed_uri_sans)
        if basic_constraints_valid_for_non_ca and not isinstance(basic_constraints_valid_for_non_ca, bool):
            raise TypeError("Expected argument 'basic_constraints_valid_for_non_ca' to be a bool")
        pulumi.set(__self__, "basic_constraints_valid_for_non_ca", basic_constraints_valid_for_non_ca)
        if certificate_authority and not isinstance(certificate_authority, str):
            raise TypeError("Expected argument 'certificate_authority' to be a str")
        pulumi.set(__self__, "certificate_authority", certificate_authority)
        if client_flag and not isinstance(client_flag, bool):
            raise TypeError("Expected argument 'client_flag' to be a bool")
        pulumi.set(__self__, "client_flag", client_flag)
        if code_signing_flag and not isinstance(code_signing_flag, bool):
            raise TypeError("Expected argument 'code_signing_flag' to be a bool")
        pulumi.set(__self__, "code_signing_flag", code_signing_flag)
        if config_type and not isinstance(config_type, str):
            raise TypeError("Expected argument 'config_type' to be a str")
        pulumi.set(__self__, "config_type", config_type)
        if countries and not isinstance(countries, list):
            raise TypeError("Expected argument 'countries' to be a list")
        pulumi.set(__self__, "countries", countries)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if email_protection_flag and not isinstance(email_protection_flag, bool):
            raise TypeError("Expected argument 'email_protection_flag' to be a bool")
        pulumi.set(__self__, "email_protection_flag", email_protection_flag)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if enforce_hostnames and not isinstance(enforce_hostnames, bool):
            raise TypeError("Expected argument 'enforce_hostnames' to be a bool")
        pulumi.set(__self__, "enforce_hostnames", enforce_hostnames)
        if ext_key_usage_oids and not isinstance(ext_key_usage_oids, list):
            raise TypeError("Expected argument 'ext_key_usage_oids' to be a list")
        pulumi.set(__self__, "ext_key_usage_oids", ext_key_usage_oids)
        if ext_key_usages and not isinstance(ext_key_usages, list):
            raise TypeError("Expected argument 'ext_key_usages' to be a list")
        pulumi.set(__self__, "ext_key_usages", ext_key_usages)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if key_bits and not isinstance(key_bits, float):
            raise TypeError("Expected argument 'key_bits' to be a float")
        pulumi.set(__self__, "key_bits", key_bits)
        if key_type and not isinstance(key_type, str):
            raise TypeError("Expected argument 'key_type' to be a str")
        pulumi.set(__self__, "key_type", key_type)
        if key_usages and not isinstance(key_usages, list):
            raise TypeError("Expected argument 'key_usages' to be a list")
        pulumi.set(__self__, "key_usages", key_usages)
        if localities and not isinstance(localities, list):
            raise TypeError("Expected argument 'localities' to be a list")
        pulumi.set(__self__, "localities", localities)
        if max_ttl_seconds and not isinstance(max_ttl_seconds, float):
            raise TypeError("Expected argument 'max_ttl_seconds' to be a float")
        pulumi.set(__self__, "max_ttl_seconds", max_ttl_seconds)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if not_before_duration_seconds and not isinstance(not_before_duration_seconds, float):
            raise TypeError("Expected argument 'not_before_duration_seconds' to be a float")
        pulumi.set(__self__, "not_before_duration_seconds", not_before_duration_seconds)
        if organizations and not isinstance(organizations, list):
            raise TypeError("Expected argument 'organizations' to be a list")
        pulumi.set(__self__, "organizations", organizations)
        if ous and not isinstance(ous, list):
            raise TypeError("Expected argument 'ous' to be a list")
        pulumi.set(__self__, "ous", ous)
        if policy_identifiers and not isinstance(policy_identifiers, list):
            raise TypeError("Expected argument 'policy_identifiers' to be a list")
        pulumi.set(__self__, "policy_identifiers", policy_identifiers)
        if postal_codes and not isinstance(postal_codes, list):
            raise TypeError("Expected argument 'postal_codes' to be a list")
        pulumi.set(__self__, "postal_codes", postal_codes)
        if provinces and not isinstance(provinces, list):
            raise TypeError("Expected argument 'provinces' to be a list")
        pulumi.set(__self__, "provinces", provinces)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if require_cn and not isinstance(require_cn, bool):
            raise TypeError("Expected argument 'require_cn' to be a bool")
        pulumi.set(__self__, "require_cn", require_cn)
        if secret_type and not isinstance(secret_type, str):
            raise TypeError("Expected argument 'secret_type' to be a str")
        pulumi.set(__self__, "secret_type", secret_type)
        if serial_number and not isinstance(serial_number, str):
            raise TypeError("Expected argument 'serial_number' to be a str")
        pulumi.set(__self__, "serial_number", serial_number)
        if server_flag and not isinstance(server_flag, bool):
            raise TypeError("Expected argument 'server_flag' to be a bool")
        pulumi.set(__self__, "server_flag", server_flag)
        if street_addresses and not isinstance(street_addresses, list):
            raise TypeError("Expected argument 'street_addresses' to be a list")
        pulumi.set(__self__, "street_addresses", street_addresses)
        if ttl_seconds and not isinstance(ttl_seconds, float):
            raise TypeError("Expected argument 'ttl_seconds' to be a float")
        pulumi.set(__self__, "ttl_seconds", ttl_seconds)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if use_csr_common_name and not isinstance(use_csr_common_name, bool):
            raise TypeError("Expected argument 'use_csr_common_name' to be a bool")
        pulumi.set(__self__, "use_csr_common_name", use_csr_common_name)
        if use_csr_sans and not isinstance(use_csr_sans, bool):
            raise TypeError("Expected argument 'use_csr_sans' to be a bool")
        pulumi.set(__self__, "use_csr_sans", use_csr_sans)

    @_builtins.property
    @pulumi.getter(name="allowAnyName")
    def allow_any_name(self) -> _builtins.bool:
        return pulumi.get(self, "allow_any_name")

    @_builtins.property
    @pulumi.getter(name="allowBareDomains")
    def allow_bare_domains(self) -> _builtins.bool:
        return pulumi.get(self, "allow_bare_domains")

    @_builtins.property
    @pulumi.getter(name="allowGlobDomains")
    def allow_glob_domains(self) -> _builtins.bool:
        return pulumi.get(self, "allow_glob_domains")

    @_builtins.property
    @pulumi.getter(name="allowIpSans")
    def allow_ip_sans(self) -> _builtins.bool:
        return pulumi.get(self, "allow_ip_sans")

    @_builtins.property
    @pulumi.getter(name="allowLocalhost")
    def allow_localhost(self) -> _builtins.bool:
        return pulumi.get(self, "allow_localhost")

    @_builtins.property
    @pulumi.getter(name="allowSubdomains")
    def allow_subdomains(self) -> _builtins.bool:
        return pulumi.get(self, "allow_subdomains")

    @_builtins.property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "allowed_domains")

    @_builtins.property
    @pulumi.getter(name="allowedDomainsTemplate")
    def allowed_domains_template(self) -> _builtins.bool:
        return pulumi.get(self, "allowed_domains_template")

    @_builtins.property
    @pulumi.getter(name="allowedOtherSans")
    def allowed_other_sans(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "allowed_other_sans")

    @_builtins.property
    @pulumi.getter(name="allowedSecretGroups")
    def allowed_secret_groups(self) -> _builtins.str:
        return pulumi.get(self, "allowed_secret_groups")

    @_builtins.property
    @pulumi.getter(name="allowedUriSans")
    def allowed_uri_sans(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "allowed_uri_sans")

    @_builtins.property
    @pulumi.getter(name="basicConstraintsValidForNonCa")
    def basic_constraints_valid_for_non_ca(self) -> _builtins.bool:
        return pulumi.get(self, "basic_constraints_valid_for_non_ca")

    @_builtins.property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> _builtins.str:
        return pulumi.get(self, "certificate_authority")

    @_builtins.property
    @pulumi.getter(name="clientFlag")
    def client_flag(self) -> _builtins.bool:
        return pulumi.get(self, "client_flag")

    @_builtins.property
    @pulumi.getter(name="codeSigningFlag")
    def code_signing_flag(self) -> _builtins.bool:
        return pulumi.get(self, "code_signing_flag")

    @_builtins.property
    @pulumi.getter(name="configType")
    def config_type(self) -> _builtins.str:
        return pulumi.get(self, "config_type")

    @_builtins.property
    @pulumi.getter
    def countries(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "countries")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="emailProtectionFlag")
    def email_protection_flag(self) -> _builtins.bool:
        return pulumi.get(self, "email_protection_flag")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="enforceHostnames")
    def enforce_hostnames(self) -> _builtins.bool:
        return pulumi.get(self, "enforce_hostnames")

    @_builtins.property
    @pulumi.getter(name="extKeyUsageOids")
    def ext_key_usage_oids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ext_key_usage_oids")

    @_builtins.property
    @pulumi.getter(name="extKeyUsages")
    def ext_key_usages(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ext_key_usages")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="keyBits")
    def key_bits(self) -> _builtins.float:
        return pulumi.get(self, "key_bits")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> _builtins.str:
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "key_usages")

    @_builtins.property
    @pulumi.getter
    def localities(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "localities")

    @_builtins.property
    @pulumi.getter(name="maxTtlSeconds")
    def max_ttl_seconds(self) -> _builtins.float:
        return pulumi.get(self, "max_ttl_seconds")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notBeforeDurationSeconds")
    def not_before_duration_seconds(self) -> _builtins.float:
        return pulumi.get(self, "not_before_duration_seconds")

    @_builtins.property
    @pulumi.getter
    def organizations(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "organizations")

    @_builtins.property
    @pulumi.getter
    def ous(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ous")

    @_builtins.property
    @pulumi.getter(name="policyIdentifiers")
    def policy_identifiers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "policy_identifiers")

    @_builtins.property
    @pulumi.getter(name="postalCodes")
    def postal_codes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "postal_codes")

    @_builtins.property
    @pulumi.getter
    def provinces(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "provinces")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="requireCn")
    def require_cn(self) -> _builtins.bool:
        return pulumi.get(self, "require_cn")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> _builtins.str:
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="serverFlag")
    def server_flag(self) -> _builtins.bool:
        return pulumi.get(self, "server_flag")

    @_builtins.property
    @pulumi.getter(name="streetAddresses")
    def street_addresses(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "street_addresses")

    @_builtins.property
    @pulumi.getter(name="ttlSeconds")
    def ttl_seconds(self) -> _builtins.float:
        return pulumi.get(self, "ttl_seconds")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="useCsrCommonName")
    def use_csr_common_name(self) -> _builtins.bool:
        return pulumi.get(self, "use_csr_common_name")

    @_builtins.property
    @pulumi.getter(name="useCsrSans")
    def use_csr_sans(self) -> _builtins.bool:
        return pulumi.get(self, "use_csr_sans")


class AwaitableGetSmPrivateCertificateConfigurationTemplateResult(GetSmPrivateCertificateConfigurationTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSmPrivateCertificateConfigurationTemplateResult(
            allow_any_name=self.allow_any_name,
            allow_bare_domains=self.allow_bare_domains,
            allow_glob_domains=self.allow_glob_domains,
            allow_ip_sans=self.allow_ip_sans,
            allow_localhost=self.allow_localhost,
            allow_subdomains=self.allow_subdomains,
            allowed_domains=self.allowed_domains,
            allowed_domains_template=self.allowed_domains_template,
            allowed_other_sans=self.allowed_other_sans,
            allowed_secret_groups=self.allowed_secret_groups,
            allowed_uri_sans=self.allowed_uri_sans,
            basic_constraints_valid_for_non_ca=self.basic_constraints_valid_for_non_ca,
            certificate_authority=self.certificate_authority,
            client_flag=self.client_flag,
            code_signing_flag=self.code_signing_flag,
            config_type=self.config_type,
            countries=self.countries,
            created_at=self.created_at,
            created_by=self.created_by,
            email_protection_flag=self.email_protection_flag,
            endpoint_type=self.endpoint_type,
            enforce_hostnames=self.enforce_hostnames,
            ext_key_usage_oids=self.ext_key_usage_oids,
            ext_key_usages=self.ext_key_usages,
            id=self.id,
            instance_id=self.instance_id,
            key_bits=self.key_bits,
            key_type=self.key_type,
            key_usages=self.key_usages,
            localities=self.localities,
            max_ttl_seconds=self.max_ttl_seconds,
            name=self.name,
            not_before_duration_seconds=self.not_before_duration_seconds,
            organizations=self.organizations,
            ous=self.ous,
            policy_identifiers=self.policy_identifiers,
            postal_codes=self.postal_codes,
            provinces=self.provinces,
            region=self.region,
            require_cn=self.require_cn,
            secret_type=self.secret_type,
            serial_number=self.serial_number,
            server_flag=self.server_flag,
            street_addresses=self.street_addresses,
            ttl_seconds=self.ttl_seconds,
            updated_at=self.updated_at,
            use_csr_common_name=self.use_csr_common_name,
            use_csr_sans=self.use_csr_sans)


def get_sm_private_certificate_configuration_template(endpoint_type: Optional[_builtins.str] = None,
                                                      id: Optional[_builtins.str] = None,
                                                      instance_id: Optional[_builtins.str] = None,
                                                      name: Optional[_builtins.str] = None,
                                                      region: Optional[_builtins.str] = None,
                                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSmPrivateCertificateConfigurationTemplateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSmPrivateCertificateConfigurationTemplate:getSmPrivateCertificateConfigurationTemplate', __args__, opts=opts, typ=GetSmPrivateCertificateConfigurationTemplateResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSmPrivateCertificateConfigurationTemplateResult(
        allow_any_name=pulumi.get(__ret__, 'allow_any_name'),
        allow_bare_domains=pulumi.get(__ret__, 'allow_bare_domains'),
        allow_glob_domains=pulumi.get(__ret__, 'allow_glob_domains'),
        allow_ip_sans=pulumi.get(__ret__, 'allow_ip_sans'),
        allow_localhost=pulumi.get(__ret__, 'allow_localhost'),
        allow_subdomains=pulumi.get(__ret__, 'allow_subdomains'),
        allowed_domains=pulumi.get(__ret__, 'allowed_domains'),
        allowed_domains_template=pulumi.get(__ret__, 'allowed_domains_template'),
        allowed_other_sans=pulumi.get(__ret__, 'allowed_other_sans'),
        allowed_secret_groups=pulumi.get(__ret__, 'allowed_secret_groups'),
        allowed_uri_sans=pulumi.get(__ret__, 'allowed_uri_sans'),
        basic_constraints_valid_for_non_ca=pulumi.get(__ret__, 'basic_constraints_valid_for_non_ca'),
        certificate_authority=pulumi.get(__ret__, 'certificate_authority'),
        client_flag=pulumi.get(__ret__, 'client_flag'),
        code_signing_flag=pulumi.get(__ret__, 'code_signing_flag'),
        config_type=pulumi.get(__ret__, 'config_type'),
        countries=pulumi.get(__ret__, 'countries'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        email_protection_flag=pulumi.get(__ret__, 'email_protection_flag'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        enforce_hostnames=pulumi.get(__ret__, 'enforce_hostnames'),
        ext_key_usage_oids=pulumi.get(__ret__, 'ext_key_usage_oids'),
        ext_key_usages=pulumi.get(__ret__, 'ext_key_usages'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        key_bits=pulumi.get(__ret__, 'key_bits'),
        key_type=pulumi.get(__ret__, 'key_type'),
        key_usages=pulumi.get(__ret__, 'key_usages'),
        localities=pulumi.get(__ret__, 'localities'),
        max_ttl_seconds=pulumi.get(__ret__, 'max_ttl_seconds'),
        name=pulumi.get(__ret__, 'name'),
        not_before_duration_seconds=pulumi.get(__ret__, 'not_before_duration_seconds'),
        organizations=pulumi.get(__ret__, 'organizations'),
        ous=pulumi.get(__ret__, 'ous'),
        policy_identifiers=pulumi.get(__ret__, 'policy_identifiers'),
        postal_codes=pulumi.get(__ret__, 'postal_codes'),
        provinces=pulumi.get(__ret__, 'provinces'),
        region=pulumi.get(__ret__, 'region'),
        require_cn=pulumi.get(__ret__, 'require_cn'),
        secret_type=pulumi.get(__ret__, 'secret_type'),
        serial_number=pulumi.get(__ret__, 'serial_number'),
        server_flag=pulumi.get(__ret__, 'server_flag'),
        street_addresses=pulumi.get(__ret__, 'street_addresses'),
        ttl_seconds=pulumi.get(__ret__, 'ttl_seconds'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        use_csr_common_name=pulumi.get(__ret__, 'use_csr_common_name'),
        use_csr_sans=pulumi.get(__ret__, 'use_csr_sans'))
def get_sm_private_certificate_configuration_template_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                             id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                             instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                             name: Optional[pulumi.Input[_builtins.str]] = None,
                                                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSmPrivateCertificateConfigurationTemplateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSmPrivateCertificateConfigurationTemplate:getSmPrivateCertificateConfigurationTemplate', __args__, opts=opts, typ=GetSmPrivateCertificateConfigurationTemplateResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSmPrivateCertificateConfigurationTemplateResult(
        allow_any_name=pulumi.get(__response__, 'allow_any_name'),
        allow_bare_domains=pulumi.get(__response__, 'allow_bare_domains'),
        allow_glob_domains=pulumi.get(__response__, 'allow_glob_domains'),
        allow_ip_sans=pulumi.get(__response__, 'allow_ip_sans'),
        allow_localhost=pulumi.get(__response__, 'allow_localhost'),
        allow_subdomains=pulumi.get(__response__, 'allow_subdomains'),
        allowed_domains=pulumi.get(__response__, 'allowed_domains'),
        allowed_domains_template=pulumi.get(__response__, 'allowed_domains_template'),
        allowed_other_sans=pulumi.get(__response__, 'allowed_other_sans'),
        allowed_secret_groups=pulumi.get(__response__, 'allowed_secret_groups'),
        allowed_uri_sans=pulumi.get(__response__, 'allowed_uri_sans'),
        basic_constraints_valid_for_non_ca=pulumi.get(__response__, 'basic_constraints_valid_for_non_ca'),
        certificate_authority=pulumi.get(__response__, 'certificate_authority'),
        client_flag=pulumi.get(__response__, 'client_flag'),
        code_signing_flag=pulumi.get(__response__, 'code_signing_flag'),
        config_type=pulumi.get(__response__, 'config_type'),
        countries=pulumi.get(__response__, 'countries'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        email_protection_flag=pulumi.get(__response__, 'email_protection_flag'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        enforce_hostnames=pulumi.get(__response__, 'enforce_hostnames'),
        ext_key_usage_oids=pulumi.get(__response__, 'ext_key_usage_oids'),
        ext_key_usages=pulumi.get(__response__, 'ext_key_usages'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        key_bits=pulumi.get(__response__, 'key_bits'),
        key_type=pulumi.get(__response__, 'key_type'),
        key_usages=pulumi.get(__response__, 'key_usages'),
        localities=pulumi.get(__response__, 'localities'),
        max_ttl_seconds=pulumi.get(__response__, 'max_ttl_seconds'),
        name=pulumi.get(__response__, 'name'),
        not_before_duration_seconds=pulumi.get(__response__, 'not_before_duration_seconds'),
        organizations=pulumi.get(__response__, 'organizations'),
        ous=pulumi.get(__response__, 'ous'),
        policy_identifiers=pulumi.get(__response__, 'policy_identifiers'),
        postal_codes=pulumi.get(__response__, 'postal_codes'),
        provinces=pulumi.get(__response__, 'provinces'),
        region=pulumi.get(__response__, 'region'),
        require_cn=pulumi.get(__response__, 'require_cn'),
        secret_type=pulumi.get(__response__, 'secret_type'),
        serial_number=pulumi.get(__response__, 'serial_number'),
        server_flag=pulumi.get(__response__, 'server_flag'),
        street_addresses=pulumi.get(__response__, 'street_addresses'),
        ttl_seconds=pulumi.get(__response__, 'ttl_seconds'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        use_csr_common_name=pulumi.get(__response__, 'use_csr_common_name'),
        use_csr_sans=pulumi.get(__response__, 'use_csr_sans')))
