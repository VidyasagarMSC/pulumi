# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerVpcWorkerArgs', 'ContainerVpcWorker']

@pulumi.input_type
class ContainerVpcWorkerArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[_builtins.str],
                 replace_worker: pulumi.Input[_builtins.str],
                 check_ptx_status: Optional[pulumi.Input[_builtins.bool]] = None,
                 container_vpc_worker_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kube_config_path: Optional[pulumi.Input[_builtins.str]] = None,
                 ptx_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sds: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerVpcWorkerTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ContainerVpcWorker resource.
        :param pulumi.Input[_builtins.str] cluster_name: Cluster name
        :param pulumi.Input[_builtins.str] replace_worker: Worker name/id that needs to be replaced
        :param pulumi.Input[_builtins.bool] check_ptx_status: Check portworx status after worker replace
        :param pulumi.Input[_builtins.str] kube_config_path: Path of downloaded cluster config
        :param pulumi.Input[_builtins.str] ptx_timeout: Timeout for checking ptx pods/status
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] sds: Name of Software Defined Storage
        :param pulumi.Input[_builtins.str] sds_timeout: Timeout for checking sds deployment/status
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "replace_worker", replace_worker)
        if check_ptx_status is not None:
            pulumi.set(__self__, "check_ptx_status", check_ptx_status)
        if container_vpc_worker_id is not None:
            pulumi.set(__self__, "container_vpc_worker_id", container_vpc_worker_id)
        if kube_config_path is not None:
            pulumi.set(__self__, "kube_config_path", kube_config_path)
        if ptx_timeout is not None:
            pulumi.set(__self__, "ptx_timeout", ptx_timeout)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if sds is not None:
            pulumi.set(__self__, "sds", sds)
        if sds_timeout is not None:
            pulumi.set(__self__, "sds_timeout", sds_timeout)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster name
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="replaceWorker")
    def replace_worker(self) -> pulumi.Input[_builtins.str]:
        """
        Worker name/id that needs to be replaced
        """
        return pulumi.get(self, "replace_worker")

    @replace_worker.setter
    def replace_worker(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "replace_worker", value)

    @_builtins.property
    @pulumi.getter(name="checkPtxStatus")
    def check_ptx_status(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Check portworx status after worker replace
        """
        return pulumi.get(self, "check_ptx_status")

    @check_ptx_status.setter
    def check_ptx_status(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "check_ptx_status", value)

    @_builtins.property
    @pulumi.getter(name="containerVpcWorkerId")
    def container_vpc_worker_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_vpc_worker_id")

    @container_vpc_worker_id.setter
    def container_vpc_worker_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_vpc_worker_id", value)

    @_builtins.property
    @pulumi.getter(name="kubeConfigPath")
    def kube_config_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path of downloaded cluster config
        """
        return pulumi.get(self, "kube_config_path")

    @kube_config_path.setter
    def kube_config_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kube_config_path", value)

    @_builtins.property
    @pulumi.getter(name="ptxTimeout")
    def ptx_timeout(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timeout for checking ptx pods/status
        """
        return pulumi.get(self, "ptx_timeout")

    @ptx_timeout.setter
    def ptx_timeout(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ptx_timeout", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of Software Defined Storage
        """
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds", value)

    @_builtins.property
    @pulumi.getter(name="sdsTimeout")
    def sds_timeout(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timeout for checking sds deployment/status
        """
        return pulumi.get(self, "sds_timeout")

    @sds_timeout.setter
    def sds_timeout(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_timeout", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerVpcWorkerTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerVpcWorkerTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ContainerVpcWorkerState:
    def __init__(__self__, *,
                 check_ptx_status: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 container_vpc_worker_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 kube_config_path: Optional[pulumi.Input[_builtins.str]] = None,
                 ptx_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 replace_worker: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sds: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerVpcWorkerTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering ContainerVpcWorker resources.
        :param pulumi.Input[_builtins.bool] check_ptx_status: Check portworx status after worker replace
        :param pulumi.Input[_builtins.str] cluster_name: Cluster name
        :param pulumi.Input[_builtins.str] ip: IP of the replaced worker
        :param pulumi.Input[_builtins.str] kube_config_path: Path of downloaded cluster config
        :param pulumi.Input[_builtins.str] ptx_timeout: Timeout for checking ptx pods/status
        :param pulumi.Input[_builtins.str] replace_worker: Worker name/id that needs to be replaced
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] sds: Name of Software Defined Storage
        :param pulumi.Input[_builtins.str] sds_timeout: Timeout for checking sds deployment/status
        """
        if check_ptx_status is not None:
            pulumi.set(__self__, "check_ptx_status", check_ptx_status)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if container_vpc_worker_id is not None:
            pulumi.set(__self__, "container_vpc_worker_id", container_vpc_worker_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if kube_config_path is not None:
            pulumi.set(__self__, "kube_config_path", kube_config_path)
        if ptx_timeout is not None:
            pulumi.set(__self__, "ptx_timeout", ptx_timeout)
        if replace_worker is not None:
            pulumi.set(__self__, "replace_worker", replace_worker)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if sds is not None:
            pulumi.set(__self__, "sds", sds)
        if sds_timeout is not None:
            pulumi.set(__self__, "sds_timeout", sds_timeout)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="checkPtxStatus")
    def check_ptx_status(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Check portworx status after worker replace
        """
        return pulumi.get(self, "check_ptx_status")

    @check_ptx_status.setter
    def check_ptx_status(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "check_ptx_status", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster name
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="containerVpcWorkerId")
    def container_vpc_worker_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_vpc_worker_id")

    @container_vpc_worker_id.setter
    def container_vpc_worker_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_vpc_worker_id", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP of the replaced worker
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter(name="kubeConfigPath")
    def kube_config_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path of downloaded cluster config
        """
        return pulumi.get(self, "kube_config_path")

    @kube_config_path.setter
    def kube_config_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kube_config_path", value)

    @_builtins.property
    @pulumi.getter(name="ptxTimeout")
    def ptx_timeout(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timeout for checking ptx pods/status
        """
        return pulumi.get(self, "ptx_timeout")

    @ptx_timeout.setter
    def ptx_timeout(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ptx_timeout", value)

    @_builtins.property
    @pulumi.getter(name="replaceWorker")
    def replace_worker(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Worker name/id that needs to be replaced
        """
        return pulumi.get(self, "replace_worker")

    @replace_worker.setter
    def replace_worker(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "replace_worker", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of Software Defined Storage
        """
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds", value)

    @_builtins.property
    @pulumi.getter(name="sdsTimeout")
    def sds_timeout(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timeout for checking sds deployment/status
        """
        return pulumi.get(self, "sds_timeout")

    @sds_timeout.setter
    def sds_timeout(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_timeout", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerVpcWorkerTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerVpcWorkerTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/containerVpcWorker:ContainerVpcWorker")
class ContainerVpcWorker(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 check_ptx_status: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 container_vpc_worker_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kube_config_path: Optional[pulumi.Input[_builtins.str]] = None,
                 ptx_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 replace_worker: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sds: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerVpcWorkerTimeoutsArgs', 'ContainerVpcWorkerTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a ContainerVpcWorker resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] check_ptx_status: Check portworx status after worker replace
        :param pulumi.Input[_builtins.str] cluster_name: Cluster name
        :param pulumi.Input[_builtins.str] kube_config_path: Path of downloaded cluster config
        :param pulumi.Input[_builtins.str] ptx_timeout: Timeout for checking ptx pods/status
        :param pulumi.Input[_builtins.str] replace_worker: Worker name/id that needs to be replaced
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] sds: Name of Software Defined Storage
        :param pulumi.Input[_builtins.str] sds_timeout: Timeout for checking sds deployment/status
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerVpcWorkerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerVpcWorker resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerVpcWorkerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerVpcWorkerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 check_ptx_status: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 container_vpc_worker_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kube_config_path: Optional[pulumi.Input[_builtins.str]] = None,
                 ptx_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 replace_worker: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sds: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerVpcWorkerTimeoutsArgs', 'ContainerVpcWorkerTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerVpcWorkerArgs.__new__(ContainerVpcWorkerArgs)

            __props__.__dict__["check_ptx_status"] = check_ptx_status
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["container_vpc_worker_id"] = container_vpc_worker_id
            __props__.__dict__["kube_config_path"] = kube_config_path
            __props__.__dict__["ptx_timeout"] = ptx_timeout
            if replace_worker is None and not opts.urn:
                raise TypeError("Missing required property 'replace_worker'")
            __props__.__dict__["replace_worker"] = replace_worker
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["sds"] = sds
            __props__.__dict__["sds_timeout"] = sds_timeout
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["ip"] = None
        super(ContainerVpcWorker, __self__).__init__(
            'ibm:index/containerVpcWorker:ContainerVpcWorker',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            check_ptx_status: Optional[pulumi.Input[_builtins.bool]] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            container_vpc_worker_id: Optional[pulumi.Input[_builtins.str]] = None,
            ip: Optional[pulumi.Input[_builtins.str]] = None,
            kube_config_path: Optional[pulumi.Input[_builtins.str]] = None,
            ptx_timeout: Optional[pulumi.Input[_builtins.str]] = None,
            replace_worker: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            sds: Optional[pulumi.Input[_builtins.str]] = None,
            sds_timeout: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerVpcWorkerTimeoutsArgs', 'ContainerVpcWorkerTimeoutsArgsDict']]] = None) -> 'ContainerVpcWorker':
        """
        Get an existing ContainerVpcWorker resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] check_ptx_status: Check portworx status after worker replace
        :param pulumi.Input[_builtins.str] cluster_name: Cluster name
        :param pulumi.Input[_builtins.str] ip: IP of the replaced worker
        :param pulumi.Input[_builtins.str] kube_config_path: Path of downloaded cluster config
        :param pulumi.Input[_builtins.str] ptx_timeout: Timeout for checking ptx pods/status
        :param pulumi.Input[_builtins.str] replace_worker: Worker name/id that needs to be replaced
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] sds: Name of Software Defined Storage
        :param pulumi.Input[_builtins.str] sds_timeout: Timeout for checking sds deployment/status
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerVpcWorkerState.__new__(_ContainerVpcWorkerState)

        __props__.__dict__["check_ptx_status"] = check_ptx_status
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["container_vpc_worker_id"] = container_vpc_worker_id
        __props__.__dict__["ip"] = ip
        __props__.__dict__["kube_config_path"] = kube_config_path
        __props__.__dict__["ptx_timeout"] = ptx_timeout
        __props__.__dict__["replace_worker"] = replace_worker
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["sds"] = sds
        __props__.__dict__["sds_timeout"] = sds_timeout
        __props__.__dict__["timeouts"] = timeouts
        return ContainerVpcWorker(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="checkPtxStatus")
    def check_ptx_status(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Check portworx status after worker replace
        """
        return pulumi.get(self, "check_ptx_status")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster name
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="containerVpcWorkerId")
    def container_vpc_worker_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_vpc_worker_id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> pulumi.Output[_builtins.str]:
        """
        IP of the replaced worker
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="kubeConfigPath")
    def kube_config_path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Path of downloaded cluster config
        """
        return pulumi.get(self, "kube_config_path")

    @_builtins.property
    @pulumi.getter(name="ptxTimeout")
    def ptx_timeout(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Timeout for checking ptx pods/status
        """
        return pulumi.get(self, "ptx_timeout")

    @_builtins.property
    @pulumi.getter(name="replaceWorker")
    def replace_worker(self) -> pulumi.Output[_builtins.str]:
        """
        Worker name/id that needs to be replaced
        """
        return pulumi.get(self, "replace_worker")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def sds(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of Software Defined Storage
        """
        return pulumi.get(self, "sds")

    @_builtins.property
    @pulumi.getter(name="sdsTimeout")
    def sds_timeout(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Timeout for checking sds deployment/status
        """
        return pulumi.get(self, "sds_timeout")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerVpcWorkerTimeouts']]:
        return pulumi.get(self, "timeouts")

