# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ComputeBareMetalArgs', 'ComputeBareMetal']

@pulumi.input_type
class ComputeBareMetalArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[_builtins.str],
                 block_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 compute_bare_metal_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_key_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 extended_hardware_testing: Optional[pulumi.Input[_builtins.bool]] = None,
                 file_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 fixed_config_preset: Optional[pulumi.Input[_builtins.str]] = None,
                 gpu_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 gpu_secondary_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_template_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipv6_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_static_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 network_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 os_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_reference_code: Optional[pulumi.Input[_builtins.str]] = None,
                 package_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 post_install_script_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 private_network_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 process_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 public_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 quote_id: Optional[pulumi.Input[_builtins.float]] = None,
                 redundant_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 redundant_power_supply: Optional[pulumi.Input[_builtins.bool]] = None,
                 restricted_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 secondary_ip_count: Optional[pulumi.Input[_builtins.float]] = None,
                 software_guard_extensions: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 storage_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeBareMetalStorageGroupArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tcp_monitoring: Optional[pulumi.Input[_builtins.bool]] = None,
                 unbonded_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_metadata: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ComputeBareMetal resource.
        :param pulumi.Input[_builtins.str] domain: Domain name
        :param pulumi.Input[_builtins.str] fixed_config_preset: Fixed config preset value
        :param pulumi.Input[_builtins.str] hostname: Host name
        :param pulumi.Input[_builtins.bool] hourly_billing: Enables hourly billing
        :param pulumi.Input[_builtins.float] image_template_id: OS image template ID
        :param pulumi.Input[_builtins.bool] ipv6_enabled: Boolean value true if IPV6 ia enabled or false
        :param pulumi.Input[_builtins.bool] ipv6_static_enabled: boolean value true if ipv6 static is enabled else false
        :param pulumi.Input[_builtins.float] network_speed: Network speed in MBPS
        :param pulumi.Input[_builtins.str] notes: Optional notes info
        :param pulumi.Input[_builtins.str] os_reference_code: OS refernece code value
        :param pulumi.Input[_builtins.bool] private_network_only: only private network configured if is true
        :param pulumi.Input[_builtins.float] quote_id: Quote ID for Quote based provisioning
        :param pulumi.Input[_builtins.float] secondary_ip_count: Secondary IP addresses count
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] ssh_key_ids: SSH KEY IDS list
        :param pulumi.Input[_builtins.bool] tcp_monitoring: TCP monitoring enabled if set as true
        :param pulumi.Input[_builtins.str] user_metadata: User metadata info
        """
        pulumi.set(__self__, "domain", domain)
        if block_storage_ids is not None:
            pulumi.set(__self__, "block_storage_ids", block_storage_ids)
        if compute_bare_metal_id is not None:
            pulumi.set(__self__, "compute_bare_metal_id", compute_bare_metal_id)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if disk_key_names is not None:
            pulumi.set(__self__, "disk_key_names", disk_key_names)
        if extended_hardware_testing is not None:
            pulumi.set(__self__, "extended_hardware_testing", extended_hardware_testing)
        if file_storage_ids is not None:
            pulumi.set(__self__, "file_storage_ids", file_storage_ids)
        if fixed_config_preset is not None:
            pulumi.set(__self__, "fixed_config_preset", fixed_config_preset)
        if gpu_key_name is not None:
            pulumi.set(__self__, "gpu_key_name", gpu_key_name)
        if gpu_secondary_key_name is not None:
            pulumi.set(__self__, "gpu_secondary_key_name", gpu_secondary_key_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hourly_billing is not None:
            pulumi.set(__self__, "hourly_billing", hourly_billing)
        if image_template_id is not None:
            pulumi.set(__self__, "image_template_id", image_template_id)
        if ipv6_enabled is not None:
            pulumi.set(__self__, "ipv6_enabled", ipv6_enabled)
        if ipv6_static_enabled is not None:
            pulumi.set(__self__, "ipv6_static_enabled", ipv6_static_enabled)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if network_speed is not None:
            pulumi.set(__self__, "network_speed", network_speed)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if os_key_name is not None:
            pulumi.set(__self__, "os_key_name", os_key_name)
        if os_reference_code is not None:
            pulumi.set(__self__, "os_reference_code", os_reference_code)
        if package_key_name is not None:
            pulumi.set(__self__, "package_key_name", package_key_name)
        if post_install_script_uri is not None:
            pulumi.set(__self__, "post_install_script_uri", post_install_script_uri)
        if private_network_only is not None:
            pulumi.set(__self__, "private_network_only", private_network_only)
        if private_subnet is not None:
            pulumi.set(__self__, "private_subnet", private_subnet)
        if private_vlan_id is not None:
            pulumi.set(__self__, "private_vlan_id", private_vlan_id)
        if process_key_name is not None:
            pulumi.set(__self__, "process_key_name", process_key_name)
        if public_bandwidth is not None:
            pulumi.set(__self__, "public_bandwidth", public_bandwidth)
        if public_subnet is not None:
            pulumi.set(__self__, "public_subnet", public_subnet)
        if public_vlan_id is not None:
            pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if quote_id is not None:
            pulumi.set(__self__, "quote_id", quote_id)
        if redundant_network is not None:
            pulumi.set(__self__, "redundant_network", redundant_network)
        if redundant_power_supply is not None:
            pulumi.set(__self__, "redundant_power_supply", redundant_power_supply)
        if restricted_network is not None:
            pulumi.set(__self__, "restricted_network", restricted_network)
        if secondary_ip_count is not None:
            pulumi.set(__self__, "secondary_ip_count", secondary_ip_count)
        if software_guard_extensions is not None:
            pulumi.set(__self__, "software_guard_extensions", software_guard_extensions)
        if ssh_key_ids is not None:
            pulumi.set(__self__, "ssh_key_ids", ssh_key_ids)
        if storage_groups is not None:
            pulumi.set(__self__, "storage_groups", storage_groups)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tcp_monitoring is not None:
            pulumi.set(__self__, "tcp_monitoring", tcp_monitoring)
        if unbonded_network is not None:
            pulumi.set(__self__, "unbonded_network", unbonded_network)
        if user_metadata is not None:
            pulumi.set(__self__, "user_metadata", user_metadata)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Input[_builtins.str]:
        """
        Domain name
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="blockStorageIds")
    def block_storage_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "block_storage_ids")

    @block_storage_ids.setter
    def block_storage_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "block_storage_ids", value)

    @_builtins.property
    @pulumi.getter(name="computeBareMetalId")
    def compute_bare_metal_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_bare_metal_id")

    @compute_bare_metal_id.setter
    def compute_bare_metal_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_bare_metal_id", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="diskKeyNames")
    def disk_key_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "disk_key_names")

    @disk_key_names.setter
    def disk_key_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "disk_key_names", value)

    @_builtins.property
    @pulumi.getter(name="extendedHardwareTesting")
    def extended_hardware_testing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "extended_hardware_testing")

    @extended_hardware_testing.setter
    def extended_hardware_testing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "extended_hardware_testing", value)

    @_builtins.property
    @pulumi.getter(name="fileStorageIds")
    def file_storage_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "file_storage_ids")

    @file_storage_ids.setter
    def file_storage_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "file_storage_ids", value)

    @_builtins.property
    @pulumi.getter(name="fixedConfigPreset")
    def fixed_config_preset(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Fixed config preset value
        """
        return pulumi.get(self, "fixed_config_preset")

    @fixed_config_preset.setter
    def fixed_config_preset(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fixed_config_preset", value)

    @_builtins.property
    @pulumi.getter(name="gpuKeyName")
    def gpu_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "gpu_key_name")

    @gpu_key_name.setter
    def gpu_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gpu_key_name", value)

    @_builtins.property
    @pulumi.getter(name="gpuSecondaryKeyName")
    def gpu_secondary_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "gpu_secondary_key_name")

    @gpu_secondary_key_name.setter
    def gpu_secondary_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gpu_secondary_key_name", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Host name
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables hourly billing
        """
        return pulumi.get(self, "hourly_billing")

    @hourly_billing.setter
    def hourly_billing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly_billing", value)

    @_builtins.property
    @pulumi.getter(name="imageTemplateId")
    def image_template_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        OS image template ID
        """
        return pulumi.get(self, "image_template_id")

    @image_template_id.setter
    def image_template_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "image_template_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Enabled")
    def ipv6_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value true if IPV6 ia enabled or false
        """
        return pulumi.get(self, "ipv6_enabled")

    @ipv6_enabled.setter
    def ipv6_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_enabled", value)

    @_builtins.property
    @pulumi.getter(name="ipv6StaticEnabled")
    def ipv6_static_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        boolean value true if ipv6 static is enabled else false
        """
        return pulumi.get(self, "ipv6_static_enabled")

    @ipv6_static_enabled.setter
    def ipv6_static_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_static_enabled", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter(name="networkSpeed")
    def network_speed(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Network speed in MBPS
        """
        return pulumi.get(self, "network_speed")

    @network_speed.setter
    def network_speed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "network_speed", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional notes info
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="osKeyName")
    def os_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "os_key_name")

    @os_key_name.setter
    def os_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_key_name", value)

    @_builtins.property
    @pulumi.getter(name="osReferenceCode")
    def os_reference_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        OS refernece code value
        """
        return pulumi.get(self, "os_reference_code")

    @os_reference_code.setter
    def os_reference_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_reference_code", value)

    @_builtins.property
    @pulumi.getter(name="packageKeyName")
    def package_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "package_key_name")

    @package_key_name.setter
    def package_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "package_key_name", value)

    @_builtins.property
    @pulumi.getter(name="postInstallScriptUri")
    def post_install_script_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "post_install_script_uri")

    @post_install_script_uri.setter
    def post_install_script_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_install_script_uri", value)

    @_builtins.property
    @pulumi.getter(name="privateNetworkOnly")
    def private_network_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        only private network configured if is true
        """
        return pulumi.get(self, "private_network_only")

    @private_network_only.setter
    def private_network_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_network_only", value)

    @_builtins.property
    @pulumi.getter(name="privateSubnet")
    def private_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_subnet")

    @private_subnet.setter
    def private_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_subnet", value)

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "private_vlan_id")

    @private_vlan_id.setter
    def private_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "private_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="processKeyName")
    def process_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "process_key_name")

    @process_key_name.setter
    def process_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "process_key_name", value)

    @_builtins.property
    @pulumi.getter(name="publicBandwidth")
    def public_bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "public_bandwidth")

    @public_bandwidth.setter
    def public_bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="publicSubnet")
    def public_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_subnet")

    @public_subnet.setter
    def public_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_subnet", value)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="quoteId")
    def quote_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Quote ID for Quote based provisioning
        """
        return pulumi.get(self, "quote_id")

    @quote_id.setter
    def quote_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "quote_id", value)

    @_builtins.property
    @pulumi.getter(name="redundantNetwork")
    def redundant_network(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "redundant_network")

    @redundant_network.setter
    def redundant_network(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "redundant_network", value)

    @_builtins.property
    @pulumi.getter(name="redundantPowerSupply")
    def redundant_power_supply(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "redundant_power_supply")

    @redundant_power_supply.setter
    def redundant_power_supply(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "redundant_power_supply", value)

    @_builtins.property
    @pulumi.getter(name="restrictedNetwork")
    def restricted_network(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "restricted_network")

    @restricted_network.setter
    def restricted_network(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "restricted_network", value)

    @_builtins.property
    @pulumi.getter(name="secondaryIpCount")
    def secondary_ip_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Secondary IP addresses count
        """
        return pulumi.get(self, "secondary_ip_count")

    @secondary_ip_count.setter
    def secondary_ip_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "secondary_ip_count", value)

    @_builtins.property
    @pulumi.getter(name="softwareGuardExtensions")
    def software_guard_extensions(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "software_guard_extensions")

    @software_guard_extensions.setter
    def software_guard_extensions(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "software_guard_extensions", value)

    @_builtins.property
    @pulumi.getter(name="sshKeyIds")
    def ssh_key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        SSH KEY IDS list
        """
        return pulumi.get(self, "ssh_key_ids")

    @ssh_key_ids.setter
    def ssh_key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "ssh_key_ids", value)

    @_builtins.property
    @pulumi.getter(name="storageGroups")
    def storage_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeBareMetalStorageGroupArgs']]]]:
        return pulumi.get(self, "storage_groups")

    @storage_groups.setter
    def storage_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeBareMetalStorageGroupArgs']]]]):
        pulumi.set(self, "storage_groups", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tcpMonitoring")
    def tcp_monitoring(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        TCP monitoring enabled if set as true
        """
        return pulumi.get(self, "tcp_monitoring")

    @tcp_monitoring.setter
    def tcp_monitoring(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tcp_monitoring", value)

    @_builtins.property
    @pulumi.getter(name="unbondedNetwork")
    def unbonded_network(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "unbonded_network")

    @unbonded_network.setter
    def unbonded_network(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "unbonded_network", value)

    @_builtins.property
    @pulumi.getter(name="userMetadata")
    def user_metadata(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User metadata info
        """
        return pulumi.get(self, "user_metadata")

    @user_metadata.setter
    def user_metadata(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_metadata", value)


@pulumi.input_type
class _ComputeBareMetalState:
    def __init__(__self__, *,
                 block_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 compute_bare_metal_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_key_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 extended_hardware_testing: Optional[pulumi.Input[_builtins.bool]] = None,
                 file_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 fixed_config_preset: Optional[pulumi.Input[_builtins.str]] = None,
                 global_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 gpu_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 gpu_secondary_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_template_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipv6_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_static_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 network_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 os_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_reference_code: Optional[pulumi.Input[_builtins.str]] = None,
                 package_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 post_install_script_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ipv4_address_id: Optional[pulumi.Input[_builtins.float]] = None,
                 private_network_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 process_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 public_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 public_ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ipv4_address_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 quote_id: Optional[pulumi.Input[_builtins.float]] = None,
                 redundant_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 redundant_power_supply: Optional[pulumi.Input[_builtins.bool]] = None,
                 restricted_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 secondary_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 secondary_ip_count: Optional[pulumi.Input[_builtins.float]] = None,
                 software_guard_extensions: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 storage_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeBareMetalStorageGroupArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tcp_monitoring: Optional[pulumi.Input[_builtins.bool]] = None,
                 unbonded_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_metadata: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ComputeBareMetal resources.
        :param pulumi.Input[_builtins.str] domain: Domain name
        :param pulumi.Input[_builtins.str] fixed_config_preset: Fixed config preset value
        :param pulumi.Input[_builtins.str] global_identifier: The unique global identifier of the bare metal server
        :param pulumi.Input[_builtins.str] hostname: Host name
        :param pulumi.Input[_builtins.bool] hourly_billing: Enables hourly billing
        :param pulumi.Input[_builtins.float] image_template_id: OS image template ID
        :param pulumi.Input[_builtins.bool] ipv6_enabled: Boolean value true if IPV6 ia enabled or false
        :param pulumi.Input[_builtins.bool] ipv6_static_enabled: boolean value true if ipv6 static is enabled else false
        :param pulumi.Input[_builtins.float] network_speed: Network speed in MBPS
        :param pulumi.Input[_builtins.str] notes: Optional notes info
        :param pulumi.Input[_builtins.str] os_reference_code: OS refernece code value
        :param pulumi.Input[_builtins.bool] private_network_only: only private network configured if is true
        :param pulumi.Input[_builtins.float] quote_id: Quote ID for Quote based provisioning
        :param pulumi.Input[_builtins.float] secondary_ip_count: Secondary IP addresses count
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] ssh_key_ids: SSH KEY IDS list
        :param pulumi.Input[_builtins.bool] tcp_monitoring: TCP monitoring enabled if set as true
        :param pulumi.Input[_builtins.str] user_metadata: User metadata info
        """
        if block_storage_ids is not None:
            pulumi.set(__self__, "block_storage_ids", block_storage_ids)
        if compute_bare_metal_id is not None:
            pulumi.set(__self__, "compute_bare_metal_id", compute_bare_metal_id)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if disk_key_names is not None:
            pulumi.set(__self__, "disk_key_names", disk_key_names)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if extended_hardware_testing is not None:
            pulumi.set(__self__, "extended_hardware_testing", extended_hardware_testing)
        if file_storage_ids is not None:
            pulumi.set(__self__, "file_storage_ids", file_storage_ids)
        if fixed_config_preset is not None:
            pulumi.set(__self__, "fixed_config_preset", fixed_config_preset)
        if global_identifier is not None:
            pulumi.set(__self__, "global_identifier", global_identifier)
        if gpu_key_name is not None:
            pulumi.set(__self__, "gpu_key_name", gpu_key_name)
        if gpu_secondary_key_name is not None:
            pulumi.set(__self__, "gpu_secondary_key_name", gpu_secondary_key_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hourly_billing is not None:
            pulumi.set(__self__, "hourly_billing", hourly_billing)
        if image_template_id is not None:
            pulumi.set(__self__, "image_template_id", image_template_id)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_id is not None:
            pulumi.set(__self__, "ipv6_address_id", ipv6_address_id)
        if ipv6_enabled is not None:
            pulumi.set(__self__, "ipv6_enabled", ipv6_enabled)
        if ipv6_static_enabled is not None:
            pulumi.set(__self__, "ipv6_static_enabled", ipv6_static_enabled)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if network_speed is not None:
            pulumi.set(__self__, "network_speed", network_speed)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if os_key_name is not None:
            pulumi.set(__self__, "os_key_name", os_key_name)
        if os_reference_code is not None:
            pulumi.set(__self__, "os_reference_code", os_reference_code)
        if package_key_name is not None:
            pulumi.set(__self__, "package_key_name", package_key_name)
        if post_install_script_uri is not None:
            pulumi.set(__self__, "post_install_script_uri", post_install_script_uri)
        if private_ipv4_address is not None:
            pulumi.set(__self__, "private_ipv4_address", private_ipv4_address)
        if private_ipv4_address_id is not None:
            pulumi.set(__self__, "private_ipv4_address_id", private_ipv4_address_id)
        if private_network_only is not None:
            pulumi.set(__self__, "private_network_only", private_network_only)
        if private_subnet is not None:
            pulumi.set(__self__, "private_subnet", private_subnet)
        if private_vlan_id is not None:
            pulumi.set(__self__, "private_vlan_id", private_vlan_id)
        if process_key_name is not None:
            pulumi.set(__self__, "process_key_name", process_key_name)
        if public_bandwidth is not None:
            pulumi.set(__self__, "public_bandwidth", public_bandwidth)
        if public_ipv4_address is not None:
            pulumi.set(__self__, "public_ipv4_address", public_ipv4_address)
        if public_ipv4_address_id is not None:
            pulumi.set(__self__, "public_ipv4_address_id", public_ipv4_address_id)
        if public_subnet is not None:
            pulumi.set(__self__, "public_subnet", public_subnet)
        if public_vlan_id is not None:
            pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if quote_id is not None:
            pulumi.set(__self__, "quote_id", quote_id)
        if redundant_network is not None:
            pulumi.set(__self__, "redundant_network", redundant_network)
        if redundant_power_supply is not None:
            pulumi.set(__self__, "redundant_power_supply", redundant_power_supply)
        if restricted_network is not None:
            pulumi.set(__self__, "restricted_network", restricted_network)
        if secondary_ip_addresses is not None:
            pulumi.set(__self__, "secondary_ip_addresses", secondary_ip_addresses)
        if secondary_ip_count is not None:
            pulumi.set(__self__, "secondary_ip_count", secondary_ip_count)
        if software_guard_extensions is not None:
            pulumi.set(__self__, "software_guard_extensions", software_guard_extensions)
        if ssh_key_ids is not None:
            pulumi.set(__self__, "ssh_key_ids", ssh_key_ids)
        if storage_groups is not None:
            pulumi.set(__self__, "storage_groups", storage_groups)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tcp_monitoring is not None:
            pulumi.set(__self__, "tcp_monitoring", tcp_monitoring)
        if unbonded_network is not None:
            pulumi.set(__self__, "unbonded_network", unbonded_network)
        if user_metadata is not None:
            pulumi.set(__self__, "user_metadata", user_metadata)

    @_builtins.property
    @pulumi.getter(name="blockStorageIds")
    def block_storage_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "block_storage_ids")

    @block_storage_ids.setter
    def block_storage_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "block_storage_ids", value)

    @_builtins.property
    @pulumi.getter(name="computeBareMetalId")
    def compute_bare_metal_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_bare_metal_id")

    @compute_bare_metal_id.setter
    def compute_bare_metal_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_bare_metal_id", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="diskKeyNames")
    def disk_key_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "disk_key_names")

    @disk_key_names.setter
    def disk_key_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "disk_key_names", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Domain name
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="extendedHardwareTesting")
    def extended_hardware_testing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "extended_hardware_testing")

    @extended_hardware_testing.setter
    def extended_hardware_testing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "extended_hardware_testing", value)

    @_builtins.property
    @pulumi.getter(name="fileStorageIds")
    def file_storage_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "file_storage_ids")

    @file_storage_ids.setter
    def file_storage_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "file_storage_ids", value)

    @_builtins.property
    @pulumi.getter(name="fixedConfigPreset")
    def fixed_config_preset(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Fixed config preset value
        """
        return pulumi.get(self, "fixed_config_preset")

    @fixed_config_preset.setter
    def fixed_config_preset(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fixed_config_preset", value)

    @_builtins.property
    @pulumi.getter(name="globalIdentifier")
    def global_identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique global identifier of the bare metal server
        """
        return pulumi.get(self, "global_identifier")

    @global_identifier.setter
    def global_identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_identifier", value)

    @_builtins.property
    @pulumi.getter(name="gpuKeyName")
    def gpu_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "gpu_key_name")

    @gpu_key_name.setter
    def gpu_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gpu_key_name", value)

    @_builtins.property
    @pulumi.getter(name="gpuSecondaryKeyName")
    def gpu_secondary_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "gpu_secondary_key_name")

    @gpu_secondary_key_name.setter
    def gpu_secondary_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gpu_secondary_key_name", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Host name
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables hourly billing
        """
        return pulumi.get(self, "hourly_billing")

    @hourly_billing.setter
    def hourly_billing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly_billing", value)

    @_builtins.property
    @pulumi.getter(name="imageTemplateId")
    def image_template_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        OS image template ID
        """
        return pulumi.get(self, "image_template_id")

    @image_template_id.setter
    def image_template_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "image_template_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressId")
    def ipv6_address_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "ipv6_address_id")

    @ipv6_address_id.setter
    def ipv6_address_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ipv6_address_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Enabled")
    def ipv6_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value true if IPV6 ia enabled or false
        """
        return pulumi.get(self, "ipv6_enabled")

    @ipv6_enabled.setter
    def ipv6_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_enabled", value)

    @_builtins.property
    @pulumi.getter(name="ipv6StaticEnabled")
    def ipv6_static_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        boolean value true if ipv6 static is enabled else false
        """
        return pulumi.get(self, "ipv6_static_enabled")

    @ipv6_static_enabled.setter
    def ipv6_static_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_static_enabled", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter(name="networkSpeed")
    def network_speed(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Network speed in MBPS
        """
        return pulumi.get(self, "network_speed")

    @network_speed.setter
    def network_speed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "network_speed", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional notes info
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="osKeyName")
    def os_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "os_key_name")

    @os_key_name.setter
    def os_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_key_name", value)

    @_builtins.property
    @pulumi.getter(name="osReferenceCode")
    def os_reference_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        OS refernece code value
        """
        return pulumi.get(self, "os_reference_code")

    @os_reference_code.setter
    def os_reference_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_reference_code", value)

    @_builtins.property
    @pulumi.getter(name="packageKeyName")
    def package_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "package_key_name")

    @package_key_name.setter
    def package_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "package_key_name", value)

    @_builtins.property
    @pulumi.getter(name="postInstallScriptUri")
    def post_install_script_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "post_install_script_uri")

    @post_install_script_uri.setter
    def post_install_script_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_install_script_uri", value)

    @_builtins.property
    @pulumi.getter(name="privateIpv4Address")
    def private_ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_ipv4_address")

    @private_ipv4_address.setter
    def private_ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="privateIpv4AddressId")
    def private_ipv4_address_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "private_ipv4_address_id")

    @private_ipv4_address_id.setter
    def private_ipv4_address_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "private_ipv4_address_id", value)

    @_builtins.property
    @pulumi.getter(name="privateNetworkOnly")
    def private_network_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        only private network configured if is true
        """
        return pulumi.get(self, "private_network_only")

    @private_network_only.setter
    def private_network_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_network_only", value)

    @_builtins.property
    @pulumi.getter(name="privateSubnet")
    def private_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_subnet")

    @private_subnet.setter
    def private_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_subnet", value)

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "private_vlan_id")

    @private_vlan_id.setter
    def private_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "private_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="processKeyName")
    def process_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "process_key_name")

    @process_key_name.setter
    def process_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "process_key_name", value)

    @_builtins.property
    @pulumi.getter(name="publicBandwidth")
    def public_bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "public_bandwidth")

    @public_bandwidth.setter
    def public_bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="publicIpv4Address")
    def public_ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_ipv4_address")

    @public_ipv4_address.setter
    def public_ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="publicIpv4AddressId")
    def public_ipv4_address_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "public_ipv4_address_id")

    @public_ipv4_address_id.setter
    def public_ipv4_address_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_ipv4_address_id", value)

    @_builtins.property
    @pulumi.getter(name="publicSubnet")
    def public_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_subnet")

    @public_subnet.setter
    def public_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_subnet", value)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="quoteId")
    def quote_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Quote ID for Quote based provisioning
        """
        return pulumi.get(self, "quote_id")

    @quote_id.setter
    def quote_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "quote_id", value)

    @_builtins.property
    @pulumi.getter(name="redundantNetwork")
    def redundant_network(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "redundant_network")

    @redundant_network.setter
    def redundant_network(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "redundant_network", value)

    @_builtins.property
    @pulumi.getter(name="redundantPowerSupply")
    def redundant_power_supply(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "redundant_power_supply")

    @redundant_power_supply.setter
    def redundant_power_supply(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "redundant_power_supply", value)

    @_builtins.property
    @pulumi.getter(name="restrictedNetwork")
    def restricted_network(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "restricted_network")

    @restricted_network.setter
    def restricted_network(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "restricted_network", value)

    @_builtins.property
    @pulumi.getter(name="secondaryIpAddresses")
    def secondary_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "secondary_ip_addresses")

    @secondary_ip_addresses.setter
    def secondary_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "secondary_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="secondaryIpCount")
    def secondary_ip_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Secondary IP addresses count
        """
        return pulumi.get(self, "secondary_ip_count")

    @secondary_ip_count.setter
    def secondary_ip_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "secondary_ip_count", value)

    @_builtins.property
    @pulumi.getter(name="softwareGuardExtensions")
    def software_guard_extensions(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "software_guard_extensions")

    @software_guard_extensions.setter
    def software_guard_extensions(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "software_guard_extensions", value)

    @_builtins.property
    @pulumi.getter(name="sshKeyIds")
    def ssh_key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        SSH KEY IDS list
        """
        return pulumi.get(self, "ssh_key_ids")

    @ssh_key_ids.setter
    def ssh_key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "ssh_key_ids", value)

    @_builtins.property
    @pulumi.getter(name="storageGroups")
    def storage_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeBareMetalStorageGroupArgs']]]]:
        return pulumi.get(self, "storage_groups")

    @storage_groups.setter
    def storage_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeBareMetalStorageGroupArgs']]]]):
        pulumi.set(self, "storage_groups", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tcpMonitoring")
    def tcp_monitoring(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        TCP monitoring enabled if set as true
        """
        return pulumi.get(self, "tcp_monitoring")

    @tcp_monitoring.setter
    def tcp_monitoring(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tcp_monitoring", value)

    @_builtins.property
    @pulumi.getter(name="unbondedNetwork")
    def unbonded_network(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "unbonded_network")

    @unbonded_network.setter
    def unbonded_network(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "unbonded_network", value)

    @_builtins.property
    @pulumi.getter(name="userMetadata")
    def user_metadata(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User metadata info
        """
        return pulumi.get(self, "user_metadata")

    @user_metadata.setter
    def user_metadata(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_metadata", value)


@pulumi.type_token("ibm:index/computeBareMetal:ComputeBareMetal")
class ComputeBareMetal(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 compute_bare_metal_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_key_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 extended_hardware_testing: Optional[pulumi.Input[_builtins.bool]] = None,
                 file_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 fixed_config_preset: Optional[pulumi.Input[_builtins.str]] = None,
                 gpu_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 gpu_secondary_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_template_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipv6_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_static_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 network_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 os_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_reference_code: Optional[pulumi.Input[_builtins.str]] = None,
                 package_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 post_install_script_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 private_network_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 process_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 public_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 quote_id: Optional[pulumi.Input[_builtins.float]] = None,
                 redundant_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 redundant_power_supply: Optional[pulumi.Input[_builtins.bool]] = None,
                 restricted_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 secondary_ip_count: Optional[pulumi.Input[_builtins.float]] = None,
                 software_guard_extensions: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 storage_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComputeBareMetalStorageGroupArgs', 'ComputeBareMetalStorageGroupArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tcp_monitoring: Optional[pulumi.Input[_builtins.bool]] = None,
                 unbonded_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_metadata: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ComputeBareMetal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] domain: Domain name
        :param pulumi.Input[_builtins.str] fixed_config_preset: Fixed config preset value
        :param pulumi.Input[_builtins.str] hostname: Host name
        :param pulumi.Input[_builtins.bool] hourly_billing: Enables hourly billing
        :param pulumi.Input[_builtins.float] image_template_id: OS image template ID
        :param pulumi.Input[_builtins.bool] ipv6_enabled: Boolean value true if IPV6 ia enabled or false
        :param pulumi.Input[_builtins.bool] ipv6_static_enabled: boolean value true if ipv6 static is enabled else false
        :param pulumi.Input[_builtins.float] network_speed: Network speed in MBPS
        :param pulumi.Input[_builtins.str] notes: Optional notes info
        :param pulumi.Input[_builtins.str] os_reference_code: OS refernece code value
        :param pulumi.Input[_builtins.bool] private_network_only: only private network configured if is true
        :param pulumi.Input[_builtins.float] quote_id: Quote ID for Quote based provisioning
        :param pulumi.Input[_builtins.float] secondary_ip_count: Secondary IP addresses count
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] ssh_key_ids: SSH KEY IDS list
        :param pulumi.Input[_builtins.bool] tcp_monitoring: TCP monitoring enabled if set as true
        :param pulumi.Input[_builtins.str] user_metadata: User metadata info
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputeBareMetalArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComputeBareMetal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComputeBareMetalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeBareMetalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 compute_bare_metal_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_key_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 extended_hardware_testing: Optional[pulumi.Input[_builtins.bool]] = None,
                 file_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 fixed_config_preset: Optional[pulumi.Input[_builtins.str]] = None,
                 gpu_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 gpu_secondary_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_template_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipv6_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_static_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 network_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 os_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_reference_code: Optional[pulumi.Input[_builtins.str]] = None,
                 package_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 post_install_script_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 private_network_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 process_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 public_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 quote_id: Optional[pulumi.Input[_builtins.float]] = None,
                 redundant_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 redundant_power_supply: Optional[pulumi.Input[_builtins.bool]] = None,
                 restricted_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 secondary_ip_count: Optional[pulumi.Input[_builtins.float]] = None,
                 software_guard_extensions: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 storage_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComputeBareMetalStorageGroupArgs', 'ComputeBareMetalStorageGroupArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tcp_monitoring: Optional[pulumi.Input[_builtins.bool]] = None,
                 unbonded_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_metadata: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeBareMetalArgs.__new__(ComputeBareMetalArgs)

            __props__.__dict__["block_storage_ids"] = block_storage_ids
            __props__.__dict__["compute_bare_metal_id"] = compute_bare_metal_id
            __props__.__dict__["datacenter"] = datacenter
            __props__.__dict__["disk_key_names"] = disk_key_names
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["extended_hardware_testing"] = extended_hardware_testing
            __props__.__dict__["file_storage_ids"] = file_storage_ids
            __props__.__dict__["fixed_config_preset"] = fixed_config_preset
            __props__.__dict__["gpu_key_name"] = gpu_key_name
            __props__.__dict__["gpu_secondary_key_name"] = gpu_secondary_key_name
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["hourly_billing"] = hourly_billing
            __props__.__dict__["image_template_id"] = image_template_id
            __props__.__dict__["ipv6_enabled"] = ipv6_enabled
            __props__.__dict__["ipv6_static_enabled"] = ipv6_static_enabled
            __props__.__dict__["memory"] = memory
            __props__.__dict__["network_speed"] = network_speed
            __props__.__dict__["notes"] = notes
            __props__.__dict__["os_key_name"] = os_key_name
            __props__.__dict__["os_reference_code"] = os_reference_code
            __props__.__dict__["package_key_name"] = package_key_name
            __props__.__dict__["post_install_script_uri"] = post_install_script_uri
            __props__.__dict__["private_network_only"] = private_network_only
            __props__.__dict__["private_subnet"] = private_subnet
            __props__.__dict__["private_vlan_id"] = private_vlan_id
            __props__.__dict__["process_key_name"] = process_key_name
            __props__.__dict__["public_bandwidth"] = public_bandwidth
            __props__.__dict__["public_subnet"] = public_subnet
            __props__.__dict__["public_vlan_id"] = public_vlan_id
            __props__.__dict__["quote_id"] = quote_id
            __props__.__dict__["redundant_network"] = redundant_network
            __props__.__dict__["redundant_power_supply"] = redundant_power_supply
            __props__.__dict__["restricted_network"] = restricted_network
            __props__.__dict__["secondary_ip_count"] = secondary_ip_count
            __props__.__dict__["software_guard_extensions"] = software_guard_extensions
            __props__.__dict__["ssh_key_ids"] = ssh_key_ids
            __props__.__dict__["storage_groups"] = storage_groups
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tcp_monitoring"] = tcp_monitoring
            __props__.__dict__["unbonded_network"] = unbonded_network
            __props__.__dict__["user_metadata"] = user_metadata
            __props__.__dict__["global_identifier"] = None
            __props__.__dict__["ipv6_address"] = None
            __props__.__dict__["ipv6_address_id"] = None
            __props__.__dict__["private_ipv4_address"] = None
            __props__.__dict__["private_ipv4_address_id"] = None
            __props__.__dict__["public_ipv4_address"] = None
            __props__.__dict__["public_ipv4_address_id"] = None
            __props__.__dict__["secondary_ip_addresses"] = None
        super(ComputeBareMetal, __self__).__init__(
            'ibm:index/computeBareMetal:ComputeBareMetal',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            block_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            compute_bare_metal_id: Optional[pulumi.Input[_builtins.str]] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            disk_key_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            domain: Optional[pulumi.Input[_builtins.str]] = None,
            extended_hardware_testing: Optional[pulumi.Input[_builtins.bool]] = None,
            file_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            fixed_config_preset: Optional[pulumi.Input[_builtins.str]] = None,
            global_identifier: Optional[pulumi.Input[_builtins.str]] = None,
            gpu_key_name: Optional[pulumi.Input[_builtins.str]] = None,
            gpu_secondary_key_name: Optional[pulumi.Input[_builtins.str]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
            image_template_id: Optional[pulumi.Input[_builtins.float]] = None,
            ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_address_id: Optional[pulumi.Input[_builtins.float]] = None,
            ipv6_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            ipv6_static_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            memory: Optional[pulumi.Input[_builtins.float]] = None,
            network_speed: Optional[pulumi.Input[_builtins.float]] = None,
            notes: Optional[pulumi.Input[_builtins.str]] = None,
            os_key_name: Optional[pulumi.Input[_builtins.str]] = None,
            os_reference_code: Optional[pulumi.Input[_builtins.str]] = None,
            package_key_name: Optional[pulumi.Input[_builtins.str]] = None,
            post_install_script_uri: Optional[pulumi.Input[_builtins.str]] = None,
            private_ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
            private_ipv4_address_id: Optional[pulumi.Input[_builtins.float]] = None,
            private_network_only: Optional[pulumi.Input[_builtins.bool]] = None,
            private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
            process_key_name: Optional[pulumi.Input[_builtins.str]] = None,
            public_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
            public_ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
            public_ipv4_address_id: Optional[pulumi.Input[_builtins.float]] = None,
            public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
            quote_id: Optional[pulumi.Input[_builtins.float]] = None,
            redundant_network: Optional[pulumi.Input[_builtins.bool]] = None,
            redundant_power_supply: Optional[pulumi.Input[_builtins.bool]] = None,
            restricted_network: Optional[pulumi.Input[_builtins.bool]] = None,
            secondary_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            secondary_ip_count: Optional[pulumi.Input[_builtins.float]] = None,
            software_guard_extensions: Optional[pulumi.Input[_builtins.bool]] = None,
            ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            storage_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComputeBareMetalStorageGroupArgs', 'ComputeBareMetalStorageGroupArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tcp_monitoring: Optional[pulumi.Input[_builtins.bool]] = None,
            unbonded_network: Optional[pulumi.Input[_builtins.bool]] = None,
            user_metadata: Optional[pulumi.Input[_builtins.str]] = None) -> 'ComputeBareMetal':
        """
        Get an existing ComputeBareMetal resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] domain: Domain name
        :param pulumi.Input[_builtins.str] fixed_config_preset: Fixed config preset value
        :param pulumi.Input[_builtins.str] global_identifier: The unique global identifier of the bare metal server
        :param pulumi.Input[_builtins.str] hostname: Host name
        :param pulumi.Input[_builtins.bool] hourly_billing: Enables hourly billing
        :param pulumi.Input[_builtins.float] image_template_id: OS image template ID
        :param pulumi.Input[_builtins.bool] ipv6_enabled: Boolean value true if IPV6 ia enabled or false
        :param pulumi.Input[_builtins.bool] ipv6_static_enabled: boolean value true if ipv6 static is enabled else false
        :param pulumi.Input[_builtins.float] network_speed: Network speed in MBPS
        :param pulumi.Input[_builtins.str] notes: Optional notes info
        :param pulumi.Input[_builtins.str] os_reference_code: OS refernece code value
        :param pulumi.Input[_builtins.bool] private_network_only: only private network configured if is true
        :param pulumi.Input[_builtins.float] quote_id: Quote ID for Quote based provisioning
        :param pulumi.Input[_builtins.float] secondary_ip_count: Secondary IP addresses count
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] ssh_key_ids: SSH KEY IDS list
        :param pulumi.Input[_builtins.bool] tcp_monitoring: TCP monitoring enabled if set as true
        :param pulumi.Input[_builtins.str] user_metadata: User metadata info
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeBareMetalState.__new__(_ComputeBareMetalState)

        __props__.__dict__["block_storage_ids"] = block_storage_ids
        __props__.__dict__["compute_bare_metal_id"] = compute_bare_metal_id
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["disk_key_names"] = disk_key_names
        __props__.__dict__["domain"] = domain
        __props__.__dict__["extended_hardware_testing"] = extended_hardware_testing
        __props__.__dict__["file_storage_ids"] = file_storage_ids
        __props__.__dict__["fixed_config_preset"] = fixed_config_preset
        __props__.__dict__["global_identifier"] = global_identifier
        __props__.__dict__["gpu_key_name"] = gpu_key_name
        __props__.__dict__["gpu_secondary_key_name"] = gpu_secondary_key_name
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["hourly_billing"] = hourly_billing
        __props__.__dict__["image_template_id"] = image_template_id
        __props__.__dict__["ipv6_address"] = ipv6_address
        __props__.__dict__["ipv6_address_id"] = ipv6_address_id
        __props__.__dict__["ipv6_enabled"] = ipv6_enabled
        __props__.__dict__["ipv6_static_enabled"] = ipv6_static_enabled
        __props__.__dict__["memory"] = memory
        __props__.__dict__["network_speed"] = network_speed
        __props__.__dict__["notes"] = notes
        __props__.__dict__["os_key_name"] = os_key_name
        __props__.__dict__["os_reference_code"] = os_reference_code
        __props__.__dict__["package_key_name"] = package_key_name
        __props__.__dict__["post_install_script_uri"] = post_install_script_uri
        __props__.__dict__["private_ipv4_address"] = private_ipv4_address
        __props__.__dict__["private_ipv4_address_id"] = private_ipv4_address_id
        __props__.__dict__["private_network_only"] = private_network_only
        __props__.__dict__["private_subnet"] = private_subnet
        __props__.__dict__["private_vlan_id"] = private_vlan_id
        __props__.__dict__["process_key_name"] = process_key_name
        __props__.__dict__["public_bandwidth"] = public_bandwidth
        __props__.__dict__["public_ipv4_address"] = public_ipv4_address
        __props__.__dict__["public_ipv4_address_id"] = public_ipv4_address_id
        __props__.__dict__["public_subnet"] = public_subnet
        __props__.__dict__["public_vlan_id"] = public_vlan_id
        __props__.__dict__["quote_id"] = quote_id
        __props__.__dict__["redundant_network"] = redundant_network
        __props__.__dict__["redundant_power_supply"] = redundant_power_supply
        __props__.__dict__["restricted_network"] = restricted_network
        __props__.__dict__["secondary_ip_addresses"] = secondary_ip_addresses
        __props__.__dict__["secondary_ip_count"] = secondary_ip_count
        __props__.__dict__["software_guard_extensions"] = software_guard_extensions
        __props__.__dict__["ssh_key_ids"] = ssh_key_ids
        __props__.__dict__["storage_groups"] = storage_groups
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tcp_monitoring"] = tcp_monitoring
        __props__.__dict__["unbonded_network"] = unbonded_network
        __props__.__dict__["user_metadata"] = user_metadata
        return ComputeBareMetal(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="blockStorageIds")
    def block_storage_ids(self) -> pulumi.Output[Sequence[_builtins.float]]:
        return pulumi.get(self, "block_storage_ids")

    @_builtins.property
    @pulumi.getter(name="computeBareMetalId")
    def compute_bare_metal_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "compute_bare_metal_id")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter(name="diskKeyNames")
    def disk_key_names(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "disk_key_names")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Output[_builtins.str]:
        """
        Domain name
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="extendedHardwareTesting")
    def extended_hardware_testing(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "extended_hardware_testing")

    @_builtins.property
    @pulumi.getter(name="fileStorageIds")
    def file_storage_ids(self) -> pulumi.Output[Sequence[_builtins.float]]:
        return pulumi.get(self, "file_storage_ids")

    @_builtins.property
    @pulumi.getter(name="fixedConfigPreset")
    def fixed_config_preset(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Fixed config preset value
        """
        return pulumi.get(self, "fixed_config_preset")

    @_builtins.property
    @pulumi.getter(name="globalIdentifier")
    def global_identifier(self) -> pulumi.Output[_builtins.str]:
        """
        The unique global identifier of the bare metal server
        """
        return pulumi.get(self, "global_identifier")

    @_builtins.property
    @pulumi.getter(name="gpuKeyName")
    def gpu_key_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "gpu_key_name")

    @_builtins.property
    @pulumi.getter(name="gpuSecondaryKeyName")
    def gpu_secondary_key_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "gpu_secondary_key_name")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Host name
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enables hourly billing
        """
        return pulumi.get(self, "hourly_billing")

    @_builtins.property
    @pulumi.getter(name="imageTemplateId")
    def image_template_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        OS image template ID
        """
        return pulumi.get(self, "image_template_id")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressId")
    def ipv6_address_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "ipv6_address_id")

    @_builtins.property
    @pulumi.getter(name="ipv6Enabled")
    def ipv6_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Boolean value true if IPV6 ia enabled or false
        """
        return pulumi.get(self, "ipv6_enabled")

    @_builtins.property
    @pulumi.getter(name="ipv6StaticEnabled")
    def ipv6_static_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        boolean value true if ipv6 static is enabled else false
        """
        return pulumi.get(self, "ipv6_static_enabled")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="networkSpeed")
    def network_speed(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Network speed in MBPS
        """
        return pulumi.get(self, "network_speed")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional notes info
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="osKeyName")
    def os_key_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "os_key_name")

    @_builtins.property
    @pulumi.getter(name="osReferenceCode")
    def os_reference_code(self) -> pulumi.Output[_builtins.str]:
        """
        OS refernece code value
        """
        return pulumi.get(self, "os_reference_code")

    @_builtins.property
    @pulumi.getter(name="packageKeyName")
    def package_key_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "package_key_name")

    @_builtins.property
    @pulumi.getter(name="postInstallScriptUri")
    def post_install_script_uri(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "post_install_script_uri")

    @_builtins.property
    @pulumi.getter(name="privateIpv4Address")
    def private_ipv4_address(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "private_ipv4_address")

    @_builtins.property
    @pulumi.getter(name="privateIpv4AddressId")
    def private_ipv4_address_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "private_ipv4_address_id")

    @_builtins.property
    @pulumi.getter(name="privateNetworkOnly")
    def private_network_only(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        only private network configured if is true
        """
        return pulumi.get(self, "private_network_only")

    @_builtins.property
    @pulumi.getter(name="privateSubnet")
    def private_subnet(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "private_subnet")

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "private_vlan_id")

    @_builtins.property
    @pulumi.getter(name="processKeyName")
    def process_key_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "process_key_name")

    @_builtins.property
    @pulumi.getter(name="publicBandwidth")
    def public_bandwidth(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "public_bandwidth")

    @_builtins.property
    @pulumi.getter(name="publicIpv4Address")
    def public_ipv4_address(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "public_ipv4_address")

    @_builtins.property
    @pulumi.getter(name="publicIpv4AddressId")
    def public_ipv4_address_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "public_ipv4_address_id")

    @_builtins.property
    @pulumi.getter(name="publicSubnet")
    def public_subnet(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "public_subnet")

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "public_vlan_id")

    @_builtins.property
    @pulumi.getter(name="quoteId")
    def quote_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Quote ID for Quote based provisioning
        """
        return pulumi.get(self, "quote_id")

    @_builtins.property
    @pulumi.getter(name="redundantNetwork")
    def redundant_network(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "redundant_network")

    @_builtins.property
    @pulumi.getter(name="redundantPowerSupply")
    def redundant_power_supply(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "redundant_power_supply")

    @_builtins.property
    @pulumi.getter(name="restrictedNetwork")
    def restricted_network(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "restricted_network")

    @_builtins.property
    @pulumi.getter(name="secondaryIpAddresses")
    def secondary_ip_addresses(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "secondary_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="secondaryIpCount")
    def secondary_ip_count(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Secondary IP addresses count
        """
        return pulumi.get(self, "secondary_ip_count")

    @_builtins.property
    @pulumi.getter(name="softwareGuardExtensions")
    def software_guard_extensions(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "software_guard_extensions")

    @_builtins.property
    @pulumi.getter(name="sshKeyIds")
    def ssh_key_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.float]]]:
        """
        SSH KEY IDS list
        """
        return pulumi.get(self, "ssh_key_ids")

    @_builtins.property
    @pulumi.getter(name="storageGroups")
    def storage_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ComputeBareMetalStorageGroup']]]:
        return pulumi.get(self, "storage_groups")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tcpMonitoring")
    def tcp_monitoring(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        TCP monitoring enabled if set as true
        """
        return pulumi.get(self, "tcp_monitoring")

    @_builtins.property
    @pulumi.getter(name="unbondedNetwork")
    def unbonded_network(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "unbonded_network")

    @_builtins.property
    @pulumi.getter(name="userMetadata")
    def user_metadata(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        User metadata info
        """
        return pulumi.get(self, "user_metadata")

