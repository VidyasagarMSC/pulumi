# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiSppPlacementGroupResult',
    'AwaitableGetPiSppPlacementGroupResult',
    'get_pi_spp_placement_group',
    'get_pi_spp_placement_group_output',
]

@pulumi.output_type
class GetPiSppPlacementGroupResult:
    """
    A collection of values returned by getPiSppPlacementGroup.
    """
    def __init__(__self__, crn=None, id=None, members=None, name=None, pi_cloud_instance_id=None, pi_spp_placement_group_id=None, policy=None, user_tags=None):
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_spp_placement_group_id and not isinstance(pi_spp_placement_group_id, str):
            raise TypeError("Expected argument 'pi_spp_placement_group_id' to be a str")
        pulumi.set(__self__, "pi_spp_placement_group_id", pi_spp_placement_group_id)
        if policy and not isinstance(policy, str):
            raise TypeError("Expected argument 'policy' to be a str")
        pulumi.set(__self__, "policy", policy)
        if user_tags and not isinstance(user_tags, list):
            raise TypeError("Expected argument 'user_tags' to be a list")
        pulumi.set(__self__, "user_tags", user_tags)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def members(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piSppPlacementGroupId")
    def pi_spp_placement_group_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_spp_placement_group_id")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> _builtins.str:
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "user_tags")


class AwaitableGetPiSppPlacementGroupResult(GetPiSppPlacementGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiSppPlacementGroupResult(
            crn=self.crn,
            id=self.id,
            members=self.members,
            name=self.name,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_spp_placement_group_id=self.pi_spp_placement_group_id,
            policy=self.policy,
            user_tags=self.user_tags)


def get_pi_spp_placement_group(id: Optional[_builtins.str] = None,
                               pi_cloud_instance_id: Optional[_builtins.str] = None,
                               pi_spp_placement_group_id: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiSppPlacementGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piSppPlacementGroupId'] = pi_spp_placement_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiSppPlacementGroup:getPiSppPlacementGroup', __args__, opts=opts, typ=GetPiSppPlacementGroupResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiSppPlacementGroupResult(
        crn=pulumi.get(__ret__, 'crn'),
        id=pulumi.get(__ret__, 'id'),
        members=pulumi.get(__ret__, 'members'),
        name=pulumi.get(__ret__, 'name'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_spp_placement_group_id=pulumi.get(__ret__, 'pi_spp_placement_group_id'),
        policy=pulumi.get(__ret__, 'policy'),
        user_tags=pulumi.get(__ret__, 'user_tags'))
def get_pi_spp_placement_group_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      pi_spp_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiSppPlacementGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piSppPlacementGroupId'] = pi_spp_placement_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiSppPlacementGroup:getPiSppPlacementGroup', __args__, opts=opts, typ=GetPiSppPlacementGroupResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiSppPlacementGroupResult(
        crn=pulumi.get(__response__, 'crn'),
        id=pulumi.get(__response__, 'id'),
        members=pulumi.get(__response__, 'members'),
        name=pulumi.get(__response__, 'name'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_spp_placement_group_id=pulumi.get(__response__, 'pi_spp_placement_group_id'),
        policy=pulumi.get(__response__, 'policy'),
        user_tags=pulumi.get(__response__, 'user_tags')))
