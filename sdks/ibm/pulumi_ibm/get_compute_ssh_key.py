# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetComputeSshKeyResult',
    'AwaitableGetComputeSshKeyResult',
    'get_compute_ssh_key',
    'get_compute_ssh_key_output',
]

@pulumi.output_type
class GetComputeSshKeyResult:
    """
    A collection of values returned by getComputeSshKey.
    """
    def __init__(__self__, fingerprint=None, id=None, label=None, most_recent=None, notes=None, public_key=None):
        if fingerprint and not isinstance(fingerprint, str):
            raise TypeError("Expected argument 'fingerprint' to be a str")
        pulumi.set(__self__, "fingerprint", fingerprint)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if most_recent and not isinstance(most_recent, bool):
            raise TypeError("Expected argument 'most_recent' to be a bool")
        pulumi.set(__self__, "most_recent", most_recent)
        if notes and not isinstance(notes, str):
            raise TypeError("Expected argument 'notes' to be a str")
        pulumi.set(__self__, "notes", notes)
        if public_key and not isinstance(public_key, str):
            raise TypeError("Expected argument 'public_key' to be a str")
        pulumi.set(__self__, "public_key", public_key)

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> _builtins.str:
        return pulumi.get(self, "fingerprint")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="mostRecent")
    def most_recent(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "most_recent")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> _builtins.str:
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> _builtins.str:
        return pulumi.get(self, "public_key")


class AwaitableGetComputeSshKeyResult(GetComputeSshKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeSshKeyResult(
            fingerprint=self.fingerprint,
            id=self.id,
            label=self.label,
            most_recent=self.most_recent,
            notes=self.notes,
            public_key=self.public_key)


def get_compute_ssh_key(id: Optional[_builtins.str] = None,
                        label: Optional[_builtins.str] = None,
                        most_recent: Optional[_builtins.bool] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeSshKeyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['label'] = label
    __args__['mostRecent'] = most_recent
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getComputeSshKey:getComputeSshKey', __args__, opts=opts, typ=GetComputeSshKeyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetComputeSshKeyResult(
        fingerprint=pulumi.get(__ret__, 'fingerprint'),
        id=pulumi.get(__ret__, 'id'),
        label=pulumi.get(__ret__, 'label'),
        most_recent=pulumi.get(__ret__, 'most_recent'),
        notes=pulumi.get(__ret__, 'notes'),
        public_key=pulumi.get(__ret__, 'public_key'))
def get_compute_ssh_key_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               label: Optional[pulumi.Input[_builtins.str]] = None,
                               most_recent: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComputeSshKeyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['label'] = label
    __args__['mostRecent'] = most_recent
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getComputeSshKey:getComputeSshKey', __args__, opts=opts, typ=GetComputeSshKeyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetComputeSshKeyResult(
        fingerprint=pulumi.get(__response__, 'fingerprint'),
        id=pulumi.get(__response__, 'id'),
        label=pulumi.get(__response__, 'label'),
        most_recent=pulumi.get(__response__, 'most_recent'),
        notes=pulumi.get(__response__, 'notes'),
        public_key=pulumi.get(__response__, 'public_key')))
