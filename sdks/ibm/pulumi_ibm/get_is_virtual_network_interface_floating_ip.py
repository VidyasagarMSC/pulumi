# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetIsVirtualNetworkInterfaceFloatingIpResult',
    'AwaitableGetIsVirtualNetworkInterfaceFloatingIpResult',
    'get_is_virtual_network_interface_floating_ip',
    'get_is_virtual_network_interface_floating_ip_output',
]

@pulumi.output_type
class GetIsVirtualNetworkInterfaceFloatingIpResult:
    """
    A collection of values returned by getIsVirtualNetworkInterfaceFloatingIp.
    """
    def __init__(__self__, address=None, crn=None, deleteds=None, floating_ip=None, href=None, id=None, name=None, virtual_network_interface=None):
        if address and not isinstance(address, str):
            raise TypeError("Expected argument 'address' to be a str")
        pulumi.set(__self__, "address", address)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if deleteds and not isinstance(deleteds, list):
            raise TypeError("Expected argument 'deleteds' to be a list")
        pulumi.set(__self__, "deleteds", deleteds)
        if floating_ip and not isinstance(floating_ip, str):
            raise TypeError("Expected argument 'floating_ip' to be a str")
        pulumi.set(__self__, "floating_ip", floating_ip)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if virtual_network_interface and not isinstance(virtual_network_interface, str):
            raise TypeError("Expected argument 'virtual_network_interface' to be a str")
        pulumi.set(__self__, "virtual_network_interface", virtual_network_interface)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def deleteds(self) -> Optional[Sequence['outputs.GetIsVirtualNetworkInterfaceFloatingIpDeletedResult']]:
        return pulumi.get(self, "deleteds")

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> _builtins.str:
        return pulumi.get(self, "floating_ip")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> _builtins.str:
        return pulumi.get(self, "virtual_network_interface")


class AwaitableGetIsVirtualNetworkInterfaceFloatingIpResult(GetIsVirtualNetworkInterfaceFloatingIpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVirtualNetworkInterfaceFloatingIpResult(
            address=self.address,
            crn=self.crn,
            deleteds=self.deleteds,
            floating_ip=self.floating_ip,
            href=self.href,
            id=self.id,
            name=self.name,
            virtual_network_interface=self.virtual_network_interface)


def get_is_virtual_network_interface_floating_ip(deleteds: Optional[Sequence[Union['GetIsVirtualNetworkInterfaceFloatingIpDeletedArgs', 'GetIsVirtualNetworkInterfaceFloatingIpDeletedArgsDict']]] = None,
                                                 floating_ip: Optional[_builtins.str] = None,
                                                 id: Optional[_builtins.str] = None,
                                                 virtual_network_interface: Optional[_builtins.str] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVirtualNetworkInterfaceFloatingIpResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deleteds'] = deleteds
    __args__['floatingIp'] = floating_ip
    __args__['id'] = id
    __args__['virtualNetworkInterface'] = virtual_network_interface
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVirtualNetworkInterfaceFloatingIp:getIsVirtualNetworkInterfaceFloatingIp', __args__, opts=opts, typ=GetIsVirtualNetworkInterfaceFloatingIpResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVirtualNetworkInterfaceFloatingIpResult(
        address=pulumi.get(__ret__, 'address'),
        crn=pulumi.get(__ret__, 'crn'),
        deleteds=pulumi.get(__ret__, 'deleteds'),
        floating_ip=pulumi.get(__ret__, 'floating_ip'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        virtual_network_interface=pulumi.get(__ret__, 'virtual_network_interface'))
def get_is_virtual_network_interface_floating_ip_output(deleteds: Optional[pulumi.Input[Optional[Sequence[Union['GetIsVirtualNetworkInterfaceFloatingIpDeletedArgs', 'GetIsVirtualNetworkInterfaceFloatingIpDeletedArgsDict']]]]] = None,
                                                        floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
                                                        id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        virtual_network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVirtualNetworkInterfaceFloatingIpResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deleteds'] = deleteds
    __args__['floatingIp'] = floating_ip
    __args__['id'] = id
    __args__['virtualNetworkInterface'] = virtual_network_interface
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVirtualNetworkInterfaceFloatingIp:getIsVirtualNetworkInterfaceFloatingIp', __args__, opts=opts, typ=GetIsVirtualNetworkInterfaceFloatingIpResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVirtualNetworkInterfaceFloatingIpResult(
        address=pulumi.get(__response__, 'address'),
        crn=pulumi.get(__response__, 'crn'),
        deleteds=pulumi.get(__response__, 'deleteds'),
        floating_ip=pulumi.get(__response__, 'floating_ip'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        virtual_network_interface=pulumi.get(__response__, 'virtual_network_interface')))
