# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DnsCustomResolverForwardingRuleArgs', 'DnsCustomResolverForwardingRule']

@pulumi.input_type
class DnsCustomResolverForwardingRuleArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 resolver_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_custom_resolver_forwarding_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 forward_tos: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 match: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 views: Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverForwardingRuleViewArgs']]]] = None):
        """
        The set of arguments for constructing a DnsCustomResolverForwardingRule resource.
        :param pulumi.Input[_builtins.str] instance_id: The unique identifier of a service instance.
        :param pulumi.Input[_builtins.str] resolver_id: The unique identifier of a custom resolver.
        :param pulumi.Input[_builtins.str] description: Descriptive text of the forwarding rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] forward_tos: The upstream DNS servers will be forwarded to.
        :param pulumi.Input[_builtins.str] match: The matching zone or hostname.
        :param pulumi.Input[_builtins.str] type: Type of the forwarding rule.
        :param pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverForwardingRuleViewArgs']]] views: An array of views used by forwarding rules.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "resolver_id", resolver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_custom_resolver_forwarding_rule_id is not None:
            pulumi.set(__self__, "dns_custom_resolver_forwarding_rule_id", dns_custom_resolver_forwarding_rule_id)
        if forward_tos is not None:
            pulumi.set(__self__, "forward_tos", forward_tos)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if views is not None:
            pulumi.set(__self__, "views", views)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of a service instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="resolverId")
    def resolver_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of a custom resolver.
        """
        return pulumi.get(self, "resolver_id")

    @resolver_id.setter
    def resolver_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resolver_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Descriptive text of the forwarding rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dnsCustomResolverForwardingRuleId")
    def dns_custom_resolver_forwarding_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_custom_resolver_forwarding_rule_id")

    @dns_custom_resolver_forwarding_rule_id.setter
    def dns_custom_resolver_forwarding_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_custom_resolver_forwarding_rule_id", value)

    @_builtins.property
    @pulumi.getter(name="forwardTos")
    def forward_tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The upstream DNS servers will be forwarded to.
        """
        return pulumi.get(self, "forward_tos")

    @forward_tos.setter
    def forward_tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "forward_tos", value)

    @_builtins.property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The matching zone or hostname.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "match", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the forwarding rule.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def views(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverForwardingRuleViewArgs']]]]:
        """
        An array of views used by forwarding rules.
        """
        return pulumi.get(self, "views")

    @views.setter
    def views(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverForwardingRuleViewArgs']]]]):
        pulumi.set(self, "views", value)


@pulumi.input_type
class _DnsCustomResolverForwardingRuleState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_custom_resolver_forwarding_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 forward_tos: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match: Optional[pulumi.Input[_builtins.str]] = None,
                 resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 views: Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverForwardingRuleViewArgs']]]] = None):
        """
        Input properties used for looking up and filtering DnsCustomResolverForwardingRule resources.
        :param pulumi.Input[_builtins.str] description: Descriptive text of the forwarding rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] forward_tos: The upstream DNS servers will be forwarded to.
        :param pulumi.Input[_builtins.str] instance_id: The unique identifier of a service instance.
        :param pulumi.Input[_builtins.str] match: The matching zone or hostname.
        :param pulumi.Input[_builtins.str] resolver_id: The unique identifier of a custom resolver.
        :param pulumi.Input[_builtins.str] rule_id: the time when a forwarding rule ID is created, RFC3339 format.
        :param pulumi.Input[_builtins.str] type: Type of the forwarding rule.
        :param pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverForwardingRuleViewArgs']]] views: An array of views used by forwarding rules.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_custom_resolver_forwarding_rule_id is not None:
            pulumi.set(__self__, "dns_custom_resolver_forwarding_rule_id", dns_custom_resolver_forwarding_rule_id)
        if forward_tos is not None:
            pulumi.set(__self__, "forward_tos", forward_tos)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if resolver_id is not None:
            pulumi.set(__self__, "resolver_id", resolver_id)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if views is not None:
            pulumi.set(__self__, "views", views)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Descriptive text of the forwarding rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dnsCustomResolverForwardingRuleId")
    def dns_custom_resolver_forwarding_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_custom_resolver_forwarding_rule_id")

    @dns_custom_resolver_forwarding_rule_id.setter
    def dns_custom_resolver_forwarding_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_custom_resolver_forwarding_rule_id", value)

    @_builtins.property
    @pulumi.getter(name="forwardTos")
    def forward_tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The upstream DNS servers will be forwarded to.
        """
        return pulumi.get(self, "forward_tos")

    @forward_tos.setter
    def forward_tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "forward_tos", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of a service instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The matching zone or hostname.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "match", value)

    @_builtins.property
    @pulumi.getter(name="resolverId")
    def resolver_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of a custom resolver.
        """
        return pulumi.get(self, "resolver_id")

    @resolver_id.setter
    def resolver_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resolver_id", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        the time when a forwarding rule ID is created, RFC3339 format.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the forwarding rule.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def views(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverForwardingRuleViewArgs']]]]:
        """
        An array of views used by forwarding rules.
        """
        return pulumi.get(self, "views")

    @views.setter
    def views(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverForwardingRuleViewArgs']]]]):
        pulumi.set(self, "views", value)


@pulumi.type_token("ibm:index/dnsCustomResolverForwardingRule:DnsCustomResolverForwardingRule")
class DnsCustomResolverForwardingRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_custom_resolver_forwarding_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 forward_tos: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match: Optional[pulumi.Input[_builtins.str]] = None,
                 resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 views: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsCustomResolverForwardingRuleViewArgs', 'DnsCustomResolverForwardingRuleViewArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a DnsCustomResolverForwardingRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Descriptive text of the forwarding rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] forward_tos: The upstream DNS servers will be forwarded to.
        :param pulumi.Input[_builtins.str] instance_id: The unique identifier of a service instance.
        :param pulumi.Input[_builtins.str] match: The matching zone or hostname.
        :param pulumi.Input[_builtins.str] resolver_id: The unique identifier of a custom resolver.
        :param pulumi.Input[_builtins.str] type: Type of the forwarding rule.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DnsCustomResolverForwardingRuleViewArgs', 'DnsCustomResolverForwardingRuleViewArgsDict']]]] views: An array of views used by forwarding rules.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsCustomResolverForwardingRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsCustomResolverForwardingRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsCustomResolverForwardingRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsCustomResolverForwardingRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_custom_resolver_forwarding_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 forward_tos: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match: Optional[pulumi.Input[_builtins.str]] = None,
                 resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 views: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsCustomResolverForwardingRuleViewArgs', 'DnsCustomResolverForwardingRuleViewArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsCustomResolverForwardingRuleArgs.__new__(DnsCustomResolverForwardingRuleArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dns_custom_resolver_forwarding_rule_id"] = dns_custom_resolver_forwarding_rule_id
            __props__.__dict__["forward_tos"] = forward_tos
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["match"] = match
            if resolver_id is None and not opts.urn:
                raise TypeError("Missing required property 'resolver_id'")
            __props__.__dict__["resolver_id"] = resolver_id
            __props__.__dict__["type"] = type
            __props__.__dict__["views"] = views
            __props__.__dict__["rule_id"] = None
        super(DnsCustomResolverForwardingRule, __self__).__init__(
            'ibm:index/dnsCustomResolverForwardingRule:DnsCustomResolverForwardingRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dns_custom_resolver_forwarding_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            forward_tos: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            match: Optional[pulumi.Input[_builtins.str]] = None,
            resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
            rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            views: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsCustomResolverForwardingRuleViewArgs', 'DnsCustomResolverForwardingRuleViewArgsDict']]]]] = None) -> 'DnsCustomResolverForwardingRule':
        """
        Get an existing DnsCustomResolverForwardingRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Descriptive text of the forwarding rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] forward_tos: The upstream DNS servers will be forwarded to.
        :param pulumi.Input[_builtins.str] instance_id: The unique identifier of a service instance.
        :param pulumi.Input[_builtins.str] match: The matching zone or hostname.
        :param pulumi.Input[_builtins.str] resolver_id: The unique identifier of a custom resolver.
        :param pulumi.Input[_builtins.str] rule_id: the time when a forwarding rule ID is created, RFC3339 format.
        :param pulumi.Input[_builtins.str] type: Type of the forwarding rule.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DnsCustomResolverForwardingRuleViewArgs', 'DnsCustomResolverForwardingRuleViewArgsDict']]]] views: An array of views used by forwarding rules.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsCustomResolverForwardingRuleState.__new__(_DnsCustomResolverForwardingRuleState)

        __props__.__dict__["description"] = description
        __props__.__dict__["dns_custom_resolver_forwarding_rule_id"] = dns_custom_resolver_forwarding_rule_id
        __props__.__dict__["forward_tos"] = forward_tos
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["match"] = match
        __props__.__dict__["resolver_id"] = resolver_id
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["type"] = type
        __props__.__dict__["views"] = views
        return DnsCustomResolverForwardingRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Descriptive text of the forwarding rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dnsCustomResolverForwardingRuleId")
    def dns_custom_resolver_forwarding_rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dns_custom_resolver_forwarding_rule_id")

    @_builtins.property
    @pulumi.getter(name="forwardTos")
    def forward_tos(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The upstream DNS servers will be forwarded to.
        """
        return pulumi.get(self, "forward_tos")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of a service instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def match(self) -> pulumi.Output[_builtins.str]:
        """
        The matching zone or hostname.
        """
        return pulumi.get(self, "match")

    @_builtins.property
    @pulumi.getter(name="resolverId")
    def resolver_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of a custom resolver.
        """
        return pulumi.get(self, "resolver_id")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[_builtins.str]:
        """
        the time when a forwarding rule ID is created, RFC3339 format.
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Type of the forwarding rule.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def views(self) -> pulumi.Output[Optional[Sequence['outputs.DnsCustomResolverForwardingRuleView']]]:
        """
        An array of views used by forwarding rules.
        """
        return pulumi.get(self, "views")

