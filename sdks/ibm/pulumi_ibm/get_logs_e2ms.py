# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLogsE2msResult',
    'AwaitableGetLogsE2msResult',
    'get_logs_e2ms',
    'get_logs_e2ms_output',
]

@pulumi.output_type
class GetLogsE2msResult:
    """
    A collection of values returned by getLogsE2ms.
    """
    def __init__(__self__, endpoint_type=None, events2metrics=None, id=None, instance_id=None, region=None):
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if events2metrics and not isinstance(events2metrics, list):
            raise TypeError("Expected argument 'events2metrics' to be a list")
        pulumi.set(__self__, "events2metrics", events2metrics)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def events2metrics(self) -> Sequence['outputs.GetLogsE2msEvents2metricResult']:
        return pulumi.get(self, "events2metrics")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetLogsE2msResult(GetLogsE2msResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogsE2msResult(
            endpoint_type=self.endpoint_type,
            events2metrics=self.events2metrics,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region)


def get_logs_e2ms(endpoint_type: Optional[_builtins.str] = None,
                  id: Optional[_builtins.str] = None,
                  instance_id: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogsE2msResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getLogsE2ms:getLogsE2ms', __args__, opts=opts, typ=GetLogsE2msResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLogsE2msResult(
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        events2metrics=pulumi.get(__ret__, 'events2metrics'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'))
def get_logs_e2ms_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogsE2msResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getLogsE2ms:getLogsE2ms', __args__, opts=opts, typ=GetLogsE2msResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLogsE2msResult(
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        events2metrics=pulumi.get(__response__, 'events2metrics'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region')))
