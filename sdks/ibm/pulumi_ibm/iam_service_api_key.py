# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IamServiceApiKeyArgs', 'IamServiceApiKey']

@pulumi.input_type
class IamServiceApiKeyArgs:
    def __init__(__self__, *,
                 iam_service_id: pulumi.Input[_builtins.str],
                 apikey: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_api_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 store_value: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a IamServiceApiKey resource.
        :param pulumi.Input[_builtins.str] iam_service_id: The service iam_id that this API key authenticates
        :param pulumi.Input[_builtins.str] apikey: API key value for this API key
        :param pulumi.Input[_builtins.str] description: description of the API key
        :param pulumi.Input[_builtins.str] file: File where api key is to be stored
        :param pulumi.Input[_builtins.bool] locked: The API key cannot be changed if set to true
        :param pulumi.Input[_builtins.str] name: Name of the Service API key
        :param pulumi.Input[_builtins.bool] store_value: Boolean value deciding whether API key value is retrievable in the future
        """
        pulumi.set(__self__, "iam_service_id", iam_service_id)
        if apikey is not None:
            pulumi.set(__self__, "apikey", apikey)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if iam_service_api_key_id is not None:
            pulumi.set(__self__, "iam_service_api_key_id", iam_service_api_key_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if store_value is not None:
            pulumi.set(__self__, "store_value", store_value)

    @_builtins.property
    @pulumi.getter(name="iamServiceId")
    def iam_service_id(self) -> pulumi.Input[_builtins.str]:
        """
        The service iam_id that this API key authenticates
        """
        return pulumi.get(self, "iam_service_id")

    @iam_service_id.setter
    def iam_service_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "iam_service_id", value)

    @_builtins.property
    @pulumi.getter
    def apikey(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API key value for this API key
        """
        return pulumi.get(self, "apikey")

    @apikey.setter
    def apikey(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apikey", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        description of the API key
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        File where api key is to be stored
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file", value)

    @_builtins.property
    @pulumi.getter(name="iamServiceApiKeyId")
    def iam_service_api_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_service_api_key_id")

    @iam_service_api_key_id.setter
    def iam_service_api_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_service_api_key_id", value)

    @_builtins.property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The API key cannot be changed if set to true
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "locked", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Service API key
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="storeValue")
    def store_value(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value deciding whether API key value is retrievable in the future
        """
        return pulumi.get(self, "store_value")

    @store_value.setter
    def store_value(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "store_value", value)


@pulumi.input_type
class _IamServiceApiKeyState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apikey: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_api_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 modified_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 store_value: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering IamServiceApiKey resources.
        :param pulumi.Input[_builtins.str] account_id: The account ID of the API key
        :param pulumi.Input[_builtins.str] apikey: API key value for this API key
        :param pulumi.Input[_builtins.str] created_at: The date and time Service API Key was created
        :param pulumi.Input[_builtins.str] created_by: IAM ID of the service which created the API key
        :param pulumi.Input[_builtins.str] crn: crn of the Service API Key
        :param pulumi.Input[_builtins.str] description: description of the API key
        :param pulumi.Input[_builtins.str] entity_tag: Version of the API Key details object
        :param pulumi.Input[_builtins.str] file: File where api key is to be stored
        :param pulumi.Input[_builtins.str] iam_service_id: The service iam_id that this API key authenticates
        :param pulumi.Input[_builtins.bool] locked: The API key cannot be changed if set to true
        :param pulumi.Input[_builtins.str] modified_at: The date and time Service API Key was modified
        :param pulumi.Input[_builtins.str] name: Name of the Service API key
        :param pulumi.Input[_builtins.bool] store_value: Boolean value deciding whether API key value is retrievable in the future
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if apikey is not None:
            pulumi.set(__self__, "apikey", apikey)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if iam_service_api_key_id is not None:
            pulumi.set(__self__, "iam_service_api_key_id", iam_service_api_key_id)
        if iam_service_id is not None:
            pulumi.set(__self__, "iam_service_id", iam_service_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modified_at is not None:
            pulumi.set(__self__, "modified_at", modified_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if store_value is not None:
            pulumi.set(__self__, "store_value", store_value)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account ID of the API key
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter
    def apikey(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API key value for this API key
        """
        return pulumi.get(self, "apikey")

    @apikey.setter
    def apikey(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apikey", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time Service API Key was created
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IAM ID of the service which created the API key
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        crn of the Service API Key
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        description of the API key
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the API Key details object
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        File where api key is to be stored
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file", value)

    @_builtins.property
    @pulumi.getter(name="iamServiceApiKeyId")
    def iam_service_api_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_service_api_key_id")

    @iam_service_api_key_id.setter
    def iam_service_api_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_service_api_key_id", value)

    @_builtins.property
    @pulumi.getter(name="iamServiceId")
    def iam_service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The service iam_id that this API key authenticates
        """
        return pulumi.get(self, "iam_service_id")

    @iam_service_id.setter
    def iam_service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_service_id", value)

    @_builtins.property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The API key cannot be changed if set to true
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "locked", value)

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time Service API Key was modified
        """
        return pulumi.get(self, "modified_at")

    @modified_at.setter
    def modified_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Service API key
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="storeValue")
    def store_value(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value deciding whether API key value is retrievable in the future
        """
        return pulumi.get(self, "store_value")

    @store_value.setter
    def store_value(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "store_value", value)


@pulumi.type_token("ibm:index/iamServiceApiKey:IamServiceApiKey")
class IamServiceApiKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apikey: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_api_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 store_value: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a IamServiceApiKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] apikey: API key value for this API key
        :param pulumi.Input[_builtins.str] description: description of the API key
        :param pulumi.Input[_builtins.str] file: File where api key is to be stored
        :param pulumi.Input[_builtins.str] iam_service_id: The service iam_id that this API key authenticates
        :param pulumi.Input[_builtins.bool] locked: The API key cannot be changed if set to true
        :param pulumi.Input[_builtins.str] name: Name of the Service API key
        :param pulumi.Input[_builtins.bool] store_value: Boolean value deciding whether API key value is retrievable in the future
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamServiceApiKeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamServiceApiKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamServiceApiKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamServiceApiKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apikey: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_api_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 store_value: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamServiceApiKeyArgs.__new__(IamServiceApiKeyArgs)

            __props__.__dict__["apikey"] = None if apikey is None else pulumi.Output.secret(apikey)
            __props__.__dict__["description"] = description
            __props__.__dict__["file"] = file
            __props__.__dict__["iam_service_api_key_id"] = iam_service_api_key_id
            if iam_service_id is None and not opts.urn:
                raise TypeError("Missing required property 'iam_service_id'")
            __props__.__dict__["iam_service_id"] = iam_service_id
            __props__.__dict__["locked"] = locked
            __props__.__dict__["name"] = name
            __props__.__dict__["store_value"] = store_value
            __props__.__dict__["account_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["entity_tag"] = None
            __props__.__dict__["modified_at"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apikey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(IamServiceApiKey, __self__).__init__(
            'ibm:index/iamServiceApiKey:IamServiceApiKey',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            apikey: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
            file: Optional[pulumi.Input[_builtins.str]] = None,
            iam_service_api_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            iam_service_id: Optional[pulumi.Input[_builtins.str]] = None,
            locked: Optional[pulumi.Input[_builtins.bool]] = None,
            modified_at: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            store_value: Optional[pulumi.Input[_builtins.bool]] = None) -> 'IamServiceApiKey':
        """
        Get an existing IamServiceApiKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: The account ID of the API key
        :param pulumi.Input[_builtins.str] apikey: API key value for this API key
        :param pulumi.Input[_builtins.str] created_at: The date and time Service API Key was created
        :param pulumi.Input[_builtins.str] created_by: IAM ID of the service which created the API key
        :param pulumi.Input[_builtins.str] crn: crn of the Service API Key
        :param pulumi.Input[_builtins.str] description: description of the API key
        :param pulumi.Input[_builtins.str] entity_tag: Version of the API Key details object
        :param pulumi.Input[_builtins.str] file: File where api key is to be stored
        :param pulumi.Input[_builtins.str] iam_service_id: The service iam_id that this API key authenticates
        :param pulumi.Input[_builtins.bool] locked: The API key cannot be changed if set to true
        :param pulumi.Input[_builtins.str] modified_at: The date and time Service API Key was modified
        :param pulumi.Input[_builtins.str] name: Name of the Service API key
        :param pulumi.Input[_builtins.bool] store_value: Boolean value deciding whether API key value is retrievable in the future
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamServiceApiKeyState.__new__(_IamServiceApiKeyState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["apikey"] = apikey
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["crn"] = crn
        __props__.__dict__["description"] = description
        __props__.__dict__["entity_tag"] = entity_tag
        __props__.__dict__["file"] = file
        __props__.__dict__["iam_service_api_key_id"] = iam_service_api_key_id
        __props__.__dict__["iam_service_id"] = iam_service_id
        __props__.__dict__["locked"] = locked
        __props__.__dict__["modified_at"] = modified_at
        __props__.__dict__["name"] = name
        __props__.__dict__["store_value"] = store_value
        return IamServiceApiKey(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The account ID of the API key
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def apikey(self) -> pulumi.Output[_builtins.str]:
        """
        API key value for this API key
        """
        return pulumi.get(self, "apikey")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time Service API Key was created
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        IAM ID of the service which created the API key
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        crn of the Service API Key
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        description of the API key
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> pulumi.Output[_builtins.str]:
        """
        Version of the API Key details object
        """
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def file(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        File where api key is to be stored
        """
        return pulumi.get(self, "file")

    @_builtins.property
    @pulumi.getter(name="iamServiceApiKeyId")
    def iam_service_api_key_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_service_api_key_id")

    @_builtins.property
    @pulumi.getter(name="iamServiceId")
    def iam_service_id(self) -> pulumi.Output[_builtins.str]:
        """
        The service iam_id that this API key authenticates
        """
        return pulumi.get(self, "iam_service_id")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        The API key cannot be changed if set to true
        """
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time Service API Key was modified
        """
        return pulumi.get(self, "modified_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Service API key
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="storeValue")
    def store_value(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Boolean value deciding whether API key value is retrievable in the future
        """
        return pulumi.get(self, "store_value")

