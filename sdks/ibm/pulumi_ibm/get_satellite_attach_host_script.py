# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSatelliteAttachHostScriptResult',
    'AwaitableGetSatelliteAttachHostScriptResult',
    'get_satellite_attach_host_script',
    'get_satellite_attach_host_script_output',
]

@pulumi.output_type
class GetSatelliteAttachHostScriptResult:
    """
    A collection of values returned by getSatelliteAttachHostScript.
    """
    def __init__(__self__, coreos_host=None, custom_script=None, description=None, host_link_agent_endpoint=None, host_provider=None, host_script=None, id=None, labels=None, location=None, script_dir=None, script_path=None):
        if coreos_host and not isinstance(coreos_host, bool):
            raise TypeError("Expected argument 'coreos_host' to be a bool")
        pulumi.set(__self__, "coreos_host", coreos_host)
        if custom_script and not isinstance(custom_script, str):
            raise TypeError("Expected argument 'custom_script' to be a str")
        pulumi.set(__self__, "custom_script", custom_script)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if host_link_agent_endpoint and not isinstance(host_link_agent_endpoint, str):
            raise TypeError("Expected argument 'host_link_agent_endpoint' to be a str")
        pulumi.set(__self__, "host_link_agent_endpoint", host_link_agent_endpoint)
        if host_provider and not isinstance(host_provider, str):
            raise TypeError("Expected argument 'host_provider' to be a str")
        pulumi.set(__self__, "host_provider", host_provider)
        if host_script and not isinstance(host_script, str):
            raise TypeError("Expected argument 'host_script' to be a str")
        pulumi.set(__self__, "host_script", host_script)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if script_dir and not isinstance(script_dir, str):
            raise TypeError("Expected argument 'script_dir' to be a str")
        pulumi.set(__self__, "script_dir", script_dir)
        if script_path and not isinstance(script_path, str):
            raise TypeError("Expected argument 'script_path' to be a str")
        pulumi.set(__self__, "script_path", script_path)

    @_builtins.property
    @pulumi.getter(name="coreosHost")
    def coreos_host(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "coreos_host")

    @_builtins.property
    @pulumi.getter(name="customScript")
    def custom_script(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "custom_script")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="hostLinkAgentEndpoint")
    def host_link_agent_endpoint(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_link_agent_endpoint")

    @_builtins.property
    @pulumi.getter(name="hostProvider")
    def host_provider(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_provider")

    @_builtins.property
    @pulumi.getter(name="hostScript")
    def host_script(self) -> _builtins.str:
        return pulumi.get(self, "host_script")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="scriptDir")
    def script_dir(self) -> _builtins.str:
        return pulumi.get(self, "script_dir")

    @_builtins.property
    @pulumi.getter(name="scriptPath")
    def script_path(self) -> _builtins.str:
        return pulumi.get(self, "script_path")


class AwaitableGetSatelliteAttachHostScriptResult(GetSatelliteAttachHostScriptResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSatelliteAttachHostScriptResult(
            coreos_host=self.coreos_host,
            custom_script=self.custom_script,
            description=self.description,
            host_link_agent_endpoint=self.host_link_agent_endpoint,
            host_provider=self.host_provider,
            host_script=self.host_script,
            id=self.id,
            labels=self.labels,
            location=self.location,
            script_dir=self.script_dir,
            script_path=self.script_path)


def get_satellite_attach_host_script(coreos_host: Optional[_builtins.bool] = None,
                                     custom_script: Optional[_builtins.str] = None,
                                     host_link_agent_endpoint: Optional[_builtins.str] = None,
                                     host_provider: Optional[_builtins.str] = None,
                                     id: Optional[_builtins.str] = None,
                                     labels: Optional[Sequence[_builtins.str]] = None,
                                     location: Optional[_builtins.str] = None,
                                     script_dir: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSatelliteAttachHostScriptResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['coreosHost'] = coreos_host
    __args__['customScript'] = custom_script
    __args__['hostLinkAgentEndpoint'] = host_link_agent_endpoint
    __args__['hostProvider'] = host_provider
    __args__['id'] = id
    __args__['labels'] = labels
    __args__['location'] = location
    __args__['scriptDir'] = script_dir
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSatelliteAttachHostScript:getSatelliteAttachHostScript', __args__, opts=opts, typ=GetSatelliteAttachHostScriptResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSatelliteAttachHostScriptResult(
        coreos_host=pulumi.get(__ret__, 'coreos_host'),
        custom_script=pulumi.get(__ret__, 'custom_script'),
        description=pulumi.get(__ret__, 'description'),
        host_link_agent_endpoint=pulumi.get(__ret__, 'host_link_agent_endpoint'),
        host_provider=pulumi.get(__ret__, 'host_provider'),
        host_script=pulumi.get(__ret__, 'host_script'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        location=pulumi.get(__ret__, 'location'),
        script_dir=pulumi.get(__ret__, 'script_dir'),
        script_path=pulumi.get(__ret__, 'script_path'))
def get_satellite_attach_host_script_output(coreos_host: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                            custom_script: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            host_link_agent_endpoint: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            host_provider: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            labels: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                            location: Optional[pulumi.Input[_builtins.str]] = None,
                                            script_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSatelliteAttachHostScriptResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['coreosHost'] = coreos_host
    __args__['customScript'] = custom_script
    __args__['hostLinkAgentEndpoint'] = host_link_agent_endpoint
    __args__['hostProvider'] = host_provider
    __args__['id'] = id
    __args__['labels'] = labels
    __args__['location'] = location
    __args__['scriptDir'] = script_dir
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSatelliteAttachHostScript:getSatelliteAttachHostScript', __args__, opts=opts, typ=GetSatelliteAttachHostScriptResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSatelliteAttachHostScriptResult(
        coreos_host=pulumi.get(__response__, 'coreos_host'),
        custom_script=pulumi.get(__response__, 'custom_script'),
        description=pulumi.get(__response__, 'description'),
        host_link_agent_endpoint=pulumi.get(__response__, 'host_link_agent_endpoint'),
        host_provider=pulumi.get(__response__, 'host_provider'),
        host_script=pulumi.get(__response__, 'host_script'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        location=pulumi.get(__response__, 'location'),
        script_dir=pulumi.get(__response__, 'script_dir'),
        script_path=pulumi.get(__response__, 'script_path')))
