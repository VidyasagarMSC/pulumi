# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CloudantDatabaseArgs', 'CloudantDatabase']

@pulumi.input_type
class CloudantDatabaseArgs:
    def __init__(__self__, *,
                 db: pulumi.Input[_builtins.str],
                 instance_crn: pulumi.Input[_builtins.str],
                 cloudant_database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 partitioned: Optional[pulumi.Input[_builtins.bool]] = None,
                 shards: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a CloudantDatabase resource.
        :param pulumi.Input[_builtins.str] db: Path parameter to specify the database name.
        :param pulumi.Input[_builtins.str] instance_crn: Cloudant Instance CRN.
        :param pulumi.Input[_builtins.bool] partitioned: Query parameter to specify whether to enable database partitions when creating a database.
        :param pulumi.Input[_builtins.float] shards: The number of shards in the database. Each shard is a partition of the hash value range. You are encouraged to talk to
               support about appropriate values before changing this.
        """
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "instance_crn", instance_crn)
        if cloudant_database_id is not None:
            pulumi.set(__self__, "cloudant_database_id", cloudant_database_id)
        if partitioned is not None:
            pulumi.set(__self__, "partitioned", partitioned)
        if shards is not None:
            pulumi.set(__self__, "shards", shards)

    @_builtins.property
    @pulumi.getter
    def db(self) -> pulumi.Input[_builtins.str]:
        """
        Path parameter to specify the database name.
        """
        return pulumi.get(self, "db")

    @db.setter
    def db(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "db", value)

    @_builtins.property
    @pulumi.getter(name="instanceCrn")
    def instance_crn(self) -> pulumi.Input[_builtins.str]:
        """
        Cloudant Instance CRN.
        """
        return pulumi.get(self, "instance_crn")

    @instance_crn.setter
    def instance_crn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_crn", value)

    @_builtins.property
    @pulumi.getter(name="cloudantDatabaseId")
    def cloudant_database_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cloudant_database_id")

    @cloudant_database_id.setter
    def cloudant_database_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloudant_database_id", value)

    @_builtins.property
    @pulumi.getter
    def partitioned(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Query parameter to specify whether to enable database partitions when creating a database.
        """
        return pulumi.get(self, "partitioned")

    @partitioned.setter
    def partitioned(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "partitioned", value)

    @_builtins.property
    @pulumi.getter
    def shards(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of shards in the database. Each shard is a partition of the hash value range. You are encouraged to talk to
        support about appropriate values before changing this.
        """
        return pulumi.get(self, "shards")

    @shards.setter
    def shards(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "shards", value)


@pulumi.input_type
class _CloudantDatabaseState:
    def __init__(__self__, *,
                 cloudant_database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 db: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 partitioned: Optional[pulumi.Input[_builtins.bool]] = None,
                 shards: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering CloudantDatabase resources.
        :param pulumi.Input[_builtins.str] db: Path parameter to specify the database name.
        :param pulumi.Input[_builtins.str] instance_crn: Cloudant Instance CRN.
        :param pulumi.Input[_builtins.bool] partitioned: Query parameter to specify whether to enable database partitions when creating a database.
        :param pulumi.Input[_builtins.float] shards: The number of shards in the database. Each shard is a partition of the hash value range. You are encouraged to talk to
               support about appropriate values before changing this.
        """
        if cloudant_database_id is not None:
            pulumi.set(__self__, "cloudant_database_id", cloudant_database_id)
        if db is not None:
            pulumi.set(__self__, "db", db)
        if instance_crn is not None:
            pulumi.set(__self__, "instance_crn", instance_crn)
        if partitioned is not None:
            pulumi.set(__self__, "partitioned", partitioned)
        if shards is not None:
            pulumi.set(__self__, "shards", shards)

    @_builtins.property
    @pulumi.getter(name="cloudantDatabaseId")
    def cloudant_database_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cloudant_database_id")

    @cloudant_database_id.setter
    def cloudant_database_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloudant_database_id", value)

    @_builtins.property
    @pulumi.getter
    def db(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path parameter to specify the database name.
        """
        return pulumi.get(self, "db")

    @db.setter
    def db(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "db", value)

    @_builtins.property
    @pulumi.getter(name="instanceCrn")
    def instance_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloudant Instance CRN.
        """
        return pulumi.get(self, "instance_crn")

    @instance_crn.setter
    def instance_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_crn", value)

    @_builtins.property
    @pulumi.getter
    def partitioned(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Query parameter to specify whether to enable database partitions when creating a database.
        """
        return pulumi.get(self, "partitioned")

    @partitioned.setter
    def partitioned(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "partitioned", value)

    @_builtins.property
    @pulumi.getter
    def shards(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of shards in the database. Each shard is a partition of the hash value range. You are encouraged to talk to
        support about appropriate values before changing this.
        """
        return pulumi.get(self, "shards")

    @shards.setter
    def shards(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "shards", value)


@pulumi.type_token("ibm:index/cloudantDatabase:CloudantDatabase")
class CloudantDatabase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloudant_database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 db: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 partitioned: Optional[pulumi.Input[_builtins.bool]] = None,
                 shards: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a CloudantDatabase resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] db: Path parameter to specify the database name.
        :param pulumi.Input[_builtins.str] instance_crn: Cloudant Instance CRN.
        :param pulumi.Input[_builtins.bool] partitioned: Query parameter to specify whether to enable database partitions when creating a database.
        :param pulumi.Input[_builtins.float] shards: The number of shards in the database. Each shard is a partition of the hash value range. You are encouraged to talk to
               support about appropriate values before changing this.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudantDatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CloudantDatabase resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CloudantDatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudantDatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloudant_database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 db: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 partitioned: Optional[pulumi.Input[_builtins.bool]] = None,
                 shards: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudantDatabaseArgs.__new__(CloudantDatabaseArgs)

            __props__.__dict__["cloudant_database_id"] = cloudant_database_id
            if db is None and not opts.urn:
                raise TypeError("Missing required property 'db'")
            __props__.__dict__["db"] = db
            if instance_crn is None and not opts.urn:
                raise TypeError("Missing required property 'instance_crn'")
            __props__.__dict__["instance_crn"] = instance_crn
            __props__.__dict__["partitioned"] = partitioned
            __props__.__dict__["shards"] = shards
        super(CloudantDatabase, __self__).__init__(
            'ibm:index/cloudantDatabase:CloudantDatabase',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloudant_database_id: Optional[pulumi.Input[_builtins.str]] = None,
            db: Optional[pulumi.Input[_builtins.str]] = None,
            instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
            partitioned: Optional[pulumi.Input[_builtins.bool]] = None,
            shards: Optional[pulumi.Input[_builtins.float]] = None) -> 'CloudantDatabase':
        """
        Get an existing CloudantDatabase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] db: Path parameter to specify the database name.
        :param pulumi.Input[_builtins.str] instance_crn: Cloudant Instance CRN.
        :param pulumi.Input[_builtins.bool] partitioned: Query parameter to specify whether to enable database partitions when creating a database.
        :param pulumi.Input[_builtins.float] shards: The number of shards in the database. Each shard is a partition of the hash value range. You are encouraged to talk to
               support about appropriate values before changing this.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudantDatabaseState.__new__(_CloudantDatabaseState)

        __props__.__dict__["cloudant_database_id"] = cloudant_database_id
        __props__.__dict__["db"] = db
        __props__.__dict__["instance_crn"] = instance_crn
        __props__.__dict__["partitioned"] = partitioned
        __props__.__dict__["shards"] = shards
        return CloudantDatabase(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cloudantDatabaseId")
    def cloudant_database_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cloudant_database_id")

    @_builtins.property
    @pulumi.getter
    def db(self) -> pulumi.Output[_builtins.str]:
        """
        Path parameter to specify the database name.
        """
        return pulumi.get(self, "db")

    @_builtins.property
    @pulumi.getter(name="instanceCrn")
    def instance_crn(self) -> pulumi.Output[_builtins.str]:
        """
        Cloudant Instance CRN.
        """
        return pulumi.get(self, "instance_crn")

    @_builtins.property
    @pulumi.getter
    def partitioned(self) -> pulumi.Output[_builtins.bool]:
        """
        Query parameter to specify whether to enable database partitions when creating a database.
        """
        return pulumi.get(self, "partitioned")

    @_builtins.property
    @pulumi.getter
    def shards(self) -> pulumi.Output[_builtins.float]:
        """
        The number of shards in the database. Each shard is a partition of the hash value range. You are encouraged to talk to
        support about appropriate values before changing this.
        """
        return pulumi.get(self, "shards")

