# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StorageBlockArgs', 'StorageBlock']

@pulumi.input_type
class StorageBlockArgs:
    def __init__(__self__, *,
                 capacity: pulumi.Input[_builtins.float],
                 datacenter: pulumi.Input[_builtins.str],
                 iops: pulumi.Input[_builtins.float],
                 os_format_type: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 allowed_hardware_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 allowed_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_virtual_guest_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 storage_block_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['StorageBlockTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a StorageBlock resource.
        :param pulumi.Input[_builtins.float] capacity: Storage block size
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.float] iops: IOPS value required
        :param pulumi.Input[_builtins.str] os_format_type: OS formatr type
        :param pulumi.Input[_builtins.str] type: Storage block type
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_hardware_ids: List of allowe hardware IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_ip_addresses: Allowed IP addresses
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_virtual_guest_ids: List of allowed virtual guest IDs
        :param pulumi.Input[_builtins.bool] hourly_billing: Billing done hourly, if set to true
        :param pulumi.Input[_builtins.str] notes: Additional note info
        :param pulumi.Input[_builtins.float] snapshot_capacity: Snapshot capacity in GB
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with the resource
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "os_format_type", os_format_type)
        pulumi.set(__self__, "type", type)
        if allowed_hardware_ids is not None:
            pulumi.set(__self__, "allowed_hardware_ids", allowed_hardware_ids)
        if allowed_ip_addresses is not None:
            pulumi.set(__self__, "allowed_ip_addresses", allowed_ip_addresses)
        if allowed_virtual_guest_ids is not None:
            pulumi.set(__self__, "allowed_virtual_guest_ids", allowed_virtual_guest_ids)
        if hourly_billing is not None:
            pulumi.set(__self__, "hourly_billing", hourly_billing)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if snapshot_capacity is not None:
            pulumi.set(__self__, "snapshot_capacity", snapshot_capacity)
        if storage_block_id is not None:
            pulumi.set(__self__, "storage_block_id", storage_block_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Input[_builtins.float]:
        """
        Storage block size
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[_builtins.str]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> pulumi.Input[_builtins.float]:
        """
        IOPS value required
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter(name="osFormatType")
    def os_format_type(self) -> pulumi.Input[_builtins.str]:
        """
        OS formatr type
        """
        return pulumi.get(self, "os_format_type")

    @os_format_type.setter
    def os_format_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "os_format_type", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Storage block type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="allowedHardwareIds")
    def allowed_hardware_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        List of allowe hardware IDs
        """
        return pulumi.get(self, "allowed_hardware_ids")

    @allowed_hardware_ids.setter
    def allowed_hardware_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "allowed_hardware_ids", value)

    @_builtins.property
    @pulumi.getter(name="allowedIpAddresses")
    def allowed_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Allowed IP addresses
        """
        return pulumi.get(self, "allowed_ip_addresses")

    @allowed_ip_addresses.setter
    def allowed_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="allowedVirtualGuestIds")
    def allowed_virtual_guest_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        List of allowed virtual guest IDs
        """
        return pulumi.get(self, "allowed_virtual_guest_ids")

    @allowed_virtual_guest_ids.setter
    def allowed_virtual_guest_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "allowed_virtual_guest_ids", value)

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Billing done hourly, if set to true
        """
        return pulumi.get(self, "hourly_billing")

    @hourly_billing.setter
    def hourly_billing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly_billing", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Additional note info
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="snapshotCapacity")
    def snapshot_capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Snapshot capacity in GB
        """
        return pulumi.get(self, "snapshot_capacity")

    @snapshot_capacity.setter
    def snapshot_capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "snapshot_capacity", value)

    @_builtins.property
    @pulumi.getter(name="storageBlockId")
    def storage_block_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_block_id")

    @storage_block_id.setter
    def storage_block_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_block_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags associated with the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StorageBlockTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StorageBlockTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _StorageBlockState:
    def __init__(__self__, *,
                 allowed_hardware_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 allowed_hardware_infos: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBlockAllowedHardwareInfoArgs']]]] = None,
                 allowed_host_infos: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBlockAllowedHostInfoArgs']]]] = None,
                 allowed_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_virtual_guest_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 allowed_virtual_guest_infos: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBlockAllowedVirtualGuestInfoArgs']]]] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 lunid: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 os_format_type: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 storage_block_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['StorageBlockTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 volumename: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering StorageBlock resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_hardware_ids: List of allowe hardware IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_ip_addresses: Allowed IP addresses
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_virtual_guest_ids: List of allowed virtual guest IDs
        :param pulumi.Input[_builtins.float] capacity: Storage block size
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.str] hostname: Hostname
        :param pulumi.Input[_builtins.bool] hourly_billing: Billing done hourly, if set to true
        :param pulumi.Input[_builtins.float] iops: IOPS value required
        :param pulumi.Input[_builtins.str] lunid: LUN Id
        :param pulumi.Input[_builtins.str] notes: Additional note info
        :param pulumi.Input[_builtins.str] os_format_type: OS formatr type
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.float] snapshot_capacity: Snapshot capacity in GB
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with the resource
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] target_addresses: List of target Addresses
        :param pulumi.Input[_builtins.str] type: Storage block type
        :param pulumi.Input[_builtins.str] volumename: Volume name
        """
        if allowed_hardware_ids is not None:
            pulumi.set(__self__, "allowed_hardware_ids", allowed_hardware_ids)
        if allowed_hardware_infos is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""allowed_hardware_infos is deprecated: Deprecated""")
        if allowed_hardware_infos is not None:
            pulumi.set(__self__, "allowed_hardware_infos", allowed_hardware_infos)
        if allowed_host_infos is not None:
            pulumi.set(__self__, "allowed_host_infos", allowed_host_infos)
        if allowed_ip_addresses is not None:
            pulumi.set(__self__, "allowed_ip_addresses", allowed_ip_addresses)
        if allowed_virtual_guest_ids is not None:
            pulumi.set(__self__, "allowed_virtual_guest_ids", allowed_virtual_guest_ids)
        if allowed_virtual_guest_infos is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""allowed_virtual_guest_infos is deprecated: Deprecated""")
        if allowed_virtual_guest_infos is not None:
            pulumi.set(__self__, "allowed_virtual_guest_infos", allowed_virtual_guest_infos)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hourly_billing is not None:
            pulumi.set(__self__, "hourly_billing", hourly_billing)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if lunid is not None:
            pulumi.set(__self__, "lunid", lunid)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if os_format_type is not None:
            pulumi.set(__self__, "os_format_type", os_format_type)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if snapshot_capacity is not None:
            pulumi.set(__self__, "snapshot_capacity", snapshot_capacity)
        if storage_block_id is not None:
            pulumi.set(__self__, "storage_block_id", storage_block_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_addresses is not None:
            pulumi.set(__self__, "target_addresses", target_addresses)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if volumename is not None:
            pulumi.set(__self__, "volumename", volumename)

    @_builtins.property
    @pulumi.getter(name="allowedHardwareIds")
    def allowed_hardware_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        List of allowe hardware IDs
        """
        return pulumi.get(self, "allowed_hardware_ids")

    @allowed_hardware_ids.setter
    def allowed_hardware_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "allowed_hardware_ids", value)

    @_builtins.property
    @pulumi.getter(name="allowedHardwareInfos")
    @_utilities.deprecated("""Deprecated""")
    def allowed_hardware_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageBlockAllowedHardwareInfoArgs']]]]:
        return pulumi.get(self, "allowed_hardware_infos")

    @allowed_hardware_infos.setter
    def allowed_hardware_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBlockAllowedHardwareInfoArgs']]]]):
        pulumi.set(self, "allowed_hardware_infos", value)

    @_builtins.property
    @pulumi.getter(name="allowedHostInfos")
    def allowed_host_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageBlockAllowedHostInfoArgs']]]]:
        return pulumi.get(self, "allowed_host_infos")

    @allowed_host_infos.setter
    def allowed_host_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBlockAllowedHostInfoArgs']]]]):
        pulumi.set(self, "allowed_host_infos", value)

    @_builtins.property
    @pulumi.getter(name="allowedIpAddresses")
    def allowed_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Allowed IP addresses
        """
        return pulumi.get(self, "allowed_ip_addresses")

    @allowed_ip_addresses.setter
    def allowed_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="allowedVirtualGuestIds")
    def allowed_virtual_guest_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        List of allowed virtual guest IDs
        """
        return pulumi.get(self, "allowed_virtual_guest_ids")

    @allowed_virtual_guest_ids.setter
    def allowed_virtual_guest_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "allowed_virtual_guest_ids", value)

    @_builtins.property
    @pulumi.getter(name="allowedVirtualGuestInfos")
    @_utilities.deprecated("""Deprecated""")
    def allowed_virtual_guest_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageBlockAllowedVirtualGuestInfoArgs']]]]:
        return pulumi.get(self, "allowed_virtual_guest_infos")

    @allowed_virtual_guest_infos.setter
    def allowed_virtual_guest_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBlockAllowedVirtualGuestInfoArgs']]]]):
        pulumi.set(self, "allowed_virtual_guest_infos", value)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Storage block size
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Hostname
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Billing done hourly, if set to true
        """
        return pulumi.get(self, "hourly_billing")

    @hourly_billing.setter
    def hourly_billing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly_billing", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IOPS value required
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter
    def lunid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        LUN Id
        """
        return pulumi.get(self, "lunid")

    @lunid.setter
    def lunid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lunid", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Additional note info
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="osFormatType")
    def os_format_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        OS formatr type
        """
        return pulumi.get(self, "os_format_type")

    @os_format_type.setter
    def os_format_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_format_type", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="snapshotCapacity")
    def snapshot_capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Snapshot capacity in GB
        """
        return pulumi.get(self, "snapshot_capacity")

    @snapshot_capacity.setter
    def snapshot_capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "snapshot_capacity", value)

    @_builtins.property
    @pulumi.getter(name="storageBlockId")
    def storage_block_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_block_id")

    @storage_block_id.setter
    def storage_block_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_block_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags associated with the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="targetAddresses")
    def target_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of target Addresses
        """
        return pulumi.get(self, "target_addresses")

    @target_addresses.setter
    def target_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "target_addresses", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StorageBlockTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StorageBlockTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage block type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def volumename(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume name
        """
        return pulumi.get(self, "volumename")

    @volumename.setter
    def volumename(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volumename", value)


@pulumi.type_token("ibm:index/storageBlock:StorageBlock")
class StorageBlock(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_hardware_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 allowed_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_virtual_guest_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 os_format_type: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 storage_block_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['StorageBlockTimeoutsArgs', 'StorageBlockTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a StorageBlock resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_hardware_ids: List of allowe hardware IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_ip_addresses: Allowed IP addresses
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_virtual_guest_ids: List of allowed virtual guest IDs
        :param pulumi.Input[_builtins.float] capacity: Storage block size
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.bool] hourly_billing: Billing done hourly, if set to true
        :param pulumi.Input[_builtins.float] iops: IOPS value required
        :param pulumi.Input[_builtins.str] notes: Additional note info
        :param pulumi.Input[_builtins.str] os_format_type: OS formatr type
        :param pulumi.Input[_builtins.float] snapshot_capacity: Snapshot capacity in GB
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with the resource
        :param pulumi.Input[_builtins.str] type: Storage block type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StorageBlockArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StorageBlock resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StorageBlockArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StorageBlockArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_hardware_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 allowed_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_virtual_guest_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 os_format_type: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 storage_block_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['StorageBlockTimeoutsArgs', 'StorageBlockTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StorageBlockArgs.__new__(StorageBlockArgs)

            __props__.__dict__["allowed_hardware_ids"] = allowed_hardware_ids
            __props__.__dict__["allowed_ip_addresses"] = allowed_ip_addresses
            __props__.__dict__["allowed_virtual_guest_ids"] = allowed_virtual_guest_ids
            if capacity is None and not opts.urn:
                raise TypeError("Missing required property 'capacity'")
            __props__.__dict__["capacity"] = capacity
            if datacenter is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter'")
            __props__.__dict__["datacenter"] = datacenter
            __props__.__dict__["hourly_billing"] = hourly_billing
            if iops is None and not opts.urn:
                raise TypeError("Missing required property 'iops'")
            __props__.__dict__["iops"] = iops
            __props__.__dict__["notes"] = notes
            if os_format_type is None and not opts.urn:
                raise TypeError("Missing required property 'os_format_type'")
            __props__.__dict__["os_format_type"] = os_format_type
            __props__.__dict__["snapshot_capacity"] = snapshot_capacity
            __props__.__dict__["storage_block_id"] = storage_block_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["allowed_hardware_infos"] = None
            __props__.__dict__["allowed_host_infos"] = None
            __props__.__dict__["allowed_virtual_guest_infos"] = None
            __props__.__dict__["hostname"] = None
            __props__.__dict__["lunid"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["target_addresses"] = None
            __props__.__dict__["volumename"] = None
        super(StorageBlock, __self__).__init__(
            'ibm:index/storageBlock:StorageBlock',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_hardware_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            allowed_hardware_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StorageBlockAllowedHardwareInfoArgs', 'StorageBlockAllowedHardwareInfoArgsDict']]]]] = None,
            allowed_host_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StorageBlockAllowedHostInfoArgs', 'StorageBlockAllowedHostInfoArgsDict']]]]] = None,
            allowed_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            allowed_virtual_guest_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            allowed_virtual_guest_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StorageBlockAllowedVirtualGuestInfoArgs', 'StorageBlockAllowedVirtualGuestInfoArgsDict']]]]] = None,
            capacity: Optional[pulumi.Input[_builtins.float]] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
            iops: Optional[pulumi.Input[_builtins.float]] = None,
            lunid: Optional[pulumi.Input[_builtins.str]] = None,
            notes: Optional[pulumi.Input[_builtins.str]] = None,
            os_format_type: Optional[pulumi.Input[_builtins.str]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            snapshot_capacity: Optional[pulumi.Input[_builtins.float]] = None,
            storage_block_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            target_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['StorageBlockTimeoutsArgs', 'StorageBlockTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            volumename: Optional[pulumi.Input[_builtins.str]] = None) -> 'StorageBlock':
        """
        Get an existing StorageBlock resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_hardware_ids: List of allowe hardware IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_ip_addresses: Allowed IP addresses
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_virtual_guest_ids: List of allowed virtual guest IDs
        :param pulumi.Input[_builtins.float] capacity: Storage block size
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.str] hostname: Hostname
        :param pulumi.Input[_builtins.bool] hourly_billing: Billing done hourly, if set to true
        :param pulumi.Input[_builtins.float] iops: IOPS value required
        :param pulumi.Input[_builtins.str] lunid: LUN Id
        :param pulumi.Input[_builtins.str] notes: Additional note info
        :param pulumi.Input[_builtins.str] os_format_type: OS formatr type
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.float] snapshot_capacity: Snapshot capacity in GB
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with the resource
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] target_addresses: List of target Addresses
        :param pulumi.Input[_builtins.str] type: Storage block type
        :param pulumi.Input[_builtins.str] volumename: Volume name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StorageBlockState.__new__(_StorageBlockState)

        __props__.__dict__["allowed_hardware_ids"] = allowed_hardware_ids
        __props__.__dict__["allowed_hardware_infos"] = allowed_hardware_infos
        __props__.__dict__["allowed_host_infos"] = allowed_host_infos
        __props__.__dict__["allowed_ip_addresses"] = allowed_ip_addresses
        __props__.__dict__["allowed_virtual_guest_ids"] = allowed_virtual_guest_ids
        __props__.__dict__["allowed_virtual_guest_infos"] = allowed_virtual_guest_infos
        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["hourly_billing"] = hourly_billing
        __props__.__dict__["iops"] = iops
        __props__.__dict__["lunid"] = lunid
        __props__.__dict__["notes"] = notes
        __props__.__dict__["os_format_type"] = os_format_type
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["snapshot_capacity"] = snapshot_capacity
        __props__.__dict__["storage_block_id"] = storage_block_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["target_addresses"] = target_addresses
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["volumename"] = volumename
        return StorageBlock(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowedHardwareIds")
    def allowed_hardware_ids(self) -> pulumi.Output[Sequence[_builtins.float]]:
        """
        List of allowe hardware IDs
        """
        return pulumi.get(self, "allowed_hardware_ids")

    @_builtins.property
    @pulumi.getter(name="allowedHardwareInfos")
    @_utilities.deprecated("""Deprecated""")
    def allowed_hardware_infos(self) -> pulumi.Output[Sequence['outputs.StorageBlockAllowedHardwareInfo']]:
        return pulumi.get(self, "allowed_hardware_infos")

    @_builtins.property
    @pulumi.getter(name="allowedHostInfos")
    def allowed_host_infos(self) -> pulumi.Output[Sequence['outputs.StorageBlockAllowedHostInfo']]:
        return pulumi.get(self, "allowed_host_infos")

    @_builtins.property
    @pulumi.getter(name="allowedIpAddresses")
    def allowed_ip_addresses(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Allowed IP addresses
        """
        return pulumi.get(self, "allowed_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="allowedVirtualGuestIds")
    def allowed_virtual_guest_ids(self) -> pulumi.Output[Sequence[_builtins.float]]:
        """
        List of allowed virtual guest IDs
        """
        return pulumi.get(self, "allowed_virtual_guest_ids")

    @_builtins.property
    @pulumi.getter(name="allowedVirtualGuestInfos")
    @_utilities.deprecated("""Deprecated""")
    def allowed_virtual_guest_infos(self) -> pulumi.Output[Sequence['outputs.StorageBlockAllowedVirtualGuestInfo']]:
        return pulumi.get(self, "allowed_virtual_guest_infos")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[_builtins.float]:
        """
        Storage block size
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[_builtins.str]:
        """
        Hostname
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Billing done hourly, if set to true
        """
        return pulumi.get(self, "hourly_billing")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> pulumi.Output[_builtins.float]:
        """
        IOPS value required
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter
    def lunid(self) -> pulumi.Output[_builtins.str]:
        """
        LUN Id
        """
        return pulumi.get(self, "lunid")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Additional note info
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="osFormatType")
    def os_format_type(self) -> pulumi.Output[_builtins.str]:
        """
        OS formatr type
        """
        return pulumi.get(self, "os_format_type")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="snapshotCapacity")
    def snapshot_capacity(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Snapshot capacity in GB
        """
        return pulumi.get(self, "snapshot_capacity")

    @_builtins.property
    @pulumi.getter(name="storageBlockId")
    def storage_block_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "storage_block_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags associated with the resource
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="targetAddresses")
    def target_addresses(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of target Addresses
        """
        return pulumi.get(self, "target_addresses")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.StorageBlockTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Storage block type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def volumename(self) -> pulumi.Output[_builtins.str]:
        """
        Volume name
        """
        return pulumi.get(self, "volumename")

