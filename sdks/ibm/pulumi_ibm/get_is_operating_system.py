# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsOperatingSystemResult',
    'AwaitableGetIsOperatingSystemResult',
    'get_is_operating_system',
    'get_is_operating_system_output',
]

@pulumi.output_type
class GetIsOperatingSystemResult:
    """
    A collection of values returned by getIsOperatingSystem.
    """
    def __init__(__self__, allow_user_image_creation=None, architecture=None, dedicated_host_only=None, display_name=None, family=None, href=None, id=None, name=None, user_data_format=None, vendor=None, version=None):
        if allow_user_image_creation and not isinstance(allow_user_image_creation, bool):
            raise TypeError("Expected argument 'allow_user_image_creation' to be a bool")
        pulumi.set(__self__, "allow_user_image_creation", allow_user_image_creation)
        if architecture and not isinstance(architecture, str):
            raise TypeError("Expected argument 'architecture' to be a str")
        pulumi.set(__self__, "architecture", architecture)
        if dedicated_host_only and not isinstance(dedicated_host_only, bool):
            raise TypeError("Expected argument 'dedicated_host_only' to be a bool")
        pulumi.set(__self__, "dedicated_host_only", dedicated_host_only)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if family and not isinstance(family, str):
            raise TypeError("Expected argument 'family' to be a str")
        pulumi.set(__self__, "family", family)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if user_data_format and not isinstance(user_data_format, str):
            raise TypeError("Expected argument 'user_data_format' to be a str")
        pulumi.set(__self__, "user_data_format", user_data_format)
        if vendor and not isinstance(vendor, str):
            raise TypeError("Expected argument 'vendor' to be a str")
        pulumi.set(__self__, "vendor", vendor)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="allowUserImageCreation")
    def allow_user_image_creation(self) -> _builtins.bool:
        return pulumi.get(self, "allow_user_image_creation")

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="dedicatedHostOnly")
    def dedicated_host_only(self) -> _builtins.bool:
        return pulumi.get(self, "dedicated_host_only")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def family(self) -> _builtins.str:
        return pulumi.get(self, "family")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="userDataFormat")
    def user_data_format(self) -> _builtins.str:
        return pulumi.get(self, "user_data_format")

    @_builtins.property
    @pulumi.getter
    def vendor(self) -> _builtins.str:
        return pulumi.get(self, "vendor")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetIsOperatingSystemResult(GetIsOperatingSystemResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsOperatingSystemResult(
            allow_user_image_creation=self.allow_user_image_creation,
            architecture=self.architecture,
            dedicated_host_only=self.dedicated_host_only,
            display_name=self.display_name,
            family=self.family,
            href=self.href,
            id=self.id,
            name=self.name,
            user_data_format=self.user_data_format,
            vendor=self.vendor,
            version=self.version)


def get_is_operating_system(id: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsOperatingSystemResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsOperatingSystem:getIsOperatingSystem', __args__, opts=opts, typ=GetIsOperatingSystemResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsOperatingSystemResult(
        allow_user_image_creation=pulumi.get(__ret__, 'allow_user_image_creation'),
        architecture=pulumi.get(__ret__, 'architecture'),
        dedicated_host_only=pulumi.get(__ret__, 'dedicated_host_only'),
        display_name=pulumi.get(__ret__, 'display_name'),
        family=pulumi.get(__ret__, 'family'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        user_data_format=pulumi.get(__ret__, 'user_data_format'),
        vendor=pulumi.get(__ret__, 'vendor'),
        version=pulumi.get(__ret__, 'version'))
def get_is_operating_system_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   name: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsOperatingSystemResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsOperatingSystem:getIsOperatingSystem', __args__, opts=opts, typ=GetIsOperatingSystemResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsOperatingSystemResult(
        allow_user_image_creation=pulumi.get(__response__, 'allow_user_image_creation'),
        architecture=pulumi.get(__response__, 'architecture'),
        dedicated_host_only=pulumi.get(__response__, 'dedicated_host_only'),
        display_name=pulumi.get(__response__, 'display_name'),
        family=pulumi.get(__response__, 'family'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        user_data_format=pulumi.get(__response__, 'user_data_format'),
        vendor=pulumi.get(__response__, 'vendor'),
        version=pulumi.get(__response__, 'version')))
