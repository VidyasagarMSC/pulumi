# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamAccountSettingsTemplateAssignmentResult',
    'AwaitableGetIamAccountSettingsTemplateAssignmentResult',
    'get_iam_account_settings_template_assignment',
    'get_iam_account_settings_template_assignment_output',
]

@pulumi.output_type
class GetIamAccountSettingsTemplateAssignmentResult:
    """
    A collection of values returned by getIamAccountSettingsTemplateAssignment.
    """
    def __init__(__self__, account_id=None, assignment_id=None, contexts=None, created_at=None, created_by_id=None, entity_tag=None, histories=None, href=None, id=None, include_history=None, last_modified_at=None, last_modified_by_id=None, resources=None, status=None, target=None, target_type=None, template_id=None, template_version=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if assignment_id and not isinstance(assignment_id, str):
            raise TypeError("Expected argument 'assignment_id' to be a str")
        pulumi.set(__self__, "assignment_id", assignment_id)
        if contexts and not isinstance(contexts, list):
            raise TypeError("Expected argument 'contexts' to be a list")
        pulumi.set(__self__, "contexts", contexts)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by_id and not isinstance(created_by_id, str):
            raise TypeError("Expected argument 'created_by_id' to be a str")
        pulumi.set(__self__, "created_by_id", created_by_id)
        if entity_tag and not isinstance(entity_tag, str):
            raise TypeError("Expected argument 'entity_tag' to be a str")
        pulumi.set(__self__, "entity_tag", entity_tag)
        if histories and not isinstance(histories, list):
            raise TypeError("Expected argument 'histories' to be a list")
        pulumi.set(__self__, "histories", histories)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_history and not isinstance(include_history, bool):
            raise TypeError("Expected argument 'include_history' to be a bool")
        pulumi.set(__self__, "include_history", include_history)
        if last_modified_at and not isinstance(last_modified_at, str):
            raise TypeError("Expected argument 'last_modified_at' to be a str")
        pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by_id and not isinstance(last_modified_by_id, str):
            raise TypeError("Expected argument 'last_modified_by_id' to be a str")
        pulumi.set(__self__, "last_modified_by_id", last_modified_by_id)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if target and not isinstance(target, str):
            raise TypeError("Expected argument 'target' to be a str")
        pulumi.set(__self__, "target", target)
        if target_type and not isinstance(target_type, str):
            raise TypeError("Expected argument 'target_type' to be a str")
        pulumi.set(__self__, "target_type", target_type)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)
        if template_version and not isinstance(template_version, float):
            raise TypeError("Expected argument 'template_version' to be a float")
        pulumi.set(__self__, "template_version", template_version)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="assignmentId")
    def assignment_id(self) -> _builtins.str:
        return pulumi.get(self, "assignment_id")

    @_builtins.property
    @pulumi.getter
    def contexts(self) -> Sequence['outputs.GetIamAccountSettingsTemplateAssignmentContextResult']:
        return pulumi.get(self, "contexts")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> _builtins.str:
        return pulumi.get(self, "created_by_id")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> _builtins.str:
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def histories(self) -> Sequence['outputs.GetIamAccountSettingsTemplateAssignmentHistoryResult']:
        return pulumi.get(self, "histories")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeHistory")
    def include_history(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_history")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> _builtins.str:
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedById")
    def last_modified_by_id(self) -> _builtins.str:
        return pulumi.get(self, "last_modified_by_id")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetIamAccountSettingsTemplateAssignmentResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "target_type")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "template_version")


class AwaitableGetIamAccountSettingsTemplateAssignmentResult(GetIamAccountSettingsTemplateAssignmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamAccountSettingsTemplateAssignmentResult(
            account_id=self.account_id,
            assignment_id=self.assignment_id,
            contexts=self.contexts,
            created_at=self.created_at,
            created_by_id=self.created_by_id,
            entity_tag=self.entity_tag,
            histories=self.histories,
            href=self.href,
            id=self.id,
            include_history=self.include_history,
            last_modified_at=self.last_modified_at,
            last_modified_by_id=self.last_modified_by_id,
            resources=self.resources,
            status=self.status,
            target=self.target,
            target_type=self.target_type,
            template_id=self.template_id,
            template_version=self.template_version)


def get_iam_account_settings_template_assignment(assignment_id: Optional[_builtins.str] = None,
                                                 include_history: Optional[_builtins.bool] = None,
                                                 target: Optional[_builtins.str] = None,
                                                 target_type: Optional[_builtins.str] = None,
                                                 template_id: Optional[_builtins.str] = None,
                                                 template_version: Optional[_builtins.float] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamAccountSettingsTemplateAssignmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['assignmentId'] = assignment_id
    __args__['includeHistory'] = include_history
    __args__['target'] = target
    __args__['targetType'] = target_type
    __args__['templateId'] = template_id
    __args__['templateVersion'] = template_version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamAccountSettingsTemplateAssignment:getIamAccountSettingsTemplateAssignment', __args__, opts=opts, typ=GetIamAccountSettingsTemplateAssignmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamAccountSettingsTemplateAssignmentResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        assignment_id=pulumi.get(__ret__, 'assignment_id'),
        contexts=pulumi.get(__ret__, 'contexts'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by_id=pulumi.get(__ret__, 'created_by_id'),
        entity_tag=pulumi.get(__ret__, 'entity_tag'),
        histories=pulumi.get(__ret__, 'histories'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        include_history=pulumi.get(__ret__, 'include_history'),
        last_modified_at=pulumi.get(__ret__, 'last_modified_at'),
        last_modified_by_id=pulumi.get(__ret__, 'last_modified_by_id'),
        resources=pulumi.get(__ret__, 'resources'),
        status=pulumi.get(__ret__, 'status'),
        target=pulumi.get(__ret__, 'target'),
        target_type=pulumi.get(__ret__, 'target_type'),
        template_id=pulumi.get(__ret__, 'template_id'),
        template_version=pulumi.get(__ret__, 'template_version'))
def get_iam_account_settings_template_assignment_output(assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                        include_history: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                        target: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        target_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        template_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        template_version: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamAccountSettingsTemplateAssignmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['assignmentId'] = assignment_id
    __args__['includeHistory'] = include_history
    __args__['target'] = target
    __args__['targetType'] = target_type
    __args__['templateId'] = template_id
    __args__['templateVersion'] = template_version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamAccountSettingsTemplateAssignment:getIamAccountSettingsTemplateAssignment', __args__, opts=opts, typ=GetIamAccountSettingsTemplateAssignmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamAccountSettingsTemplateAssignmentResult(
        account_id=pulumi.get(__response__, 'account_id'),
        assignment_id=pulumi.get(__response__, 'assignment_id'),
        contexts=pulumi.get(__response__, 'contexts'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by_id=pulumi.get(__response__, 'created_by_id'),
        entity_tag=pulumi.get(__response__, 'entity_tag'),
        histories=pulumi.get(__response__, 'histories'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        include_history=pulumi.get(__response__, 'include_history'),
        last_modified_at=pulumi.get(__response__, 'last_modified_at'),
        last_modified_by_id=pulumi.get(__response__, 'last_modified_by_id'),
        resources=pulumi.get(__response__, 'resources'),
        status=pulumi.get(__response__, 'status'),
        target=pulumi.get(__response__, 'target'),
        target_type=pulumi.get(__response__, 'target_type'),
        template_id=pulumi.get(__response__, 'template_id'),
        template_version=pulumi.get(__response__, 'template_version')))
