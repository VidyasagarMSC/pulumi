# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IsVpnServerClientArgs', 'IsVpnServerClient']

@pulumi.input_type
class IsVpnServerClientArgs:
    def __init__(__self__, *,
                 vpn_client: pulumi.Input[_builtins.str],
                 vpn_server: pulumi.Input[_builtins.str],
                 delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vpn_server_client_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsVpnServerClient resource.
        :param pulumi.Input[_builtins.str] vpn_client: The VPN Client identifier.
        :param pulumi.Input[_builtins.str] vpn_server: The VPN server identifier.
        :param pulumi.Input[_builtins.bool] delete: The delete to use for this VPN client to be deleted or not, when false, client is disconneted and when set to true
               client is deleted.
        """
        pulumi.set(__self__, "vpn_client", vpn_client)
        pulumi.set(__self__, "vpn_server", vpn_server)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if is_vpn_server_client_id is not None:
            pulumi.set(__self__, "is_vpn_server_client_id", is_vpn_server_client_id)

    @_builtins.property
    @pulumi.getter(name="vpnClient")
    def vpn_client(self) -> pulumi.Input[_builtins.str]:
        """
        The VPN Client identifier.
        """
        return pulumi.get(self, "vpn_client")

    @vpn_client.setter
    def vpn_client(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpn_client", value)

    @_builtins.property
    @pulumi.getter(name="vpnServer")
    def vpn_server(self) -> pulumi.Input[_builtins.str]:
        """
        The VPN server identifier.
        """
        return pulumi.get(self, "vpn_server")

    @vpn_server.setter
    def vpn_server(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpn_server", value)

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The delete to use for this VPN client to be deleted or not, when false, client is disconneted and when set to true
        client is deleted.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete", value)

    @_builtins.property
    @pulumi.getter(name="isVpnServerClientId")
    def is_vpn_server_client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpn_server_client_id")

    @is_vpn_server_client_id.setter
    def is_vpn_server_client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpn_server_client_id", value)


@pulumi.input_type
class _IsVpnServerClientState:
    def __init__(__self__, *,
                 delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpn_server_client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 vpn_client: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_server: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsVpnServerClient resources.
        :param pulumi.Input[_builtins.bool] delete: The delete to use for this VPN client to be deleted or not, when false, client is disconneted and when set to true
               client is deleted.
        :param pulumi.Input[_builtins.str] description: description of the result.
        :param pulumi.Input[_builtins.float] status_code: status code of the result.
        :param pulumi.Input[_builtins.str] vpn_client: The VPN Client identifier.
        :param pulumi.Input[_builtins.str] vpn_server: The VPN server identifier.
        """
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_vpn_server_client_id is not None:
            pulumi.set(__self__, "is_vpn_server_client_id", is_vpn_server_client_id)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if vpn_client is not None:
            pulumi.set(__self__, "vpn_client", vpn_client)
        if vpn_server is not None:
            pulumi.set(__self__, "vpn_server", vpn_server)

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The delete to use for this VPN client to be deleted or not, when false, client is disconneted and when set to true
        client is deleted.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        description of the result.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="isVpnServerClientId")
    def is_vpn_server_client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpn_server_client_id")

    @is_vpn_server_client_id.setter
    def is_vpn_server_client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpn_server_client_id", value)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        status code of the result.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "status_code", value)

    @_builtins.property
    @pulumi.getter(name="vpnClient")
    def vpn_client(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPN Client identifier.
        """
        return pulumi.get(self, "vpn_client")

    @vpn_client.setter
    def vpn_client(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_client", value)

    @_builtins.property
    @pulumi.getter(name="vpnServer")
    def vpn_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPN server identifier.
        """
        return pulumi.get(self, "vpn_server")

    @vpn_server.setter
    def vpn_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_server", value)


@pulumi.type_token("ibm:index/isVpnServerClient:IsVpnServerClient")
class IsVpnServerClient(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vpn_server_client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_client: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_server: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsVpnServerClient resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] delete: The delete to use for this VPN client to be deleted or not, when false, client is disconneted and when set to true
               client is deleted.
        :param pulumi.Input[_builtins.str] vpn_client: The VPN Client identifier.
        :param pulumi.Input[_builtins.str] vpn_server: The VPN server identifier.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsVpnServerClientArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVpnServerClient resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVpnServerClientArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVpnServerClientArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vpn_server_client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_client: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_server: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVpnServerClientArgs.__new__(IsVpnServerClientArgs)

            __props__.__dict__["delete"] = delete
            __props__.__dict__["is_vpn_server_client_id"] = is_vpn_server_client_id
            if vpn_client is None and not opts.urn:
                raise TypeError("Missing required property 'vpn_client'")
            __props__.__dict__["vpn_client"] = vpn_client
            if vpn_server is None and not opts.urn:
                raise TypeError("Missing required property 'vpn_server'")
            __props__.__dict__["vpn_server"] = vpn_server
            __props__.__dict__["description"] = None
            __props__.__dict__["status_code"] = None
        super(IsVpnServerClient, __self__).__init__(
            'ibm:index/isVpnServerClient:IsVpnServerClient',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            is_vpn_server_client_id: Optional[pulumi.Input[_builtins.str]] = None,
            status_code: Optional[pulumi.Input[_builtins.float]] = None,
            vpn_client: Optional[pulumi.Input[_builtins.str]] = None,
            vpn_server: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsVpnServerClient':
        """
        Get an existing IsVpnServerClient resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] delete: The delete to use for this VPN client to be deleted or not, when false, client is disconneted and when set to true
               client is deleted.
        :param pulumi.Input[_builtins.str] description: description of the result.
        :param pulumi.Input[_builtins.float] status_code: status code of the result.
        :param pulumi.Input[_builtins.str] vpn_client: The VPN Client identifier.
        :param pulumi.Input[_builtins.str] vpn_server: The VPN server identifier.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVpnServerClientState.__new__(_IsVpnServerClientState)

        __props__.__dict__["delete"] = delete
        __props__.__dict__["description"] = description
        __props__.__dict__["is_vpn_server_client_id"] = is_vpn_server_client_id
        __props__.__dict__["status_code"] = status_code
        __props__.__dict__["vpn_client"] = vpn_client
        __props__.__dict__["vpn_server"] = vpn_server
        return IsVpnServerClient(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        The delete to use for this VPN client to be deleted or not, when false, client is disconneted and when set to true
        client is deleted.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        description of the result.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isVpnServerClientId")
    def is_vpn_server_client_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_vpn_server_client_id")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Output[_builtins.float]:
        """
        status code of the result.
        """
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter(name="vpnClient")
    def vpn_client(self) -> pulumi.Output[_builtins.str]:
        """
        The VPN Client identifier.
        """
        return pulumi.get(self, "vpn_client")

    @_builtins.property
    @pulumi.getter(name="vpnServer")
    def vpn_server(self) -> pulumi.Output[_builtins.str]:
        """
        The VPN server identifier.
        """
        return pulumi.get(self, "vpn_server")

