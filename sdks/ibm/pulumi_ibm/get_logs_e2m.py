# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLogsE2mResult',
    'AwaitableGetLogsE2mResult',
    'get_logs_e2m',
    'get_logs_e2m_output',
]

@pulumi.output_type
class GetLogsE2mResult:
    """
    A collection of values returned by getLogsE2m.
    """
    def __init__(__self__, create_time=None, description=None, endpoint_type=None, id=None, instance_id=None, is_internal=None, logs_e2m_id=None, logs_queries=None, metric_fields=None, metric_labels=None, name=None, permutations=None, region=None, type=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if is_internal and not isinstance(is_internal, bool):
            raise TypeError("Expected argument 'is_internal' to be a bool")
        pulumi.set(__self__, "is_internal", is_internal)
        if logs_e2m_id and not isinstance(logs_e2m_id, str):
            raise TypeError("Expected argument 'logs_e2m_id' to be a str")
        pulumi.set(__self__, "logs_e2m_id", logs_e2m_id)
        if logs_queries and not isinstance(logs_queries, list):
            raise TypeError("Expected argument 'logs_queries' to be a list")
        pulumi.set(__self__, "logs_queries", logs_queries)
        if metric_fields and not isinstance(metric_fields, list):
            raise TypeError("Expected argument 'metric_fields' to be a list")
        pulumi.set(__self__, "metric_fields", metric_fields)
        if metric_labels and not isinstance(metric_labels, list):
            raise TypeError("Expected argument 'metric_labels' to be a list")
        pulumi.set(__self__, "metric_labels", metric_labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if permutations and not isinstance(permutations, list):
            raise TypeError("Expected argument 'permutations' to be a list")
        pulumi.set(__self__, "permutations", permutations)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="isInternal")
    def is_internal(self) -> _builtins.bool:
        return pulumi.get(self, "is_internal")

    @_builtins.property
    @pulumi.getter(name="logsE2mId")
    def logs_e2m_id(self) -> _builtins.str:
        return pulumi.get(self, "logs_e2m_id")

    @_builtins.property
    @pulumi.getter(name="logsQueries")
    def logs_queries(self) -> Sequence['outputs.GetLogsE2mLogsQueryResult']:
        return pulumi.get(self, "logs_queries")

    @_builtins.property
    @pulumi.getter(name="metricFields")
    def metric_fields(self) -> Sequence['outputs.GetLogsE2mMetricFieldResult']:
        return pulumi.get(self, "metric_fields")

    @_builtins.property
    @pulumi.getter(name="metricLabels")
    def metric_labels(self) -> Sequence['outputs.GetLogsE2mMetricLabelResult']:
        return pulumi.get(self, "metric_labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def permutations(self) -> Sequence['outputs.GetLogsE2mPermutationResult']:
        return pulumi.get(self, "permutations")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        return pulumi.get(self, "update_time")


class AwaitableGetLogsE2mResult(GetLogsE2mResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogsE2mResult(
            create_time=self.create_time,
            description=self.description,
            endpoint_type=self.endpoint_type,
            id=self.id,
            instance_id=self.instance_id,
            is_internal=self.is_internal,
            logs_e2m_id=self.logs_e2m_id,
            logs_queries=self.logs_queries,
            metric_fields=self.metric_fields,
            metric_labels=self.metric_labels,
            name=self.name,
            permutations=self.permutations,
            region=self.region,
            type=self.type,
            update_time=self.update_time)


def get_logs_e2m(endpoint_type: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 logs_e2m_id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogsE2mResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['logsE2mId'] = logs_e2m_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getLogsE2m:getLogsE2m', __args__, opts=opts, typ=GetLogsE2mResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLogsE2mResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        is_internal=pulumi.get(__ret__, 'is_internal'),
        logs_e2m_id=pulumi.get(__ret__, 'logs_e2m_id'),
        logs_queries=pulumi.get(__ret__, 'logs_queries'),
        metric_fields=pulumi.get(__ret__, 'metric_fields'),
        metric_labels=pulumi.get(__ret__, 'metric_labels'),
        name=pulumi.get(__ret__, 'name'),
        permutations=pulumi.get(__ret__, 'permutations'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'),
        update_time=pulumi.get(__ret__, 'update_time'))
def get_logs_e2m_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                        logs_e2m_id: Optional[pulumi.Input[_builtins.str]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogsE2mResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['logsE2mId'] = logs_e2m_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getLogsE2m:getLogsE2m', __args__, opts=opts, typ=GetLogsE2mResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLogsE2mResult(
        create_time=pulumi.get(__response__, 'create_time'),
        description=pulumi.get(__response__, 'description'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        is_internal=pulumi.get(__response__, 'is_internal'),
        logs_e2m_id=pulumi.get(__response__, 'logs_e2m_id'),
        logs_queries=pulumi.get(__response__, 'logs_queries'),
        metric_fields=pulumi.get(__response__, 'metric_fields'),
        metric_labels=pulumi.get(__response__, 'metric_labels'),
        name=pulumi.get(__response__, 'name'),
        permutations=pulumi.get(__response__, 'permutations'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type'),
        update_time=pulumi.get(__response__, 'update_time')))
