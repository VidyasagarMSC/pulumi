# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DnsDomainRegistrationNameserversArgs', 'DnsDomainRegistrationNameservers']

@pulumi.input_type
class DnsDomainRegistrationNameserversArgs:
    def __init__(__self__, *,
                 dns_registration_id: pulumi.Input[_builtins.str],
                 name_servers: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 dns_domain_registration_nameservers_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DnsDomainRegistrationNameservers resource.
        :param pulumi.Input[_builtins.str] dns_registration_id: DNS registration ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] name_servers: Custom name servers for the domain registration
        """
        pulumi.set(__self__, "dns_registration_id", dns_registration_id)
        pulumi.set(__self__, "name_servers", name_servers)
        if dns_domain_registration_nameservers_id is not None:
            pulumi.set(__self__, "dns_domain_registration_nameservers_id", dns_domain_registration_nameservers_id)

    @_builtins.property
    @pulumi.getter(name="dnsRegistrationId")
    def dns_registration_id(self) -> pulumi.Input[_builtins.str]:
        """
        DNS registration ID
        """
        return pulumi.get(self, "dns_registration_id")

    @dns_registration_id.setter
    def dns_registration_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dns_registration_id", value)

    @_builtins.property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Custom name servers for the domain registration
        """
        return pulumi.get(self, "name_servers")

    @name_servers.setter
    def name_servers(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "name_servers", value)

    @_builtins.property
    @pulumi.getter(name="dnsDomainRegistrationNameserversId")
    def dns_domain_registration_nameservers_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_domain_registration_nameservers_id")

    @dns_domain_registration_nameservers_id.setter
    def dns_domain_registration_nameservers_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_domain_registration_nameservers_id", value)


@pulumi.input_type
class _DnsDomainRegistrationNameserversState:
    def __init__(__self__, *,
                 dns_domain_registration_nameservers_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 original_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering DnsDomainRegistrationNameservers resources.
        :param pulumi.Input[_builtins.str] dns_registration_id: DNS registration ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] name_servers: Custom name servers for the domain registration
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] original_name_servers: Save of name servers prior to update
        """
        if dns_domain_registration_nameservers_id is not None:
            pulumi.set(__self__, "dns_domain_registration_nameservers_id", dns_domain_registration_nameservers_id)
        if dns_registration_id is not None:
            pulumi.set(__self__, "dns_registration_id", dns_registration_id)
        if name_servers is not None:
            pulumi.set(__self__, "name_servers", name_servers)
        if original_name_servers is not None:
            pulumi.set(__self__, "original_name_servers", original_name_servers)

    @_builtins.property
    @pulumi.getter(name="dnsDomainRegistrationNameserversId")
    def dns_domain_registration_nameservers_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_domain_registration_nameservers_id")

    @dns_domain_registration_nameservers_id.setter
    def dns_domain_registration_nameservers_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_domain_registration_nameservers_id", value)

    @_builtins.property
    @pulumi.getter(name="dnsRegistrationId")
    def dns_registration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS registration ID
        """
        return pulumi.get(self, "dns_registration_id")

    @dns_registration_id.setter
    def dns_registration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_registration_id", value)

    @_builtins.property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Custom name servers for the domain registration
        """
        return pulumi.get(self, "name_servers")

    @name_servers.setter
    def name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "name_servers", value)

    @_builtins.property
    @pulumi.getter(name="originalNameServers")
    def original_name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Save of name servers prior to update
        """
        return pulumi.get(self, "original_name_servers")

    @original_name_servers.setter
    def original_name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "original_name_servers", value)


@pulumi.type_token("ibm:index/dnsDomainRegistrationNameservers:DnsDomainRegistrationNameservers")
class DnsDomainRegistrationNameservers(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_domain_registration_nameservers_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a DnsDomainRegistrationNameservers resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] dns_registration_id: DNS registration ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] name_servers: Custom name servers for the domain registration
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsDomainRegistrationNameserversArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsDomainRegistrationNameservers resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsDomainRegistrationNameserversArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsDomainRegistrationNameserversArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_domain_registration_nameservers_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsDomainRegistrationNameserversArgs.__new__(DnsDomainRegistrationNameserversArgs)

            __props__.__dict__["dns_domain_registration_nameservers_id"] = dns_domain_registration_nameservers_id
            if dns_registration_id is None and not opts.urn:
                raise TypeError("Missing required property 'dns_registration_id'")
            __props__.__dict__["dns_registration_id"] = dns_registration_id
            if name_servers is None and not opts.urn:
                raise TypeError("Missing required property 'name_servers'")
            __props__.__dict__["name_servers"] = name_servers
            __props__.__dict__["original_name_servers"] = None
        super(DnsDomainRegistrationNameservers, __self__).__init__(
            'ibm:index/dnsDomainRegistrationNameservers:DnsDomainRegistrationNameservers',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dns_domain_registration_nameservers_id: Optional[pulumi.Input[_builtins.str]] = None,
            dns_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
            name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            original_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'DnsDomainRegistrationNameservers':
        """
        Get an existing DnsDomainRegistrationNameservers resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] dns_registration_id: DNS registration ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] name_servers: Custom name servers for the domain registration
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] original_name_servers: Save of name servers prior to update
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsDomainRegistrationNameserversState.__new__(_DnsDomainRegistrationNameserversState)

        __props__.__dict__["dns_domain_registration_nameservers_id"] = dns_domain_registration_nameservers_id
        __props__.__dict__["dns_registration_id"] = dns_registration_id
        __props__.__dict__["name_servers"] = name_servers
        __props__.__dict__["original_name_servers"] = original_name_servers
        return DnsDomainRegistrationNameservers(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dnsDomainRegistrationNameserversId")
    def dns_domain_registration_nameservers_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dns_domain_registration_nameservers_id")

    @_builtins.property
    @pulumi.getter(name="dnsRegistrationId")
    def dns_registration_id(self) -> pulumi.Output[_builtins.str]:
        """
        DNS registration ID
        """
        return pulumi.get(self, "dns_registration_id")

    @_builtins.property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Custom name servers for the domain registration
        """
        return pulumi.get(self, "name_servers")

    @_builtins.property
    @pulumi.getter(name="originalNameServers")
    def original_name_servers(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Save of name servers prior to update
        """
        return pulumi.get(self, "original_name_servers")

