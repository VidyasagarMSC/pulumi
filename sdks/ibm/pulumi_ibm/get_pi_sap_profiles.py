# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiSapProfilesResult',
    'AwaitableGetPiSapProfilesResult',
    'get_pi_sap_profiles',
    'get_pi_sap_profiles_output',
]

@pulumi.output_type
class GetPiSapProfilesResult:
    """
    A collection of values returned by getPiSapProfiles.
    """
    def __init__(__self__, id=None, pi_cloud_instance_id=None, pi_family_filter=None, pi_prefix_filter=None, profiles=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_family_filter and not isinstance(pi_family_filter, str):
            raise TypeError("Expected argument 'pi_family_filter' to be a str")
        pulumi.set(__self__, "pi_family_filter", pi_family_filter)
        if pi_prefix_filter and not isinstance(pi_prefix_filter, str):
            raise TypeError("Expected argument 'pi_prefix_filter' to be a str")
        pulumi.set(__self__, "pi_prefix_filter", pi_prefix_filter)
        if profiles and not isinstance(profiles, list):
            raise TypeError("Expected argument 'profiles' to be a list")
        pulumi.set(__self__, "profiles", profiles)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piFamilyFilter")
    def pi_family_filter(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "pi_family_filter")

    @_builtins.property
    @pulumi.getter(name="piPrefixFilter")
    def pi_prefix_filter(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "pi_prefix_filter")

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetPiSapProfilesProfileResult']:
        return pulumi.get(self, "profiles")


class AwaitableGetPiSapProfilesResult(GetPiSapProfilesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiSapProfilesResult(
            id=self.id,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_family_filter=self.pi_family_filter,
            pi_prefix_filter=self.pi_prefix_filter,
            profiles=self.profiles)


def get_pi_sap_profiles(id: Optional[_builtins.str] = None,
                        pi_cloud_instance_id: Optional[_builtins.str] = None,
                        pi_family_filter: Optional[_builtins.str] = None,
                        pi_prefix_filter: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiSapProfilesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piFamilyFilter'] = pi_family_filter
    __args__['piPrefixFilter'] = pi_prefix_filter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiSapProfiles:getPiSapProfiles', __args__, opts=opts, typ=GetPiSapProfilesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiSapProfilesResult(
        id=pulumi.get(__ret__, 'id'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_family_filter=pulumi.get(__ret__, 'pi_family_filter'),
        pi_prefix_filter=pulumi.get(__ret__, 'pi_prefix_filter'),
        profiles=pulumi.get(__ret__, 'profiles'))
def get_pi_sap_profiles_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                               pi_family_filter: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               pi_prefix_filter: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiSapProfilesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piFamilyFilter'] = pi_family_filter
    __args__['piPrefixFilter'] = pi_prefix_filter
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiSapProfiles:getPiSapProfiles', __args__, opts=opts, typ=GetPiSapProfilesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiSapProfilesResult(
        id=pulumi.get(__response__, 'id'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_family_filter=pulumi.get(__response__, 'pi_family_filter'),
        pi_prefix_filter=pulumi.get(__response__, 'pi_prefix_filter'),
        profiles=pulumi.get(__response__, 'profiles')))
