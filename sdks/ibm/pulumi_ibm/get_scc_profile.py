# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccProfileResult',
    'AwaitableGetSccProfileResult',
    'get_scc_profile',
    'get_scc_profile_output',
]

@pulumi.output_type
class GetSccProfileResult:
    """
    A collection of values returned by getSccProfile.
    """
    def __init__(__self__, attachments_count=None, control_parents_count=None, controls=None, controls_count=None, created_by=None, created_on=None, default_parameters=None, hierarchy_enabled=None, id=None, instance_id=None, latest=None, profile_description=None, profile_id=None, profile_name=None, profile_type=None, profile_version=None, updated_by=None, updated_on=None, version_group_label=None):
        if attachments_count and not isinstance(attachments_count, float):
            raise TypeError("Expected argument 'attachments_count' to be a float")
        pulumi.set(__self__, "attachments_count", attachments_count)
        if control_parents_count and not isinstance(control_parents_count, float):
            raise TypeError("Expected argument 'control_parents_count' to be a float")
        pulumi.set(__self__, "control_parents_count", control_parents_count)
        if controls and not isinstance(controls, list):
            raise TypeError("Expected argument 'controls' to be a list")
        pulumi.set(__self__, "controls", controls)
        if controls_count and not isinstance(controls_count, float):
            raise TypeError("Expected argument 'controls_count' to be a float")
        pulumi.set(__self__, "controls_count", controls_count)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if default_parameters and not isinstance(default_parameters, list):
            raise TypeError("Expected argument 'default_parameters' to be a list")
        pulumi.set(__self__, "default_parameters", default_parameters)
        if hierarchy_enabled and not isinstance(hierarchy_enabled, bool):
            raise TypeError("Expected argument 'hierarchy_enabled' to be a bool")
        pulumi.set(__self__, "hierarchy_enabled", hierarchy_enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if latest and not isinstance(latest, bool):
            raise TypeError("Expected argument 'latest' to be a bool")
        pulumi.set(__self__, "latest", latest)
        if profile_description and not isinstance(profile_description, str):
            raise TypeError("Expected argument 'profile_description' to be a str")
        pulumi.set(__self__, "profile_description", profile_description)
        if profile_id and not isinstance(profile_id, str):
            raise TypeError("Expected argument 'profile_id' to be a str")
        pulumi.set(__self__, "profile_id", profile_id)
        if profile_name and not isinstance(profile_name, str):
            raise TypeError("Expected argument 'profile_name' to be a str")
        pulumi.set(__self__, "profile_name", profile_name)
        if profile_type and not isinstance(profile_type, str):
            raise TypeError("Expected argument 'profile_type' to be a str")
        pulumi.set(__self__, "profile_type", profile_type)
        if profile_version and not isinstance(profile_version, str):
            raise TypeError("Expected argument 'profile_version' to be a str")
        pulumi.set(__self__, "profile_version", profile_version)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)
        if updated_on and not isinstance(updated_on, str):
            raise TypeError("Expected argument 'updated_on' to be a str")
        pulumi.set(__self__, "updated_on", updated_on)
        if version_group_label and not isinstance(version_group_label, str):
            raise TypeError("Expected argument 'version_group_label' to be a str")
        pulumi.set(__self__, "version_group_label", version_group_label)

    @_builtins.property
    @pulumi.getter(name="attachmentsCount")
    def attachments_count(self) -> _builtins.float:
        return pulumi.get(self, "attachments_count")

    @_builtins.property
    @pulumi.getter(name="controlParentsCount")
    def control_parents_count(self) -> _builtins.float:
        return pulumi.get(self, "control_parents_count")

    @_builtins.property
    @pulumi.getter
    def controls(self) -> Sequence['outputs.GetSccProfileControlResult']:
        return pulumi.get(self, "controls")

    @_builtins.property
    @pulumi.getter(name="controlsCount")
    def controls_count(self) -> _builtins.float:
        return pulumi.get(self, "controls_count")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> _builtins.str:
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter(name="defaultParameters")
    def default_parameters(self) -> Sequence['outputs.GetSccProfileDefaultParameterResult']:
        return pulumi.get(self, "default_parameters")

    @_builtins.property
    @pulumi.getter(name="hierarchyEnabled")
    def hierarchy_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "hierarchy_enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def latest(self) -> _builtins.bool:
        return pulumi.get(self, "latest")

    @_builtins.property
    @pulumi.getter(name="profileDescription")
    def profile_description(self) -> _builtins.str:
        return pulumi.get(self, "profile_description")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> _builtins.str:
        return pulumi.get(self, "profile_id")

    @_builtins.property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> _builtins.str:
        return pulumi.get(self, "profile_name")

    @_builtins.property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> _builtins.str:
        return pulumi.get(self, "profile_type")

    @_builtins.property
    @pulumi.getter(name="profileVersion")
    def profile_version(self) -> _builtins.str:
        return pulumi.get(self, "profile_version")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> _builtins.str:
        return pulumi.get(self, "updated_on")

    @_builtins.property
    @pulumi.getter(name="versionGroupLabel")
    def version_group_label(self) -> _builtins.str:
        return pulumi.get(self, "version_group_label")


class AwaitableGetSccProfileResult(GetSccProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccProfileResult(
            attachments_count=self.attachments_count,
            control_parents_count=self.control_parents_count,
            controls=self.controls,
            controls_count=self.controls_count,
            created_by=self.created_by,
            created_on=self.created_on,
            default_parameters=self.default_parameters,
            hierarchy_enabled=self.hierarchy_enabled,
            id=self.id,
            instance_id=self.instance_id,
            latest=self.latest,
            profile_description=self.profile_description,
            profile_id=self.profile_id,
            profile_name=self.profile_name,
            profile_type=self.profile_type,
            profile_version=self.profile_version,
            updated_by=self.updated_by,
            updated_on=self.updated_on,
            version_group_label=self.version_group_label)


def get_scc_profile(id: Optional[_builtins.str] = None,
                    instance_id: Optional[_builtins.str] = None,
                    profile_id: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccProfileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['profileId'] = profile_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccProfile:getSccProfile', __args__, opts=opts, typ=GetSccProfileResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccProfileResult(
        attachments_count=pulumi.get(__ret__, 'attachments_count'),
        control_parents_count=pulumi.get(__ret__, 'control_parents_count'),
        controls=pulumi.get(__ret__, 'controls'),
        controls_count=pulumi.get(__ret__, 'controls_count'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_on=pulumi.get(__ret__, 'created_on'),
        default_parameters=pulumi.get(__ret__, 'default_parameters'),
        hierarchy_enabled=pulumi.get(__ret__, 'hierarchy_enabled'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        latest=pulumi.get(__ret__, 'latest'),
        profile_description=pulumi.get(__ret__, 'profile_description'),
        profile_id=pulumi.get(__ret__, 'profile_id'),
        profile_name=pulumi.get(__ret__, 'profile_name'),
        profile_type=pulumi.get(__ret__, 'profile_type'),
        profile_version=pulumi.get(__ret__, 'profile_version'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        updated_on=pulumi.get(__ret__, 'updated_on'),
        version_group_label=pulumi.get(__ret__, 'version_group_label'))
def get_scc_profile_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                           profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccProfileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['profileId'] = profile_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccProfile:getSccProfile', __args__, opts=opts, typ=GetSccProfileResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccProfileResult(
        attachments_count=pulumi.get(__response__, 'attachments_count'),
        control_parents_count=pulumi.get(__response__, 'control_parents_count'),
        controls=pulumi.get(__response__, 'controls'),
        controls_count=pulumi.get(__response__, 'controls_count'),
        created_by=pulumi.get(__response__, 'created_by'),
        created_on=pulumi.get(__response__, 'created_on'),
        default_parameters=pulumi.get(__response__, 'default_parameters'),
        hierarchy_enabled=pulumi.get(__response__, 'hierarchy_enabled'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        latest=pulumi.get(__response__, 'latest'),
        profile_description=pulumi.get(__response__, 'profile_description'),
        profile_id=pulumi.get(__response__, 'profile_id'),
        profile_name=pulumi.get(__response__, 'profile_name'),
        profile_type=pulumi.get(__response__, 'profile_type'),
        profile_version=pulumi.get(__response__, 'profile_version'),
        updated_by=pulumi.get(__response__, 'updated_by'),
        updated_on=pulumi.get(__response__, 'updated_on'),
        version_group_label=pulumi.get(__response__, 'version_group_label')))
