# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiVolumeResult',
    'AwaitableGetPiVolumeResult',
    'get_pi_volume',
    'get_pi_volume_output',
]

@pulumi.output_type
class GetPiVolumeResult:
    """
    A collection of values returned by getPiVolume.
    """
    def __init__(__self__, auxiliary=None, auxiliary_volume_name=None, bootable=None, consistency_group_name=None, creation_date=None, crn=None, disk_type=None, freeze_time=None, group_id=None, id=None, io_throttle_rate=None, last_update_date=None, master_volume_name=None, mirroring_state=None, out_of_band_deleted=None, pi_cloud_instance_id=None, pi_volume_name=None, primary_role=None, replication_enabled=None, replication_sites=None, replication_status=None, replication_type=None, shreable=None, size=None, state=None, user_tags=None, volume_pool=None, wwn=None):
        if auxiliary and not isinstance(auxiliary, bool):
            raise TypeError("Expected argument 'auxiliary' to be a bool")
        pulumi.set(__self__, "auxiliary", auxiliary)
        if auxiliary_volume_name and not isinstance(auxiliary_volume_name, str):
            raise TypeError("Expected argument 'auxiliary_volume_name' to be a str")
        pulumi.set(__self__, "auxiliary_volume_name", auxiliary_volume_name)
        if bootable and not isinstance(bootable, bool):
            raise TypeError("Expected argument 'bootable' to be a bool")
        pulumi.set(__self__, "bootable", bootable)
        if consistency_group_name and not isinstance(consistency_group_name, str):
            raise TypeError("Expected argument 'consistency_group_name' to be a str")
        pulumi.set(__self__, "consistency_group_name", consistency_group_name)
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if disk_type and not isinstance(disk_type, str):
            raise TypeError("Expected argument 'disk_type' to be a str")
        pulumi.set(__self__, "disk_type", disk_type)
        if freeze_time and not isinstance(freeze_time, str):
            raise TypeError("Expected argument 'freeze_time' to be a str")
        pulumi.set(__self__, "freeze_time", freeze_time)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if io_throttle_rate and not isinstance(io_throttle_rate, str):
            raise TypeError("Expected argument 'io_throttle_rate' to be a str")
        pulumi.set(__self__, "io_throttle_rate", io_throttle_rate)
        if last_update_date and not isinstance(last_update_date, str):
            raise TypeError("Expected argument 'last_update_date' to be a str")
        pulumi.set(__self__, "last_update_date", last_update_date)
        if master_volume_name and not isinstance(master_volume_name, str):
            raise TypeError("Expected argument 'master_volume_name' to be a str")
        pulumi.set(__self__, "master_volume_name", master_volume_name)
        if mirroring_state and not isinstance(mirroring_state, str):
            raise TypeError("Expected argument 'mirroring_state' to be a str")
        pulumi.set(__self__, "mirroring_state", mirroring_state)
        if out_of_band_deleted and not isinstance(out_of_band_deleted, bool):
            raise TypeError("Expected argument 'out_of_band_deleted' to be a bool")
        pulumi.set(__self__, "out_of_band_deleted", out_of_band_deleted)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_volume_name and not isinstance(pi_volume_name, str):
            raise TypeError("Expected argument 'pi_volume_name' to be a str")
        pulumi.set(__self__, "pi_volume_name", pi_volume_name)
        if primary_role and not isinstance(primary_role, str):
            raise TypeError("Expected argument 'primary_role' to be a str")
        pulumi.set(__self__, "primary_role", primary_role)
        if replication_enabled and not isinstance(replication_enabled, bool):
            raise TypeError("Expected argument 'replication_enabled' to be a bool")
        pulumi.set(__self__, "replication_enabled", replication_enabled)
        if replication_sites and not isinstance(replication_sites, list):
            raise TypeError("Expected argument 'replication_sites' to be a list")
        pulumi.set(__self__, "replication_sites", replication_sites)
        if replication_status and not isinstance(replication_status, str):
            raise TypeError("Expected argument 'replication_status' to be a str")
        pulumi.set(__self__, "replication_status", replication_status)
        if replication_type and not isinstance(replication_type, str):
            raise TypeError("Expected argument 'replication_type' to be a str")
        pulumi.set(__self__, "replication_type", replication_type)
        if shreable and not isinstance(shreable, bool):
            raise TypeError("Expected argument 'shreable' to be a bool")
        pulumi.set(__self__, "shreable", shreable)
        if size and not isinstance(size, float):
            raise TypeError("Expected argument 'size' to be a float")
        pulumi.set(__self__, "size", size)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if user_tags and not isinstance(user_tags, list):
            raise TypeError("Expected argument 'user_tags' to be a list")
        pulumi.set(__self__, "user_tags", user_tags)
        if volume_pool and not isinstance(volume_pool, str):
            raise TypeError("Expected argument 'volume_pool' to be a str")
        pulumi.set(__self__, "volume_pool", volume_pool)
        if wwn and not isinstance(wwn, str):
            raise TypeError("Expected argument 'wwn' to be a str")
        pulumi.set(__self__, "wwn", wwn)

    @_builtins.property
    @pulumi.getter
    def auxiliary(self) -> _builtins.bool:
        return pulumi.get(self, "auxiliary")

    @_builtins.property
    @pulumi.getter(name="auxiliaryVolumeName")
    def auxiliary_volume_name(self) -> _builtins.str:
        return pulumi.get(self, "auxiliary_volume_name")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.bool:
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter(name="consistencyGroupName")
    def consistency_group_name(self) -> _builtins.str:
        return pulumi.get(self, "consistency_group_name")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> _builtins.str:
        return pulumi.get(self, "disk_type")

    @_builtins.property
    @pulumi.getter(name="freezeTime")
    def freeze_time(self) -> _builtins.str:
        return pulumi.get(self, "freeze_time")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ioThrottleRate")
    def io_throttle_rate(self) -> _builtins.str:
        return pulumi.get(self, "io_throttle_rate")

    @_builtins.property
    @pulumi.getter(name="lastUpdateDate")
    def last_update_date(self) -> _builtins.str:
        return pulumi.get(self, "last_update_date")

    @_builtins.property
    @pulumi.getter(name="masterVolumeName")
    def master_volume_name(self) -> _builtins.str:
        return pulumi.get(self, "master_volume_name")

    @_builtins.property
    @pulumi.getter(name="mirroringState")
    def mirroring_state(self) -> _builtins.str:
        return pulumi.get(self, "mirroring_state")

    @_builtins.property
    @pulumi.getter(name="outOfBandDeleted")
    def out_of_band_deleted(self) -> _builtins.bool:
        return pulumi.get(self, "out_of_band_deleted")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piVolumeName")
    def pi_volume_name(self) -> _builtins.str:
        return pulumi.get(self, "pi_volume_name")

    @_builtins.property
    @pulumi.getter(name="primaryRole")
    def primary_role(self) -> _builtins.str:
        return pulumi.get(self, "primary_role")

    @_builtins.property
    @pulumi.getter(name="replicationEnabled")
    def replication_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "replication_enabled")

    @_builtins.property
    @pulumi.getter(name="replicationSites")
    def replication_sites(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "replication_sites")

    @_builtins.property
    @pulumi.getter(name="replicationStatus")
    def replication_status(self) -> _builtins.str:
        return pulumi.get(self, "replication_status")

    @_builtins.property
    @pulumi.getter(name="replicationType")
    def replication_type(self) -> _builtins.str:
        return pulumi.get(self, "replication_type")

    @_builtins.property
    @pulumi.getter
    def shreable(self) -> _builtins.bool:
        return pulumi.get(self, "shreable")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.float:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "user_tags")

    @_builtins.property
    @pulumi.getter(name="volumePool")
    def volume_pool(self) -> _builtins.str:
        return pulumi.get(self, "volume_pool")

    @_builtins.property
    @pulumi.getter
    def wwn(self) -> _builtins.str:
        return pulumi.get(self, "wwn")


class AwaitableGetPiVolumeResult(GetPiVolumeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiVolumeResult(
            auxiliary=self.auxiliary,
            auxiliary_volume_name=self.auxiliary_volume_name,
            bootable=self.bootable,
            consistency_group_name=self.consistency_group_name,
            creation_date=self.creation_date,
            crn=self.crn,
            disk_type=self.disk_type,
            freeze_time=self.freeze_time,
            group_id=self.group_id,
            id=self.id,
            io_throttle_rate=self.io_throttle_rate,
            last_update_date=self.last_update_date,
            master_volume_name=self.master_volume_name,
            mirroring_state=self.mirroring_state,
            out_of_band_deleted=self.out_of_band_deleted,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_volume_name=self.pi_volume_name,
            primary_role=self.primary_role,
            replication_enabled=self.replication_enabled,
            replication_sites=self.replication_sites,
            replication_status=self.replication_status,
            replication_type=self.replication_type,
            shreable=self.shreable,
            size=self.size,
            state=self.state,
            user_tags=self.user_tags,
            volume_pool=self.volume_pool,
            wwn=self.wwn)


def get_pi_volume(id: Optional[_builtins.str] = None,
                  pi_cloud_instance_id: Optional[_builtins.str] = None,
                  pi_volume_name: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiVolumeResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piVolumeName'] = pi_volume_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiVolume:getPiVolume', __args__, opts=opts, typ=GetPiVolumeResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiVolumeResult(
        auxiliary=pulumi.get(__ret__, 'auxiliary'),
        auxiliary_volume_name=pulumi.get(__ret__, 'auxiliary_volume_name'),
        bootable=pulumi.get(__ret__, 'bootable'),
        consistency_group_name=pulumi.get(__ret__, 'consistency_group_name'),
        creation_date=pulumi.get(__ret__, 'creation_date'),
        crn=pulumi.get(__ret__, 'crn'),
        disk_type=pulumi.get(__ret__, 'disk_type'),
        freeze_time=pulumi.get(__ret__, 'freeze_time'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        io_throttle_rate=pulumi.get(__ret__, 'io_throttle_rate'),
        last_update_date=pulumi.get(__ret__, 'last_update_date'),
        master_volume_name=pulumi.get(__ret__, 'master_volume_name'),
        mirroring_state=pulumi.get(__ret__, 'mirroring_state'),
        out_of_band_deleted=pulumi.get(__ret__, 'out_of_band_deleted'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_volume_name=pulumi.get(__ret__, 'pi_volume_name'),
        primary_role=pulumi.get(__ret__, 'primary_role'),
        replication_enabled=pulumi.get(__ret__, 'replication_enabled'),
        replication_sites=pulumi.get(__ret__, 'replication_sites'),
        replication_status=pulumi.get(__ret__, 'replication_status'),
        replication_type=pulumi.get(__ret__, 'replication_type'),
        shreable=pulumi.get(__ret__, 'shreable'),
        size=pulumi.get(__ret__, 'size'),
        state=pulumi.get(__ret__, 'state'),
        user_tags=pulumi.get(__ret__, 'user_tags'),
        volume_pool=pulumi.get(__ret__, 'volume_pool'),
        wwn=pulumi.get(__ret__, 'wwn'))
def get_pi_volume_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                         pi_volume_name: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiVolumeResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piVolumeName'] = pi_volume_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiVolume:getPiVolume', __args__, opts=opts, typ=GetPiVolumeResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiVolumeResult(
        auxiliary=pulumi.get(__response__, 'auxiliary'),
        auxiliary_volume_name=pulumi.get(__response__, 'auxiliary_volume_name'),
        bootable=pulumi.get(__response__, 'bootable'),
        consistency_group_name=pulumi.get(__response__, 'consistency_group_name'),
        creation_date=pulumi.get(__response__, 'creation_date'),
        crn=pulumi.get(__response__, 'crn'),
        disk_type=pulumi.get(__response__, 'disk_type'),
        freeze_time=pulumi.get(__response__, 'freeze_time'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        io_throttle_rate=pulumi.get(__response__, 'io_throttle_rate'),
        last_update_date=pulumi.get(__response__, 'last_update_date'),
        master_volume_name=pulumi.get(__response__, 'master_volume_name'),
        mirroring_state=pulumi.get(__response__, 'mirroring_state'),
        out_of_band_deleted=pulumi.get(__response__, 'out_of_band_deleted'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_volume_name=pulumi.get(__response__, 'pi_volume_name'),
        primary_role=pulumi.get(__response__, 'primary_role'),
        replication_enabled=pulumi.get(__response__, 'replication_enabled'),
        replication_sites=pulumi.get(__response__, 'replication_sites'),
        replication_status=pulumi.get(__response__, 'replication_status'),
        replication_type=pulumi.get(__response__, 'replication_type'),
        shreable=pulumi.get(__response__, 'shreable'),
        size=pulumi.get(__response__, 'size'),
        state=pulumi.get(__response__, 'state'),
        user_tags=pulumi.get(__response__, 'user_tags'),
        volume_pool=pulumi.get(__response__, 'volume_pool'),
        wwn=pulumi.get(__response__, 'wwn')))
