# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsShareResult',
    'AwaitableGetIsShareResult',
    'get_is_share',
    'get_is_share_output',
]

@pulumi.output_type
class GetIsShareResult:
    """
    A collection of values returned by getIsShare.
    """
    def __init__(__self__, access_control_mode=None, access_tags=None, accessor_binding_role=None, accessor_bindings=None, allowed_transit_encryption_modes=None, created_at=None, crn=None, encryption=None, encryption_key=None, href=None, id=None, iops=None, latest_jobs=None, latest_syncs=None, lifecycle_state=None, mount_targets=None, name=None, origin_shares=None, profile=None, replica_shares=None, replication_cron_spec=None, replication_role=None, replication_status=None, replication_status_reasons=None, resource_group=None, resource_type=None, share=None, share_targets=None, size=None, snapshot_count=None, snapshot_size=None, source_shares=None, source_snapshots=None, tags=None, zone=None):
        if access_control_mode and not isinstance(access_control_mode, str):
            raise TypeError("Expected argument 'access_control_mode' to be a str")
        pulumi.set(__self__, "access_control_mode", access_control_mode)
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if accessor_binding_role and not isinstance(accessor_binding_role, str):
            raise TypeError("Expected argument 'accessor_binding_role' to be a str")
        pulumi.set(__self__, "accessor_binding_role", accessor_binding_role)
        if accessor_bindings and not isinstance(accessor_bindings, list):
            raise TypeError("Expected argument 'accessor_bindings' to be a list")
        pulumi.set(__self__, "accessor_bindings", accessor_bindings)
        if allowed_transit_encryption_modes and not isinstance(allowed_transit_encryption_modes, list):
            raise TypeError("Expected argument 'allowed_transit_encryption_modes' to be a list")
        pulumi.set(__self__, "allowed_transit_encryption_modes", allowed_transit_encryption_modes)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if encryption and not isinstance(encryption, str):
            raise TypeError("Expected argument 'encryption' to be a str")
        pulumi.set(__self__, "encryption", encryption)
        if encryption_key and not isinstance(encryption_key, str):
            raise TypeError("Expected argument 'encryption_key' to be a str")
        pulumi.set(__self__, "encryption_key", encryption_key)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if iops and not isinstance(iops, float):
            raise TypeError("Expected argument 'iops' to be a float")
        pulumi.set(__self__, "iops", iops)
        if latest_jobs and not isinstance(latest_jobs, list):
            raise TypeError("Expected argument 'latest_jobs' to be a list")
        pulumi.set(__self__, "latest_jobs", latest_jobs)
        if latest_syncs and not isinstance(latest_syncs, list):
            raise TypeError("Expected argument 'latest_syncs' to be a list")
        pulumi.set(__self__, "latest_syncs", latest_syncs)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if mount_targets and not isinstance(mount_targets, list):
            raise TypeError("Expected argument 'mount_targets' to be a list")
        pulumi.set(__self__, "mount_targets", mount_targets)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if origin_shares and not isinstance(origin_shares, list):
            raise TypeError("Expected argument 'origin_shares' to be a list")
        pulumi.set(__self__, "origin_shares", origin_shares)
        if profile and not isinstance(profile, str):
            raise TypeError("Expected argument 'profile' to be a str")
        pulumi.set(__self__, "profile", profile)
        if replica_shares and not isinstance(replica_shares, list):
            raise TypeError("Expected argument 'replica_shares' to be a list")
        pulumi.set(__self__, "replica_shares", replica_shares)
        if replication_cron_spec and not isinstance(replication_cron_spec, str):
            raise TypeError("Expected argument 'replication_cron_spec' to be a str")
        pulumi.set(__self__, "replication_cron_spec", replication_cron_spec)
        if replication_role and not isinstance(replication_role, str):
            raise TypeError("Expected argument 'replication_role' to be a str")
        pulumi.set(__self__, "replication_role", replication_role)
        if replication_status and not isinstance(replication_status, str):
            raise TypeError("Expected argument 'replication_status' to be a str")
        pulumi.set(__self__, "replication_status", replication_status)
        if replication_status_reasons and not isinstance(replication_status_reasons, list):
            raise TypeError("Expected argument 'replication_status_reasons' to be a list")
        pulumi.set(__self__, "replication_status_reasons", replication_status_reasons)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if share and not isinstance(share, str):
            raise TypeError("Expected argument 'share' to be a str")
        pulumi.set(__self__, "share", share)
        if share_targets and not isinstance(share_targets, list):
            raise TypeError("Expected argument 'share_targets' to be a list")
        pulumi.set(__self__, "share_targets", share_targets)
        if size and not isinstance(size, float):
            raise TypeError("Expected argument 'size' to be a float")
        pulumi.set(__self__, "size", size)
        if snapshot_count and not isinstance(snapshot_count, float):
            raise TypeError("Expected argument 'snapshot_count' to be a float")
        pulumi.set(__self__, "snapshot_count", snapshot_count)
        if snapshot_size and not isinstance(snapshot_size, float):
            raise TypeError("Expected argument 'snapshot_size' to be a float")
        pulumi.set(__self__, "snapshot_size", snapshot_size)
        if source_shares and not isinstance(source_shares, list):
            raise TypeError("Expected argument 'source_shares' to be a list")
        pulumi.set(__self__, "source_shares", source_shares)
        if source_snapshots and not isinstance(source_snapshots, list):
            raise TypeError("Expected argument 'source_snapshots' to be a list")
        pulumi.set(__self__, "source_snapshots", source_snapshots)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessControlMode")
    def access_control_mode(self) -> _builtins.str:
        return pulumi.get(self, "access_control_mode")

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="accessorBindingRole")
    def accessor_binding_role(self) -> _builtins.str:
        return pulumi.get(self, "accessor_binding_role")

    @_builtins.property
    @pulumi.getter(name="accessorBindings")
    def accessor_bindings(self) -> Sequence['outputs.GetIsShareAccessorBindingResult']:
        return pulumi.get(self, "accessor_bindings")

    @_builtins.property
    @pulumi.getter(name="allowedTransitEncryptionModes")
    def allowed_transit_encryption_modes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "allowed_transit_encryption_modes")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> _builtins.str:
        return pulumi.get(self, "encryption")

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> _builtins.str:
        return pulumi.get(self, "encryption_key")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> _builtins.float:
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="latestJobs")
    def latest_jobs(self) -> Sequence['outputs.GetIsShareLatestJobResult']:
        return pulumi.get(self, "latest_jobs")

    @_builtins.property
    @pulumi.getter(name="latestSyncs")
    def latest_syncs(self) -> Sequence['outputs.GetIsShareLatestSyncResult']:
        return pulumi.get(self, "latest_syncs")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="mountTargets")
    def mount_targets(self) -> Sequence['outputs.GetIsShareMountTargetResult']:
        return pulumi.get(self, "mount_targets")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="originShares")
    def origin_shares(self) -> Sequence['outputs.GetIsShareOriginShareResult']:
        return pulumi.get(self, "origin_shares")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> _builtins.str:
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="replicaShares")
    def replica_shares(self) -> Sequence['outputs.GetIsShareReplicaShareResult']:
        return pulumi.get(self, "replica_shares")

    @_builtins.property
    @pulumi.getter(name="replicationCronSpec")
    def replication_cron_spec(self) -> _builtins.str:
        return pulumi.get(self, "replication_cron_spec")

    @_builtins.property
    @pulumi.getter(name="replicationRole")
    def replication_role(self) -> _builtins.str:
        return pulumi.get(self, "replication_role")

    @_builtins.property
    @pulumi.getter(name="replicationStatus")
    def replication_status(self) -> _builtins.str:
        return pulumi.get(self, "replication_status")

    @_builtins.property
    @pulumi.getter(name="replicationStatusReasons")
    def replication_status_reasons(self) -> Sequence['outputs.GetIsShareReplicationStatusReasonResult']:
        return pulumi.get(self, "replication_status_reasons")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def share(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "share")

    @_builtins.property
    @pulumi.getter(name="shareTargets")
    def share_targets(self) -> Sequence['outputs.GetIsShareShareTargetResult']:
        return pulumi.get(self, "share_targets")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.float:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotCount")
    def snapshot_count(self) -> _builtins.float:
        return pulumi.get(self, "snapshot_count")

    @_builtins.property
    @pulumi.getter(name="snapshotSize")
    def snapshot_size(self) -> _builtins.float:
        return pulumi.get(self, "snapshot_size")

    @_builtins.property
    @pulumi.getter(name="sourceShares")
    def source_shares(self) -> Sequence['outputs.GetIsShareSourceShareResult']:
        return pulumi.get(self, "source_shares")

    @_builtins.property
    @pulumi.getter(name="sourceSnapshots")
    def source_snapshots(self) -> Sequence['outputs.GetIsShareSourceSnapshotResult']:
        return pulumi.get(self, "source_snapshots")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetIsShareResult(GetIsShareResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsShareResult(
            access_control_mode=self.access_control_mode,
            access_tags=self.access_tags,
            accessor_binding_role=self.accessor_binding_role,
            accessor_bindings=self.accessor_bindings,
            allowed_transit_encryption_modes=self.allowed_transit_encryption_modes,
            created_at=self.created_at,
            crn=self.crn,
            encryption=self.encryption,
            encryption_key=self.encryption_key,
            href=self.href,
            id=self.id,
            iops=self.iops,
            latest_jobs=self.latest_jobs,
            latest_syncs=self.latest_syncs,
            lifecycle_state=self.lifecycle_state,
            mount_targets=self.mount_targets,
            name=self.name,
            origin_shares=self.origin_shares,
            profile=self.profile,
            replica_shares=self.replica_shares,
            replication_cron_spec=self.replication_cron_spec,
            replication_role=self.replication_role,
            replication_status=self.replication_status,
            replication_status_reasons=self.replication_status_reasons,
            resource_group=self.resource_group,
            resource_type=self.resource_type,
            share=self.share,
            share_targets=self.share_targets,
            size=self.size,
            snapshot_count=self.snapshot_count,
            snapshot_size=self.snapshot_size,
            source_shares=self.source_shares,
            source_snapshots=self.source_snapshots,
            tags=self.tags,
            zone=self.zone)


def get_is_share(id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 share: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsShareResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['share'] = share
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsShare:getIsShare', __args__, opts=opts, typ=GetIsShareResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsShareResult(
        access_control_mode=pulumi.get(__ret__, 'access_control_mode'),
        access_tags=pulumi.get(__ret__, 'access_tags'),
        accessor_binding_role=pulumi.get(__ret__, 'accessor_binding_role'),
        accessor_bindings=pulumi.get(__ret__, 'accessor_bindings'),
        allowed_transit_encryption_modes=pulumi.get(__ret__, 'allowed_transit_encryption_modes'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        encryption=pulumi.get(__ret__, 'encryption'),
        encryption_key=pulumi.get(__ret__, 'encryption_key'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        iops=pulumi.get(__ret__, 'iops'),
        latest_jobs=pulumi.get(__ret__, 'latest_jobs'),
        latest_syncs=pulumi.get(__ret__, 'latest_syncs'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        mount_targets=pulumi.get(__ret__, 'mount_targets'),
        name=pulumi.get(__ret__, 'name'),
        origin_shares=pulumi.get(__ret__, 'origin_shares'),
        profile=pulumi.get(__ret__, 'profile'),
        replica_shares=pulumi.get(__ret__, 'replica_shares'),
        replication_cron_spec=pulumi.get(__ret__, 'replication_cron_spec'),
        replication_role=pulumi.get(__ret__, 'replication_role'),
        replication_status=pulumi.get(__ret__, 'replication_status'),
        replication_status_reasons=pulumi.get(__ret__, 'replication_status_reasons'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        share=pulumi.get(__ret__, 'share'),
        share_targets=pulumi.get(__ret__, 'share_targets'),
        size=pulumi.get(__ret__, 'size'),
        snapshot_count=pulumi.get(__ret__, 'snapshot_count'),
        snapshot_size=pulumi.get(__ret__, 'snapshot_size'),
        source_shares=pulumi.get(__ret__, 'source_shares'),
        source_snapshots=pulumi.get(__ret__, 'source_snapshots'),
        tags=pulumi.get(__ret__, 'tags'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_share_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        share: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsShareResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['share'] = share
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsShare:getIsShare', __args__, opts=opts, typ=GetIsShareResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsShareResult(
        access_control_mode=pulumi.get(__response__, 'access_control_mode'),
        access_tags=pulumi.get(__response__, 'access_tags'),
        accessor_binding_role=pulumi.get(__response__, 'accessor_binding_role'),
        accessor_bindings=pulumi.get(__response__, 'accessor_bindings'),
        allowed_transit_encryption_modes=pulumi.get(__response__, 'allowed_transit_encryption_modes'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        encryption=pulumi.get(__response__, 'encryption'),
        encryption_key=pulumi.get(__response__, 'encryption_key'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        iops=pulumi.get(__response__, 'iops'),
        latest_jobs=pulumi.get(__response__, 'latest_jobs'),
        latest_syncs=pulumi.get(__response__, 'latest_syncs'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        mount_targets=pulumi.get(__response__, 'mount_targets'),
        name=pulumi.get(__response__, 'name'),
        origin_shares=pulumi.get(__response__, 'origin_shares'),
        profile=pulumi.get(__response__, 'profile'),
        replica_shares=pulumi.get(__response__, 'replica_shares'),
        replication_cron_spec=pulumi.get(__response__, 'replication_cron_spec'),
        replication_role=pulumi.get(__response__, 'replication_role'),
        replication_status=pulumi.get(__response__, 'replication_status'),
        replication_status_reasons=pulumi.get(__response__, 'replication_status_reasons'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        share=pulumi.get(__response__, 'share'),
        share_targets=pulumi.get(__response__, 'share_targets'),
        size=pulumi.get(__response__, 'size'),
        snapshot_count=pulumi.get(__response__, 'snapshot_count'),
        snapshot_size=pulumi.get(__response__, 'snapshot_size'),
        source_shares=pulumi.get(__response__, 'source_shares'),
        source_snapshots=pulumi.get(__response__, 'source_snapshots'),
        tags=pulumi.get(__response__, 'tags'),
        zone=pulumi.get(__response__, 'zone')))
