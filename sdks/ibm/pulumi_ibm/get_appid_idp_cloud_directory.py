# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAppidIdpCloudDirectoryResult',
    'AwaitableGetAppidIdpCloudDirectoryResult',
    'get_appid_idp_cloud_directory',
    'get_appid_idp_cloud_directory_output',
]

@pulumi.output_type
class GetAppidIdpCloudDirectoryResult:
    """
    A collection of values returned by getAppidIdpCloudDirectory.
    """
    def __init__(__self__, id=None, identity_confirm_access_mode=None, identity_confirm_methods=None, identity_field=None, is_active=None, reset_password_enabled=None, reset_password_notification_enabled=None, self_service_enabled=None, signup_enabled=None, tenant_id=None, welcome_enabled=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_confirm_access_mode and not isinstance(identity_confirm_access_mode, str):
            raise TypeError("Expected argument 'identity_confirm_access_mode' to be a str")
        pulumi.set(__self__, "identity_confirm_access_mode", identity_confirm_access_mode)
        if identity_confirm_methods and not isinstance(identity_confirm_methods, list):
            raise TypeError("Expected argument 'identity_confirm_methods' to be a list")
        pulumi.set(__self__, "identity_confirm_methods", identity_confirm_methods)
        if identity_field and not isinstance(identity_field, str):
            raise TypeError("Expected argument 'identity_field' to be a str")
        pulumi.set(__self__, "identity_field", identity_field)
        if is_active and not isinstance(is_active, bool):
            raise TypeError("Expected argument 'is_active' to be a bool")
        pulumi.set(__self__, "is_active", is_active)
        if reset_password_enabled and not isinstance(reset_password_enabled, bool):
            raise TypeError("Expected argument 'reset_password_enabled' to be a bool")
        pulumi.set(__self__, "reset_password_enabled", reset_password_enabled)
        if reset_password_notification_enabled and not isinstance(reset_password_notification_enabled, bool):
            raise TypeError("Expected argument 'reset_password_notification_enabled' to be a bool")
        pulumi.set(__self__, "reset_password_notification_enabled", reset_password_notification_enabled)
        if self_service_enabled and not isinstance(self_service_enabled, bool):
            raise TypeError("Expected argument 'self_service_enabled' to be a bool")
        pulumi.set(__self__, "self_service_enabled", self_service_enabled)
        if signup_enabled and not isinstance(signup_enabled, bool):
            raise TypeError("Expected argument 'signup_enabled' to be a bool")
        pulumi.set(__self__, "signup_enabled", signup_enabled)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if welcome_enabled and not isinstance(welcome_enabled, bool):
            raise TypeError("Expected argument 'welcome_enabled' to be a bool")
        pulumi.set(__self__, "welcome_enabled", welcome_enabled)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="identityConfirmAccessMode")
    def identity_confirm_access_mode(self) -> _builtins.str:
        return pulumi.get(self, "identity_confirm_access_mode")

    @_builtins.property
    @pulumi.getter(name="identityConfirmMethods")
    def identity_confirm_methods(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "identity_confirm_methods")

    @_builtins.property
    @pulumi.getter(name="identityField")
    def identity_field(self) -> _builtins.str:
        return pulumi.get(self, "identity_field")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> _builtins.bool:
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter(name="resetPasswordEnabled")
    def reset_password_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "reset_password_enabled")

    @_builtins.property
    @pulumi.getter(name="resetPasswordNotificationEnabled")
    def reset_password_notification_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "reset_password_notification_enabled")

    @_builtins.property
    @pulumi.getter(name="selfServiceEnabled")
    def self_service_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "self_service_enabled")

    @_builtins.property
    @pulumi.getter(name="signupEnabled")
    def signup_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "signup_enabled")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="welcomeEnabled")
    def welcome_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "welcome_enabled")


class AwaitableGetAppidIdpCloudDirectoryResult(GetAppidIdpCloudDirectoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppidIdpCloudDirectoryResult(
            id=self.id,
            identity_confirm_access_mode=self.identity_confirm_access_mode,
            identity_confirm_methods=self.identity_confirm_methods,
            identity_field=self.identity_field,
            is_active=self.is_active,
            reset_password_enabled=self.reset_password_enabled,
            reset_password_notification_enabled=self.reset_password_notification_enabled,
            self_service_enabled=self.self_service_enabled,
            signup_enabled=self.signup_enabled,
            tenant_id=self.tenant_id,
            welcome_enabled=self.welcome_enabled)


def get_appid_idp_cloud_directory(id: Optional[_builtins.str] = None,
                                  tenant_id: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppidIdpCloudDirectoryResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppidIdpCloudDirectory:getAppidIdpCloudDirectory', __args__, opts=opts, typ=GetAppidIdpCloudDirectoryResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppidIdpCloudDirectoryResult(
        id=pulumi.get(__ret__, 'id'),
        identity_confirm_access_mode=pulumi.get(__ret__, 'identity_confirm_access_mode'),
        identity_confirm_methods=pulumi.get(__ret__, 'identity_confirm_methods'),
        identity_field=pulumi.get(__ret__, 'identity_field'),
        is_active=pulumi.get(__ret__, 'is_active'),
        reset_password_enabled=pulumi.get(__ret__, 'reset_password_enabled'),
        reset_password_notification_enabled=pulumi.get(__ret__, 'reset_password_notification_enabled'),
        self_service_enabled=pulumi.get(__ret__, 'self_service_enabled'),
        signup_enabled=pulumi.get(__ret__, 'signup_enabled'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        welcome_enabled=pulumi.get(__ret__, 'welcome_enabled'))
def get_appid_idp_cloud_directory_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppidIdpCloudDirectoryResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppidIdpCloudDirectory:getAppidIdpCloudDirectory', __args__, opts=opts, typ=GetAppidIdpCloudDirectoryResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppidIdpCloudDirectoryResult(
        id=pulumi.get(__response__, 'id'),
        identity_confirm_access_mode=pulumi.get(__response__, 'identity_confirm_access_mode'),
        identity_confirm_methods=pulumi.get(__response__, 'identity_confirm_methods'),
        identity_field=pulumi.get(__response__, 'identity_field'),
        is_active=pulumi.get(__response__, 'is_active'),
        reset_password_enabled=pulumi.get(__response__, 'reset_password_enabled'),
        reset_password_notification_enabled=pulumi.get(__response__, 'reset_password_notification_enabled'),
        self_service_enabled=pulumi.get(__response__, 'self_service_enabled'),
        signup_enabled=pulumi.get(__response__, 'signup_enabled'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        welcome_enabled=pulumi.get(__response__, 'welcome_enabled')))
