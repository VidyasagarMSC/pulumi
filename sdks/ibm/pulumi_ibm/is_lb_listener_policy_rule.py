# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsLbListenerPolicyRuleInitArgs', 'IsLbListenerPolicyRule']

@pulumi.input_type
class IsLbListenerPolicyRuleInitArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[_builtins.str],
                 lb: pulumi.Input[_builtins.str],
                 listener: pulumi.Input[_builtins.str],
                 policy: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 field: Optional[pulumi.Input[_builtins.str]] = None,
                 is_lb_listener_policy_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsLbListenerPolicyRuleTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsLbListenerPolicyRule resource.
        :param pulumi.Input[_builtins.str] condition: Condition info of the rule.
        :param pulumi.Input[_builtins.str] lb: Loadbalancer ID
        :param pulumi.Input[_builtins.str] listener: Listener ID.
        :param pulumi.Input[_builtins.str] policy: Listener Policy ID
        :param pulumi.Input[_builtins.str] type: Policy rule type.
        :param pulumi.Input[_builtins.str] value: policy rule value info
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "lb", lb)
        pulumi.set(__self__, "listener", listener)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if is_lb_listener_policy_rule_id is not None:
            pulumi.set(__self__, "is_lb_listener_policy_rule_id", is_lb_listener_policy_rule_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> pulumi.Input[_builtins.str]:
        """
        Condition info of the rule.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "condition", value)

    @_builtins.property
    @pulumi.getter
    def lb(self) -> pulumi.Input[_builtins.str]:
        """
        Loadbalancer ID
        """
        return pulumi.get(self, "lb")

    @lb.setter
    def lb(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "lb", value)

    @_builtins.property
    @pulumi.getter
    def listener(self) -> pulumi.Input[_builtins.str]:
        """
        Listener ID.
        """
        return pulumi.get(self, "listener")

    @listener.setter
    def listener(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "listener", value)

    @_builtins.property
    @pulumi.getter
    def policy(self) -> pulumi.Input[_builtins.str]:
        """
        Listener Policy ID
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Policy rule type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        policy rule value info
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "field", value)

    @_builtins.property
    @pulumi.getter(name="isLbListenerPolicyRuleId")
    def is_lb_listener_policy_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_lb_listener_policy_rule_id")

    @is_lb_listener_policy_rule_id.setter
    def is_lb_listener_policy_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_lb_listener_policy_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsLbListenerPolicyRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsLbListenerPolicyRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsLbListenerPolicyRuleState:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input[_builtins.str]] = None,
                 field: Optional[pulumi.Input[_builtins.str]] = None,
                 is_lb_listener_policy_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                 listener: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input[_builtins.str]] = None,
                 provisioning_status: Optional[pulumi.Input[_builtins.str]] = None,
                 related_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 rule: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsLbListenerPolicyRuleTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsLbListenerPolicyRule resources.
        :param pulumi.Input[_builtins.str] condition: Condition info of the rule.
        :param pulumi.Input[_builtins.str] lb: Loadbalancer ID
        :param pulumi.Input[_builtins.str] listener: Listener ID.
        :param pulumi.Input[_builtins.str] policy: Listener Policy ID
        :param pulumi.Input[_builtins.str] related_crn: The crn of the LB resource
        :param pulumi.Input[_builtins.str] type: Policy rule type.
        :param pulumi.Input[_builtins.str] value: policy rule value info
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if is_lb_listener_policy_rule_id is not None:
            pulumi.set(__self__, "is_lb_listener_policy_rule_id", is_lb_listener_policy_rule_id)
        if lb is not None:
            pulumi.set(__self__, "lb", lb)
        if listener is not None:
            pulumi.set(__self__, "listener", listener)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)
        if related_crn is not None:
            pulumi.set(__self__, "related_crn", related_crn)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Condition info of the rule.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "condition", value)

    @_builtins.property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "field", value)

    @_builtins.property
    @pulumi.getter(name="isLbListenerPolicyRuleId")
    def is_lb_listener_policy_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_lb_listener_policy_rule_id")

    @is_lb_listener_policy_rule_id.setter
    def is_lb_listener_policy_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_lb_listener_policy_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def lb(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Loadbalancer ID
        """
        return pulumi.get(self, "lb")

    @lb.setter
    def lb(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb", value)

    @_builtins.property
    @pulumi.getter
    def listener(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Listener ID.
        """
        return pulumi.get(self, "listener")

    @listener.setter
    def listener(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "listener", value)

    @_builtins.property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Listener Policy ID
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy", value)

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "provisioning_status")

    @provisioning_status.setter
    def provisioning_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "provisioning_status", value)

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the LB resource
        """
        return pulumi.get(self, "related_crn")

    @related_crn.setter
    def related_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_crn", value)

    @_builtins.property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsLbListenerPolicyRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsLbListenerPolicyRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy rule type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        policy rule value info
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.type_token("ibm:index/isLbListenerPolicyRule:IsLbListenerPolicyRule")
class IsLbListenerPolicyRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 condition: Optional[pulumi.Input[_builtins.str]] = None,
                 field: Optional[pulumi.Input[_builtins.str]] = None,
                 is_lb_listener_policy_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                 listener: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsLbListenerPolicyRuleTimeoutsArgs', 'IsLbListenerPolicyRuleTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsLbListenerPolicyRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] condition: Condition info of the rule.
        :param pulumi.Input[_builtins.str] lb: Loadbalancer ID
        :param pulumi.Input[_builtins.str] listener: Listener ID.
        :param pulumi.Input[_builtins.str] policy: Listener Policy ID
        :param pulumi.Input[_builtins.str] type: Policy rule type.
        :param pulumi.Input[_builtins.str] value: policy rule value info
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsLbListenerPolicyRuleInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsLbListenerPolicyRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsLbListenerPolicyRuleInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsLbListenerPolicyRuleInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 condition: Optional[pulumi.Input[_builtins.str]] = None,
                 field: Optional[pulumi.Input[_builtins.str]] = None,
                 is_lb_listener_policy_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                 listener: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsLbListenerPolicyRuleTimeoutsArgs', 'IsLbListenerPolicyRuleTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsLbListenerPolicyRuleInitArgs.__new__(IsLbListenerPolicyRuleInitArgs)

            if condition is None and not opts.urn:
                raise TypeError("Missing required property 'condition'")
            __props__.__dict__["condition"] = condition
            __props__.__dict__["field"] = field
            __props__.__dict__["is_lb_listener_policy_rule_id"] = is_lb_listener_policy_rule_id
            if lb is None and not opts.urn:
                raise TypeError("Missing required property 'lb'")
            __props__.__dict__["lb"] = lb
            if listener is None and not opts.urn:
                raise TypeError("Missing required property 'listener'")
            __props__.__dict__["listener"] = listener
            if policy is None and not opts.urn:
                raise TypeError("Missing required property 'policy'")
            __props__.__dict__["policy"] = policy
            __props__.__dict__["timeouts"] = timeouts
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
            __props__.__dict__["provisioning_status"] = None
            __props__.__dict__["related_crn"] = None
            __props__.__dict__["rule"] = None
        super(IsLbListenerPolicyRule, __self__).__init__(
            'ibm:index/isLbListenerPolicyRule:IsLbListenerPolicyRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            condition: Optional[pulumi.Input[_builtins.str]] = None,
            field: Optional[pulumi.Input[_builtins.str]] = None,
            is_lb_listener_policy_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            lb: Optional[pulumi.Input[_builtins.str]] = None,
            listener: Optional[pulumi.Input[_builtins.str]] = None,
            policy: Optional[pulumi.Input[_builtins.str]] = None,
            provisioning_status: Optional[pulumi.Input[_builtins.str]] = None,
            related_crn: Optional[pulumi.Input[_builtins.str]] = None,
            rule: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsLbListenerPolicyRuleTimeoutsArgs', 'IsLbListenerPolicyRuleTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsLbListenerPolicyRule':
        """
        Get an existing IsLbListenerPolicyRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] condition: Condition info of the rule.
        :param pulumi.Input[_builtins.str] lb: Loadbalancer ID
        :param pulumi.Input[_builtins.str] listener: Listener ID.
        :param pulumi.Input[_builtins.str] policy: Listener Policy ID
        :param pulumi.Input[_builtins.str] related_crn: The crn of the LB resource
        :param pulumi.Input[_builtins.str] type: Policy rule type.
        :param pulumi.Input[_builtins.str] value: policy rule value info
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsLbListenerPolicyRuleState.__new__(_IsLbListenerPolicyRuleState)

        __props__.__dict__["condition"] = condition
        __props__.__dict__["field"] = field
        __props__.__dict__["is_lb_listener_policy_rule_id"] = is_lb_listener_policy_rule_id
        __props__.__dict__["lb"] = lb
        __props__.__dict__["listener"] = listener
        __props__.__dict__["policy"] = policy
        __props__.__dict__["provisioning_status"] = provisioning_status
        __props__.__dict__["related_crn"] = related_crn
        __props__.__dict__["rule"] = rule
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["value"] = value
        return IsLbListenerPolicyRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> pulumi.Output[_builtins.str]:
        """
        Condition info of the rule.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def field(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "field")

    @_builtins.property
    @pulumi.getter(name="isLbListenerPolicyRuleId")
    def is_lb_listener_policy_rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_lb_listener_policy_rule_id")

    @_builtins.property
    @pulumi.getter
    def lb(self) -> pulumi.Output[_builtins.str]:
        """
        Loadbalancer ID
        """
        return pulumi.get(self, "lb")

    @_builtins.property
    @pulumi.getter
    def listener(self) -> pulumi.Output[_builtins.str]:
        """
        Listener ID.
        """
        return pulumi.get(self, "listener")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> pulumi.Output[_builtins.str]:
        """
        Listener Policy ID
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "provisioning_status")

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the LB resource
        """
        return pulumi.get(self, "related_crn")

    @_builtins.property
    @pulumi.getter
    def rule(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "rule")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsLbListenerPolicyRuleTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Policy rule type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[_builtins.str]:
        """
        policy rule value info
        """
        return pulumi.get(self, "value")

