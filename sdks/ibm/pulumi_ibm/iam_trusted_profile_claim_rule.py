# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IamTrustedProfileClaimRuleArgs', 'IamTrustedProfileClaimRule']

@pulumi.input_type
class IamTrustedProfileClaimRuleArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileClaimRuleConditionArgs']]],
                 profile_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 cr_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration: Optional[pulumi.Input[_builtins.float]] = None,
                 iam_trusted_profile_claim_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 realm_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamTrustedProfileClaimRule resource.
        :param pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileClaimRuleConditionArgs']]] conditions: Conditions of this claim rule.
        :param pulumi.Input[_builtins.str] profile_id: ID of the trusted profile to create a claim rule.
        :param pulumi.Input[_builtins.str] type: Type of the calim rule, either 'Profile-SAML' or 'Profile-CR'.
        :param pulumi.Input[_builtins.str] cr_type: The compute resource type. Not required if type is Profile-SAML. Valid values are VSI, IKS_SA, ROKS_SA.
        :param pulumi.Input[_builtins.float] expiration: Session expiration in seconds.
        :param pulumi.Input[_builtins.str] name: Name of the claim rule to be created or updated.
        :param pulumi.Input[_builtins.str] realm_name: The realm name of the Idp this claim rule applies to.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "profile_id", profile_id)
        pulumi.set(__self__, "type", type)
        if cr_type is not None:
            pulumi.set(__self__, "cr_type", cr_type)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if iam_trusted_profile_claim_rule_id is not None:
            pulumi.set(__self__, "iam_trusted_profile_claim_rule_id", iam_trusted_profile_claim_rule_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if realm_name is not None:
            pulumi.set(__self__, "realm_name", realm_name)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileClaimRuleConditionArgs']]]:
        """
        Conditions of this claim rule.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileClaimRuleConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the trusted profile to create a claim rule.
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "profile_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of the calim rule, either 'Profile-SAML' or 'Profile-CR'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="crType")
    def cr_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The compute resource type. Not required if type is Profile-SAML. Valid values are VSI, IKS_SA, ROKS_SA.
        """
        return pulumi.get(self, "cr_type")

    @cr_type.setter
    def cr_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cr_type", value)

    @_builtins.property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Session expiration in seconds.
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "expiration", value)

    @_builtins.property
    @pulumi.getter(name="iamTrustedProfileClaimRuleId")
    def iam_trusted_profile_claim_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_trusted_profile_claim_rule_id")

    @iam_trusted_profile_claim_rule_id.setter
    def iam_trusted_profile_claim_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_trusted_profile_claim_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the claim rule to be created or updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The realm name of the Idp this claim rule applies to.
        """
        return pulumi.get(self, "realm_name")

    @realm_name.setter
    def realm_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "realm_name", value)


@pulumi.input_type
class _IamTrustedProfileClaimRuleState:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileClaimRuleConditionArgs']]]] = None,
                 cr_type: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration: Optional[pulumi.Input[_builtins.float]] = None,
                 iam_trusted_profile_claim_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 modified_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 realm_name: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamTrustedProfileClaimRule resources.
        :param pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileClaimRuleConditionArgs']]] conditions: Conditions of this claim rule.
        :param pulumi.Input[_builtins.str] cr_type: The compute resource type. Not required if type is Profile-SAML. Valid values are VSI, IKS_SA, ROKS_SA.
        :param pulumi.Input[_builtins.str] created_at: If set contains a date time string of the creation date in ISO format.
        :param pulumi.Input[_builtins.str] entity_tag: version of the claim rule.
        :param pulumi.Input[_builtins.float] expiration: Session expiration in seconds.
        :param pulumi.Input[_builtins.str] modified_at: If set contains a date time string of the last modification date in ISO format.
        :param pulumi.Input[_builtins.str] name: Name of the claim rule to be created or updated.
        :param pulumi.Input[_builtins.str] profile_id: ID of the trusted profile to create a claim rule.
        :param pulumi.Input[_builtins.str] realm_name: The realm name of the Idp this claim rule applies to.
        :param pulumi.Input[_builtins.str] rule_id: the unique identifier of the claim rule.
        :param pulumi.Input[_builtins.str] type: Type of the calim rule, either 'Profile-SAML' or 'Profile-CR'.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if cr_type is not None:
            pulumi.set(__self__, "cr_type", cr_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if iam_trusted_profile_claim_rule_id is not None:
            pulumi.set(__self__, "iam_trusted_profile_claim_rule_id", iam_trusted_profile_claim_rule_id)
        if modified_at is not None:
            pulumi.set(__self__, "modified_at", modified_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)
        if realm_name is not None:
            pulumi.set(__self__, "realm_name", realm_name)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileClaimRuleConditionArgs']]]]:
        """
        Conditions of this claim rule.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileClaimRuleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter(name="crType")
    def cr_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The compute resource type. Not required if type is Profile-SAML. Valid values are VSI, IKS_SA, ROKS_SA.
        """
        return pulumi.get(self, "cr_type")

    @cr_type.setter
    def cr_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cr_type", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If set contains a date time string of the creation date in ISO format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        version of the claim rule.
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Session expiration in seconds.
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "expiration", value)

    @_builtins.property
    @pulumi.getter(name="iamTrustedProfileClaimRuleId")
    def iam_trusted_profile_claim_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_trusted_profile_claim_rule_id")

    @iam_trusted_profile_claim_rule_id.setter
    def iam_trusted_profile_claim_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_trusted_profile_claim_rule_id", value)

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If set contains a date time string of the last modification date in ISO format.
        """
        return pulumi.get(self, "modified_at")

    @modified_at.setter
    def modified_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the claim rule to be created or updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the trusted profile to create a claim rule.
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_id", value)

    @_builtins.property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The realm name of the Idp this claim rule applies to.
        """
        return pulumi.get(self, "realm_name")

    @realm_name.setter
    def realm_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "realm_name", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        the unique identifier of the claim rule.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the calim rule, either 'Profile-SAML' or 'Profile-CR'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("ibm:index/iamTrustedProfileClaimRule:IamTrustedProfileClaimRule")
class IamTrustedProfileClaimRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamTrustedProfileClaimRuleConditionArgs', 'IamTrustedProfileClaimRuleConditionArgsDict']]]]] = None,
                 cr_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration: Optional[pulumi.Input[_builtins.float]] = None,
                 iam_trusted_profile_claim_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 realm_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IamTrustedProfileClaimRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamTrustedProfileClaimRuleConditionArgs', 'IamTrustedProfileClaimRuleConditionArgsDict']]]] conditions: Conditions of this claim rule.
        :param pulumi.Input[_builtins.str] cr_type: The compute resource type. Not required if type is Profile-SAML. Valid values are VSI, IKS_SA, ROKS_SA.
        :param pulumi.Input[_builtins.float] expiration: Session expiration in seconds.
        :param pulumi.Input[_builtins.str] name: Name of the claim rule to be created or updated.
        :param pulumi.Input[_builtins.str] profile_id: ID of the trusted profile to create a claim rule.
        :param pulumi.Input[_builtins.str] realm_name: The realm name of the Idp this claim rule applies to.
        :param pulumi.Input[_builtins.str] type: Type of the calim rule, either 'Profile-SAML' or 'Profile-CR'.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamTrustedProfileClaimRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamTrustedProfileClaimRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamTrustedProfileClaimRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamTrustedProfileClaimRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamTrustedProfileClaimRuleConditionArgs', 'IamTrustedProfileClaimRuleConditionArgsDict']]]]] = None,
                 cr_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration: Optional[pulumi.Input[_builtins.float]] = None,
                 iam_trusted_profile_claim_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 realm_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamTrustedProfileClaimRuleArgs.__new__(IamTrustedProfileClaimRuleArgs)

            if conditions is None and not opts.urn:
                raise TypeError("Missing required property 'conditions'")
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["cr_type"] = cr_type
            __props__.__dict__["expiration"] = expiration
            __props__.__dict__["iam_trusted_profile_claim_rule_id"] = iam_trusted_profile_claim_rule_id
            __props__.__dict__["name"] = name
            if profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'profile_id'")
            __props__.__dict__["profile_id"] = profile_id
            __props__.__dict__["realm_name"] = realm_name
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["entity_tag"] = None
            __props__.__dict__["modified_at"] = None
            __props__.__dict__["rule_id"] = None
        super(IamTrustedProfileClaimRule, __self__).__init__(
            'ibm:index/iamTrustedProfileClaimRule:IamTrustedProfileClaimRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamTrustedProfileClaimRuleConditionArgs', 'IamTrustedProfileClaimRuleConditionArgsDict']]]]] = None,
            cr_type: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
            expiration: Optional[pulumi.Input[_builtins.float]] = None,
            iam_trusted_profile_claim_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            modified_at: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            profile_id: Optional[pulumi.Input[_builtins.str]] = None,
            realm_name: Optional[pulumi.Input[_builtins.str]] = None,
            rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamTrustedProfileClaimRule':
        """
        Get an existing IamTrustedProfileClaimRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamTrustedProfileClaimRuleConditionArgs', 'IamTrustedProfileClaimRuleConditionArgsDict']]]] conditions: Conditions of this claim rule.
        :param pulumi.Input[_builtins.str] cr_type: The compute resource type. Not required if type is Profile-SAML. Valid values are VSI, IKS_SA, ROKS_SA.
        :param pulumi.Input[_builtins.str] created_at: If set contains a date time string of the creation date in ISO format.
        :param pulumi.Input[_builtins.str] entity_tag: version of the claim rule.
        :param pulumi.Input[_builtins.float] expiration: Session expiration in seconds.
        :param pulumi.Input[_builtins.str] modified_at: If set contains a date time string of the last modification date in ISO format.
        :param pulumi.Input[_builtins.str] name: Name of the claim rule to be created or updated.
        :param pulumi.Input[_builtins.str] profile_id: ID of the trusted profile to create a claim rule.
        :param pulumi.Input[_builtins.str] realm_name: The realm name of the Idp this claim rule applies to.
        :param pulumi.Input[_builtins.str] rule_id: the unique identifier of the claim rule.
        :param pulumi.Input[_builtins.str] type: Type of the calim rule, either 'Profile-SAML' or 'Profile-CR'.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamTrustedProfileClaimRuleState.__new__(_IamTrustedProfileClaimRuleState)

        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["cr_type"] = cr_type
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["entity_tag"] = entity_tag
        __props__.__dict__["expiration"] = expiration
        __props__.__dict__["iam_trusted_profile_claim_rule_id"] = iam_trusted_profile_claim_rule_id
        __props__.__dict__["modified_at"] = modified_at
        __props__.__dict__["name"] = name
        __props__.__dict__["profile_id"] = profile_id
        __props__.__dict__["realm_name"] = realm_name
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["type"] = type
        return IamTrustedProfileClaimRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Sequence['outputs.IamTrustedProfileClaimRuleCondition']]:
        """
        Conditions of this claim rule.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="crType")
    def cr_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The compute resource type. Not required if type is Profile-SAML. Valid values are VSI, IKS_SA, ROKS_SA.
        """
        return pulumi.get(self, "cr_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        If set contains a date time string of the creation date in ISO format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> pulumi.Output[_builtins.str]:
        """
        version of the claim rule.
        """
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def expiration(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Session expiration in seconds.
        """
        return pulumi.get(self, "expiration")

    @_builtins.property
    @pulumi.getter(name="iamTrustedProfileClaimRuleId")
    def iam_trusted_profile_claim_rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_trusted_profile_claim_rule_id")

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> pulumi.Output[_builtins.str]:
        """
        If set contains a date time string of the last modification date in ISO format.
        """
        return pulumi.get(self, "modified_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the claim rule to be created or updated.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the trusted profile to create a claim rule.
        """
        return pulumi.get(self, "profile_id")

    @_builtins.property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The realm name of the Idp this claim rule applies to.
        """
        return pulumi.get(self, "realm_name")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[_builtins.str]:
        """
        the unique identifier of the claim rule.
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the calim rule, either 'Profile-SAML' or 'Profile-CR'.
        """
        return pulumi.get(self, "type")

