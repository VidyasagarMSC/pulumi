# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IamPolicyAssignmentArgs', 'IamPolicyAssignment']

@pulumi.input_type
class IamPolicyAssignmentArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]],
                 templates: pulumi.Input['IamPolicyAssignmentTemplatesArgs'],
                 version: pulumi.Input[_builtins.str],
                 accept_language: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IamPolicyAssignmentTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IamPolicyAssignment resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] target: assignment target details
        :param pulumi.Input['IamPolicyAssignmentTemplatesArgs'] templates: policy template details.
        :param pulumi.Input[_builtins.str] version: specify version of response body format.
        :param pulumi.Input[_builtins.str] accept_language: Language code for translations* `default` - English* `de` - German (Standard)* `en` - English* `es` - Spanish (Spain)*
               `fr` - French (Standard)* `it` - Italian (Standard)* `ja` - Japanese* `ko` - Korean* `pt-br` - Portuguese (Brazil)*
               `zh-cn` - Chinese (Simplified, PRC)* `zh-tw` - (Chinese, Taiwan).
        :param pulumi.Input[_builtins.str] template_version: The policy template version.
        """
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "templates", templates)
        pulumi.set(__self__, "version", version)
        if accept_language is not None:
            pulumi.set(__self__, "accept_language", accept_language)
        if iam_policy_assignment_id is not None:
            pulumi.set(__self__, "iam_policy_assignment_id", iam_policy_assignment_id)
        if template_version is not None:
            pulumi.set(__self__, "template_version", template_version)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]:
        """
        assignment target details
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter
    def templates(self) -> pulumi.Input['IamPolicyAssignmentTemplatesArgs']:
        """
        policy template details.
        """
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: pulumi.Input['IamPolicyAssignmentTemplatesArgs']):
        pulumi.set(self, "templates", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        specify version of response body format.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="acceptLanguage")
    def accept_language(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Language code for translations* `default` - English* `de` - German (Standard)* `en` - English* `es` - Spanish (Spain)*
        `fr` - French (Standard)* `it` - Italian (Standard)* `ja` - Japanese* `ko` - Korean* `pt-br` - Portuguese (Brazil)*
        `zh-cn` - Chinese (Simplified, PRC)* `zh-tw` - (Chinese, Taiwan).
        """
        return pulumi.get(self, "accept_language")

    @accept_language.setter
    def accept_language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_language", value)

    @_builtins.property
    @pulumi.getter(name="iamPolicyAssignmentId")
    def iam_policy_assignment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_policy_assignment_id")

    @iam_policy_assignment_id.setter
    def iam_policy_assignment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_policy_assignment_id", value)

    @_builtins.property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The policy template version.
        """
        return pulumi.get(self, "template_version")

    @template_version.setter
    def template_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_version", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IamPolicyAssignmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IamPolicyAssignmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IamPolicyAssignmentState:
    def __init__(__self__, *,
                 accept_language: Optional[pulumi.Input[_builtins.str]] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by_id: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_modified_at: Optional[pulumi.Input[_builtins.str]] = None,
                 last_modified_by_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['IamPolicyAssignmentResourceArgs']]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 template: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 templates: Optional[pulumi.Input['IamPolicyAssignmentTemplatesArgs']] = None,
                 timeouts: Optional[pulumi.Input['IamPolicyAssignmentTimeoutsArgs']] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamPolicyAssignment resources.
        :param pulumi.Input[_builtins.str] accept_language: Language code for translations* `default` - English* `de` - German (Standard)* `en` - English* `es` - Spanish (Spain)*
               `fr` - French (Standard)* `it` - Italian (Standard)* `ja` - Japanese* `ko` - Korean* `pt-br` - Portuguese (Brazil)*
               `zh-cn` - Chinese (Simplified, PRC)* `zh-tw` - (Chinese, Taiwan).
        :param pulumi.Input[_builtins.str] account_id: The account GUID that the policies assignments belong to..
        :param pulumi.Input[_builtins.str] created_at: The UTC timestamp when the policy assignment was created.
        :param pulumi.Input[_builtins.str] created_by_id: The iam ID of the entity that created the policy assignment.
        :param pulumi.Input[_builtins.str] href: The href URL that links to the policies assignments API by policy assignment ID.
        :param pulumi.Input[_builtins.str] last_modified_at: The UTC timestamp when the policy assignment was last modified.
        :param pulumi.Input[_builtins.str] last_modified_by_id: The iam ID of the entity that last modified the policy assignment.
        :param pulumi.Input[Sequence[pulumi.Input['IamPolicyAssignmentResourceArgs']]] resources: Object for each account assigned.
        :param pulumi.Input[_builtins.str] status: The policy assignment status.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] target: assignment target details
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] template: policy template details
        :param pulumi.Input[_builtins.str] template_version: The policy template version.
        :param pulumi.Input['IamPolicyAssignmentTemplatesArgs'] templates: policy template details.
        :param pulumi.Input[_builtins.str] version: specify version of response body format.
        """
        if accept_language is not None:
            pulumi.set(__self__, "accept_language", accept_language)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by_id is not None:
            pulumi.set(__self__, "created_by_id", created_by_id)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if iam_policy_assignment_id is not None:
            pulumi.set(__self__, "iam_policy_assignment_id", iam_policy_assignment_id)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by_id is not None:
            pulumi.set(__self__, "last_modified_by_id", last_modified_by_id)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_version is not None:
            pulumi.set(__self__, "template_version", template_version)
        if templates is not None:
            pulumi.set(__self__, "templates", templates)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="acceptLanguage")
    def accept_language(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Language code for translations* `default` - English* `de` - German (Standard)* `en` - English* `es` - Spanish (Spain)*
        `fr` - French (Standard)* `it` - Italian (Standard)* `ja` - Japanese* `ko` - Korean* `pt-br` - Portuguese (Brazil)*
        `zh-cn` - Chinese (Simplified, PRC)* `zh-tw` - (Chinese, Taiwan).
        """
        return pulumi.get(self, "accept_language")

    @accept_language.setter
    def accept_language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_language", value)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account GUID that the policies assignments belong to..
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The UTC timestamp when the policy assignment was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The iam ID of the entity that created the policy assignment.
        """
        return pulumi.get(self, "created_by_id")

    @created_by_id.setter
    def created_by_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by_id", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The href URL that links to the policies assignments API by policy assignment ID.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="iamPolicyAssignmentId")
    def iam_policy_assignment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_policy_assignment_id")

    @iam_policy_assignment_id.setter
    def iam_policy_assignment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_policy_assignment_id", value)

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The UTC timestamp when the policy assignment was last modified.
        """
        return pulumi.get(self, "last_modified_at")

    @last_modified_at.setter
    def last_modified_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_modified_at", value)

    @_builtins.property
    @pulumi.getter(name="lastModifiedById")
    def last_modified_by_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The iam ID of the entity that last modified the policy assignment.
        """
        return pulumi.get(self, "last_modified_by_id")

    @last_modified_by_id.setter
    def last_modified_by_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_modified_by_id", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamPolicyAssignmentResourceArgs']]]]:
        """
        Object for each account assigned.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamPolicyAssignmentResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The policy assignment status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        assignment target details
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        policy template details
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "template", value)

    @_builtins.property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The policy template version.
        """
        return pulumi.get(self, "template_version")

    @template_version.setter
    def template_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_version", value)

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Optional[pulumi.Input['IamPolicyAssignmentTemplatesArgs']]:
        """
        policy template details.
        """
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: Optional[pulumi.Input['IamPolicyAssignmentTemplatesArgs']]):
        pulumi.set(self, "templates", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IamPolicyAssignmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IamPolicyAssignmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        specify version of response body format.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/iamPolicyAssignment:IamPolicyAssignment")
class IamPolicyAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_language: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 templates: Optional[pulumi.Input[Union['IamPolicyAssignmentTemplatesArgs', 'IamPolicyAssignmentTemplatesArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['IamPolicyAssignmentTimeoutsArgs', 'IamPolicyAssignmentTimeoutsArgsDict']]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IamPolicyAssignment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] accept_language: Language code for translations* `default` - English* `de` - German (Standard)* `en` - English* `es` - Spanish (Spain)*
               `fr` - French (Standard)* `it` - Italian (Standard)* `ja` - Japanese* `ko` - Korean* `pt-br` - Portuguese (Brazil)*
               `zh-cn` - Chinese (Simplified, PRC)* `zh-tw` - (Chinese, Taiwan).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] target: assignment target details
        :param pulumi.Input[_builtins.str] template_version: The policy template version.
        :param pulumi.Input[Union['IamPolicyAssignmentTemplatesArgs', 'IamPolicyAssignmentTemplatesArgsDict']] templates: policy template details.
        :param pulumi.Input[_builtins.str] version: specify version of response body format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamPolicyAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamPolicyAssignment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamPolicyAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamPolicyAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_language: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 templates: Optional[pulumi.Input[Union['IamPolicyAssignmentTemplatesArgs', 'IamPolicyAssignmentTemplatesArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['IamPolicyAssignmentTimeoutsArgs', 'IamPolicyAssignmentTimeoutsArgsDict']]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamPolicyAssignmentArgs.__new__(IamPolicyAssignmentArgs)

            __props__.__dict__["accept_language"] = accept_language
            __props__.__dict__["iam_policy_assignment_id"] = iam_policy_assignment_id
            if target is None and not opts.urn:
                raise TypeError("Missing required property 'target'")
            __props__.__dict__["target"] = target
            __props__.__dict__["template_version"] = template_version
            if templates is None and not opts.urn:
                raise TypeError("Missing required property 'templates'")
            __props__.__dict__["templates"] = templates
            __props__.__dict__["timeouts"] = timeouts
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["account_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by_id"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["last_modified_at"] = None
            __props__.__dict__["last_modified_by_id"] = None
            __props__.__dict__["resources"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["template"] = None
        super(IamPolicyAssignment, __self__).__init__(
            'ibm:index/iamPolicyAssignment:IamPolicyAssignment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accept_language: Optional[pulumi.Input[_builtins.str]] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by_id: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            iam_policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
            last_modified_at: Optional[pulumi.Input[_builtins.str]] = None,
            last_modified_by_id: Optional[pulumi.Input[_builtins.str]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamPolicyAssignmentResourceArgs', 'IamPolicyAssignmentResourceArgsDict']]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            target: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            template: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            template_version: Optional[pulumi.Input[_builtins.str]] = None,
            templates: Optional[pulumi.Input[Union['IamPolicyAssignmentTemplatesArgs', 'IamPolicyAssignmentTemplatesArgsDict']]] = None,
            timeouts: Optional[pulumi.Input[Union['IamPolicyAssignmentTimeoutsArgs', 'IamPolicyAssignmentTimeoutsArgsDict']]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamPolicyAssignment':
        """
        Get an existing IamPolicyAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] accept_language: Language code for translations* `default` - English* `de` - German (Standard)* `en` - English* `es` - Spanish (Spain)*
               `fr` - French (Standard)* `it` - Italian (Standard)* `ja` - Japanese* `ko` - Korean* `pt-br` - Portuguese (Brazil)*
               `zh-cn` - Chinese (Simplified, PRC)* `zh-tw` - (Chinese, Taiwan).
        :param pulumi.Input[_builtins.str] account_id: The account GUID that the policies assignments belong to..
        :param pulumi.Input[_builtins.str] created_at: The UTC timestamp when the policy assignment was created.
        :param pulumi.Input[_builtins.str] created_by_id: The iam ID of the entity that created the policy assignment.
        :param pulumi.Input[_builtins.str] href: The href URL that links to the policies assignments API by policy assignment ID.
        :param pulumi.Input[_builtins.str] last_modified_at: The UTC timestamp when the policy assignment was last modified.
        :param pulumi.Input[_builtins.str] last_modified_by_id: The iam ID of the entity that last modified the policy assignment.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamPolicyAssignmentResourceArgs', 'IamPolicyAssignmentResourceArgsDict']]]] resources: Object for each account assigned.
        :param pulumi.Input[_builtins.str] status: The policy assignment status.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] target: assignment target details
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] template: policy template details
        :param pulumi.Input[_builtins.str] template_version: The policy template version.
        :param pulumi.Input[Union['IamPolicyAssignmentTemplatesArgs', 'IamPolicyAssignmentTemplatesArgsDict']] templates: policy template details.
        :param pulumi.Input[_builtins.str] version: specify version of response body format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamPolicyAssignmentState.__new__(_IamPolicyAssignmentState)

        __props__.__dict__["accept_language"] = accept_language
        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by_id"] = created_by_id
        __props__.__dict__["href"] = href
        __props__.__dict__["iam_policy_assignment_id"] = iam_policy_assignment_id
        __props__.__dict__["last_modified_at"] = last_modified_at
        __props__.__dict__["last_modified_by_id"] = last_modified_by_id
        __props__.__dict__["resources"] = resources
        __props__.__dict__["status"] = status
        __props__.__dict__["target"] = target
        __props__.__dict__["template"] = template
        __props__.__dict__["template_version"] = template_version
        __props__.__dict__["templates"] = templates
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["version"] = version
        return IamPolicyAssignment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="acceptLanguage")
    def accept_language(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Language code for translations* `default` - English* `de` - German (Standard)* `en` - English* `es` - Spanish (Spain)*
        `fr` - French (Standard)* `it` - Italian (Standard)* `ja` - Japanese* `ko` - Korean* `pt-br` - Portuguese (Brazil)*
        `zh-cn` - Chinese (Simplified, PRC)* `zh-tw` - (Chinese, Taiwan).
        """
        return pulumi.get(self, "accept_language")

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The account GUID that the policies assignments belong to..
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The UTC timestamp when the policy assignment was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> pulumi.Output[_builtins.str]:
        """
        The iam ID of the entity that created the policy assignment.
        """
        return pulumi.get(self, "created_by_id")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The href URL that links to the policies assignments API by policy assignment ID.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="iamPolicyAssignmentId")
    def iam_policy_assignment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_policy_assignment_id")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> pulumi.Output[_builtins.str]:
        """
        The UTC timestamp when the policy assignment was last modified.
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedById")
    def last_modified_by_id(self) -> pulumi.Output[_builtins.str]:
        """
        The iam ID of the entity that last modified the policy assignment.
        """
        return pulumi.get(self, "last_modified_by_id")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Sequence['outputs.IamPolicyAssignmentResource']]:
        """
        Object for each account assigned.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The policy assignment status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        assignment target details
        """
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter
    def template(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        policy template details
        """
        return pulumi.get(self, "template")

    @_builtins.property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> pulumi.Output[_builtins.str]:
        """
        The policy template version.
        """
        return pulumi.get(self, "template_version")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> pulumi.Output['outputs.IamPolicyAssignmentTemplates']:
        """
        policy template details.
        """
        return pulumi.get(self, "templates")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IamPolicyAssignmentTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        specify version of response body format.
        """
        return pulumi.get(self, "version")

