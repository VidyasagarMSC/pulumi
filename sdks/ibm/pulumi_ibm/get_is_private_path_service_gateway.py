# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsPrivatePathServiceGatewayResult',
    'AwaitableGetIsPrivatePathServiceGatewayResult',
    'get_is_private_path_service_gateway',
    'get_is_private_path_service_gateway_output',
]

@pulumi.output_type
class GetIsPrivatePathServiceGatewayResult:
    """
    A collection of values returned by getIsPrivatePathServiceGateway.
    """
    def __init__(__self__, created_at=None, crn=None, default_access_policy=None, endpoint_gateway_binding_auto_delete=None, endpoint_gateway_binding_auto_delete_timeout=None, endpoint_gateway_count=None, href=None, id=None, lifecycle_state=None, load_balancers=None, name=None, private_path_service_gateway=None, private_path_service_gateway_name=None, published=None, regions=None, resource_groups=None, resource_type=None, service_endpoints=None, vpcs=None, zonal_affinity=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if default_access_policy and not isinstance(default_access_policy, str):
            raise TypeError("Expected argument 'default_access_policy' to be a str")
        pulumi.set(__self__, "default_access_policy", default_access_policy)
        if endpoint_gateway_binding_auto_delete and not isinstance(endpoint_gateway_binding_auto_delete, bool):
            raise TypeError("Expected argument 'endpoint_gateway_binding_auto_delete' to be a bool")
        pulumi.set(__self__, "endpoint_gateway_binding_auto_delete", endpoint_gateway_binding_auto_delete)
        if endpoint_gateway_binding_auto_delete_timeout and not isinstance(endpoint_gateway_binding_auto_delete_timeout, float):
            raise TypeError("Expected argument 'endpoint_gateway_binding_auto_delete_timeout' to be a float")
        pulumi.set(__self__, "endpoint_gateway_binding_auto_delete_timeout", endpoint_gateway_binding_auto_delete_timeout)
        if endpoint_gateway_count and not isinstance(endpoint_gateway_count, float):
            raise TypeError("Expected argument 'endpoint_gateway_count' to be a float")
        pulumi.set(__self__, "endpoint_gateway_count", endpoint_gateway_count)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if load_balancers and not isinstance(load_balancers, list):
            raise TypeError("Expected argument 'load_balancers' to be a list")
        pulumi.set(__self__, "load_balancers", load_balancers)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if private_path_service_gateway and not isinstance(private_path_service_gateway, str):
            raise TypeError("Expected argument 'private_path_service_gateway' to be a str")
        pulumi.set(__self__, "private_path_service_gateway", private_path_service_gateway)
        if private_path_service_gateway_name and not isinstance(private_path_service_gateway_name, str):
            raise TypeError("Expected argument 'private_path_service_gateway_name' to be a str")
        pulumi.set(__self__, "private_path_service_gateway_name", private_path_service_gateway_name)
        if published and not isinstance(published, bool):
            raise TypeError("Expected argument 'published' to be a bool")
        pulumi.set(__self__, "published", published)
        if regions and not isinstance(regions, list):
            raise TypeError("Expected argument 'regions' to be a list")
        pulumi.set(__self__, "regions", regions)
        if resource_groups and not isinstance(resource_groups, list):
            raise TypeError("Expected argument 'resource_groups' to be a list")
        pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if service_endpoints and not isinstance(service_endpoints, list):
            raise TypeError("Expected argument 'service_endpoints' to be a list")
        pulumi.set(__self__, "service_endpoints", service_endpoints)
        if vpcs and not isinstance(vpcs, list):
            raise TypeError("Expected argument 'vpcs' to be a list")
        pulumi.set(__self__, "vpcs", vpcs)
        if zonal_affinity and not isinstance(zonal_affinity, bool):
            raise TypeError("Expected argument 'zonal_affinity' to be a bool")
        pulumi.set(__self__, "zonal_affinity", zonal_affinity)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="defaultAccessPolicy")
    def default_access_policy(self) -> _builtins.str:
        return pulumi.get(self, "default_access_policy")

    @_builtins.property
    @pulumi.getter(name="endpointGatewayBindingAutoDelete")
    def endpoint_gateway_binding_auto_delete(self) -> _builtins.bool:
        return pulumi.get(self, "endpoint_gateway_binding_auto_delete")

    @_builtins.property
    @pulumi.getter(name="endpointGatewayBindingAutoDeleteTimeout")
    def endpoint_gateway_binding_auto_delete_timeout(self) -> _builtins.float:
        return pulumi.get(self, "endpoint_gateway_binding_auto_delete_timeout")

    @_builtins.property
    @pulumi.getter(name="endpointGatewayCount")
    def endpoint_gateway_count(self) -> _builtins.float:
        return pulumi.get(self, "endpoint_gateway_count")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> Sequence['outputs.GetIsPrivatePathServiceGatewayLoadBalancerResult']:
        return pulumi.get(self, "load_balancers")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privatePathServiceGateway")
    def private_path_service_gateway(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "private_path_service_gateway")

    @_builtins.property
    @pulumi.getter(name="privatePathServiceGatewayName")
    def private_path_service_gateway_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "private_path_service_gateway_name")

    @_builtins.property
    @pulumi.getter
    def published(self) -> _builtins.bool:
        return pulumi.get(self, "published")

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Sequence['outputs.GetIsPrivatePathServiceGatewayRegionResult']:
        return pulumi.get(self, "regions")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Sequence['outputs.GetIsPrivatePathServiceGatewayResourceGroupResult']:
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "service_endpoints")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetIsPrivatePathServiceGatewayVpcResult']:
        return pulumi.get(self, "vpcs")

    @_builtins.property
    @pulumi.getter(name="zonalAffinity")
    def zonal_affinity(self) -> _builtins.bool:
        return pulumi.get(self, "zonal_affinity")


class AwaitableGetIsPrivatePathServiceGatewayResult(GetIsPrivatePathServiceGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsPrivatePathServiceGatewayResult(
            created_at=self.created_at,
            crn=self.crn,
            default_access_policy=self.default_access_policy,
            endpoint_gateway_binding_auto_delete=self.endpoint_gateway_binding_auto_delete,
            endpoint_gateway_binding_auto_delete_timeout=self.endpoint_gateway_binding_auto_delete_timeout,
            endpoint_gateway_count=self.endpoint_gateway_count,
            href=self.href,
            id=self.id,
            lifecycle_state=self.lifecycle_state,
            load_balancers=self.load_balancers,
            name=self.name,
            private_path_service_gateway=self.private_path_service_gateway,
            private_path_service_gateway_name=self.private_path_service_gateway_name,
            published=self.published,
            regions=self.regions,
            resource_groups=self.resource_groups,
            resource_type=self.resource_type,
            service_endpoints=self.service_endpoints,
            vpcs=self.vpcs,
            zonal_affinity=self.zonal_affinity)


def get_is_private_path_service_gateway(id: Optional[_builtins.str] = None,
                                        private_path_service_gateway: Optional[_builtins.str] = None,
                                        private_path_service_gateway_name: Optional[_builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsPrivatePathServiceGatewayResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['privatePathServiceGateway'] = private_path_service_gateway
    __args__['privatePathServiceGatewayName'] = private_path_service_gateway_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsPrivatePathServiceGateway:getIsPrivatePathServiceGateway', __args__, opts=opts, typ=GetIsPrivatePathServiceGatewayResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsPrivatePathServiceGatewayResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        default_access_policy=pulumi.get(__ret__, 'default_access_policy'),
        endpoint_gateway_binding_auto_delete=pulumi.get(__ret__, 'endpoint_gateway_binding_auto_delete'),
        endpoint_gateway_binding_auto_delete_timeout=pulumi.get(__ret__, 'endpoint_gateway_binding_auto_delete_timeout'),
        endpoint_gateway_count=pulumi.get(__ret__, 'endpoint_gateway_count'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        load_balancers=pulumi.get(__ret__, 'load_balancers'),
        name=pulumi.get(__ret__, 'name'),
        private_path_service_gateway=pulumi.get(__ret__, 'private_path_service_gateway'),
        private_path_service_gateway_name=pulumi.get(__ret__, 'private_path_service_gateway_name'),
        published=pulumi.get(__ret__, 'published'),
        regions=pulumi.get(__ret__, 'regions'),
        resource_groups=pulumi.get(__ret__, 'resource_groups'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        service_endpoints=pulumi.get(__ret__, 'service_endpoints'),
        vpcs=pulumi.get(__ret__, 'vpcs'),
        zonal_affinity=pulumi.get(__ret__, 'zonal_affinity'))
def get_is_private_path_service_gateway_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               private_path_service_gateway: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               private_path_service_gateway_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsPrivatePathServiceGatewayResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['privatePathServiceGateway'] = private_path_service_gateway
    __args__['privatePathServiceGatewayName'] = private_path_service_gateway_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsPrivatePathServiceGateway:getIsPrivatePathServiceGateway', __args__, opts=opts, typ=GetIsPrivatePathServiceGatewayResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsPrivatePathServiceGatewayResult(
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        default_access_policy=pulumi.get(__response__, 'default_access_policy'),
        endpoint_gateway_binding_auto_delete=pulumi.get(__response__, 'endpoint_gateway_binding_auto_delete'),
        endpoint_gateway_binding_auto_delete_timeout=pulumi.get(__response__, 'endpoint_gateway_binding_auto_delete_timeout'),
        endpoint_gateway_count=pulumi.get(__response__, 'endpoint_gateway_count'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        load_balancers=pulumi.get(__response__, 'load_balancers'),
        name=pulumi.get(__response__, 'name'),
        private_path_service_gateway=pulumi.get(__response__, 'private_path_service_gateway'),
        private_path_service_gateway_name=pulumi.get(__response__, 'private_path_service_gateway_name'),
        published=pulumi.get(__response__, 'published'),
        regions=pulumi.get(__response__, 'regions'),
        resource_groups=pulumi.get(__response__, 'resource_groups'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        service_endpoints=pulumi.get(__response__, 'service_endpoints'),
        vpcs=pulumi.get(__response__, 'vpcs'),
        zonal_affinity=pulumi.get(__response__, 'zonal_affinity')))
