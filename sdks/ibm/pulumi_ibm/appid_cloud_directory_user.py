# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppidCloudDirectoryUserArgs', 'AppidCloudDirectoryUser']

@pulumi.input_type
class AppidCloudDirectoryUserArgs:
    def __init__(__self__, *,
                 emails: pulumi.Input[Sequence[pulumi.Input['AppidCloudDirectoryUserEmailArgs']]],
                 password: pulumi.Input[_builtins.str],
                 tenant_id: pulumi.Input[_builtins.str],
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 appid_cloud_directory_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 create_profile: Optional[pulumi.Input[_builtins.bool]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 locked_until: Optional[pulumi.Input[_builtins.float]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppidCloudDirectoryUser resource.
        :param pulumi.Input[Sequence[pulumi.Input['AppidCloudDirectoryUserEmailArgs']]] emails: A set of user emails
        :param pulumi.Input[_builtins.str] password: User password
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        :param pulumi.Input[_builtins.bool] active: Determines if the user account is active or not
        :param pulumi.Input[_builtins.bool] create_profile: A boolean indication if a profile should be created for the Cloud Directory user
        :param pulumi.Input[_builtins.str] display_name: Cloud Directory user display name
        :param pulumi.Input[_builtins.float] locked_until: Integer (epoch time in milliseconds), determines till when the user account will be locked
        :param pulumi.Input[_builtins.str] status: Accepted values `PENDING` or `CONFIRMED`
        :param pulumi.Input[_builtins.str] user_name: Optional username
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if appid_cloud_directory_user_id is not None:
            pulumi.set(__self__, "appid_cloud_directory_user_id", appid_cloud_directory_user_id)
        if create_profile is not None:
            pulumi.set(__self__, "create_profile", create_profile)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if locked_until is not None:
            pulumi.set(__self__, "locked_until", locked_until)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def emails(self) -> pulumi.Input[Sequence[pulumi.Input['AppidCloudDirectoryUserEmailArgs']]]:
        """
        A set of user emails
        """
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: pulumi.Input[Sequence[pulumi.Input['AppidCloudDirectoryUserEmailArgs']]]):
        pulumi.set(self, "emails", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        User password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        The AppID instance GUID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines if the user account is active or not
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "active", value)

    @_builtins.property
    @pulumi.getter(name="appidCloudDirectoryUserId")
    def appid_cloud_directory_user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_cloud_directory_user_id")

    @appid_cloud_directory_user_id.setter
    def appid_cloud_directory_user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_cloud_directory_user_id", value)

    @_builtins.property
    @pulumi.getter(name="createProfile")
    def create_profile(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        A boolean indication if a profile should be created for the Cloud Directory user
        """
        return pulumi.get(self, "create_profile")

    @create_profile.setter
    def create_profile(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "create_profile", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Directory user display name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter(name="lockedUntil")
    def locked_until(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Integer (epoch time in milliseconds), determines till when the user account will be locked
        """
        return pulumi.get(self, "locked_until")

    @locked_until.setter
    def locked_until(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "locked_until", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Accepted values `PENDING` or `CONFIRMED`
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional username
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class _AppidCloudDirectoryUserState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 appid_cloud_directory_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 create_profile: Optional[pulumi.Input[_builtins.bool]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input['AppidCloudDirectoryUserEmailArgs']]]] = None,
                 locked_until: Optional[pulumi.Input[_builtins.float]] = None,
                 metas: Optional[pulumi.Input[Sequence[pulumi.Input['AppidCloudDirectoryUserMetaArgs']]]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subject: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppidCloudDirectoryUser resources.
        :param pulumi.Input[_builtins.bool] active: Determines if the user account is active or not
        :param pulumi.Input[_builtins.bool] create_profile: A boolean indication if a profile should be created for the Cloud Directory user
        :param pulumi.Input[_builtins.str] display_name: Cloud Directory user display name
        :param pulumi.Input[Sequence[pulumi.Input['AppidCloudDirectoryUserEmailArgs']]] emails: A set of user emails
        :param pulumi.Input[_builtins.float] locked_until: Integer (epoch time in milliseconds), determines till when the user account will be locked
        :param pulumi.Input[Sequence[pulumi.Input['AppidCloudDirectoryUserMetaArgs']]] metas: Cloud Directory user metadata
        :param pulumi.Input[_builtins.str] password: User password
        :param pulumi.Input[_builtins.str] status: Accepted values `PENDING` or `CONFIRMED`
        :param pulumi.Input[_builtins.str] subject: The user's identifier ('subject' in identity token)
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        :param pulumi.Input[_builtins.str] user_id: Cloud Directory user ID
        :param pulumi.Input[_builtins.str] user_name: Optional username
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if appid_cloud_directory_user_id is not None:
            pulumi.set(__self__, "appid_cloud_directory_user_id", appid_cloud_directory_user_id)
        if create_profile is not None:
            pulumi.set(__self__, "create_profile", create_profile)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if locked_until is not None:
            pulumi.set(__self__, "locked_until", locked_until)
        if metas is not None:
            pulumi.set(__self__, "metas", metas)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines if the user account is active or not
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "active", value)

    @_builtins.property
    @pulumi.getter(name="appidCloudDirectoryUserId")
    def appid_cloud_directory_user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_cloud_directory_user_id")

    @appid_cloud_directory_user_id.setter
    def appid_cloud_directory_user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_cloud_directory_user_id", value)

    @_builtins.property
    @pulumi.getter(name="createProfile")
    def create_profile(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        A boolean indication if a profile should be created for the Cloud Directory user
        """
        return pulumi.get(self, "create_profile")

    @create_profile.setter
    def create_profile(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "create_profile", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Directory user display name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppidCloudDirectoryUserEmailArgs']]]]:
        """
        A set of user emails
        """
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppidCloudDirectoryUserEmailArgs']]]]):
        pulumi.set(self, "emails", value)

    @_builtins.property
    @pulumi.getter(name="lockedUntil")
    def locked_until(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Integer (epoch time in milliseconds), determines till when the user account will be locked
        """
        return pulumi.get(self, "locked_until")

    @locked_until.setter
    def locked_until(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "locked_until", value)

    @_builtins.property
    @pulumi.getter
    def metas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppidCloudDirectoryUserMetaArgs']]]]:
        """
        Cloud Directory user metadata
        """
        return pulumi.get(self, "metas")

    @metas.setter
    def metas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppidCloudDirectoryUserMetaArgs']]]]):
        pulumi.set(self, "metas", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Accepted values `PENDING` or `CONFIRMED`
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user's identifier ('subject' in identity token)
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subject", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The AppID instance GUID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Directory user ID
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional username
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_name", value)


@pulumi.type_token("ibm:index/appidCloudDirectoryUser:AppidCloudDirectoryUser")
class AppidCloudDirectoryUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 appid_cloud_directory_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 create_profile: Optional[pulumi.Input[_builtins.bool]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidCloudDirectoryUserEmailArgs', 'AppidCloudDirectoryUserEmailArgsDict']]]]] = None,
                 locked_until: Optional[pulumi.Input[_builtins.float]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppidCloudDirectoryUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] active: Determines if the user account is active or not
        :param pulumi.Input[_builtins.bool] create_profile: A boolean indication if a profile should be created for the Cloud Directory user
        :param pulumi.Input[_builtins.str] display_name: Cloud Directory user display name
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppidCloudDirectoryUserEmailArgs', 'AppidCloudDirectoryUserEmailArgsDict']]]] emails: A set of user emails
        :param pulumi.Input[_builtins.float] locked_until: Integer (epoch time in milliseconds), determines till when the user account will be locked
        :param pulumi.Input[_builtins.str] password: User password
        :param pulumi.Input[_builtins.str] status: Accepted values `PENDING` or `CONFIRMED`
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        :param pulumi.Input[_builtins.str] user_name: Optional username
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppidCloudDirectoryUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppidCloudDirectoryUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppidCloudDirectoryUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppidCloudDirectoryUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 appid_cloud_directory_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 create_profile: Optional[pulumi.Input[_builtins.bool]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidCloudDirectoryUserEmailArgs', 'AppidCloudDirectoryUserEmailArgsDict']]]]] = None,
                 locked_until: Optional[pulumi.Input[_builtins.float]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppidCloudDirectoryUserArgs.__new__(AppidCloudDirectoryUserArgs)

            __props__.__dict__["active"] = active
            __props__.__dict__["appid_cloud_directory_user_id"] = appid_cloud_directory_user_id
            __props__.__dict__["create_profile"] = create_profile
            __props__.__dict__["display_name"] = display_name
            if emails is None and not opts.urn:
                raise TypeError("Missing required property 'emails'")
            __props__.__dict__["emails"] = emails
            __props__.__dict__["locked_until"] = locked_until
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["status"] = status
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["user_name"] = user_name
            __props__.__dict__["metas"] = None
            __props__.__dict__["subject"] = None
            __props__.__dict__["user_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(AppidCloudDirectoryUser, __self__).__init__(
            'ibm:index/appidCloudDirectoryUser:AppidCloudDirectoryUser',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[_builtins.bool]] = None,
            appid_cloud_directory_user_id: Optional[pulumi.Input[_builtins.str]] = None,
            create_profile: Optional[pulumi.Input[_builtins.bool]] = None,
            display_name: Optional[pulumi.Input[_builtins.str]] = None,
            emails: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidCloudDirectoryUserEmailArgs', 'AppidCloudDirectoryUserEmailArgsDict']]]]] = None,
            locked_until: Optional[pulumi.Input[_builtins.float]] = None,
            metas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidCloudDirectoryUserMetaArgs', 'AppidCloudDirectoryUserMetaArgsDict']]]]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subject: Optional[pulumi.Input[_builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            user_id: Optional[pulumi.Input[_builtins.str]] = None,
            user_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppidCloudDirectoryUser':
        """
        Get an existing AppidCloudDirectoryUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] active: Determines if the user account is active or not
        :param pulumi.Input[_builtins.bool] create_profile: A boolean indication if a profile should be created for the Cloud Directory user
        :param pulumi.Input[_builtins.str] display_name: Cloud Directory user display name
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppidCloudDirectoryUserEmailArgs', 'AppidCloudDirectoryUserEmailArgsDict']]]] emails: A set of user emails
        :param pulumi.Input[_builtins.float] locked_until: Integer (epoch time in milliseconds), determines till when the user account will be locked
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppidCloudDirectoryUserMetaArgs', 'AppidCloudDirectoryUserMetaArgsDict']]]] metas: Cloud Directory user metadata
        :param pulumi.Input[_builtins.str] password: User password
        :param pulumi.Input[_builtins.str] status: Accepted values `PENDING` or `CONFIRMED`
        :param pulumi.Input[_builtins.str] subject: The user's identifier ('subject' in identity token)
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        :param pulumi.Input[_builtins.str] user_id: Cloud Directory user ID
        :param pulumi.Input[_builtins.str] user_name: Optional username
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppidCloudDirectoryUserState.__new__(_AppidCloudDirectoryUserState)

        __props__.__dict__["active"] = active
        __props__.__dict__["appid_cloud_directory_user_id"] = appid_cloud_directory_user_id
        __props__.__dict__["create_profile"] = create_profile
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["emails"] = emails
        __props__.__dict__["locked_until"] = locked_until
        __props__.__dict__["metas"] = metas
        __props__.__dict__["password"] = password
        __props__.__dict__["status"] = status
        __props__.__dict__["subject"] = subject
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["user_name"] = user_name
        return AppidCloudDirectoryUser(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Determines if the user account is active or not
        """
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter(name="appidCloudDirectoryUserId")
    def appid_cloud_directory_user_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "appid_cloud_directory_user_id")

    @_builtins.property
    @pulumi.getter(name="createProfile")
    def create_profile(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        A boolean indication if a profile should be created for the Cloud Directory user
        """
        return pulumi.get(self, "create_profile")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[_builtins.str]:
        """
        Cloud Directory user display name
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def emails(self) -> pulumi.Output[Sequence['outputs.AppidCloudDirectoryUserEmail']]:
        """
        A set of user emails
        """
        return pulumi.get(self, "emails")

    @_builtins.property
    @pulumi.getter(name="lockedUntil")
    def locked_until(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Integer (epoch time in milliseconds), determines till when the user account will be locked
        """
        return pulumi.get(self, "locked_until")

    @_builtins.property
    @pulumi.getter
    def metas(self) -> pulumi.Output[Sequence['outputs.AppidCloudDirectoryUserMeta']]:
        """
        Cloud Directory user metadata
        """
        return pulumi.get(self, "metas")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[_builtins.str]:
        """
        User password
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Accepted values `PENDING` or `CONFIRMED`
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> pulumi.Output[_builtins.str]:
        """
        The user's identifier ('subject' in identity token)
        """
        return pulumi.get(self, "subject")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        The AppID instance GUID
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[_builtins.str]:
        """
        Cloud Directory user ID
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional username
        """
        return pulumi.get(self, "user_name")

