# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetProjectConfigResult',
    'AwaitableGetProjectConfigResult',
    'get_project_config',
    'get_project_config_output',
]

@pulumi.output_type
class GetProjectConfigResult:
    """
    A collection of values returned by getProjectConfig.
    """
    def __init__(__self__, approved_versions=None, created_at=None, definitions=None, deployed_versions=None, deployment_model=None, href=None, id=None, is_draft=None, last_saved_at=None, member_ofs=None, modified_at=None, needs_attention_states=None, outputs=None, project_config_id=None, project_id=None, projects=None, schematics=None, state=None, state_code=None, template_id=None, update_available=None, version=None):
        if approved_versions and not isinstance(approved_versions, list):
            raise TypeError("Expected argument 'approved_versions' to be a list")
        pulumi.set(__self__, "approved_versions", approved_versions)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if definitions and not isinstance(definitions, list):
            raise TypeError("Expected argument 'definitions' to be a list")
        pulumi.set(__self__, "definitions", definitions)
        if deployed_versions and not isinstance(deployed_versions, list):
            raise TypeError("Expected argument 'deployed_versions' to be a list")
        pulumi.set(__self__, "deployed_versions", deployed_versions)
        if deployment_model and not isinstance(deployment_model, str):
            raise TypeError("Expected argument 'deployment_model' to be a str")
        pulumi.set(__self__, "deployment_model", deployment_model)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_draft and not isinstance(is_draft, bool):
            raise TypeError("Expected argument 'is_draft' to be a bool")
        pulumi.set(__self__, "is_draft", is_draft)
        if last_saved_at and not isinstance(last_saved_at, str):
            raise TypeError("Expected argument 'last_saved_at' to be a str")
        pulumi.set(__self__, "last_saved_at", last_saved_at)
        if member_ofs and not isinstance(member_ofs, list):
            raise TypeError("Expected argument 'member_ofs' to be a list")
        pulumi.set(__self__, "member_ofs", member_ofs)
        if modified_at and not isinstance(modified_at, str):
            raise TypeError("Expected argument 'modified_at' to be a str")
        pulumi.set(__self__, "modified_at", modified_at)
        if needs_attention_states and not isinstance(needs_attention_states, list):
            raise TypeError("Expected argument 'needs_attention_states' to be a list")
        pulumi.set(__self__, "needs_attention_states", needs_attention_states)
        if outputs and not isinstance(outputs, list):
            raise TypeError("Expected argument 'outputs' to be a list")
        pulumi.set(__self__, "outputs", outputs)
        if project_config_id and not isinstance(project_config_id, str):
            raise TypeError("Expected argument 'project_config_id' to be a str")
        pulumi.set(__self__, "project_config_id", project_config_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if projects and not isinstance(projects, list):
            raise TypeError("Expected argument 'projects' to be a list")
        pulumi.set(__self__, "projects", projects)
        if schematics and not isinstance(schematics, list):
            raise TypeError("Expected argument 'schematics' to be a list")
        pulumi.set(__self__, "schematics", schematics)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_code and not isinstance(state_code, str):
            raise TypeError("Expected argument 'state_code' to be a str")
        pulumi.set(__self__, "state_code", state_code)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)
        if update_available and not isinstance(update_available, bool):
            raise TypeError("Expected argument 'update_available' to be a bool")
        pulumi.set(__self__, "update_available", update_available)
        if version and not isinstance(version, float):
            raise TypeError("Expected argument 'version' to be a float")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="approvedVersions")
    def approved_versions(self) -> Sequence['outputs.GetProjectConfigApprovedVersionResult']:
        return pulumi.get(self, "approved_versions")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def definitions(self) -> Sequence['outputs.GetProjectConfigDefinitionResult']:
        return pulumi.get(self, "definitions")

    @_builtins.property
    @pulumi.getter(name="deployedVersions")
    def deployed_versions(self) -> Sequence['outputs.GetProjectConfigDeployedVersionResult']:
        return pulumi.get(self, "deployed_versions")

    @_builtins.property
    @pulumi.getter(name="deploymentModel")
    def deployment_model(self) -> _builtins.str:
        return pulumi.get(self, "deployment_model")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDraft")
    def is_draft(self) -> _builtins.bool:
        return pulumi.get(self, "is_draft")

    @_builtins.property
    @pulumi.getter(name="lastSavedAt")
    def last_saved_at(self) -> _builtins.str:
        return pulumi.get(self, "last_saved_at")

    @_builtins.property
    @pulumi.getter(name="memberOfs")
    def member_ofs(self) -> Sequence['outputs.GetProjectConfigMemberOfResult']:
        return pulumi.get(self, "member_ofs")

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> _builtins.str:
        return pulumi.get(self, "modified_at")

    @_builtins.property
    @pulumi.getter(name="needsAttentionStates")
    def needs_attention_states(self) -> Sequence['outputs.GetProjectConfigNeedsAttentionStateResult']:
        return pulumi.get(self, "needs_attention_states")

    @_builtins.property
    @pulumi.getter
    def outputs(self) -> Sequence['outputs.GetProjectConfigOutputResult']:
        return pulumi.get(self, "outputs")

    @_builtins.property
    @pulumi.getter(name="projectConfigId")
    def project_config_id(self) -> _builtins.str:
        return pulumi.get(self, "project_config_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetProjectConfigProjectResult']:
        return pulumi.get(self, "projects")

    @_builtins.property
    @pulumi.getter
    def schematics(self) -> Sequence['outputs.GetProjectConfigSchematicResult']:
        return pulumi.get(self, "schematics")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateCode")
    def state_code(self) -> _builtins.str:
        return pulumi.get(self, "state_code")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> _builtins.str:
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="updateAvailable")
    def update_available(self) -> _builtins.bool:
        return pulumi.get(self, "update_available")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.float:
        return pulumi.get(self, "version")


class AwaitableGetProjectConfigResult(GetProjectConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectConfigResult(
            approved_versions=self.approved_versions,
            created_at=self.created_at,
            definitions=self.definitions,
            deployed_versions=self.deployed_versions,
            deployment_model=self.deployment_model,
            href=self.href,
            id=self.id,
            is_draft=self.is_draft,
            last_saved_at=self.last_saved_at,
            member_ofs=self.member_ofs,
            modified_at=self.modified_at,
            needs_attention_states=self.needs_attention_states,
            outputs=self.outputs,
            project_config_id=self.project_config_id,
            project_id=self.project_id,
            projects=self.projects,
            schematics=self.schematics,
            state=self.state,
            state_code=self.state_code,
            template_id=self.template_id,
            update_available=self.update_available,
            version=self.version)


def get_project_config(id: Optional[_builtins.str] = None,
                       project_config_id: Optional[_builtins.str] = None,
                       project_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectConfigResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['projectConfigId'] = project_config_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getProjectConfig:getProjectConfig', __args__, opts=opts, typ=GetProjectConfigResult, package_ref=_utilities.get_package()).value

    return AwaitableGetProjectConfigResult(
        approved_versions=pulumi.get(__ret__, 'approved_versions'),
        created_at=pulumi.get(__ret__, 'created_at'),
        definitions=pulumi.get(__ret__, 'definitions'),
        deployed_versions=pulumi.get(__ret__, 'deployed_versions'),
        deployment_model=pulumi.get(__ret__, 'deployment_model'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        is_draft=pulumi.get(__ret__, 'is_draft'),
        last_saved_at=pulumi.get(__ret__, 'last_saved_at'),
        member_ofs=pulumi.get(__ret__, 'member_ofs'),
        modified_at=pulumi.get(__ret__, 'modified_at'),
        needs_attention_states=pulumi.get(__ret__, 'needs_attention_states'),
        outputs=pulumi.get(__ret__, 'outputs'),
        project_config_id=pulumi.get(__ret__, 'project_config_id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        projects=pulumi.get(__ret__, 'projects'),
        schematics=pulumi.get(__ret__, 'schematics'),
        state=pulumi.get(__ret__, 'state'),
        state_code=pulumi.get(__ret__, 'state_code'),
        template_id=pulumi.get(__ret__, 'template_id'),
        update_available=pulumi.get(__ret__, 'update_available'),
        version=pulumi.get(__ret__, 'version'))
def get_project_config_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              project_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                              project_id: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProjectConfigResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['projectConfigId'] = project_config_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getProjectConfig:getProjectConfig', __args__, opts=opts, typ=GetProjectConfigResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetProjectConfigResult(
        approved_versions=pulumi.get(__response__, 'approved_versions'),
        created_at=pulumi.get(__response__, 'created_at'),
        definitions=pulumi.get(__response__, 'definitions'),
        deployed_versions=pulumi.get(__response__, 'deployed_versions'),
        deployment_model=pulumi.get(__response__, 'deployment_model'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        is_draft=pulumi.get(__response__, 'is_draft'),
        last_saved_at=pulumi.get(__response__, 'last_saved_at'),
        member_ofs=pulumi.get(__response__, 'member_ofs'),
        modified_at=pulumi.get(__response__, 'modified_at'),
        needs_attention_states=pulumi.get(__response__, 'needs_attention_states'),
        outputs=pulumi.get(__response__, 'outputs'),
        project_config_id=pulumi.get(__response__, 'project_config_id'),
        project_id=pulumi.get(__response__, 'project_id'),
        projects=pulumi.get(__response__, 'projects'),
        schematics=pulumi.get(__response__, 'schematics'),
        state=pulumi.get(__response__, 'state'),
        state_code=pulumi.get(__response__, 'state_code'),
        template_id=pulumi.get(__response__, 'template_id'),
        update_available=pulumi.get(__response__, 'update_available'),
        version=pulumi.get(__response__, 'version')))
