# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEventStreamsQuotaResult',
    'AwaitableGetEventStreamsQuotaResult',
    'get_event_streams_quota',
    'get_event_streams_quota_output',
]

@pulumi.output_type
class GetEventStreamsQuotaResult:
    """
    A collection of values returned by getEventStreamsQuota.
    """
    def __init__(__self__, consumer_byte_rate=None, entity=None, id=None, producer_byte_rate=None, resource_instance_id=None):
        if consumer_byte_rate and not isinstance(consumer_byte_rate, float):
            raise TypeError("Expected argument 'consumer_byte_rate' to be a float")
        pulumi.set(__self__, "consumer_byte_rate", consumer_byte_rate)
        if entity and not isinstance(entity, str):
            raise TypeError("Expected argument 'entity' to be a str")
        pulumi.set(__self__, "entity", entity)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if producer_byte_rate and not isinstance(producer_byte_rate, float):
            raise TypeError("Expected argument 'producer_byte_rate' to be a float")
        pulumi.set(__self__, "producer_byte_rate", producer_byte_rate)
        if resource_instance_id and not isinstance(resource_instance_id, str):
            raise TypeError("Expected argument 'resource_instance_id' to be a str")
        pulumi.set(__self__, "resource_instance_id", resource_instance_id)

    @_builtins.property
    @pulumi.getter(name="consumerByteRate")
    def consumer_byte_rate(self) -> _builtins.float:
        return pulumi.get(self, "consumer_byte_rate")

    @_builtins.property
    @pulumi.getter
    def entity(self) -> _builtins.str:
        return pulumi.get(self, "entity")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="producerByteRate")
    def producer_byte_rate(self) -> _builtins.float:
        return pulumi.get(self, "producer_byte_rate")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_instance_id")


class AwaitableGetEventStreamsQuotaResult(GetEventStreamsQuotaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventStreamsQuotaResult(
            consumer_byte_rate=self.consumer_byte_rate,
            entity=self.entity,
            id=self.id,
            producer_byte_rate=self.producer_byte_rate,
            resource_instance_id=self.resource_instance_id)


def get_event_streams_quota(entity: Optional[_builtins.str] = None,
                            id: Optional[_builtins.str] = None,
                            resource_instance_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventStreamsQuotaResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['entity'] = entity
    __args__['id'] = id
    __args__['resourceInstanceId'] = resource_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEventStreamsQuota:getEventStreamsQuota', __args__, opts=opts, typ=GetEventStreamsQuotaResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEventStreamsQuotaResult(
        consumer_byte_rate=pulumi.get(__ret__, 'consumer_byte_rate'),
        entity=pulumi.get(__ret__, 'entity'),
        id=pulumi.get(__ret__, 'id'),
        producer_byte_rate=pulumi.get(__ret__, 'producer_byte_rate'),
        resource_instance_id=pulumi.get(__ret__, 'resource_instance_id'))
def get_event_streams_quota_output(entity: Optional[pulumi.Input[_builtins.str]] = None,
                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEventStreamsQuotaResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['entity'] = entity
    __args__['id'] = id
    __args__['resourceInstanceId'] = resource_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEventStreamsQuota:getEventStreamsQuota', __args__, opts=opts, typ=GetEventStreamsQuotaResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEventStreamsQuotaResult(
        consumer_byte_rate=pulumi.get(__response__, 'consumer_byte_rate'),
        entity=pulumi.get(__response__, 'entity'),
        id=pulumi.get(__response__, 'id'),
        producer_byte_rate=pulumi.get(__response__, 'producer_byte_rate'),
        resource_instance_id=pulumi.get(__response__, 'resource_instance_id')))
