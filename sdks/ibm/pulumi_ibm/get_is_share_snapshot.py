# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsShareSnapshotResult',
    'AwaitableGetIsShareSnapshotResult',
    'get_is_share_snapshot',
    'get_is_share_snapshot_output',
]

@pulumi.output_type
class GetIsShareSnapshotResult:
    """
    A collection of values returned by getIsShareSnapshot.
    """
    def __init__(__self__, backup_policy_plans=None, captured_at=None, created_at=None, crn=None, fingerprint=None, href=None, id=None, lifecycle_state=None, minimum_size=None, name=None, resource_groups=None, resource_type=None, share=None, share_snapshot=None, status=None, status_reasons=None, tags=None, user_tags=None, zones=None):
        if backup_policy_plans and not isinstance(backup_policy_plans, list):
            raise TypeError("Expected argument 'backup_policy_plans' to be a list")
        pulumi.set(__self__, "backup_policy_plans", backup_policy_plans)
        if captured_at and not isinstance(captured_at, str):
            raise TypeError("Expected argument 'captured_at' to be a str")
        pulumi.set(__self__, "captured_at", captured_at)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if fingerprint and not isinstance(fingerprint, str):
            raise TypeError("Expected argument 'fingerprint' to be a str")
        pulumi.set(__self__, "fingerprint", fingerprint)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if minimum_size and not isinstance(minimum_size, float):
            raise TypeError("Expected argument 'minimum_size' to be a float")
        pulumi.set(__self__, "minimum_size", minimum_size)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_groups and not isinstance(resource_groups, list):
            raise TypeError("Expected argument 'resource_groups' to be a list")
        pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if share and not isinstance(share, str):
            raise TypeError("Expected argument 'share' to be a str")
        pulumi.set(__self__, "share", share)
        if share_snapshot and not isinstance(share_snapshot, str):
            raise TypeError("Expected argument 'share_snapshot' to be a str")
        pulumi.set(__self__, "share_snapshot", share_snapshot)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if user_tags and not isinstance(user_tags, list):
            raise TypeError("Expected argument 'user_tags' to be a list")
        pulumi.set(__self__, "user_tags", user_tags)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlans")
    def backup_policy_plans(self) -> Sequence['outputs.GetIsShareSnapshotBackupPolicyPlanResult']:
        return pulumi.get(self, "backup_policy_plans")

    @_builtins.property
    @pulumi.getter(name="capturedAt")
    def captured_at(self) -> _builtins.str:
        return pulumi.get(self, "captured_at")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> _builtins.str:
        return pulumi.get(self, "fingerprint")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="minimumSize")
    def minimum_size(self) -> _builtins.float:
        return pulumi.get(self, "minimum_size")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Sequence['outputs.GetIsShareSnapshotResourceGroupResult']:
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def share(self) -> _builtins.str:
        return pulumi.get(self, "share")

    @_builtins.property
    @pulumi.getter(name="shareSnapshot")
    def share_snapshot(self) -> _builtins.str:
        return pulumi.get(self, "share_snapshot")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Sequence['outputs.GetIsShareSnapshotStatusReasonResult']:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "user_tags")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetIsShareSnapshotZoneResult']:
        return pulumi.get(self, "zones")


class AwaitableGetIsShareSnapshotResult(GetIsShareSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsShareSnapshotResult(
            backup_policy_plans=self.backup_policy_plans,
            captured_at=self.captured_at,
            created_at=self.created_at,
            crn=self.crn,
            fingerprint=self.fingerprint,
            href=self.href,
            id=self.id,
            lifecycle_state=self.lifecycle_state,
            minimum_size=self.minimum_size,
            name=self.name,
            resource_groups=self.resource_groups,
            resource_type=self.resource_type,
            share=self.share,
            share_snapshot=self.share_snapshot,
            status=self.status,
            status_reasons=self.status_reasons,
            tags=self.tags,
            user_tags=self.user_tags,
            zones=self.zones)


def get_is_share_snapshot(id: Optional[_builtins.str] = None,
                          share: Optional[_builtins.str] = None,
                          share_snapshot: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsShareSnapshotResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['share'] = share
    __args__['shareSnapshot'] = share_snapshot
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsShareSnapshot:getIsShareSnapshot', __args__, opts=opts, typ=GetIsShareSnapshotResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsShareSnapshotResult(
        backup_policy_plans=pulumi.get(__ret__, 'backup_policy_plans'),
        captured_at=pulumi.get(__ret__, 'captured_at'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        fingerprint=pulumi.get(__ret__, 'fingerprint'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        minimum_size=pulumi.get(__ret__, 'minimum_size'),
        name=pulumi.get(__ret__, 'name'),
        resource_groups=pulumi.get(__ret__, 'resource_groups'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        share=pulumi.get(__ret__, 'share'),
        share_snapshot=pulumi.get(__ret__, 'share_snapshot'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        tags=pulumi.get(__ret__, 'tags'),
        user_tags=pulumi.get(__ret__, 'user_tags'),
        zones=pulumi.get(__ret__, 'zones'))
def get_is_share_snapshot_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 share: Optional[pulumi.Input[_builtins.str]] = None,
                                 share_snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsShareSnapshotResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['share'] = share
    __args__['shareSnapshot'] = share_snapshot
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsShareSnapshot:getIsShareSnapshot', __args__, opts=opts, typ=GetIsShareSnapshotResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsShareSnapshotResult(
        backup_policy_plans=pulumi.get(__response__, 'backup_policy_plans'),
        captured_at=pulumi.get(__response__, 'captured_at'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        fingerprint=pulumi.get(__response__, 'fingerprint'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        minimum_size=pulumi.get(__response__, 'minimum_size'),
        name=pulumi.get(__response__, 'name'),
        resource_groups=pulumi.get(__response__, 'resource_groups'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        share=pulumi.get(__response__, 'share'),
        share_snapshot=pulumi.get(__response__, 'share_snapshot'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        tags=pulumi.get(__response__, 'tags'),
        user_tags=pulumi.get(__response__, 'user_tags'),
        zones=pulumi.get(__response__, 'zones')))
