# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsVpnServerArgs', 'IsVpnServer']

@pulumi.input_type
class IsVpnServerArgs:
    def __init__(__self__, *,
                 certificate_crn: pulumi.Input[_builtins.str],
                 client_authentications: pulumi.Input[Sequence[pulumi.Input['IsVpnServerClientAuthenticationArgs']]],
                 client_ip_pool: pulumi.Input[_builtins.str],
                 subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 client_dns_server_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 client_idle_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 enable_split_tunneling: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vpn_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsVpnServerTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsVpnServer resource.
        :param pulumi.Input[_builtins.str] certificate_crn: The crn of certificate instance for this VPN server.
        :param pulumi.Input[Sequence[pulumi.Input['IsVpnServerClientAuthenticationArgs']]] client_authentications: The methods used to authenticate VPN clients to this VPN server. VPN clients must authenticate against all provided
               methods.
        :param pulumi.Input[_builtins.str] client_ip_pool: The VPN client IPv4 address pool, expressed in CIDR format. The request must not overlap with any existing address
               prefixes in the VPC or any of the following reserved address ranges: - `127.0.0.0/8` (IPv4 loopback addresses) -
               `161.26.0.0/16` (IBM services) - `166.8.0.0/14` (Cloud Service Endpoints) - `169.254.0.0/16` (IPv4 link-local addresses)
               - `224.0.0.0/4` (IPv4 multicast addresses)The prefix length of the client IP address pool's CIDR must be between`/9`
               (8,388,608 addresses) and `/22` (1024 addresses). A CIDR block that contains twice the number of IP addresses that are
               required to enable the maximum number of concurrent connections is recommended.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: The unique identifier for this subnet. The subnets to provision this VPN server in. Use subnets in different zones for
               high availability.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] client_dns_server_ips: The DNS server addresses that will be provided to VPN clients connected to this VPN server. The IP address. This
               property may add support for IPv6 addresses in the future. When processing a value in this property, verify that the
               address is in an expected format. If it is not, log an error. Optionally halt processing and surface the error, or
               bypass the resource on which the unexpected IP address format was encountered.
        :param pulumi.Input[_builtins.float] client_idle_timeout: The seconds a VPN client can be idle before this VPN server will disconnect it. Specify `0` to prevent the server from
               disconnecting idle clients.
        :param pulumi.Input[_builtins.bool] enable_split_tunneling: Indicates whether the split tunneling is enabled on this VPN server.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this VPN server. If unspecified, the name will be a hyphenated list of randomly-selected
               words. Names must be unique within the VPC this VPN server is serving.
        :param pulumi.Input[_builtins.float] port: The port number to use for this VPN server.
        :param pulumi.Input[_builtins.str] protocol: The transport protocol to use for this VPN server.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier for this resource group. The resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] resource_type: The type of resource referenced.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: The unique identifier for this security group. The security groups to use for this VPN server. If unspecified, the VPC's
               default security group is used.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: VPN server user tags list
        """
        pulumi.set(__self__, "certificate_crn", certificate_crn)
        pulumi.set(__self__, "client_authentications", client_authentications)
        pulumi.set(__self__, "client_ip_pool", client_ip_pool)
        pulumi.set(__self__, "subnets", subnets)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if client_dns_server_ips is not None:
            pulumi.set(__self__, "client_dns_server_ips", client_dns_server_ips)
        if client_idle_timeout is not None:
            pulumi.set(__self__, "client_idle_timeout", client_idle_timeout)
        if enable_split_tunneling is not None:
            pulumi.set(__self__, "enable_split_tunneling", enable_split_tunneling)
        if is_vpn_server_id is not None:
            pulumi.set(__self__, "is_vpn_server_id", is_vpn_server_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="certificateCrn")
    def certificate_crn(self) -> pulumi.Input[_builtins.str]:
        """
        The crn of certificate instance for this VPN server.
        """
        return pulumi.get(self, "certificate_crn")

    @certificate_crn.setter
    def certificate_crn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "certificate_crn", value)

    @_builtins.property
    @pulumi.getter(name="clientAuthentications")
    def client_authentications(self) -> pulumi.Input[Sequence[pulumi.Input['IsVpnServerClientAuthenticationArgs']]]:
        """
        The methods used to authenticate VPN clients to this VPN server. VPN clients must authenticate against all provided
        methods.
        """
        return pulumi.get(self, "client_authentications")

    @client_authentications.setter
    def client_authentications(self, value: pulumi.Input[Sequence[pulumi.Input['IsVpnServerClientAuthenticationArgs']]]):
        pulumi.set(self, "client_authentications", value)

    @_builtins.property
    @pulumi.getter(name="clientIpPool")
    def client_ip_pool(self) -> pulumi.Input[_builtins.str]:
        """
        The VPN client IPv4 address pool, expressed in CIDR format. The request must not overlap with any existing address
        prefixes in the VPC or any of the following reserved address ranges: - `127.0.0.0/8` (IPv4 loopback addresses) -
        `161.26.0.0/16` (IBM services) - `166.8.0.0/14` (Cloud Service Endpoints) - `169.254.0.0/16` (IPv4 link-local addresses)
        - `224.0.0.0/4` (IPv4 multicast addresses)The prefix length of the client IP address pool's CIDR must be between`/9`
        (8,388,608 addresses) and `/22` (1024 addresses). A CIDR block that contains twice the number of IP addresses that are
        required to enable the maximum number of concurrent connections is recommended.
        """
        return pulumi.get(self, "client_ip_pool")

    @client_ip_pool.setter
    def client_ip_pool(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_ip_pool", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The unique identifier for this subnet. The subnets to provision this VPN server in. Use subnets in different zones for
        high availability.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="clientDnsServerIps")
    def client_dns_server_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The DNS server addresses that will be provided to VPN clients connected to this VPN server. The IP address. This
        property may add support for IPv6 addresses in the future. When processing a value in this property, verify that the
        address is in an expected format. If it is not, log an error. Optionally halt processing and surface the error, or
        bypass the resource on which the unexpected IP address format was encountered.
        """
        return pulumi.get(self, "client_dns_server_ips")

    @client_dns_server_ips.setter
    def client_dns_server_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "client_dns_server_ips", value)

    @_builtins.property
    @pulumi.getter(name="clientIdleTimeout")
    def client_idle_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The seconds a VPN client can be idle before this VPN server will disconnect it. Specify `0` to prevent the server from
        disconnecting idle clients.
        """
        return pulumi.get(self, "client_idle_timeout")

    @client_idle_timeout.setter
    def client_idle_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "client_idle_timeout", value)

    @_builtins.property
    @pulumi.getter(name="enableSplitTunneling")
    def enable_split_tunneling(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the split tunneling is enabled on this VPN server.
        """
        return pulumi.get(self, "enable_split_tunneling")

    @enable_split_tunneling.setter
    def enable_split_tunneling(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_split_tunneling", value)

    @_builtins.property
    @pulumi.getter(name="isVpnServerId")
    def is_vpn_server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpn_server_id")

    @is_vpn_server_id.setter
    def is_vpn_server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpn_server_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this VPN server. If unspecified, the name will be a hyphenated list of randomly-selected
        words. Names must be unique within the VPC this VPN server is serving.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The port number to use for this VPN server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The transport protocol to use for this VPN server.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this resource group. The resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of resource referenced.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The unique identifier for this security group. The security groups to use for this VPN server. If unspecified, the VPC's
        default security group is used.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        VPN server user tags list
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpnServerTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpnServerTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsVpnServerState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 certificate_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 client_authentications: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerClientAuthenticationArgs']]]] = None,
                 client_auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 client_auto_delete_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 client_dns_server_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 client_idle_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 client_ip_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_split_tunneling: Optional[pulumi.Input[_builtins.bool]] = None,
                 health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerHealthReasonArgs']]]] = None,
                 health_state: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpn_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerLifecycleReasonArgs']]]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerPrivateIpArgs']]]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsVpnServerTimeoutsArgs']] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerVpcArgs']]]] = None,
                 vpn_server: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsVpnServer resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] certificate_crn: The crn of certificate instance for this VPN server.
        :param pulumi.Input[Sequence[pulumi.Input['IsVpnServerClientAuthenticationArgs']]] client_authentications: The methods used to authenticate VPN clients to this VPN server. VPN clients must authenticate against all provided
               methods.
        :param pulumi.Input[_builtins.bool] client_auto_delete: If set to `true`, disconnected VPN clients will be automatically deleted after the `client_auto_delete_timeout` time has
               passed.
        :param pulumi.Input[_builtins.float] client_auto_delete_timeout: Hours after which disconnected VPN clients will be automatically deleted. If `0`, disconnected VPN clients will be
               deleted immediately.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] client_dns_server_ips: The DNS server addresses that will be provided to VPN clients connected to this VPN server. The IP address. This
               property may add support for IPv6 addresses in the future. When processing a value in this property, verify that the
               address is in an expected format. If it is not, log an error. Optionally halt processing and surface the error, or
               bypass the resource on which the unexpected IP address format was encountered.
        :param pulumi.Input[_builtins.float] client_idle_timeout: The seconds a VPN client can be idle before this VPN server will disconnect it. Specify `0` to prevent the server from
               disconnecting idle clients.
        :param pulumi.Input[_builtins.str] client_ip_pool: The VPN client IPv4 address pool, expressed in CIDR format. The request must not overlap with any existing address
               prefixes in the VPC or any of the following reserved address ranges: - `127.0.0.0/8` (IPv4 loopback addresses) -
               `161.26.0.0/16` (IBM services) - `166.8.0.0/14` (Cloud Service Endpoints) - `169.254.0.0/16` (IPv4 link-local addresses)
               - `224.0.0.0/4` (IPv4 multicast addresses)The prefix length of the client IP address pool's CIDR must be between`/9`
               (8,388,608 addresses) and `/22` (1024 addresses). A CIDR block that contains twice the number of IP addresses that are
               required to enable the maximum number of concurrent connections is recommended.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the VPN server was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this VPN server.
        :param pulumi.Input[_builtins.bool] enable_split_tunneling: Indicates whether the split tunneling is enabled on this VPN server.
        :param pulumi.Input[_builtins.str] health_state: The health of this resource.- `ok`: Healthy- `degraded`: Suffering from compromised performance, capacity, or
               connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated- `inapplicable`: The
               health state does not apply because of the current lifecycle state. A resource with a lifecycle state of `failed` or
               `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this state.
        :param pulumi.Input[_builtins.str] hostname: Fully qualified domain name assigned to this VPN server.
        :param pulumi.Input[_builtins.str] href: The URL for this VPN server.
        :param pulumi.Input[Sequence[pulumi.Input['IsVpnServerLifecycleReasonArgs']]] lifecycle_reasons: The reasons for the current lifecycle_state (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the VPN server.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this VPN server. If unspecified, the name will be a hyphenated list of randomly-selected
               words. Names must be unique within the VPC this VPN server is serving.
        :param pulumi.Input[_builtins.float] port: The port number to use for this VPN server.
        :param pulumi.Input[Sequence[pulumi.Input['IsVpnServerPrivateIpArgs']]] private_ips: The reserved IPs bound to this VPN server.
        :param pulumi.Input[_builtins.str] protocol: The transport protocol to use for this VPN server.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier for this resource group. The resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] resource_type: The type of resource referenced.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: The unique identifier for this security group. The security groups to use for this VPN server. If unspecified, the VPC's
               default security group is used.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: The unique identifier for this subnet. The subnets to provision this VPN server in. Use subnets in different zones for
               high availability.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: VPN server user tags list
        :param pulumi.Input[Sequence[pulumi.Input['IsVpnServerVpcArgs']]] vpcs: The VPC this VPN server resides in.
        :param pulumi.Input[_builtins.str] vpn_server: The unique identifier for this VPN server.
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if certificate_crn is not None:
            pulumi.set(__self__, "certificate_crn", certificate_crn)
        if client_authentications is not None:
            pulumi.set(__self__, "client_authentications", client_authentications)
        if client_auto_delete is not None:
            pulumi.set(__self__, "client_auto_delete", client_auto_delete)
        if client_auto_delete_timeout is not None:
            pulumi.set(__self__, "client_auto_delete_timeout", client_auto_delete_timeout)
        if client_dns_server_ips is not None:
            pulumi.set(__self__, "client_dns_server_ips", client_dns_server_ips)
        if client_idle_timeout is not None:
            pulumi.set(__self__, "client_idle_timeout", client_idle_timeout)
        if client_ip_pool is not None:
            pulumi.set(__self__, "client_ip_pool", client_ip_pool)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if enable_split_tunneling is not None:
            pulumi.set(__self__, "enable_split_tunneling", enable_split_tunneling)
        if health_reasons is not None:
            pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state is not None:
            pulumi.set(__self__, "health_state", health_state)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_vpn_server_id is not None:
            pulumi.set(__self__, "is_vpn_server_id", is_vpn_server_id)
        if lifecycle_reasons is not None:
            pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpcs is not None:
            pulumi.set(__self__, "vpcs", vpcs)
        if vpn_server is not None:
            pulumi.set(__self__, "vpn_server", vpn_server)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="certificateCrn")
    def certificate_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of certificate instance for this VPN server.
        """
        return pulumi.get(self, "certificate_crn")

    @certificate_crn.setter
    def certificate_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_crn", value)

    @_builtins.property
    @pulumi.getter(name="clientAuthentications")
    def client_authentications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerClientAuthenticationArgs']]]]:
        """
        The methods used to authenticate VPN clients to this VPN server. VPN clients must authenticate against all provided
        methods.
        """
        return pulumi.get(self, "client_authentications")

    @client_authentications.setter
    def client_authentications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerClientAuthenticationArgs']]]]):
        pulumi.set(self, "client_authentications", value)

    @_builtins.property
    @pulumi.getter(name="clientAutoDelete")
    def client_auto_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to `true`, disconnected VPN clients will be automatically deleted after the `client_auto_delete_timeout` time has
        passed.
        """
        return pulumi.get(self, "client_auto_delete")

    @client_auto_delete.setter
    def client_auto_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "client_auto_delete", value)

    @_builtins.property
    @pulumi.getter(name="clientAutoDeleteTimeout")
    def client_auto_delete_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Hours after which disconnected VPN clients will be automatically deleted. If `0`, disconnected VPN clients will be
        deleted immediately.
        """
        return pulumi.get(self, "client_auto_delete_timeout")

    @client_auto_delete_timeout.setter
    def client_auto_delete_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "client_auto_delete_timeout", value)

    @_builtins.property
    @pulumi.getter(name="clientDnsServerIps")
    def client_dns_server_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The DNS server addresses that will be provided to VPN clients connected to this VPN server. The IP address. This
        property may add support for IPv6 addresses in the future. When processing a value in this property, verify that the
        address is in an expected format. If it is not, log an error. Optionally halt processing and surface the error, or
        bypass the resource on which the unexpected IP address format was encountered.
        """
        return pulumi.get(self, "client_dns_server_ips")

    @client_dns_server_ips.setter
    def client_dns_server_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "client_dns_server_ips", value)

    @_builtins.property
    @pulumi.getter(name="clientIdleTimeout")
    def client_idle_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The seconds a VPN client can be idle before this VPN server will disconnect it. Specify `0` to prevent the server from
        disconnecting idle clients.
        """
        return pulumi.get(self, "client_idle_timeout")

    @client_idle_timeout.setter
    def client_idle_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "client_idle_timeout", value)

    @_builtins.property
    @pulumi.getter(name="clientIpPool")
    def client_ip_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPN client IPv4 address pool, expressed in CIDR format. The request must not overlap with any existing address
        prefixes in the VPC or any of the following reserved address ranges: - `127.0.0.0/8` (IPv4 loopback addresses) -
        `161.26.0.0/16` (IBM services) - `166.8.0.0/14` (Cloud Service Endpoints) - `169.254.0.0/16` (IPv4 link-local addresses)
        - `224.0.0.0/4` (IPv4 multicast addresses)The prefix length of the client IP address pool's CIDR must be between`/9`
        (8,388,608 addresses) and `/22` (1024 addresses). A CIDR block that contains twice the number of IP addresses that are
        required to enable the maximum number of concurrent connections is recommended.
        """
        return pulumi.get(self, "client_ip_pool")

    @client_ip_pool.setter
    def client_ip_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_ip_pool", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the VPN server was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this VPN server.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="enableSplitTunneling")
    def enable_split_tunneling(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the split tunneling is enabled on this VPN server.
        """
        return pulumi.get(self, "enable_split_tunneling")

    @enable_split_tunneling.setter
    def enable_split_tunneling(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_split_tunneling", value)

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerHealthReasonArgs']]]]:
        return pulumi.get(self, "health_reasons")

    @health_reasons.setter
    def health_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerHealthReasonArgs']]]]):
        pulumi.set(self, "health_reasons", value)

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The health of this resource.- `ok`: Healthy- `degraded`: Suffering from compromised performance, capacity, or
        connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated- `inapplicable`: The
        health state does not apply because of the current lifecycle state. A resource with a lifecycle state of `failed` or
        `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this state.
        """
        return pulumi.get(self, "health_state")

    @health_state.setter
    def health_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_state", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Fully qualified domain name assigned to this VPN server.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this VPN server.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isVpnServerId")
    def is_vpn_server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpn_server_id")

    @is_vpn_server_id.setter
    def is_vpn_server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpn_server_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerLifecycleReasonArgs']]]]:
        """
        The reasons for the current lifecycle_state (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @lifecycle_reasons.setter
    def lifecycle_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerLifecycleReasonArgs']]]]):
        pulumi.set(self, "lifecycle_reasons", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the VPN server.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this VPN server. If unspecified, the name will be a hyphenated list of randomly-selected
        words. Names must be unique within the VPC this VPN server is serving.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The port number to use for this VPN server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerPrivateIpArgs']]]]:
        """
        The reserved IPs bound to this VPN server.
        """
        return pulumi.get(self, "private_ips")

    @private_ips.setter
    def private_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerPrivateIpArgs']]]]):
        pulumi.set(self, "private_ips", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The transport protocol to use for this VPN server.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this resource group. The resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of resource referenced.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The unique identifier for this security group. The security groups to use for this VPN server. If unspecified, the VPC's
        default security group is used.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The unique identifier for this subnet. The subnets to provision this VPN server in. Use subnets in different zones for
        high availability.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        VPN server user tags list
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpnServerTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpnServerTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerVpcArgs']]]]:
        """
        The VPC this VPN server resides in.
        """
        return pulumi.get(self, "vpcs")

    @vpcs.setter
    def vpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerVpcArgs']]]]):
        pulumi.set(self, "vpcs", value)

    @_builtins.property
    @pulumi.getter(name="vpnServer")
    def vpn_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this VPN server.
        """
        return pulumi.get(self, "vpn_server")

    @vpn_server.setter
    def vpn_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_server", value)


@pulumi.type_token("ibm:index/isVpnServer:IsVpnServer")
class IsVpnServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 certificate_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 client_authentications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerClientAuthenticationArgs', 'IsVpnServerClientAuthenticationArgsDict']]]]] = None,
                 client_dns_server_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 client_idle_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 client_ip_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_split_tunneling: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vpn_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpnServerTimeoutsArgs', 'IsVpnServerTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsVpnServer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] certificate_crn: The crn of certificate instance for this VPN server.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerClientAuthenticationArgs', 'IsVpnServerClientAuthenticationArgsDict']]]] client_authentications: The methods used to authenticate VPN clients to this VPN server. VPN clients must authenticate against all provided
               methods.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] client_dns_server_ips: The DNS server addresses that will be provided to VPN clients connected to this VPN server. The IP address. This
               property may add support for IPv6 addresses in the future. When processing a value in this property, verify that the
               address is in an expected format. If it is not, log an error. Optionally halt processing and surface the error, or
               bypass the resource on which the unexpected IP address format was encountered.
        :param pulumi.Input[_builtins.float] client_idle_timeout: The seconds a VPN client can be idle before this VPN server will disconnect it. Specify `0` to prevent the server from
               disconnecting idle clients.
        :param pulumi.Input[_builtins.str] client_ip_pool: The VPN client IPv4 address pool, expressed in CIDR format. The request must not overlap with any existing address
               prefixes in the VPC or any of the following reserved address ranges: - `127.0.0.0/8` (IPv4 loopback addresses) -
               `161.26.0.0/16` (IBM services) - `166.8.0.0/14` (Cloud Service Endpoints) - `169.254.0.0/16` (IPv4 link-local addresses)
               - `224.0.0.0/4` (IPv4 multicast addresses)The prefix length of the client IP address pool's CIDR must be between`/9`
               (8,388,608 addresses) and `/22` (1024 addresses). A CIDR block that contains twice the number of IP addresses that are
               required to enable the maximum number of concurrent connections is recommended.
        :param pulumi.Input[_builtins.bool] enable_split_tunneling: Indicates whether the split tunneling is enabled on this VPN server.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this VPN server. If unspecified, the name will be a hyphenated list of randomly-selected
               words. Names must be unique within the VPC this VPN server is serving.
        :param pulumi.Input[_builtins.float] port: The port number to use for this VPN server.
        :param pulumi.Input[_builtins.str] protocol: The transport protocol to use for this VPN server.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier for this resource group. The resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] resource_type: The type of resource referenced.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: The unique identifier for this security group. The security groups to use for this VPN server. If unspecified, the VPC's
               default security group is used.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: The unique identifier for this subnet. The subnets to provision this VPN server in. Use subnets in different zones for
               high availability.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: VPN server user tags list
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsVpnServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVpnServer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVpnServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVpnServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 certificate_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 client_authentications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerClientAuthenticationArgs', 'IsVpnServerClientAuthenticationArgsDict']]]]] = None,
                 client_dns_server_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 client_idle_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 client_ip_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_split_tunneling: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vpn_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpnServerTimeoutsArgs', 'IsVpnServerTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVpnServerArgs.__new__(IsVpnServerArgs)

            __props__.__dict__["access_tags"] = access_tags
            if certificate_crn is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_crn'")
            __props__.__dict__["certificate_crn"] = certificate_crn
            if client_authentications is None and not opts.urn:
                raise TypeError("Missing required property 'client_authentications'")
            __props__.__dict__["client_authentications"] = client_authentications
            __props__.__dict__["client_dns_server_ips"] = client_dns_server_ips
            __props__.__dict__["client_idle_timeout"] = client_idle_timeout
            if client_ip_pool is None and not opts.urn:
                raise TypeError("Missing required property 'client_ip_pool'")
            __props__.__dict__["client_ip_pool"] = client_ip_pool
            __props__.__dict__["enable_split_tunneling"] = enable_split_tunneling
            __props__.__dict__["is_vpn_server_id"] = is_vpn_server_id
            __props__.__dict__["name"] = name
            __props__.__dict__["port"] = port
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["resource_type"] = resource_type
            __props__.__dict__["security_groups"] = security_groups
            if subnets is None and not opts.urn:
                raise TypeError("Missing required property 'subnets'")
            __props__.__dict__["subnets"] = subnets
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["client_auto_delete"] = None
            __props__.__dict__["client_auto_delete_timeout"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["health_reasons"] = None
            __props__.__dict__["health_state"] = None
            __props__.__dict__["hostname"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_reasons"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["private_ips"] = None
            __props__.__dict__["vpcs"] = None
            __props__.__dict__["vpn_server"] = None
        super(IsVpnServer, __self__).__init__(
            'ibm:index/isVpnServer:IsVpnServer',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            certificate_crn: Optional[pulumi.Input[_builtins.str]] = None,
            client_authentications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerClientAuthenticationArgs', 'IsVpnServerClientAuthenticationArgsDict']]]]] = None,
            client_auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            client_auto_delete_timeout: Optional[pulumi.Input[_builtins.float]] = None,
            client_dns_server_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            client_idle_timeout: Optional[pulumi.Input[_builtins.float]] = None,
            client_ip_pool: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            enable_split_tunneling: Optional[pulumi.Input[_builtins.bool]] = None,
            health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerHealthReasonArgs', 'IsVpnServerHealthReasonArgsDict']]]]] = None,
            health_state: Optional[pulumi.Input[_builtins.str]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_vpn_server_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerLifecycleReasonArgs', 'IsVpnServerLifecycleReasonArgsDict']]]]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.float]] = None,
            private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerPrivateIpArgs', 'IsVpnServerPrivateIpArgsDict']]]]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsVpnServerTimeoutsArgs', 'IsVpnServerTimeoutsArgsDict']]] = None,
            vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerVpcArgs', 'IsVpnServerVpcArgsDict']]]]] = None,
            vpn_server: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsVpnServer':
        """
        Get an existing IsVpnServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] certificate_crn: The crn of certificate instance for this VPN server.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerClientAuthenticationArgs', 'IsVpnServerClientAuthenticationArgsDict']]]] client_authentications: The methods used to authenticate VPN clients to this VPN server. VPN clients must authenticate against all provided
               methods.
        :param pulumi.Input[_builtins.bool] client_auto_delete: If set to `true`, disconnected VPN clients will be automatically deleted after the `client_auto_delete_timeout` time has
               passed.
        :param pulumi.Input[_builtins.float] client_auto_delete_timeout: Hours after which disconnected VPN clients will be automatically deleted. If `0`, disconnected VPN clients will be
               deleted immediately.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] client_dns_server_ips: The DNS server addresses that will be provided to VPN clients connected to this VPN server. The IP address. This
               property may add support for IPv6 addresses in the future. When processing a value in this property, verify that the
               address is in an expected format. If it is not, log an error. Optionally halt processing and surface the error, or
               bypass the resource on which the unexpected IP address format was encountered.
        :param pulumi.Input[_builtins.float] client_idle_timeout: The seconds a VPN client can be idle before this VPN server will disconnect it. Specify `0` to prevent the server from
               disconnecting idle clients.
        :param pulumi.Input[_builtins.str] client_ip_pool: The VPN client IPv4 address pool, expressed in CIDR format. The request must not overlap with any existing address
               prefixes in the VPC or any of the following reserved address ranges: - `127.0.0.0/8` (IPv4 loopback addresses) -
               `161.26.0.0/16` (IBM services) - `166.8.0.0/14` (Cloud Service Endpoints) - `169.254.0.0/16` (IPv4 link-local addresses)
               - `224.0.0.0/4` (IPv4 multicast addresses)The prefix length of the client IP address pool's CIDR must be between`/9`
               (8,388,608 addresses) and `/22` (1024 addresses). A CIDR block that contains twice the number of IP addresses that are
               required to enable the maximum number of concurrent connections is recommended.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the VPN server was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this VPN server.
        :param pulumi.Input[_builtins.bool] enable_split_tunneling: Indicates whether the split tunneling is enabled on this VPN server.
        :param pulumi.Input[_builtins.str] health_state: The health of this resource.- `ok`: Healthy- `degraded`: Suffering from compromised performance, capacity, or
               connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated- `inapplicable`: The
               health state does not apply because of the current lifecycle state. A resource with a lifecycle state of `failed` or
               `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this state.
        :param pulumi.Input[_builtins.str] hostname: Fully qualified domain name assigned to this VPN server.
        :param pulumi.Input[_builtins.str] href: The URL for this VPN server.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerLifecycleReasonArgs', 'IsVpnServerLifecycleReasonArgsDict']]]] lifecycle_reasons: The reasons for the current lifecycle_state (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the VPN server.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this VPN server. If unspecified, the name will be a hyphenated list of randomly-selected
               words. Names must be unique within the VPC this VPN server is serving.
        :param pulumi.Input[_builtins.float] port: The port number to use for this VPN server.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerPrivateIpArgs', 'IsVpnServerPrivateIpArgsDict']]]] private_ips: The reserved IPs bound to this VPN server.
        :param pulumi.Input[_builtins.str] protocol: The transport protocol to use for this VPN server.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier for this resource group. The resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] resource_type: The type of resource referenced.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: The unique identifier for this security group. The security groups to use for this VPN server. If unspecified, the VPC's
               default security group is used.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: The unique identifier for this subnet. The subnets to provision this VPN server in. Use subnets in different zones for
               high availability.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: VPN server user tags list
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerVpcArgs', 'IsVpnServerVpcArgsDict']]]] vpcs: The VPC this VPN server resides in.
        :param pulumi.Input[_builtins.str] vpn_server: The unique identifier for this VPN server.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVpnServerState.__new__(_IsVpnServerState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["certificate_crn"] = certificate_crn
        __props__.__dict__["client_authentications"] = client_authentications
        __props__.__dict__["client_auto_delete"] = client_auto_delete
        __props__.__dict__["client_auto_delete_timeout"] = client_auto_delete_timeout
        __props__.__dict__["client_dns_server_ips"] = client_dns_server_ips
        __props__.__dict__["client_idle_timeout"] = client_idle_timeout
        __props__.__dict__["client_ip_pool"] = client_ip_pool
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["enable_split_tunneling"] = enable_split_tunneling
        __props__.__dict__["health_reasons"] = health_reasons
        __props__.__dict__["health_state"] = health_state
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["href"] = href
        __props__.__dict__["is_vpn_server_id"] = is_vpn_server_id
        __props__.__dict__["lifecycle_reasons"] = lifecycle_reasons
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["port"] = port
        __props__.__dict__["private_ips"] = private_ips
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpcs"] = vpcs
        __props__.__dict__["vpn_server"] = vpn_server
        return IsVpnServer(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="certificateCrn")
    def certificate_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of certificate instance for this VPN server.
        """
        return pulumi.get(self, "certificate_crn")

    @_builtins.property
    @pulumi.getter(name="clientAuthentications")
    def client_authentications(self) -> pulumi.Output[Sequence['outputs.IsVpnServerClientAuthentication']]:
        """
        The methods used to authenticate VPN clients to this VPN server. VPN clients must authenticate against all provided
        methods.
        """
        return pulumi.get(self, "client_authentications")

    @_builtins.property
    @pulumi.getter(name="clientAutoDelete")
    def client_auto_delete(self) -> pulumi.Output[_builtins.bool]:
        """
        If set to `true`, disconnected VPN clients will be automatically deleted after the `client_auto_delete_timeout` time has
        passed.
        """
        return pulumi.get(self, "client_auto_delete")

    @_builtins.property
    @pulumi.getter(name="clientAutoDeleteTimeout")
    def client_auto_delete_timeout(self) -> pulumi.Output[_builtins.float]:
        """
        Hours after which disconnected VPN clients will be automatically deleted. If `0`, disconnected VPN clients will be
        deleted immediately.
        """
        return pulumi.get(self, "client_auto_delete_timeout")

    @_builtins.property
    @pulumi.getter(name="clientDnsServerIps")
    def client_dns_server_ips(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The DNS server addresses that will be provided to VPN clients connected to this VPN server. The IP address. This
        property may add support for IPv6 addresses in the future. When processing a value in this property, verify that the
        address is in an expected format. If it is not, log an error. Optionally halt processing and surface the error, or
        bypass the resource on which the unexpected IP address format was encountered.
        """
        return pulumi.get(self, "client_dns_server_ips")

    @_builtins.property
    @pulumi.getter(name="clientIdleTimeout")
    def client_idle_timeout(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The seconds a VPN client can be idle before this VPN server will disconnect it. Specify `0` to prevent the server from
        disconnecting idle clients.
        """
        return pulumi.get(self, "client_idle_timeout")

    @_builtins.property
    @pulumi.getter(name="clientIpPool")
    def client_ip_pool(self) -> pulumi.Output[_builtins.str]:
        """
        The VPN client IPv4 address pool, expressed in CIDR format. The request must not overlap with any existing address
        prefixes in the VPC or any of the following reserved address ranges: - `127.0.0.0/8` (IPv4 loopback addresses) -
        `161.26.0.0/16` (IBM services) - `166.8.0.0/14` (Cloud Service Endpoints) - `169.254.0.0/16` (IPv4 link-local addresses)
        - `224.0.0.0/4` (IPv4 multicast addresses)The prefix length of the client IP address pool's CIDR must be between`/9`
        (8,388,608 addresses) and `/22` (1024 addresses). A CIDR block that contains twice the number of IP addresses that are
        required to enable the maximum number of concurrent connections is recommended.
        """
        return pulumi.get(self, "client_ip_pool")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the VPN server was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this VPN server.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="enableSplitTunneling")
    def enable_split_tunneling(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates whether the split tunneling is enabled on this VPN server.
        """
        return pulumi.get(self, "enable_split_tunneling")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> pulumi.Output[Sequence['outputs.IsVpnServerHealthReason']]:
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> pulumi.Output[_builtins.str]:
        """
        The health of this resource.- `ok`: Healthy- `degraded`: Suffering from compromised performance, capacity, or
        connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated- `inapplicable`: The
        health state does not apply because of the current lifecycle state. A resource with a lifecycle state of `failed` or
        `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this state.
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[_builtins.str]:
        """
        Fully qualified domain name assigned to this VPN server.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this VPN server.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isVpnServerId")
    def is_vpn_server_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_vpn_server_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> pulumi.Output[Sequence['outputs.IsVpnServerLifecycleReason']]:
        """
        The reasons for the current lifecycle_state (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the VPN server.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this VPN server. If unspecified, the name will be a hyphenated list of randomly-selected
        words. Names must be unique within the VPC this VPN server is serving.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The port number to use for this VPN server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> pulumi.Output[Sequence['outputs.IsVpnServerPrivateIp']]:
        """
        The reserved IPs bound to this VPN server.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The transport protocol to use for this VPN server.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this resource group. The resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The type of resource referenced.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The unique identifier for this security group. The security groups to use for this VPN server. If unspecified, the VPC's
        default security group is used.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The unique identifier for this subnet. The subnets to provision this VPN server in. Use subnets in different zones for
        high availability.
        """
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        VPN server user tags list
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsVpnServerTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> pulumi.Output[Sequence['outputs.IsVpnServerVpc']]:
        """
        The VPC this VPN server resides in.
        """
        return pulumi.get(self, "vpcs")

    @_builtins.property
    @pulumi.getter(name="vpnServer")
    def vpn_server(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this VPN server.
        """
        return pulumi.get(self, "vpn_server")

