# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamTrustedProfilesResult',
    'AwaitableGetIamTrustedProfilesResult',
    'get_iam_trusted_profiles',
    'get_iam_trusted_profiles_output',
]

@pulumi.output_type
class GetIamTrustedProfilesResult:
    """
    A collection of values returned by getIamTrustedProfiles.
    """
    def __init__(__self__, account_id=None, id=None, include_history=None, name=None, profiles=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_history and not isinstance(include_history, bool):
            raise TypeError("Expected argument 'include_history' to be a bool")
        pulumi.set(__self__, "include_history", include_history)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if profiles and not isinstance(profiles, list):
            raise TypeError("Expected argument 'profiles' to be a list")
        pulumi.set(__self__, "profiles", profiles)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeHistory")
    def include_history(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_history")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetIamTrustedProfilesProfileResult']:
        return pulumi.get(self, "profiles")


class AwaitableGetIamTrustedProfilesResult(GetIamTrustedProfilesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamTrustedProfilesResult(
            account_id=self.account_id,
            id=self.id,
            include_history=self.include_history,
            name=self.name,
            profiles=self.profiles)


def get_iam_trusted_profiles(account_id: Optional[_builtins.str] = None,
                             id: Optional[_builtins.str] = None,
                             include_history: Optional[_builtins.bool] = None,
                             name: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamTrustedProfilesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['id'] = id
    __args__['includeHistory'] = include_history
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamTrustedProfiles:getIamTrustedProfiles', __args__, opts=opts, typ=GetIamTrustedProfilesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamTrustedProfilesResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        id=pulumi.get(__ret__, 'id'),
        include_history=pulumi.get(__ret__, 'include_history'),
        name=pulumi.get(__ret__, 'name'),
        profiles=pulumi.get(__ret__, 'profiles'))
def get_iam_trusted_profiles_output(account_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    include_history: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                    name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamTrustedProfilesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['id'] = id
    __args__['includeHistory'] = include_history
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamTrustedProfiles:getIamTrustedProfiles', __args__, opts=opts, typ=GetIamTrustedProfilesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamTrustedProfilesResult(
        account_id=pulumi.get(__response__, 'account_id'),
        id=pulumi.get(__response__, 'id'),
        include_history=pulumi.get(__response__, 'include_history'),
        name=pulumi.get(__response__, 'name'),
        profiles=pulumi.get(__response__, 'profiles')))
