# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetConfigAggregatorSettingsResult',
    'AwaitableGetConfigAggregatorSettingsResult',
    'get_config_aggregator_settings',
    'get_config_aggregator_settings_output',
]

@pulumi.output_type
class GetConfigAggregatorSettingsResult:
    """
    A collection of values returned by getConfigAggregatorSettings.
    """
    def __init__(__self__, additional_scopes=None, id=None, instance_id=None, last_updated=None, region=None, regions=None, resource_collection_enabled=None, trusted_profile_id=None):
        if additional_scopes and not isinstance(additional_scopes, list):
            raise TypeError("Expected argument 'additional_scopes' to be a list")
        pulumi.set(__self__, "additional_scopes", additional_scopes)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if last_updated and not isinstance(last_updated, str):
            raise TypeError("Expected argument 'last_updated' to be a str")
        pulumi.set(__self__, "last_updated", last_updated)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if regions and not isinstance(regions, list):
            raise TypeError("Expected argument 'regions' to be a list")
        pulumi.set(__self__, "regions", regions)
        if resource_collection_enabled and not isinstance(resource_collection_enabled, bool):
            raise TypeError("Expected argument 'resource_collection_enabled' to be a bool")
        pulumi.set(__self__, "resource_collection_enabled", resource_collection_enabled)
        if trusted_profile_id and not isinstance(trusted_profile_id, str):
            raise TypeError("Expected argument 'trusted_profile_id' to be a str")
        pulumi.set(__self__, "trusted_profile_id", trusted_profile_id)

    @_builtins.property
    @pulumi.getter(name="additionalScopes")
    def additional_scopes(self) -> Sequence['outputs.GetConfigAggregatorSettingsAdditionalScopeResult']:
        return pulumi.get(self, "additional_scopes")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "regions")

    @_builtins.property
    @pulumi.getter(name="resourceCollectionEnabled")
    def resource_collection_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "resource_collection_enabled")

    @_builtins.property
    @pulumi.getter(name="trustedProfileId")
    def trusted_profile_id(self) -> _builtins.str:
        return pulumi.get(self, "trusted_profile_id")


class AwaitableGetConfigAggregatorSettingsResult(GetConfigAggregatorSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigAggregatorSettingsResult(
            additional_scopes=self.additional_scopes,
            id=self.id,
            instance_id=self.instance_id,
            last_updated=self.last_updated,
            region=self.region,
            regions=self.regions,
            resource_collection_enabled=self.resource_collection_enabled,
            trusted_profile_id=self.trusted_profile_id)


def get_config_aggregator_settings(id: Optional[_builtins.str] = None,
                                   instance_id: Optional[_builtins.str] = None,
                                   region: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigAggregatorSettingsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getConfigAggregatorSettings:getConfigAggregatorSettings', __args__, opts=opts, typ=GetConfigAggregatorSettingsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetConfigAggregatorSettingsResult(
        additional_scopes=pulumi.get(__ret__, 'additional_scopes'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        last_updated=pulumi.get(__ret__, 'last_updated'),
        region=pulumi.get(__ret__, 'region'),
        regions=pulumi.get(__ret__, 'regions'),
        resource_collection_enabled=pulumi.get(__ret__, 'resource_collection_enabled'),
        trusted_profile_id=pulumi.get(__ret__, 'trusted_profile_id'))
def get_config_aggregator_settings_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConfigAggregatorSettingsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getConfigAggregatorSettings:getConfigAggregatorSettings', __args__, opts=opts, typ=GetConfigAggregatorSettingsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetConfigAggregatorSettingsResult(
        additional_scopes=pulumi.get(__response__, 'additional_scopes'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        last_updated=pulumi.get(__response__, 'last_updated'),
        region=pulumi.get(__response__, 'region'),
        regions=pulumi.get(__response__, 'regions'),
        resource_collection_enabled=pulumi.get(__response__, 'resource_collection_enabled'),
        trusted_profile_id=pulumi.get(__response__, 'trusted_profile_id')))
