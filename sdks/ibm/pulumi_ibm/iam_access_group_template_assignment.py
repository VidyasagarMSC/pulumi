# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IamAccessGroupTemplateAssignmentArgs', 'IamAccessGroupTemplateAssignment']

@pulumi.input_type
class IamAccessGroupTemplateAssignmentArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[_builtins.str],
                 target_type: pulumi.Input[_builtins.str],
                 template_id: pulumi.Input[_builtins.str],
                 template_version: pulumi.Input[_builtins.str],
                 iam_access_group_template_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IamAccessGroupTemplateAssignmentTimeoutsArgs']] = None,
                 transaction_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamAccessGroupTemplateAssignment resource.
        :param pulumi.Input[_builtins.str] target: The ID of the entity that the assignment applies to.
        :param pulumi.Input[_builtins.str] target_type: The type of the entity that the assignment applies to.
        :param pulumi.Input[_builtins.str] template_id: The ID of the template that the assignment is based on.
        :param pulumi.Input[_builtins.str] template_version: The version of the template that the assignment is based on.
        :param pulumi.Input[_builtins.str] transaction_id: An optional transaction id for the request.
        """
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_type", target_type)
        pulumi.set(__self__, "template_id", template_id)
        pulumi.set(__self__, "template_version", template_version)
        if iam_access_group_template_assignment_id is not None:
            pulumi.set(__self__, "iam_access_group_template_assignment_id", iam_access_group_template_assignment_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if transaction_id is not None:
            pulumi.set(__self__, "transaction_id", transaction_id)

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the entity that the assignment applies to.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the entity that the assignment applies to.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_type", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the template that the assignment is based on.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> pulumi.Input[_builtins.str]:
        """
        The version of the template that the assignment is based on.
        """
        return pulumi.get(self, "template_version")

    @template_version.setter
    def template_version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_version", value)

    @_builtins.property
    @pulumi.getter(name="iamAccessGroupTemplateAssignmentId")
    def iam_access_group_template_assignment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_access_group_template_assignment_id")

    @iam_access_group_template_assignment_id.setter
    def iam_access_group_template_assignment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_access_group_template_assignment_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IamAccessGroupTemplateAssignmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IamAccessGroupTemplateAssignmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An optional transaction id for the request.
        """
        return pulumi.get(self, "transaction_id")

    @transaction_id.setter
    def transaction_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transaction_id", value)


@pulumi.input_type
class _IamAccessGroupTemplateAssignmentState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by_id: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_access_group_template_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_modified_at: Optional[pulumi.Input[_builtins.str]] = None,
                 last_modified_by_id: Optional[pulumi.Input[_builtins.str]] = None,
                 operation: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IamAccessGroupTemplateAssignmentTimeoutsArgs']] = None,
                 transaction_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamAccessGroupTemplateAssignment resources.
        :param pulumi.Input[_builtins.str] account_id: The ID of the account that the assignment belongs to.
        :param pulumi.Input[_builtins.str] created_at: The date and time when the assignment was created.
        :param pulumi.Input[_builtins.str] created_by_id: The user or system that created the assignment.
        :param pulumi.Input[_builtins.str] href: The URL of the assignment resource.
        :param pulumi.Input[_builtins.str] last_modified_at: The date and time when the assignment was last updated.
        :param pulumi.Input[_builtins.str] last_modified_by_id: The user or system that last updated the assignment.
        :param pulumi.Input[_builtins.str] operation: The operation that the assignment applies to (e.g. 'assign', 'update', 'remove').
        :param pulumi.Input[_builtins.str] status: The status of the assignment (e.g. 'accepted', 'in_progress', 'succeeded', 'failed', 'superseded').
        :param pulumi.Input[_builtins.str] target: The ID of the entity that the assignment applies to.
        :param pulumi.Input[_builtins.str] target_type: The type of the entity that the assignment applies to.
        :param pulumi.Input[_builtins.str] template_id: The ID of the template that the assignment is based on.
        :param pulumi.Input[_builtins.str] template_version: The version of the template that the assignment is based on.
        :param pulumi.Input[_builtins.str] transaction_id: An optional transaction id for the request.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by_id is not None:
            pulumi.set(__self__, "created_by_id", created_by_id)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if iam_access_group_template_assignment_id is not None:
            pulumi.set(__self__, "iam_access_group_template_assignment_id", iam_access_group_template_assignment_id)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by_id is not None:
            pulumi.set(__self__, "last_modified_by_id", last_modified_by_id)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if template_version is not None:
            pulumi.set(__self__, "template_version", template_version)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if transaction_id is not None:
            pulumi.set(__self__, "transaction_id", transaction_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the account that the assignment belongs to.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time when the assignment was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user or system that created the assignment.
        """
        return pulumi.get(self, "created_by_id")

    @created_by_id.setter
    def created_by_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by_id", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the assignment resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="iamAccessGroupTemplateAssignmentId")
    def iam_access_group_template_assignment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_access_group_template_assignment_id")

    @iam_access_group_template_assignment_id.setter
    def iam_access_group_template_assignment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_access_group_template_assignment_id", value)

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time when the assignment was last updated.
        """
        return pulumi.get(self, "last_modified_at")

    @last_modified_at.setter
    def last_modified_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_modified_at", value)

    @_builtins.property
    @pulumi.getter(name="lastModifiedById")
    def last_modified_by_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user or system that last updated the assignment.
        """
        return pulumi.get(self, "last_modified_by_id")

    @last_modified_by_id.setter
    def last_modified_by_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_modified_by_id", value)

    @_builtins.property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operation that the assignment applies to (e.g. 'assign', 'update', 'remove').
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operation", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the assignment (e.g. 'accepted', 'in_progress', 'succeeded', 'failed', 'superseded').
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the entity that the assignment applies to.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the entity that the assignment applies to.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_type", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the template that the assignment is based on.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the template that the assignment is based on.
        """
        return pulumi.get(self, "template_version")

    @template_version.setter
    def template_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_version", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IamAccessGroupTemplateAssignmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IamAccessGroupTemplateAssignmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An optional transaction id for the request.
        """
        return pulumi.get(self, "transaction_id")

    @transaction_id.setter
    def transaction_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transaction_id", value)


@pulumi.type_token("ibm:index/iamAccessGroupTemplateAssignment:IamAccessGroupTemplateAssignment")
class IamAccessGroupTemplateAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iam_access_group_template_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IamAccessGroupTemplateAssignmentTimeoutsArgs', 'IamAccessGroupTemplateAssignmentTimeoutsArgsDict']]] = None,
                 transaction_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IamAccessGroupTemplateAssignment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] target: The ID of the entity that the assignment applies to.
        :param pulumi.Input[_builtins.str] target_type: The type of the entity that the assignment applies to.
        :param pulumi.Input[_builtins.str] template_id: The ID of the template that the assignment is based on.
        :param pulumi.Input[_builtins.str] template_version: The version of the template that the assignment is based on.
        :param pulumi.Input[_builtins.str] transaction_id: An optional transaction id for the request.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamAccessGroupTemplateAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamAccessGroupTemplateAssignment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamAccessGroupTemplateAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamAccessGroupTemplateAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iam_access_group_template_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IamAccessGroupTemplateAssignmentTimeoutsArgs', 'IamAccessGroupTemplateAssignmentTimeoutsArgsDict']]] = None,
                 transaction_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamAccessGroupTemplateAssignmentArgs.__new__(IamAccessGroupTemplateAssignmentArgs)

            __props__.__dict__["iam_access_group_template_assignment_id"] = iam_access_group_template_assignment_id
            if target is None and not opts.urn:
                raise TypeError("Missing required property 'target'")
            __props__.__dict__["target"] = target
            if target_type is None and not opts.urn:
                raise TypeError("Missing required property 'target_type'")
            __props__.__dict__["target_type"] = target_type
            if template_id is None and not opts.urn:
                raise TypeError("Missing required property 'template_id'")
            __props__.__dict__["template_id"] = template_id
            if template_version is None and not opts.urn:
                raise TypeError("Missing required property 'template_version'")
            __props__.__dict__["template_version"] = template_version
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["transaction_id"] = transaction_id
            __props__.__dict__["account_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by_id"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["last_modified_at"] = None
            __props__.__dict__["last_modified_by_id"] = None
            __props__.__dict__["operation"] = None
            __props__.__dict__["status"] = None
        super(IamAccessGroupTemplateAssignment, __self__).__init__(
            'ibm:index/iamAccessGroupTemplateAssignment:IamAccessGroupTemplateAssignment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by_id: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            iam_access_group_template_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
            last_modified_at: Optional[pulumi.Input[_builtins.str]] = None,
            last_modified_by_id: Optional[pulumi.Input[_builtins.str]] = None,
            operation: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            target: Optional[pulumi.Input[_builtins.str]] = None,
            target_type: Optional[pulumi.Input[_builtins.str]] = None,
            template_id: Optional[pulumi.Input[_builtins.str]] = None,
            template_version: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IamAccessGroupTemplateAssignmentTimeoutsArgs', 'IamAccessGroupTemplateAssignmentTimeoutsArgsDict']]] = None,
            transaction_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamAccessGroupTemplateAssignment':
        """
        Get an existing IamAccessGroupTemplateAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: The ID of the account that the assignment belongs to.
        :param pulumi.Input[_builtins.str] created_at: The date and time when the assignment was created.
        :param pulumi.Input[_builtins.str] created_by_id: The user or system that created the assignment.
        :param pulumi.Input[_builtins.str] href: The URL of the assignment resource.
        :param pulumi.Input[_builtins.str] last_modified_at: The date and time when the assignment was last updated.
        :param pulumi.Input[_builtins.str] last_modified_by_id: The user or system that last updated the assignment.
        :param pulumi.Input[_builtins.str] operation: The operation that the assignment applies to (e.g. 'assign', 'update', 'remove').
        :param pulumi.Input[_builtins.str] status: The status of the assignment (e.g. 'accepted', 'in_progress', 'succeeded', 'failed', 'superseded').
        :param pulumi.Input[_builtins.str] target: The ID of the entity that the assignment applies to.
        :param pulumi.Input[_builtins.str] target_type: The type of the entity that the assignment applies to.
        :param pulumi.Input[_builtins.str] template_id: The ID of the template that the assignment is based on.
        :param pulumi.Input[_builtins.str] template_version: The version of the template that the assignment is based on.
        :param pulumi.Input[_builtins.str] transaction_id: An optional transaction id for the request.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamAccessGroupTemplateAssignmentState.__new__(_IamAccessGroupTemplateAssignmentState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by_id"] = created_by_id
        __props__.__dict__["etag"] = etag
        __props__.__dict__["href"] = href
        __props__.__dict__["iam_access_group_template_assignment_id"] = iam_access_group_template_assignment_id
        __props__.__dict__["last_modified_at"] = last_modified_at
        __props__.__dict__["last_modified_by_id"] = last_modified_by_id
        __props__.__dict__["operation"] = operation
        __props__.__dict__["status"] = status
        __props__.__dict__["target"] = target
        __props__.__dict__["target_type"] = target_type
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["template_version"] = template_version
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["transaction_id"] = transaction_id
        return IamAccessGroupTemplateAssignment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the account that the assignment belongs to.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time when the assignment was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> pulumi.Output[_builtins.str]:
        """
        The user or system that created the assignment.
        """
        return pulumi.get(self, "created_by_id")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the assignment resource.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="iamAccessGroupTemplateAssignmentId")
    def iam_access_group_template_assignment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_access_group_template_assignment_id")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time when the assignment was last updated.
        """
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedById")
    def last_modified_by_id(self) -> pulumi.Output[_builtins.str]:
        """
        The user or system that last updated the assignment.
        """
        return pulumi.get(self, "last_modified_by_id")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> pulumi.Output[_builtins.str]:
        """
        The operation that the assignment applies to (e.g. 'assign', 'update', 'remove').
        """
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the assignment (e.g. 'accepted', 'in_progress', 'succeeded', 'failed', 'superseded').
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the entity that the assignment applies to.
        """
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the entity that the assignment applies to.
        """
        return pulumi.get(self, "target_type")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the template that the assignment is based on.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> pulumi.Output[_builtins.str]:
        """
        The version of the template that the assignment is based on.
        """
        return pulumi.get(self, "template_version")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IamAccessGroupTemplateAssignmentTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        An optional transaction id for the request.
        """
        return pulumi.get(self, "transaction_id")

