# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamTrustedProfileResult',
    'AwaitableGetIamTrustedProfileResult',
    'get_iam_trusted_profile',
    'get_iam_trusted_profile_output',
]

@pulumi.output_type
class GetIamTrustedProfileResult:
    """
    A collection of values returned by getIamTrustedProfile.
    """
    def __init__(__self__, account_id=None, assignment_id=None, created_at=None, crn=None, description=None, entity_tag=None, histories=None, iam_id=None, id=None, ims_account_id=None, ims_user_id=None, modified_at=None, name=None, profile_id=None, template_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if assignment_id and not isinstance(assignment_id, str):
            raise TypeError("Expected argument 'assignment_id' to be a str")
        pulumi.set(__self__, "assignment_id", assignment_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if entity_tag and not isinstance(entity_tag, str):
            raise TypeError("Expected argument 'entity_tag' to be a str")
        pulumi.set(__self__, "entity_tag", entity_tag)
        if histories and not isinstance(histories, list):
            raise TypeError("Expected argument 'histories' to be a list")
        pulumi.set(__self__, "histories", histories)
        if iam_id and not isinstance(iam_id, str):
            raise TypeError("Expected argument 'iam_id' to be a str")
        pulumi.set(__self__, "iam_id", iam_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ims_account_id and not isinstance(ims_account_id, float):
            raise TypeError("Expected argument 'ims_account_id' to be a float")
        pulumi.set(__self__, "ims_account_id", ims_account_id)
        if ims_user_id and not isinstance(ims_user_id, float):
            raise TypeError("Expected argument 'ims_user_id' to be a float")
        pulumi.set(__self__, "ims_user_id", ims_user_id)
        if modified_at and not isinstance(modified_at, str):
            raise TypeError("Expected argument 'modified_at' to be a str")
        pulumi.set(__self__, "modified_at", modified_at)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if profile_id and not isinstance(profile_id, str):
            raise TypeError("Expected argument 'profile_id' to be a str")
        pulumi.set(__self__, "profile_id", profile_id)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="assignmentId")
    def assignment_id(self) -> _builtins.str:
        return pulumi.get(self, "assignment_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> _builtins.str:
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def histories(self) -> Sequence['outputs.GetIamTrustedProfileHistoryResult']:
        return pulumi.get(self, "histories")

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> _builtins.str:
        return pulumi.get(self, "iam_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imsAccountId")
    def ims_account_id(self) -> _builtins.float:
        return pulumi.get(self, "ims_account_id")

    @_builtins.property
    @pulumi.getter(name="imsUserId")
    def ims_user_id(self) -> _builtins.float:
        return pulumi.get(self, "ims_user_id")

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> _builtins.str:
        return pulumi.get(self, "modified_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> _builtins.str:
        return pulumi.get(self, "profile_id")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> _builtins.str:
        return pulumi.get(self, "template_id")


class AwaitableGetIamTrustedProfileResult(GetIamTrustedProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamTrustedProfileResult(
            account_id=self.account_id,
            assignment_id=self.assignment_id,
            created_at=self.created_at,
            crn=self.crn,
            description=self.description,
            entity_tag=self.entity_tag,
            histories=self.histories,
            iam_id=self.iam_id,
            id=self.id,
            ims_account_id=self.ims_account_id,
            ims_user_id=self.ims_user_id,
            modified_at=self.modified_at,
            name=self.name,
            profile_id=self.profile_id,
            template_id=self.template_id)


def get_iam_trusted_profile(id: Optional[_builtins.str] = None,
                            profile_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamTrustedProfileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['profileId'] = profile_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamTrustedProfile:getIamTrustedProfile', __args__, opts=opts, typ=GetIamTrustedProfileResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamTrustedProfileResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        assignment_id=pulumi.get(__ret__, 'assignment_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        description=pulumi.get(__ret__, 'description'),
        entity_tag=pulumi.get(__ret__, 'entity_tag'),
        histories=pulumi.get(__ret__, 'histories'),
        iam_id=pulumi.get(__ret__, 'iam_id'),
        id=pulumi.get(__ret__, 'id'),
        ims_account_id=pulumi.get(__ret__, 'ims_account_id'),
        ims_user_id=pulumi.get(__ret__, 'ims_user_id'),
        modified_at=pulumi.get(__ret__, 'modified_at'),
        name=pulumi.get(__ret__, 'name'),
        profile_id=pulumi.get(__ret__, 'profile_id'),
        template_id=pulumi.get(__ret__, 'template_id'))
def get_iam_trusted_profile_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamTrustedProfileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['profileId'] = profile_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamTrustedProfile:getIamTrustedProfile', __args__, opts=opts, typ=GetIamTrustedProfileResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamTrustedProfileResult(
        account_id=pulumi.get(__response__, 'account_id'),
        assignment_id=pulumi.get(__response__, 'assignment_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        description=pulumi.get(__response__, 'description'),
        entity_tag=pulumi.get(__response__, 'entity_tag'),
        histories=pulumi.get(__response__, 'histories'),
        iam_id=pulumi.get(__response__, 'iam_id'),
        id=pulumi.get(__response__, 'id'),
        ims_account_id=pulumi.get(__response__, 'ims_account_id'),
        ims_user_id=pulumi.get(__response__, 'ims_user_id'),
        modified_at=pulumi.get(__response__, 'modified_at'),
        name=pulumi.get(__response__, 'name'),
        profile_id=pulumi.get(__response__, 'profile_id'),
        template_id=pulumi.get(__response__, 'template_id')))
