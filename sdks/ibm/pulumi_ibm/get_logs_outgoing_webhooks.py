# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLogsOutgoingWebhooksResult',
    'AwaitableGetLogsOutgoingWebhooksResult',
    'get_logs_outgoing_webhooks',
    'get_logs_outgoing_webhooks_output',
]

@pulumi.output_type
class GetLogsOutgoingWebhooksResult:
    """
    A collection of values returned by getLogsOutgoingWebhooks.
    """
    def __init__(__self__, endpoint_type=None, id=None, instance_id=None, outgoing_webhooks=None, region=None, type=None):
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if outgoing_webhooks and not isinstance(outgoing_webhooks, list):
            raise TypeError("Expected argument 'outgoing_webhooks' to be a list")
        pulumi.set(__self__, "outgoing_webhooks", outgoing_webhooks)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="outgoingWebhooks")
    def outgoing_webhooks(self) -> Sequence['outputs.GetLogsOutgoingWebhooksOutgoingWebhookResult']:
        return pulumi.get(self, "outgoing_webhooks")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")


class AwaitableGetLogsOutgoingWebhooksResult(GetLogsOutgoingWebhooksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogsOutgoingWebhooksResult(
            endpoint_type=self.endpoint_type,
            id=self.id,
            instance_id=self.instance_id,
            outgoing_webhooks=self.outgoing_webhooks,
            region=self.region,
            type=self.type)


def get_logs_outgoing_webhooks(endpoint_type: Optional[_builtins.str] = None,
                               id: Optional[_builtins.str] = None,
                               instance_id: Optional[_builtins.str] = None,
                               region: Optional[_builtins.str] = None,
                               type: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogsOutgoingWebhooksResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getLogsOutgoingWebhooks:getLogsOutgoingWebhooks', __args__, opts=opts, typ=GetLogsOutgoingWebhooksResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLogsOutgoingWebhooksResult(
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        outgoing_webhooks=pulumi.get(__ret__, 'outgoing_webhooks'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_logs_outgoing_webhooks_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogsOutgoingWebhooksResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getLogsOutgoingWebhooks:getLogsOutgoingWebhooks', __args__, opts=opts, typ=GetLogsOutgoingWebhooksResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLogsOutgoingWebhooksResult(
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        outgoing_webhooks=pulumi.get(__response__, 'outgoing_webhooks'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))
