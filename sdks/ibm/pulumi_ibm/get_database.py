# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDatabaseResult',
    'AwaitableGetDatabaseResult',
    'get_database',
    'get_database_output',
]

@pulumi.output_type
class GetDatabaseResult:
    """
    A collection of values returned by getDatabase.
    """
    def __init__(__self__, adminpassword=None, adminuser=None, allowlists=None, auto_scalings=None, configuration_schema=None, groups=None, guid=None, id=None, location=None, name=None, plan=None, platform_options=None, resource_controller_url=None, resource_crn=None, resource_group_id=None, resource_group_name=None, resource_name=None, resource_status=None, service=None, status=None, tags=None, users=None, version=None):
        if adminpassword and not isinstance(adminpassword, str):
            raise TypeError("Expected argument 'adminpassword' to be a str")
        pulumi.set(__self__, "adminpassword", adminpassword)
        if adminuser and not isinstance(adminuser, str):
            raise TypeError("Expected argument 'adminuser' to be a str")
        pulumi.set(__self__, "adminuser", adminuser)
        if allowlists and not isinstance(allowlists, list):
            raise TypeError("Expected argument 'allowlists' to be a list")
        pulumi.set(__self__, "allowlists", allowlists)
        if auto_scalings and not isinstance(auto_scalings, list):
            raise TypeError("Expected argument 'auto_scalings' to be a list")
        pulumi.set(__self__, "auto_scalings", auto_scalings)
        if configuration_schema and not isinstance(configuration_schema, str):
            raise TypeError("Expected argument 'configuration_schema' to be a str")
        pulumi.set(__self__, "configuration_schema", configuration_schema)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if guid and not isinstance(guid, str):
            raise TypeError("Expected argument 'guid' to be a str")
        pulumi.set(__self__, "guid", guid)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plan and not isinstance(plan, str):
            raise TypeError("Expected argument 'plan' to be a str")
        pulumi.set(__self__, "plan", plan)
        if platform_options and not isinstance(platform_options, list):
            raise TypeError("Expected argument 'platform_options' to be a list")
        pulumi.set(__self__, "platform_options", platform_options)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn and not isinstance(resource_crn, str):
            raise TypeError("Expected argument 'resource_crn' to be a str")
        pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if resource_status and not isinstance(resource_status, str):
            raise TypeError("Expected argument 'resource_status' to be a str")
        pulumi.set(__self__, "resource_status", resource_status)
        if service and not isinstance(service, str):
            raise TypeError("Expected argument 'service' to be a str")
        pulumi.set(__self__, "service", service)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def adminpassword(self) -> _builtins.str:
        return pulumi.get(self, "adminpassword")

    @_builtins.property
    @pulumi.getter
    def adminuser(self) -> _builtins.str:
        return pulumi.get(self, "adminuser")

    @_builtins.property
    @pulumi.getter
    def allowlists(self) -> Sequence['outputs.GetDatabaseAllowlistResult']:
        return pulumi.get(self, "allowlists")

    @_builtins.property
    @pulumi.getter(name="autoScalings")
    def auto_scalings(self) -> Sequence['outputs.GetDatabaseAutoScalingResult']:
        return pulumi.get(self, "auto_scalings")

    @_builtins.property
    @pulumi.getter(name="configurationSchema")
    def configuration_schema(self) -> _builtins.str:
        return pulumi.get(self, "configuration_schema")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetDatabaseGroupResult']:
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> _builtins.str:
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def plan(self) -> _builtins.str:
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter(name="platformOptions")
    def platform_options(self) -> Sequence['outputs.GetDatabasePlatformOptionResult']:
        return pulumi.get(self, "platform_options")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> _builtins.str:
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> _builtins.str:
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetDatabaseUserResult']:
        return pulumi.get(self, "users")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetDatabaseResult(GetDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseResult(
            adminpassword=self.adminpassword,
            adminuser=self.adminuser,
            allowlists=self.allowlists,
            auto_scalings=self.auto_scalings,
            configuration_schema=self.configuration_schema,
            groups=self.groups,
            guid=self.guid,
            id=self.id,
            location=self.location,
            name=self.name,
            plan=self.plan,
            platform_options=self.platform_options,
            resource_controller_url=self.resource_controller_url,
            resource_crn=self.resource_crn,
            resource_group_id=self.resource_group_id,
            resource_group_name=self.resource_group_name,
            resource_name=self.resource_name,
            resource_status=self.resource_status,
            service=self.service,
            status=self.status,
            tags=self.tags,
            users=self.users,
            version=self.version)


def get_database(id: Optional[_builtins.str] = None,
                 location: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 resource_group_id: Optional[_builtins.str] = None,
                 service: Optional[_builtins.str] = None,
                 tags: Optional[Sequence[_builtins.str]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    __args__['resourceGroupId'] = resource_group_id
    __args__['service'] = service
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDatabase:getDatabase', __args__, opts=opts, typ=GetDatabaseResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDatabaseResult(
        adminpassword=pulumi.get(__ret__, 'adminpassword'),
        adminuser=pulumi.get(__ret__, 'adminuser'),
        allowlists=pulumi.get(__ret__, 'allowlists'),
        auto_scalings=pulumi.get(__ret__, 'auto_scalings'),
        configuration_schema=pulumi.get(__ret__, 'configuration_schema'),
        groups=pulumi.get(__ret__, 'groups'),
        guid=pulumi.get(__ret__, 'guid'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        plan=pulumi.get(__ret__, 'plan'),
        platform_options=pulumi.get(__ret__, 'platform_options'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        resource_crn=pulumi.get(__ret__, 'resource_crn'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        resource_status=pulumi.get(__ret__, 'resource_status'),
        service=pulumi.get(__ret__, 'service'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        users=pulumi.get(__ret__, 'users'),
        version=pulumi.get(__ret__, 'version'))
def get_database_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        location: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        name: Optional[pulumi.Input[_builtins.str]] = None,
                        resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        service: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        tags: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabaseResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    __args__['resourceGroupId'] = resource_group_id
    __args__['service'] = service
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDatabase:getDatabase', __args__, opts=opts, typ=GetDatabaseResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDatabaseResult(
        adminpassword=pulumi.get(__response__, 'adminpassword'),
        adminuser=pulumi.get(__response__, 'adminuser'),
        allowlists=pulumi.get(__response__, 'allowlists'),
        auto_scalings=pulumi.get(__response__, 'auto_scalings'),
        configuration_schema=pulumi.get(__response__, 'configuration_schema'),
        groups=pulumi.get(__response__, 'groups'),
        guid=pulumi.get(__response__, 'guid'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        plan=pulumi.get(__response__, 'plan'),
        platform_options=pulumi.get(__response__, 'platform_options'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        resource_crn=pulumi.get(__response__, 'resource_crn'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        resource_group_name=pulumi.get(__response__, 'resource_group_name'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        resource_status=pulumi.get(__response__, 'resource_status'),
        service=pulumi.get(__response__, 'service'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        users=pulumi.get(__response__, 'users'),
        version=pulumi.get(__response__, 'version')))
