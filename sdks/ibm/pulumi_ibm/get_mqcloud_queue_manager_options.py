# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMqcloudQueueManagerOptionsResult',
    'AwaitableGetMqcloudQueueManagerOptionsResult',
    'get_mqcloud_queue_manager_options',
    'get_mqcloud_queue_manager_options_output',
]

@pulumi.output_type
class GetMqcloudQueueManagerOptionsResult:
    """
    A collection of values returned by getMqcloudQueueManagerOptions.
    """
    def __init__(__self__, id=None, latest_version=None, locations=None, service_instance_guid=None, sizes=None, versions=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if latest_version and not isinstance(latest_version, str):
            raise TypeError("Expected argument 'latest_version' to be a str")
        pulumi.set(__self__, "latest_version", latest_version)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if service_instance_guid and not isinstance(service_instance_guid, str):
            raise TypeError("Expected argument 'service_instance_guid' to be a str")
        pulumi.set(__self__, "service_instance_guid", service_instance_guid)
        if sizes and not isinstance(sizes, list):
            raise TypeError("Expected argument 'sizes' to be a list")
        pulumi.set(__self__, "sizes", sizes)
        if versions and not isinstance(versions, list):
            raise TypeError("Expected argument 'versions' to be a list")
        pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> _builtins.str:
        return pulumi.get(self, "latest_version")

    @_builtins.property
    @pulumi.getter
    def locations(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "locations")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> _builtins.str:
        return pulumi.get(self, "service_instance_guid")

    @_builtins.property
    @pulumi.getter
    def sizes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "sizes")

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "versions")


class AwaitableGetMqcloudQueueManagerOptionsResult(GetMqcloudQueueManagerOptionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMqcloudQueueManagerOptionsResult(
            id=self.id,
            latest_version=self.latest_version,
            locations=self.locations,
            service_instance_guid=self.service_instance_guid,
            sizes=self.sizes,
            versions=self.versions)


def get_mqcloud_queue_manager_options(id: Optional[_builtins.str] = None,
                                      service_instance_guid: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMqcloudQueueManagerOptionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['serviceInstanceGuid'] = service_instance_guid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getMqcloudQueueManagerOptions:getMqcloudQueueManagerOptions', __args__, opts=opts, typ=GetMqcloudQueueManagerOptionsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetMqcloudQueueManagerOptionsResult(
        id=pulumi.get(__ret__, 'id'),
        latest_version=pulumi.get(__ret__, 'latest_version'),
        locations=pulumi.get(__ret__, 'locations'),
        service_instance_guid=pulumi.get(__ret__, 'service_instance_guid'),
        sizes=pulumi.get(__ret__, 'sizes'),
        versions=pulumi.get(__ret__, 'versions'))
def get_mqcloud_queue_manager_options_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMqcloudQueueManagerOptionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['serviceInstanceGuid'] = service_instance_guid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getMqcloudQueueManagerOptions:getMqcloudQueueManagerOptions', __args__, opts=opts, typ=GetMqcloudQueueManagerOptionsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetMqcloudQueueManagerOptionsResult(
        id=pulumi.get(__response__, 'id'),
        latest_version=pulumi.get(__response__, 'latest_version'),
        locations=pulumi.get(__response__, 'locations'),
        service_instance_guid=pulumi.get(__response__, 'service_instance_guid'),
        sizes=pulumi.get(__response__, 'sizes'),
        versions=pulumi.get(__response__, 'versions')))
