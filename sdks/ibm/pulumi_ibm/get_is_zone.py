# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsZoneResult',
    'AwaitableGetIsZoneResult',
    'get_is_zone',
    'get_is_zone_output',
]

@pulumi.output_type
class GetIsZoneResult:
    """
    A collection of values returned by getIsZone.
    """
    def __init__(__self__, data_center=None, id=None, name=None, region=None, status=None, universal_name=None):
        if data_center and not isinstance(data_center, str):
            raise TypeError("Expected argument 'data_center' to be a str")
        pulumi.set(__self__, "data_center", data_center)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if universal_name and not isinstance(universal_name, str):
            raise TypeError("Expected argument 'universal_name' to be a str")
        pulumi.set(__self__, "universal_name", universal_name)

    @_builtins.property
    @pulumi.getter(name="dataCenter")
    def data_center(self) -> _builtins.str:
        return pulumi.get(self, "data_center")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="universalName")
    def universal_name(self) -> _builtins.str:
        return pulumi.get(self, "universal_name")


class AwaitableGetIsZoneResult(GetIsZoneResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsZoneResult(
            data_center=self.data_center,
            id=self.id,
            name=self.name,
            region=self.region,
            status=self.status,
            universal_name=self.universal_name)


def get_is_zone(id: Optional[_builtins.str] = None,
                name: Optional[_builtins.str] = None,
                region: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsZoneResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsZone:getIsZone', __args__, opts=opts, typ=GetIsZoneResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsZoneResult(
        data_center=pulumi.get(__ret__, 'data_center'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        universal_name=pulumi.get(__ret__, 'universal_name'))
def get_is_zone_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       name: Optional[pulumi.Input[_builtins.str]] = None,
                       region: Optional[pulumi.Input[_builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsZoneResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsZone:getIsZone', __args__, opts=opts, typ=GetIsZoneResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsZoneResult(
        data_center=pulumi.get(__response__, 'data_center'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        universal_name=pulumi.get(__response__, 'universal_name')))
