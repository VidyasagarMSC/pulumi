# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDlGatewayMacsecConfigResult',
    'AwaitableGetDlGatewayMacsecConfigResult',
    'get_dl_gateway_macsec_config',
    'get_dl_gateway_macsec_config_output',
]

@pulumi.output_type
class GetDlGatewayMacsecConfigResult:
    """
    A collection of values returned by getDlGatewayMacsecConfig.
    """
    def __init__(__self__, active=None, cipher_suite=None, confidentiality_offset=None, created_at=None, gateway=None, id=None, key_server_priority=None, sak_rekeys=None, security_policy=None, status=None, status_reasons=None, updated_at=None, window_size=None):
        if active and not isinstance(active, bool):
            raise TypeError("Expected argument 'active' to be a bool")
        pulumi.set(__self__, "active", active)
        if cipher_suite and not isinstance(cipher_suite, str):
            raise TypeError("Expected argument 'cipher_suite' to be a str")
        pulumi.set(__self__, "cipher_suite", cipher_suite)
        if confidentiality_offset and not isinstance(confidentiality_offset, float):
            raise TypeError("Expected argument 'confidentiality_offset' to be a float")
        pulumi.set(__self__, "confidentiality_offset", confidentiality_offset)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_server_priority and not isinstance(key_server_priority, float):
            raise TypeError("Expected argument 'key_server_priority' to be a float")
        pulumi.set(__self__, "key_server_priority", key_server_priority)
        if sak_rekeys and not isinstance(sak_rekeys, list):
            raise TypeError("Expected argument 'sak_rekeys' to be a list")
        pulumi.set(__self__, "sak_rekeys", sak_rekeys)
        if security_policy and not isinstance(security_policy, str):
            raise TypeError("Expected argument 'security_policy' to be a str")
        pulumi.set(__self__, "security_policy", security_policy)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if window_size and not isinstance(window_size, float):
            raise TypeError("Expected argument 'window_size' to be a float")
        pulumi.set(__self__, "window_size", window_size)

    @_builtins.property
    @pulumi.getter
    def active(self) -> _builtins.bool:
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter(name="cipherSuite")
    def cipher_suite(self) -> _builtins.str:
        return pulumi.get(self, "cipher_suite")

    @_builtins.property
    @pulumi.getter(name="confidentialityOffset")
    def confidentiality_offset(self) -> _builtins.float:
        return pulumi.get(self, "confidentiality_offset")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keyServerPriority")
    def key_server_priority(self) -> _builtins.float:
        return pulumi.get(self, "key_server_priority")

    @_builtins.property
    @pulumi.getter(name="sakRekeys")
    def sak_rekeys(self) -> Sequence['outputs.GetDlGatewayMacsecConfigSakRekeyResult']:
        return pulumi.get(self, "sak_rekeys")

    @_builtins.property
    @pulumi.getter(name="securityPolicy")
    def security_policy(self) -> _builtins.str:
        return pulumi.get(self, "security_policy")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Sequence['outputs.GetDlGatewayMacsecConfigStatusReasonResult']:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> _builtins.float:
        return pulumi.get(self, "window_size")


class AwaitableGetDlGatewayMacsecConfigResult(GetDlGatewayMacsecConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDlGatewayMacsecConfigResult(
            active=self.active,
            cipher_suite=self.cipher_suite,
            confidentiality_offset=self.confidentiality_offset,
            created_at=self.created_at,
            gateway=self.gateway,
            id=self.id,
            key_server_priority=self.key_server_priority,
            sak_rekeys=self.sak_rekeys,
            security_policy=self.security_policy,
            status=self.status,
            status_reasons=self.status_reasons,
            updated_at=self.updated_at,
            window_size=self.window_size)


def get_dl_gateway_macsec_config(gateway: Optional[_builtins.str] = None,
                                 id: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDlGatewayMacsecConfigResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['gateway'] = gateway
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDlGatewayMacsecConfig:getDlGatewayMacsecConfig', __args__, opts=opts, typ=GetDlGatewayMacsecConfigResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDlGatewayMacsecConfigResult(
        active=pulumi.get(__ret__, 'active'),
        cipher_suite=pulumi.get(__ret__, 'cipher_suite'),
        confidentiality_offset=pulumi.get(__ret__, 'confidentiality_offset'),
        created_at=pulumi.get(__ret__, 'created_at'),
        gateway=pulumi.get(__ret__, 'gateway'),
        id=pulumi.get(__ret__, 'id'),
        key_server_priority=pulumi.get(__ret__, 'key_server_priority'),
        sak_rekeys=pulumi.get(__ret__, 'sak_rekeys'),
        security_policy=pulumi.get(__ret__, 'security_policy'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        window_size=pulumi.get(__ret__, 'window_size'))
def get_dl_gateway_macsec_config_output(gateway: Optional[pulumi.Input[_builtins.str]] = None,
                                        id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDlGatewayMacsecConfigResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['gateway'] = gateway
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDlGatewayMacsecConfig:getDlGatewayMacsecConfig', __args__, opts=opts, typ=GetDlGatewayMacsecConfigResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDlGatewayMacsecConfigResult(
        active=pulumi.get(__response__, 'active'),
        cipher_suite=pulumi.get(__response__, 'cipher_suite'),
        confidentiality_offset=pulumi.get(__response__, 'confidentiality_offset'),
        created_at=pulumi.get(__response__, 'created_at'),
        gateway=pulumi.get(__response__, 'gateway'),
        id=pulumi.get(__response__, 'id'),
        key_server_priority=pulumi.get(__response__, 'key_server_priority'),
        sak_rekeys=pulumi.get(__response__, 'sak_rekeys'),
        security_policy=pulumi.get(__response__, 'security_policy'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        window_size=pulumi.get(__response__, 'window_size')))
