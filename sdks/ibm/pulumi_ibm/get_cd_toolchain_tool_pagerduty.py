# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCdToolchainToolPagerdutyResult',
    'AwaitableGetCdToolchainToolPagerdutyResult',
    'get_cd_toolchain_tool_pagerduty',
    'get_cd_toolchain_tool_pagerduty_output',
]

@pulumi.output_type
class GetCdToolchainToolPagerdutyResult:
    """
    A collection of values returned by getCdToolchainToolPagerduty.
    """
    def __init__(__self__, crn=None, href=None, id=None, name=None, parameters=None, referents=None, resource_group_id=None, state=None, tool_id=None, toolchain_crn=None, toolchain_id=None, updated_at=None):
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parameters and not isinstance(parameters, list):
            raise TypeError("Expected argument 'parameters' to be a list")
        pulumi.set(__self__, "parameters", parameters)
        if referents and not isinstance(referents, list):
            raise TypeError("Expected argument 'referents' to be a list")
        pulumi.set(__self__, "referents", referents)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tool_id and not isinstance(tool_id, str):
            raise TypeError("Expected argument 'tool_id' to be a str")
        pulumi.set(__self__, "tool_id", tool_id)
        if toolchain_crn and not isinstance(toolchain_crn, str):
            raise TypeError("Expected argument 'toolchain_crn' to be a str")
        pulumi.set(__self__, "toolchain_crn", toolchain_crn)
        if toolchain_id and not isinstance(toolchain_id, str):
            raise TypeError("Expected argument 'toolchain_id' to be a str")
        pulumi.set(__self__, "toolchain_id", toolchain_id)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetCdToolchainToolPagerdutyParameterResult']:
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def referents(self) -> Sequence['outputs.GetCdToolchainToolPagerdutyReferentResult']:
        return pulumi.get(self, "referents")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="toolId")
    def tool_id(self) -> _builtins.str:
        return pulumi.get(self, "tool_id")

    @_builtins.property
    @pulumi.getter(name="toolchainCrn")
    def toolchain_crn(self) -> _builtins.str:
        return pulumi.get(self, "toolchain_crn")

    @_builtins.property
    @pulumi.getter(name="toolchainId")
    def toolchain_id(self) -> _builtins.str:
        return pulumi.get(self, "toolchain_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetCdToolchainToolPagerdutyResult(GetCdToolchainToolPagerdutyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCdToolchainToolPagerdutyResult(
            crn=self.crn,
            href=self.href,
            id=self.id,
            name=self.name,
            parameters=self.parameters,
            referents=self.referents,
            resource_group_id=self.resource_group_id,
            state=self.state,
            tool_id=self.tool_id,
            toolchain_crn=self.toolchain_crn,
            toolchain_id=self.toolchain_id,
            updated_at=self.updated_at)


def get_cd_toolchain_tool_pagerduty(id: Optional[_builtins.str] = None,
                                    tool_id: Optional[_builtins.str] = None,
                                    toolchain_id: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCdToolchainToolPagerdutyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['toolId'] = tool_id
    __args__['toolchainId'] = toolchain_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCdToolchainToolPagerduty:getCdToolchainToolPagerduty', __args__, opts=opts, typ=GetCdToolchainToolPagerdutyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCdToolchainToolPagerdutyResult(
        crn=pulumi.get(__ret__, 'crn'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        parameters=pulumi.get(__ret__, 'parameters'),
        referents=pulumi.get(__ret__, 'referents'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        state=pulumi.get(__ret__, 'state'),
        tool_id=pulumi.get(__ret__, 'tool_id'),
        toolchain_crn=pulumi.get(__ret__, 'toolchain_crn'),
        toolchain_id=pulumi.get(__ret__, 'toolchain_id'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_cd_toolchain_tool_pagerduty_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           tool_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           toolchain_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCdToolchainToolPagerdutyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['toolId'] = tool_id
    __args__['toolchainId'] = toolchain_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCdToolchainToolPagerduty:getCdToolchainToolPagerduty', __args__, opts=opts, typ=GetCdToolchainToolPagerdutyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCdToolchainToolPagerdutyResult(
        crn=pulumi.get(__response__, 'crn'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        parameters=pulumi.get(__response__, 'parameters'),
        referents=pulumi.get(__response__, 'referents'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        state=pulumi.get(__response__, 'state'),
        tool_id=pulumi.get(__response__, 'tool_id'),
        toolchain_crn=pulumi.get(__response__, 'toolchain_crn'),
        toolchain_id=pulumi.get(__response__, 'toolchain_id'),
        updated_at=pulumi.get(__response__, 'updated_at')))
