# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTgRouteReportResult',
    'AwaitableGetTgRouteReportResult',
    'get_tg_route_report',
    'get_tg_route_report_output',
]

@pulumi.output_type
class GetTgRouteReportResult:
    """
    A collection of values returned by getTgRouteReport.
    """
    def __init__(__self__, connections=None, created_at=None, gateway=None, id=None, overlapping_routes=None, route_report=None, status=None, updated_at=None):
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        pulumi.set(__self__, "connections", connections)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if overlapping_routes and not isinstance(overlapping_routes, list):
            raise TypeError("Expected argument 'overlapping_routes' to be a list")
        pulumi.set(__self__, "overlapping_routes", overlapping_routes)
        if route_report and not isinstance(route_report, str):
            raise TypeError("Expected argument 'route_report' to be a str")
        pulumi.set(__self__, "route_report", route_report)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetTgRouteReportConnectionResult']:
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="overlappingRoutes")
    def overlapping_routes(self) -> Sequence['outputs.GetTgRouteReportOverlappingRouteResult']:
        return pulumi.get(self, "overlapping_routes")

    @_builtins.property
    @pulumi.getter(name="routeReport")
    def route_report(self) -> _builtins.str:
        return pulumi.get(self, "route_report")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetTgRouteReportResult(GetTgRouteReportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTgRouteReportResult(
            connections=self.connections,
            created_at=self.created_at,
            gateway=self.gateway,
            id=self.id,
            overlapping_routes=self.overlapping_routes,
            route_report=self.route_report,
            status=self.status,
            updated_at=self.updated_at)


def get_tg_route_report(gateway: Optional[_builtins.str] = None,
                        id: Optional[_builtins.str] = None,
                        route_report: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTgRouteReportResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['gateway'] = gateway
    __args__['id'] = id
    __args__['routeReport'] = route_report
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getTgRouteReport:getTgRouteReport', __args__, opts=opts, typ=GetTgRouteReportResult, package_ref=_utilities.get_package()).value

    return AwaitableGetTgRouteReportResult(
        connections=pulumi.get(__ret__, 'connections'),
        created_at=pulumi.get(__ret__, 'created_at'),
        gateway=pulumi.get(__ret__, 'gateway'),
        id=pulumi.get(__ret__, 'id'),
        overlapping_routes=pulumi.get(__ret__, 'overlapping_routes'),
        route_report=pulumi.get(__ret__, 'route_report'),
        status=pulumi.get(__ret__, 'status'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_tg_route_report_output(gateway: Optional[pulumi.Input[_builtins.str]] = None,
                               id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               route_report: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTgRouteReportResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['gateway'] = gateway
    __args__['id'] = id
    __args__['routeReport'] = route_report
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getTgRouteReport:getTgRouteReport', __args__, opts=opts, typ=GetTgRouteReportResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetTgRouteReportResult(
        connections=pulumi.get(__response__, 'connections'),
        created_at=pulumi.get(__response__, 'created_at'),
        gateway=pulumi.get(__response__, 'gateway'),
        id=pulumi.get(__response__, 'id'),
        overlapping_routes=pulumi.get(__response__, 'overlapping_routes'),
        route_report=pulumi.get(__response__, 'route_report'),
        status=pulumi.get(__response__, 'status'),
        updated_at=pulumi.get(__response__, 'updated_at')))
