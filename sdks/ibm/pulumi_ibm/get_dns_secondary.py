# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDnsSecondaryResult',
    'AwaitableGetDnsSecondaryResult',
    'get_dns_secondary',
    'get_dns_secondary_output',
]

@pulumi.output_type
class GetDnsSecondaryResult:
    """
    A collection of values returned by getDnsSecondary.
    """
    def __init__(__self__, id=None, master_ip_address=None, status_id=None, status_text=None, transfer_frequency=None, zone_name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if master_ip_address and not isinstance(master_ip_address, str):
            raise TypeError("Expected argument 'master_ip_address' to be a str")
        pulumi.set(__self__, "master_ip_address", master_ip_address)
        if status_id and not isinstance(status_id, float):
            raise TypeError("Expected argument 'status_id' to be a float")
        pulumi.set(__self__, "status_id", status_id)
        if status_text and not isinstance(status_text, str):
            raise TypeError("Expected argument 'status_text' to be a str")
        pulumi.set(__self__, "status_text", status_text)
        if transfer_frequency and not isinstance(transfer_frequency, float):
            raise TypeError("Expected argument 'transfer_frequency' to be a float")
        pulumi.set(__self__, "transfer_frequency", transfer_frequency)
        if zone_name and not isinstance(zone_name, str):
            raise TypeError("Expected argument 'zone_name' to be a str")
        pulumi.set(__self__, "zone_name", zone_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="masterIpAddress")
    def master_ip_address(self) -> _builtins.str:
        return pulumi.get(self, "master_ip_address")

    @_builtins.property
    @pulumi.getter(name="statusId")
    def status_id(self) -> _builtins.float:
        return pulumi.get(self, "status_id")

    @_builtins.property
    @pulumi.getter(name="statusText")
    def status_text(self) -> _builtins.str:
        return pulumi.get(self, "status_text")

    @_builtins.property
    @pulumi.getter(name="transferFrequency")
    def transfer_frequency(self) -> _builtins.float:
        return pulumi.get(self, "transfer_frequency")

    @_builtins.property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> _builtins.str:
        return pulumi.get(self, "zone_name")


class AwaitableGetDnsSecondaryResult(GetDnsSecondaryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDnsSecondaryResult(
            id=self.id,
            master_ip_address=self.master_ip_address,
            status_id=self.status_id,
            status_text=self.status_text,
            transfer_frequency=self.transfer_frequency,
            zone_name=self.zone_name)


def get_dns_secondary(id: Optional[_builtins.str] = None,
                      zone_name: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDnsSecondaryResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['zoneName'] = zone_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDnsSecondary:getDnsSecondary', __args__, opts=opts, typ=GetDnsSecondaryResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDnsSecondaryResult(
        id=pulumi.get(__ret__, 'id'),
        master_ip_address=pulumi.get(__ret__, 'master_ip_address'),
        status_id=pulumi.get(__ret__, 'status_id'),
        status_text=pulumi.get(__ret__, 'status_text'),
        transfer_frequency=pulumi.get(__ret__, 'transfer_frequency'),
        zone_name=pulumi.get(__ret__, 'zone_name'))
def get_dns_secondary_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             zone_name: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDnsSecondaryResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['zoneName'] = zone_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDnsSecondary:getDnsSecondary', __args__, opts=opts, typ=GetDnsSecondaryResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDnsSecondaryResult(
        id=pulumi.get(__response__, 'id'),
        master_ip_address=pulumi.get(__response__, 'master_ip_address'),
        status_id=pulumi.get(__response__, 'status_id'),
        status_text=pulumi.get(__response__, 'status_text'),
        transfer_frequency=pulumi.get(__response__, 'transfer_frequency'),
        zone_name=pulumi.get(__response__, 'zone_name')))
