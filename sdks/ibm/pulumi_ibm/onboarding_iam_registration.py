# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OnboardingIamRegistrationArgs', 'OnboardingIamRegistration']

@pulumi.input_type
class OnboardingIamRegistrationArgs:
    def __init__(__self__, *,
                 product_id: pulumi.Input[_builtins.str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationActionArgs']]]] = None,
                 additional_policy_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 display_name: Optional[pulumi.Input['OnboardingIamRegistrationDisplayNameArgs']] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 env: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_iam_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resource_hierarchy_attribute: Optional[pulumi.Input['OnboardingIamRegistrationResourceHierarchyAttributeArgs']] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 supported_anonymous_accesses: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAnonymousAccessArgs']]]] = None,
                 supported_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAttributeArgs']]]] = None,
                 supported_authorization_subjects: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs']]]] = None,
                 supported_network: Optional[pulumi.Input['OnboardingIamRegistrationSupportedNetworkArgs']] = None,
                 supported_roles: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedRoleArgs']]]] = None):
        """
        The set of arguments for constructing a OnboardingIamRegistration resource.
        :param pulumi.Input[_builtins.str] product_id: The unique ID of the product.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationActionArgs']]] actions: The product access management action.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] additional_policy_scopes: List of additional policy scopes.
        :param pulumi.Input['OnboardingIamRegistrationDisplayNameArgs'] display_name: The display name of the object.
        :param pulumi.Input[_builtins.bool] enabled: Whether the service is enabled or disabled for IAM.
        :param pulumi.Input[_builtins.str] env: The environment to fetch this object from.
        :param pulumi.Input[_builtins.str] name: The IAM registration name, which must be the programmatic name of the product.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] parent_ids: The list of parent IDs for product access management.
        :param pulumi.Input['OnboardingIamRegistrationResourceHierarchyAttributeArgs'] resource_hierarchy_attribute: The resource hierarchy key-value pair for composite services.
        :param pulumi.Input[_builtins.str] service_type: The type of the service.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAnonymousAccessArgs']]] supported_anonymous_accesses: The list of supported anonymous accesses.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAttributeArgs']]] supported_attributes: The list of supported attributes.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs']]] supported_authorization_subjects: The list of supported authorization subjects.
        :param pulumi.Input['OnboardingIamRegistrationSupportedNetworkArgs'] supported_network: The registration of set of endpoint types that are supported by your service in the `networkType` environment attribute.
               This constrains the context-based restriction rules specific to the service such that they describe access restrictions
               on only this set of endpoints.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedRoleArgs']]] supported_roles: The list of roles that you can use to assign access.
        """
        pulumi.set(__self__, "product_id", product_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if additional_policy_scopes is not None:
            pulumi.set(__self__, "additional_policy_scopes", additional_policy_scopes)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if onboarding_iam_registration_id is not None:
            pulumi.set(__self__, "onboarding_iam_registration_id", onboarding_iam_registration_id)
        if parent_ids is not None:
            pulumi.set(__self__, "parent_ids", parent_ids)
        if resource_hierarchy_attribute is not None:
            pulumi.set(__self__, "resource_hierarchy_attribute", resource_hierarchy_attribute)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if supported_anonymous_accesses is not None:
            pulumi.set(__self__, "supported_anonymous_accesses", supported_anonymous_accesses)
        if supported_attributes is not None:
            pulumi.set(__self__, "supported_attributes", supported_attributes)
        if supported_authorization_subjects is not None:
            pulumi.set(__self__, "supported_authorization_subjects", supported_authorization_subjects)
        if supported_network is not None:
            pulumi.set(__self__, "supported_network", supported_network)
        if supported_roles is not None:
            pulumi.set(__self__, "supported_roles", supported_roles)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique ID of the product.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationActionArgs']]]]:
        """
        The product access management action.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter(name="additionalPolicyScopes")
    def additional_policy_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of additional policy scopes.
        """
        return pulumi.get(self, "additional_policy_scopes")

    @additional_policy_scopes.setter
    def additional_policy_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "additional_policy_scopes", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input['OnboardingIamRegistrationDisplayNameArgs']]:
        """
        The display name of the object.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input['OnboardingIamRegistrationDisplayNameArgs']]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the service is enabled or disabled for IAM.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The environment to fetch this object from.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "env", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IAM registration name, which must be the programmatic name of the product.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="onboardingIamRegistrationId")
    def onboarding_iam_registration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "onboarding_iam_registration_id")

    @onboarding_iam_registration_id.setter
    def onboarding_iam_registration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "onboarding_iam_registration_id", value)

    @_builtins.property
    @pulumi.getter(name="parentIds")
    def parent_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of parent IDs for product access management.
        """
        return pulumi.get(self, "parent_ids")

    @parent_ids.setter
    def parent_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parent_ids", value)

    @_builtins.property
    @pulumi.getter(name="resourceHierarchyAttribute")
    def resource_hierarchy_attribute(self) -> Optional[pulumi.Input['OnboardingIamRegistrationResourceHierarchyAttributeArgs']]:
        """
        The resource hierarchy key-value pair for composite services.
        """
        return pulumi.get(self, "resource_hierarchy_attribute")

    @resource_hierarchy_attribute.setter
    def resource_hierarchy_attribute(self, value: Optional[pulumi.Input['OnboardingIamRegistrationResourceHierarchyAttributeArgs']]):
        pulumi.set(self, "resource_hierarchy_attribute", value)

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the service.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_type", value)

    @_builtins.property
    @pulumi.getter(name="supportedAnonymousAccesses")
    def supported_anonymous_accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAnonymousAccessArgs']]]]:
        """
        The list of supported anonymous accesses.
        """
        return pulumi.get(self, "supported_anonymous_accesses")

    @supported_anonymous_accesses.setter
    def supported_anonymous_accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAnonymousAccessArgs']]]]):
        pulumi.set(self, "supported_anonymous_accesses", value)

    @_builtins.property
    @pulumi.getter(name="supportedAttributes")
    def supported_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAttributeArgs']]]]:
        """
        The list of supported attributes.
        """
        return pulumi.get(self, "supported_attributes")

    @supported_attributes.setter
    def supported_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAttributeArgs']]]]):
        pulumi.set(self, "supported_attributes", value)

    @_builtins.property
    @pulumi.getter(name="supportedAuthorizationSubjects")
    def supported_authorization_subjects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs']]]]:
        """
        The list of supported authorization subjects.
        """
        return pulumi.get(self, "supported_authorization_subjects")

    @supported_authorization_subjects.setter
    def supported_authorization_subjects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs']]]]):
        pulumi.set(self, "supported_authorization_subjects", value)

    @_builtins.property
    @pulumi.getter(name="supportedNetwork")
    def supported_network(self) -> Optional[pulumi.Input['OnboardingIamRegistrationSupportedNetworkArgs']]:
        """
        The registration of set of endpoint types that are supported by your service in the `networkType` environment attribute.
        This constrains the context-based restriction rules specific to the service such that they describe access restrictions
        on only this set of endpoints.
        """
        return pulumi.get(self, "supported_network")

    @supported_network.setter
    def supported_network(self, value: Optional[pulumi.Input['OnboardingIamRegistrationSupportedNetworkArgs']]):
        pulumi.set(self, "supported_network", value)

    @_builtins.property
    @pulumi.getter(name="supportedRoles")
    def supported_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedRoleArgs']]]]:
        """
        The list of roles that you can use to assign access.
        """
        return pulumi.get(self, "supported_roles")

    @supported_roles.setter
    def supported_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedRoleArgs']]]]):
        pulumi.set(self, "supported_roles", value)


@pulumi.input_type
class _OnboardingIamRegistrationState:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationActionArgs']]]] = None,
                 additional_policy_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 display_name: Optional[pulumi.Input['OnboardingIamRegistrationDisplayNameArgs']] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 env: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_iam_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_hierarchy_attribute: Optional[pulumi.Input['OnboardingIamRegistrationResourceHierarchyAttributeArgs']] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 supported_anonymous_accesses: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAnonymousAccessArgs']]]] = None,
                 supported_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAttributeArgs']]]] = None,
                 supported_authorization_subjects: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs']]]] = None,
                 supported_network: Optional[pulumi.Input['OnboardingIamRegistrationSupportedNetworkArgs']] = None,
                 supported_roles: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedRoleArgs']]]] = None):
        """
        Input properties used for looking up and filtering OnboardingIamRegistration resources.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationActionArgs']]] actions: The product access management action.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] additional_policy_scopes: List of additional policy scopes.
        :param pulumi.Input['OnboardingIamRegistrationDisplayNameArgs'] display_name: The display name of the object.
        :param pulumi.Input[_builtins.bool] enabled: Whether the service is enabled or disabled for IAM.
        :param pulumi.Input[_builtins.str] env: The environment to fetch this object from.
        :param pulumi.Input[_builtins.str] name: The IAM registration name, which must be the programmatic name of the product.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] parent_ids: The list of parent IDs for product access management.
        :param pulumi.Input[_builtins.str] product_id: The unique ID of the product.
        :param pulumi.Input['OnboardingIamRegistrationResourceHierarchyAttributeArgs'] resource_hierarchy_attribute: The resource hierarchy key-value pair for composite services.
        :param pulumi.Input[_builtins.str] service_type: The type of the service.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAnonymousAccessArgs']]] supported_anonymous_accesses: The list of supported anonymous accesses.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAttributeArgs']]] supported_attributes: The list of supported attributes.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs']]] supported_authorization_subjects: The list of supported authorization subjects.
        :param pulumi.Input['OnboardingIamRegistrationSupportedNetworkArgs'] supported_network: The registration of set of endpoint types that are supported by your service in the `networkType` environment attribute.
               This constrains the context-based restriction rules specific to the service such that they describe access restrictions
               on only this set of endpoints.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedRoleArgs']]] supported_roles: The list of roles that you can use to assign access.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if additional_policy_scopes is not None:
            pulumi.set(__self__, "additional_policy_scopes", additional_policy_scopes)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if onboarding_iam_registration_id is not None:
            pulumi.set(__self__, "onboarding_iam_registration_id", onboarding_iam_registration_id)
        if parent_ids is not None:
            pulumi.set(__self__, "parent_ids", parent_ids)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if resource_hierarchy_attribute is not None:
            pulumi.set(__self__, "resource_hierarchy_attribute", resource_hierarchy_attribute)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if supported_anonymous_accesses is not None:
            pulumi.set(__self__, "supported_anonymous_accesses", supported_anonymous_accesses)
        if supported_attributes is not None:
            pulumi.set(__self__, "supported_attributes", supported_attributes)
        if supported_authorization_subjects is not None:
            pulumi.set(__self__, "supported_authorization_subjects", supported_authorization_subjects)
        if supported_network is not None:
            pulumi.set(__self__, "supported_network", supported_network)
        if supported_roles is not None:
            pulumi.set(__self__, "supported_roles", supported_roles)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationActionArgs']]]]:
        """
        The product access management action.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter(name="additionalPolicyScopes")
    def additional_policy_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of additional policy scopes.
        """
        return pulumi.get(self, "additional_policy_scopes")

    @additional_policy_scopes.setter
    def additional_policy_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "additional_policy_scopes", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input['OnboardingIamRegistrationDisplayNameArgs']]:
        """
        The display name of the object.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input['OnboardingIamRegistrationDisplayNameArgs']]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the service is enabled or disabled for IAM.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The environment to fetch this object from.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "env", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IAM registration name, which must be the programmatic name of the product.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="onboardingIamRegistrationId")
    def onboarding_iam_registration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "onboarding_iam_registration_id")

    @onboarding_iam_registration_id.setter
    def onboarding_iam_registration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "onboarding_iam_registration_id", value)

    @_builtins.property
    @pulumi.getter(name="parentIds")
    def parent_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of parent IDs for product access management.
        """
        return pulumi.get(self, "parent_ids")

    @parent_ids.setter
    def parent_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parent_ids", value)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique ID of the product.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceHierarchyAttribute")
    def resource_hierarchy_attribute(self) -> Optional[pulumi.Input['OnboardingIamRegistrationResourceHierarchyAttributeArgs']]:
        """
        The resource hierarchy key-value pair for composite services.
        """
        return pulumi.get(self, "resource_hierarchy_attribute")

    @resource_hierarchy_attribute.setter
    def resource_hierarchy_attribute(self, value: Optional[pulumi.Input['OnboardingIamRegistrationResourceHierarchyAttributeArgs']]):
        pulumi.set(self, "resource_hierarchy_attribute", value)

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the service.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_type", value)

    @_builtins.property
    @pulumi.getter(name="supportedAnonymousAccesses")
    def supported_anonymous_accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAnonymousAccessArgs']]]]:
        """
        The list of supported anonymous accesses.
        """
        return pulumi.get(self, "supported_anonymous_accesses")

    @supported_anonymous_accesses.setter
    def supported_anonymous_accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAnonymousAccessArgs']]]]):
        pulumi.set(self, "supported_anonymous_accesses", value)

    @_builtins.property
    @pulumi.getter(name="supportedAttributes")
    def supported_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAttributeArgs']]]]:
        """
        The list of supported attributes.
        """
        return pulumi.get(self, "supported_attributes")

    @supported_attributes.setter
    def supported_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAttributeArgs']]]]):
        pulumi.set(self, "supported_attributes", value)

    @_builtins.property
    @pulumi.getter(name="supportedAuthorizationSubjects")
    def supported_authorization_subjects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs']]]]:
        """
        The list of supported authorization subjects.
        """
        return pulumi.get(self, "supported_authorization_subjects")

    @supported_authorization_subjects.setter
    def supported_authorization_subjects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs']]]]):
        pulumi.set(self, "supported_authorization_subjects", value)

    @_builtins.property
    @pulumi.getter(name="supportedNetwork")
    def supported_network(self) -> Optional[pulumi.Input['OnboardingIamRegistrationSupportedNetworkArgs']]:
        """
        The registration of set of endpoint types that are supported by your service in the `networkType` environment attribute.
        This constrains the context-based restriction rules specific to the service such that they describe access restrictions
        on only this set of endpoints.
        """
        return pulumi.get(self, "supported_network")

    @supported_network.setter
    def supported_network(self, value: Optional[pulumi.Input['OnboardingIamRegistrationSupportedNetworkArgs']]):
        pulumi.set(self, "supported_network", value)

    @_builtins.property
    @pulumi.getter(name="supportedRoles")
    def supported_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedRoleArgs']]]]:
        """
        The list of roles that you can use to assign access.
        """
        return pulumi.get(self, "supported_roles")

    @supported_roles.setter
    def supported_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingIamRegistrationSupportedRoleArgs']]]]):
        pulumi.set(self, "supported_roles", value)


@pulumi.type_token("ibm:index/onboardingIamRegistration:OnboardingIamRegistration")
class OnboardingIamRegistration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationActionArgs', 'OnboardingIamRegistrationActionArgsDict']]]]] = None,
                 additional_policy_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 display_name: Optional[pulumi.Input[Union['OnboardingIamRegistrationDisplayNameArgs', 'OnboardingIamRegistrationDisplayNameArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 env: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_iam_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_hierarchy_attribute: Optional[pulumi.Input[Union['OnboardingIamRegistrationResourceHierarchyAttributeArgs', 'OnboardingIamRegistrationResourceHierarchyAttributeArgsDict']]] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 supported_anonymous_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAnonymousAccessArgs', 'OnboardingIamRegistrationSupportedAnonymousAccessArgsDict']]]]] = None,
                 supported_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAttributeArgs', 'OnboardingIamRegistrationSupportedAttributeArgsDict']]]]] = None,
                 supported_authorization_subjects: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs', 'OnboardingIamRegistrationSupportedAuthorizationSubjectArgsDict']]]]] = None,
                 supported_network: Optional[pulumi.Input[Union['OnboardingIamRegistrationSupportedNetworkArgs', 'OnboardingIamRegistrationSupportedNetworkArgsDict']]] = None,
                 supported_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedRoleArgs', 'OnboardingIamRegistrationSupportedRoleArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a OnboardingIamRegistration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationActionArgs', 'OnboardingIamRegistrationActionArgsDict']]]] actions: The product access management action.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] additional_policy_scopes: List of additional policy scopes.
        :param pulumi.Input[Union['OnboardingIamRegistrationDisplayNameArgs', 'OnboardingIamRegistrationDisplayNameArgsDict']] display_name: The display name of the object.
        :param pulumi.Input[_builtins.bool] enabled: Whether the service is enabled or disabled for IAM.
        :param pulumi.Input[_builtins.str] env: The environment to fetch this object from.
        :param pulumi.Input[_builtins.str] name: The IAM registration name, which must be the programmatic name of the product.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] parent_ids: The list of parent IDs for product access management.
        :param pulumi.Input[_builtins.str] product_id: The unique ID of the product.
        :param pulumi.Input[Union['OnboardingIamRegistrationResourceHierarchyAttributeArgs', 'OnboardingIamRegistrationResourceHierarchyAttributeArgsDict']] resource_hierarchy_attribute: The resource hierarchy key-value pair for composite services.
        :param pulumi.Input[_builtins.str] service_type: The type of the service.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAnonymousAccessArgs', 'OnboardingIamRegistrationSupportedAnonymousAccessArgsDict']]]] supported_anonymous_accesses: The list of supported anonymous accesses.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAttributeArgs', 'OnboardingIamRegistrationSupportedAttributeArgsDict']]]] supported_attributes: The list of supported attributes.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs', 'OnboardingIamRegistrationSupportedAuthorizationSubjectArgsDict']]]] supported_authorization_subjects: The list of supported authorization subjects.
        :param pulumi.Input[Union['OnboardingIamRegistrationSupportedNetworkArgs', 'OnboardingIamRegistrationSupportedNetworkArgsDict']] supported_network: The registration of set of endpoint types that are supported by your service in the `networkType` environment attribute.
               This constrains the context-based restriction rules specific to the service such that they describe access restrictions
               on only this set of endpoints.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedRoleArgs', 'OnboardingIamRegistrationSupportedRoleArgsDict']]]] supported_roles: The list of roles that you can use to assign access.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OnboardingIamRegistrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OnboardingIamRegistration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OnboardingIamRegistrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OnboardingIamRegistrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationActionArgs', 'OnboardingIamRegistrationActionArgsDict']]]]] = None,
                 additional_policy_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 display_name: Optional[pulumi.Input[Union['OnboardingIamRegistrationDisplayNameArgs', 'OnboardingIamRegistrationDisplayNameArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 env: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_iam_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_hierarchy_attribute: Optional[pulumi.Input[Union['OnboardingIamRegistrationResourceHierarchyAttributeArgs', 'OnboardingIamRegistrationResourceHierarchyAttributeArgsDict']]] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 supported_anonymous_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAnonymousAccessArgs', 'OnboardingIamRegistrationSupportedAnonymousAccessArgsDict']]]]] = None,
                 supported_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAttributeArgs', 'OnboardingIamRegistrationSupportedAttributeArgsDict']]]]] = None,
                 supported_authorization_subjects: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs', 'OnboardingIamRegistrationSupportedAuthorizationSubjectArgsDict']]]]] = None,
                 supported_network: Optional[pulumi.Input[Union['OnboardingIamRegistrationSupportedNetworkArgs', 'OnboardingIamRegistrationSupportedNetworkArgsDict']]] = None,
                 supported_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedRoleArgs', 'OnboardingIamRegistrationSupportedRoleArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OnboardingIamRegistrationArgs.__new__(OnboardingIamRegistrationArgs)

            __props__.__dict__["actions"] = actions
            __props__.__dict__["additional_policy_scopes"] = additional_policy_scopes
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["env"] = env
            __props__.__dict__["name"] = name
            __props__.__dict__["onboarding_iam_registration_id"] = onboarding_iam_registration_id
            __props__.__dict__["parent_ids"] = parent_ids
            if product_id is None and not opts.urn:
                raise TypeError("Missing required property 'product_id'")
            __props__.__dict__["product_id"] = product_id
            __props__.__dict__["resource_hierarchy_attribute"] = resource_hierarchy_attribute
            __props__.__dict__["service_type"] = service_type
            __props__.__dict__["supported_anonymous_accesses"] = supported_anonymous_accesses
            __props__.__dict__["supported_attributes"] = supported_attributes
            __props__.__dict__["supported_authorization_subjects"] = supported_authorization_subjects
            __props__.__dict__["supported_network"] = supported_network
            __props__.__dict__["supported_roles"] = supported_roles
        super(OnboardingIamRegistration, __self__).__init__(
            'ibm:index/onboardingIamRegistration:OnboardingIamRegistration',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            actions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationActionArgs', 'OnboardingIamRegistrationActionArgsDict']]]]] = None,
            additional_policy_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            display_name: Optional[pulumi.Input[Union['OnboardingIamRegistrationDisplayNameArgs', 'OnboardingIamRegistrationDisplayNameArgsDict']]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            env: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            onboarding_iam_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
            parent_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            product_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_hierarchy_attribute: Optional[pulumi.Input[Union['OnboardingIamRegistrationResourceHierarchyAttributeArgs', 'OnboardingIamRegistrationResourceHierarchyAttributeArgsDict']]] = None,
            service_type: Optional[pulumi.Input[_builtins.str]] = None,
            supported_anonymous_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAnonymousAccessArgs', 'OnboardingIamRegistrationSupportedAnonymousAccessArgsDict']]]]] = None,
            supported_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAttributeArgs', 'OnboardingIamRegistrationSupportedAttributeArgsDict']]]]] = None,
            supported_authorization_subjects: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs', 'OnboardingIamRegistrationSupportedAuthorizationSubjectArgsDict']]]]] = None,
            supported_network: Optional[pulumi.Input[Union['OnboardingIamRegistrationSupportedNetworkArgs', 'OnboardingIamRegistrationSupportedNetworkArgsDict']]] = None,
            supported_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedRoleArgs', 'OnboardingIamRegistrationSupportedRoleArgsDict']]]]] = None) -> 'OnboardingIamRegistration':
        """
        Get an existing OnboardingIamRegistration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationActionArgs', 'OnboardingIamRegistrationActionArgsDict']]]] actions: The product access management action.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] additional_policy_scopes: List of additional policy scopes.
        :param pulumi.Input[Union['OnboardingIamRegistrationDisplayNameArgs', 'OnboardingIamRegistrationDisplayNameArgsDict']] display_name: The display name of the object.
        :param pulumi.Input[_builtins.bool] enabled: Whether the service is enabled or disabled for IAM.
        :param pulumi.Input[_builtins.str] env: The environment to fetch this object from.
        :param pulumi.Input[_builtins.str] name: The IAM registration name, which must be the programmatic name of the product.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] parent_ids: The list of parent IDs for product access management.
        :param pulumi.Input[_builtins.str] product_id: The unique ID of the product.
        :param pulumi.Input[Union['OnboardingIamRegistrationResourceHierarchyAttributeArgs', 'OnboardingIamRegistrationResourceHierarchyAttributeArgsDict']] resource_hierarchy_attribute: The resource hierarchy key-value pair for composite services.
        :param pulumi.Input[_builtins.str] service_type: The type of the service.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAnonymousAccessArgs', 'OnboardingIamRegistrationSupportedAnonymousAccessArgsDict']]]] supported_anonymous_accesses: The list of supported anonymous accesses.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAttributeArgs', 'OnboardingIamRegistrationSupportedAttributeArgsDict']]]] supported_attributes: The list of supported attributes.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedAuthorizationSubjectArgs', 'OnboardingIamRegistrationSupportedAuthorizationSubjectArgsDict']]]] supported_authorization_subjects: The list of supported authorization subjects.
        :param pulumi.Input[Union['OnboardingIamRegistrationSupportedNetworkArgs', 'OnboardingIamRegistrationSupportedNetworkArgsDict']] supported_network: The registration of set of endpoint types that are supported by your service in the `networkType` environment attribute.
               This constrains the context-based restriction rules specific to the service such that they describe access restrictions
               on only this set of endpoints.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingIamRegistrationSupportedRoleArgs', 'OnboardingIamRegistrationSupportedRoleArgsDict']]]] supported_roles: The list of roles that you can use to assign access.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OnboardingIamRegistrationState.__new__(_OnboardingIamRegistrationState)

        __props__.__dict__["actions"] = actions
        __props__.__dict__["additional_policy_scopes"] = additional_policy_scopes
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["env"] = env
        __props__.__dict__["name"] = name
        __props__.__dict__["onboarding_iam_registration_id"] = onboarding_iam_registration_id
        __props__.__dict__["parent_ids"] = parent_ids
        __props__.__dict__["product_id"] = product_id
        __props__.__dict__["resource_hierarchy_attribute"] = resource_hierarchy_attribute
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["supported_anonymous_accesses"] = supported_anonymous_accesses
        __props__.__dict__["supported_attributes"] = supported_attributes
        __props__.__dict__["supported_authorization_subjects"] = supported_authorization_subjects
        __props__.__dict__["supported_network"] = supported_network
        __props__.__dict__["supported_roles"] = supported_roles
        return OnboardingIamRegistration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> pulumi.Output[Optional[Sequence['outputs.OnboardingIamRegistrationAction']]]:
        """
        The product access management action.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="additionalPolicyScopes")
    def additional_policy_scopes(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of additional policy scopes.
        """
        return pulumi.get(self, "additional_policy_scopes")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional['outputs.OnboardingIamRegistrationDisplayName']]:
        """
        The display name of the object.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the service is enabled or disabled for IAM.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def env(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The environment to fetch this object from.
        """
        return pulumi.get(self, "env")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The IAM registration name, which must be the programmatic name of the product.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="onboardingIamRegistrationId")
    def onboarding_iam_registration_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "onboarding_iam_registration_id")

    @_builtins.property
    @pulumi.getter(name="parentIds")
    def parent_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The list of parent IDs for product access management.
        """
        return pulumi.get(self, "parent_ids")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique ID of the product.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter(name="resourceHierarchyAttribute")
    def resource_hierarchy_attribute(self) -> pulumi.Output[Optional['outputs.OnboardingIamRegistrationResourceHierarchyAttribute']]:
        """
        The resource hierarchy key-value pair for composite services.
        """
        return pulumi.get(self, "resource_hierarchy_attribute")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The type of the service.
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="supportedAnonymousAccesses")
    def supported_anonymous_accesses(self) -> pulumi.Output[Optional[Sequence['outputs.OnboardingIamRegistrationSupportedAnonymousAccess']]]:
        """
        The list of supported anonymous accesses.
        """
        return pulumi.get(self, "supported_anonymous_accesses")

    @_builtins.property
    @pulumi.getter(name="supportedAttributes")
    def supported_attributes(self) -> pulumi.Output[Optional[Sequence['outputs.OnboardingIamRegistrationSupportedAttribute']]]:
        """
        The list of supported attributes.
        """
        return pulumi.get(self, "supported_attributes")

    @_builtins.property
    @pulumi.getter(name="supportedAuthorizationSubjects")
    def supported_authorization_subjects(self) -> pulumi.Output[Optional[Sequence['outputs.OnboardingIamRegistrationSupportedAuthorizationSubject']]]:
        """
        The list of supported authorization subjects.
        """
        return pulumi.get(self, "supported_authorization_subjects")

    @_builtins.property
    @pulumi.getter(name="supportedNetwork")
    def supported_network(self) -> pulumi.Output[Optional['outputs.OnboardingIamRegistrationSupportedNetwork']]:
        """
        The registration of set of endpoint types that are supported by your service in the `networkType` environment attribute.
        This constrains the context-based restriction rules specific to the service such that they describe access restrictions
        on only this set of endpoints.
        """
        return pulumi.get(self, "supported_network")

    @_builtins.property
    @pulumi.getter(name="supportedRoles")
    def supported_roles(self) -> pulumi.Output[Optional[Sequence['outputs.OnboardingIamRegistrationSupportedRole']]]:
        """
        The list of roles that you can use to assign access.
        """
        return pulumi.get(self, "supported_roles")

