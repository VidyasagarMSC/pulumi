# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiWorkspaceResult',
    'AwaitableGetPiWorkspaceResult',
    'get_pi_workspace',
    'get_pi_workspace_output',
]

@pulumi.output_type
class GetPiWorkspaceResult:
    """
    A collection of values returned by getPiWorkspace.
    """
    def __init__(__self__, id=None, pi_cloud_instance_id=None, pi_workspace_capabilities=None, pi_workspace_details=None, pi_workspace_location=None, pi_workspace_name=None, pi_workspace_status=None, pi_workspace_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_workspace_capabilities and not isinstance(pi_workspace_capabilities, dict):
            raise TypeError("Expected argument 'pi_workspace_capabilities' to be a dict")
        pulumi.set(__self__, "pi_workspace_capabilities", pi_workspace_capabilities)
        if pi_workspace_details and not isinstance(pi_workspace_details, list):
            raise TypeError("Expected argument 'pi_workspace_details' to be a list")
        pulumi.set(__self__, "pi_workspace_details", pi_workspace_details)
        if pi_workspace_location and not isinstance(pi_workspace_location, dict):
            raise TypeError("Expected argument 'pi_workspace_location' to be a dict")
        pulumi.set(__self__, "pi_workspace_location", pi_workspace_location)
        if pi_workspace_name and not isinstance(pi_workspace_name, str):
            raise TypeError("Expected argument 'pi_workspace_name' to be a str")
        pulumi.set(__self__, "pi_workspace_name", pi_workspace_name)
        if pi_workspace_status and not isinstance(pi_workspace_status, str):
            raise TypeError("Expected argument 'pi_workspace_status' to be a str")
        pulumi.set(__self__, "pi_workspace_status", pi_workspace_status)
        if pi_workspace_type and not isinstance(pi_workspace_type, str):
            raise TypeError("Expected argument 'pi_workspace_type' to be a str")
        pulumi.set(__self__, "pi_workspace_type", pi_workspace_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piWorkspaceCapabilities")
    def pi_workspace_capabilities(self) -> Mapping[str, _builtins.bool]:
        return pulumi.get(self, "pi_workspace_capabilities")

    @_builtins.property
    @pulumi.getter(name="piWorkspaceDetails")
    def pi_workspace_details(self) -> Sequence['outputs.GetPiWorkspacePiWorkspaceDetailResult']:
        return pulumi.get(self, "pi_workspace_details")

    @_builtins.property
    @pulumi.getter(name="piWorkspaceLocation")
    def pi_workspace_location(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "pi_workspace_location")

    @_builtins.property
    @pulumi.getter(name="piWorkspaceName")
    def pi_workspace_name(self) -> _builtins.str:
        return pulumi.get(self, "pi_workspace_name")

    @_builtins.property
    @pulumi.getter(name="piWorkspaceStatus")
    def pi_workspace_status(self) -> _builtins.str:
        return pulumi.get(self, "pi_workspace_status")

    @_builtins.property
    @pulumi.getter(name="piWorkspaceType")
    def pi_workspace_type(self) -> _builtins.str:
        return pulumi.get(self, "pi_workspace_type")


class AwaitableGetPiWorkspaceResult(GetPiWorkspaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiWorkspaceResult(
            id=self.id,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_workspace_capabilities=self.pi_workspace_capabilities,
            pi_workspace_details=self.pi_workspace_details,
            pi_workspace_location=self.pi_workspace_location,
            pi_workspace_name=self.pi_workspace_name,
            pi_workspace_status=self.pi_workspace_status,
            pi_workspace_type=self.pi_workspace_type)


def get_pi_workspace(id: Optional[_builtins.str] = None,
                     pi_cloud_instance_id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiWorkspaceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiWorkspace:getPiWorkspace', __args__, opts=opts, typ=GetPiWorkspaceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiWorkspaceResult(
        id=pulumi.get(__ret__, 'id'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_workspace_capabilities=pulumi.get(__ret__, 'pi_workspace_capabilities'),
        pi_workspace_details=pulumi.get(__ret__, 'pi_workspace_details'),
        pi_workspace_location=pulumi.get(__ret__, 'pi_workspace_location'),
        pi_workspace_name=pulumi.get(__ret__, 'pi_workspace_name'),
        pi_workspace_status=pulumi.get(__ret__, 'pi_workspace_status'),
        pi_workspace_type=pulumi.get(__ret__, 'pi_workspace_type'))
def get_pi_workspace_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiWorkspaceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiWorkspace:getPiWorkspace', __args__, opts=opts, typ=GetPiWorkspaceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiWorkspaceResult(
        id=pulumi.get(__response__, 'id'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_workspace_capabilities=pulumi.get(__response__, 'pi_workspace_capabilities'),
        pi_workspace_details=pulumi.get(__response__, 'pi_workspace_details'),
        pi_workspace_location=pulumi.get(__response__, 'pi_workspace_location'),
        pi_workspace_name=pulumi.get(__response__, 'pi_workspace_name'),
        pi_workspace_status=pulumi.get(__response__, 'pi_workspace_status'),
        pi_workspace_type=pulumi.get(__response__, 'pi_workspace_type')))
