# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEnSmtpAllowedIpsResult',
    'AwaitableGetEnSmtpAllowedIpsResult',
    'get_en_smtp_allowed_ips',
    'get_en_smtp_allowed_ips_output',
]

@pulumi.output_type
class GetEnSmtpAllowedIpsResult:
    """
    A collection of values returned by getEnSmtpAllowedIps.
    """
    def __init__(__self__, en_smtp_allowed_ips_id=None, id=None, instance_id=None, subnets=None, updated_at=None):
        if en_smtp_allowed_ips_id and not isinstance(en_smtp_allowed_ips_id, str):
            raise TypeError("Expected argument 'en_smtp_allowed_ips_id' to be a str")
        pulumi.set(__self__, "en_smtp_allowed_ips_id", en_smtp_allowed_ips_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="enSmtpAllowedIpsId")
    def en_smtp_allowed_ips_id(self) -> _builtins.str:
        return pulumi.get(self, "en_smtp_allowed_ips_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetEnSmtpAllowedIpsResult(GetEnSmtpAllowedIpsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnSmtpAllowedIpsResult(
            en_smtp_allowed_ips_id=self.en_smtp_allowed_ips_id,
            id=self.id,
            instance_id=self.instance_id,
            subnets=self.subnets,
            updated_at=self.updated_at)


def get_en_smtp_allowed_ips(en_smtp_allowed_ips_id: Optional[_builtins.str] = None,
                            id: Optional[_builtins.str] = None,
                            instance_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnSmtpAllowedIpsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enSmtpAllowedIpsId'] = en_smtp_allowed_ips_id
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEnSmtpAllowedIps:getEnSmtpAllowedIps', __args__, opts=opts, typ=GetEnSmtpAllowedIpsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEnSmtpAllowedIpsResult(
        en_smtp_allowed_ips_id=pulumi.get(__ret__, 'en_smtp_allowed_ips_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        subnets=pulumi.get(__ret__, 'subnets'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_en_smtp_allowed_ips_output(en_smtp_allowed_ips_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnSmtpAllowedIpsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enSmtpAllowedIpsId'] = en_smtp_allowed_ips_id
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEnSmtpAllowedIps:getEnSmtpAllowedIps', __args__, opts=opts, typ=GetEnSmtpAllowedIpsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEnSmtpAllowedIpsResult(
        en_smtp_allowed_ips_id=pulumi.get(__response__, 'en_smtp_allowed_ips_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        subnets=pulumi.get(__response__, 'subnets'),
        updated_at=pulumi.get(__response__, 'updated_at')))
