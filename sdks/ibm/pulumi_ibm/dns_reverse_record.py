# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DnsReverseRecordArgs', 'DnsReverseRecord']

@pulumi.input_type
class DnsReverseRecordArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[_builtins.str],
                 ipaddress: pulumi.Input[_builtins.str],
                 dns_reverse_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a DnsReverseRecord resource.
        :param pulumi.Input[_builtins.str] hostname: Host name
        :param pulumi.Input[_builtins.str] ipaddress: IP Address
        :param pulumi.Input[_builtins.float] ttl: TTL value
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ipaddress", ipaddress)
        if dns_reverse_record_id is not None:
            pulumi.set(__self__, "dns_reverse_record_id", dns_reverse_record_id)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[_builtins.str]:
        """
        Host name
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter
    def ipaddress(self) -> pulumi.Input[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "ipaddress")

    @ipaddress.setter
    def ipaddress(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ipaddress", value)

    @_builtins.property
    @pulumi.getter(name="dnsReverseRecordId")
    def dns_reverse_record_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_reverse_record_id")

    @dns_reverse_record_id.setter
    def dns_reverse_record_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_reverse_record_id", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        TTL value
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class _DnsReverseRecordState:
    def __init__(__self__, *,
                 dns_reverse_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 ipaddress: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering DnsReverseRecord resources.
        :param pulumi.Input[_builtins.str] hostname: Host name
        :param pulumi.Input[_builtins.str] ipaddress: IP Address
        :param pulumi.Input[_builtins.float] ttl: TTL value
        """
        if dns_reverse_record_id is not None:
            pulumi.set(__self__, "dns_reverse_record_id", dns_reverse_record_id)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ipaddress is not None:
            pulumi.set(__self__, "ipaddress", ipaddress)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter(name="dnsReverseRecordId")
    def dns_reverse_record_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_reverse_record_id")

    @dns_reverse_record_id.setter
    def dns_reverse_record_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_reverse_record_id", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Host name
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter
    def ipaddress(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "ipaddress")

    @ipaddress.setter
    def ipaddress(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipaddress", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        TTL value
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ttl", value)


@pulumi.type_token("ibm:index/dnsReverseRecord:DnsReverseRecord")
class DnsReverseRecord(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_reverse_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 ipaddress: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a DnsReverseRecord resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] hostname: Host name
        :param pulumi.Input[_builtins.str] ipaddress: IP Address
        :param pulumi.Input[_builtins.float] ttl: TTL value
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsReverseRecordArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsReverseRecord resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsReverseRecordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsReverseRecordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_reverse_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 ipaddress: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsReverseRecordArgs.__new__(DnsReverseRecordArgs)

            __props__.__dict__["dns_reverse_record_id"] = dns_reverse_record_id
            if hostname is None and not opts.urn:
                raise TypeError("Missing required property 'hostname'")
            __props__.__dict__["hostname"] = hostname
            if ipaddress is None and not opts.urn:
                raise TypeError("Missing required property 'ipaddress'")
            __props__.__dict__["ipaddress"] = ipaddress
            __props__.__dict__["ttl"] = ttl
        super(DnsReverseRecord, __self__).__init__(
            'ibm:index/dnsReverseRecord:DnsReverseRecord',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dns_reverse_record_id: Optional[pulumi.Input[_builtins.str]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            ipaddress: Optional[pulumi.Input[_builtins.str]] = None,
            ttl: Optional[pulumi.Input[_builtins.float]] = None) -> 'DnsReverseRecord':
        """
        Get an existing DnsReverseRecord resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] hostname: Host name
        :param pulumi.Input[_builtins.str] ipaddress: IP Address
        :param pulumi.Input[_builtins.float] ttl: TTL value
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsReverseRecordState.__new__(_DnsReverseRecordState)

        __props__.__dict__["dns_reverse_record_id"] = dns_reverse_record_id
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["ipaddress"] = ipaddress
        __props__.__dict__["ttl"] = ttl
        return DnsReverseRecord(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dnsReverseRecordId")
    def dns_reverse_record_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dns_reverse_record_id")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[_builtins.str]:
        """
        Host name
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def ipaddress(self) -> pulumi.Output[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "ipaddress")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        TTL value
        """
        return pulumi.get(self, "ttl")

