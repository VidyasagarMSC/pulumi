# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetResourceGroupResult',
    'AwaitableGetResourceGroupResult',
    'get_resource_group',
    'get_resource_group_output',
]

@pulumi.output_type
class GetResourceGroupResult:
    """
    A collection of values returned by getResourceGroup.
    """
    def __init__(__self__, account_id=None, created_at=None, crn=None, id=None, is_default=None, name=None, payment_methods_url=None, quota_id=None, quota_url=None, resource_linkages=None, state=None, teams_url=None, updated_at=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if payment_methods_url and not isinstance(payment_methods_url, str):
            raise TypeError("Expected argument 'payment_methods_url' to be a str")
        pulumi.set(__self__, "payment_methods_url", payment_methods_url)
        if quota_id and not isinstance(quota_id, str):
            raise TypeError("Expected argument 'quota_id' to be a str")
        pulumi.set(__self__, "quota_id", quota_id)
        if quota_url and not isinstance(quota_url, str):
            raise TypeError("Expected argument 'quota_url' to be a str")
        pulumi.set(__self__, "quota_url", quota_url)
        if resource_linkages and not isinstance(resource_linkages, list):
            raise TypeError("Expected argument 'resource_linkages' to be a list")
        pulumi.set(__self__, "resource_linkages", resource_linkages)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if teams_url and not isinstance(teams_url, str):
            raise TypeError("Expected argument 'teams_url' to be a str")
        pulumi.set(__self__, "teams_url", teams_url)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="paymentMethodsUrl")
    def payment_methods_url(self) -> _builtins.str:
        return pulumi.get(self, "payment_methods_url")

    @_builtins.property
    @pulumi.getter(name="quotaId")
    def quota_id(self) -> _builtins.str:
        return pulumi.get(self, "quota_id")

    @_builtins.property
    @pulumi.getter(name="quotaUrl")
    def quota_url(self) -> _builtins.str:
        return pulumi.get(self, "quota_url")

    @_builtins.property
    @pulumi.getter(name="resourceLinkages")
    def resource_linkages(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "resource_linkages")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="teamsUrl")
    def teams_url(self) -> _builtins.str:
        return pulumi.get(self, "teams_url")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetResourceGroupResult(GetResourceGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceGroupResult(
            account_id=self.account_id,
            created_at=self.created_at,
            crn=self.crn,
            id=self.id,
            is_default=self.is_default,
            name=self.name,
            payment_methods_url=self.payment_methods_url,
            quota_id=self.quota_id,
            quota_url=self.quota_url,
            resource_linkages=self.resource_linkages,
            state=self.state,
            teams_url=self.teams_url,
            updated_at=self.updated_at)


def get_resource_group(id: Optional[_builtins.str] = None,
                       is_default: Optional[_builtins.bool] = None,
                       name: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['isDefault'] = is_default
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getResourceGroup:getResourceGroup', __args__, opts=opts, typ=GetResourceGroupResult, package_ref=_utilities.get_package()).value

    return AwaitableGetResourceGroupResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        id=pulumi.get(__ret__, 'id'),
        is_default=pulumi.get(__ret__, 'is_default'),
        name=pulumi.get(__ret__, 'name'),
        payment_methods_url=pulumi.get(__ret__, 'payment_methods_url'),
        quota_id=pulumi.get(__ret__, 'quota_id'),
        quota_url=pulumi.get(__ret__, 'quota_url'),
        resource_linkages=pulumi.get(__ret__, 'resource_linkages'),
        state=pulumi.get(__ret__, 'state'),
        teams_url=pulumi.get(__ret__, 'teams_url'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_resource_group_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              is_default: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                              name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['isDefault'] = is_default
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getResourceGroup:getResourceGroup', __args__, opts=opts, typ=GetResourceGroupResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetResourceGroupResult(
        account_id=pulumi.get(__response__, 'account_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        id=pulumi.get(__response__, 'id'),
        is_default=pulumi.get(__response__, 'is_default'),
        name=pulumi.get(__response__, 'name'),
        payment_methods_url=pulumi.get(__response__, 'payment_methods_url'),
        quota_id=pulumi.get(__response__, 'quota_id'),
        quota_url=pulumi.get(__response__, 'quota_url'),
        resource_linkages=pulumi.get(__response__, 'resource_linkages'),
        state=pulumi.get(__response__, 'state'),
        teams_url=pulumi.get(__response__, 'teams_url'),
        updated_at=pulumi.get(__response__, 'updated_at')))
