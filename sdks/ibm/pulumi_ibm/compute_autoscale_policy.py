# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ComputeAutoscalePolicyArgs', 'ComputeAutoscalePolicy']

@pulumi.input_type
class ComputeAutoscalePolicyArgs:
    def __init__(__self__, *,
                 scale_amount: pulumi.Input[_builtins.float],
                 scale_group_id: pulumi.Input[_builtins.float],
                 scale_type: pulumi.Input[_builtins.str],
                 compute_autoscale_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cooldown: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeAutoscalePolicyTriggerArgs']]]] = None):
        """
        The set of arguments for constructing a ComputeAutoscalePolicy resource.
        :param pulumi.Input[_builtins.float] scale_amount: Scale amount
        :param pulumi.Input[_builtins.float] scale_group_id: scale group ID
        :param pulumi.Input[_builtins.str] scale_type: scale type
        :param pulumi.Input[_builtins.float] cooldown: cooldown value
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        pulumi.set(__self__, "scale_amount", scale_amount)
        pulumi.set(__self__, "scale_group_id", scale_group_id)
        pulumi.set(__self__, "scale_type", scale_type)
        if compute_autoscale_policy_id is not None:
            pulumi.set(__self__, "compute_autoscale_policy_id", compute_autoscale_policy_id)
        if cooldown is not None:
            pulumi.set(__self__, "cooldown", cooldown)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @_builtins.property
    @pulumi.getter(name="scaleAmount")
    def scale_amount(self) -> pulumi.Input[_builtins.float]:
        """
        Scale amount
        """
        return pulumi.get(self, "scale_amount")

    @scale_amount.setter
    def scale_amount(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "scale_amount", value)

    @_builtins.property
    @pulumi.getter(name="scaleGroupId")
    def scale_group_id(self) -> pulumi.Input[_builtins.float]:
        """
        scale group ID
        """
        return pulumi.get(self, "scale_group_id")

    @scale_group_id.setter
    def scale_group_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "scale_group_id", value)

    @_builtins.property
    @pulumi.getter(name="scaleType")
    def scale_type(self) -> pulumi.Input[_builtins.str]:
        """
        scale type
        """
        return pulumi.get(self, "scale_type")

    @scale_type.setter
    def scale_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scale_type", value)

    @_builtins.property
    @pulumi.getter(name="computeAutoscalePolicyId")
    def compute_autoscale_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_autoscale_policy_id")

    @compute_autoscale_policy_id.setter
    def compute_autoscale_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_autoscale_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def cooldown(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        cooldown value
        """
        return pulumi.get(self, "cooldown")

    @cooldown.setter
    def cooldown(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cooldown", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeAutoscalePolicyTriggerArgs']]]]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeAutoscalePolicyTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)


@pulumi.input_type
class _ComputeAutoscalePolicyState:
    def __init__(__self__, *,
                 compute_autoscale_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cooldown: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_amount: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeAutoscalePolicyTriggerArgs']]]] = None):
        """
        Input properties used for looking up and filtering ComputeAutoscalePolicy resources.
        :param pulumi.Input[_builtins.float] cooldown: cooldown value
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.float] scale_amount: Scale amount
        :param pulumi.Input[_builtins.float] scale_group_id: scale group ID
        :param pulumi.Input[_builtins.str] scale_type: scale type
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        if compute_autoscale_policy_id is not None:
            pulumi.set(__self__, "compute_autoscale_policy_id", compute_autoscale_policy_id)
        if cooldown is not None:
            pulumi.set(__self__, "cooldown", cooldown)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scale_amount is not None:
            pulumi.set(__self__, "scale_amount", scale_amount)
        if scale_group_id is not None:
            pulumi.set(__self__, "scale_group_id", scale_group_id)
        if scale_type is not None:
            pulumi.set(__self__, "scale_type", scale_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @_builtins.property
    @pulumi.getter(name="computeAutoscalePolicyId")
    def compute_autoscale_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_autoscale_policy_id")

    @compute_autoscale_policy_id.setter
    def compute_autoscale_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_autoscale_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def cooldown(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        cooldown value
        """
        return pulumi.get(self, "cooldown")

    @cooldown.setter
    def cooldown(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cooldown", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="scaleAmount")
    def scale_amount(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Scale amount
        """
        return pulumi.get(self, "scale_amount")

    @scale_amount.setter
    def scale_amount(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_amount", value)

    @_builtins.property
    @pulumi.getter(name="scaleGroupId")
    def scale_group_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        scale group ID
        """
        return pulumi.get(self, "scale_group_id")

    @scale_group_id.setter
    def scale_group_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_group_id", value)

    @_builtins.property
    @pulumi.getter(name="scaleType")
    def scale_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        scale type
        """
        return pulumi.get(self, "scale_type")

    @scale_type.setter
    def scale_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeAutoscalePolicyTriggerArgs']]]]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeAutoscalePolicyTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)


@pulumi.type_token("ibm:index/computeAutoscalePolicy:ComputeAutoscalePolicy")
class ComputeAutoscalePolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_autoscale_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cooldown: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_amount: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComputeAutoscalePolicyTriggerArgs', 'ComputeAutoscalePolicyTriggerArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a ComputeAutoscalePolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] cooldown: cooldown value
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.float] scale_amount: Scale amount
        :param pulumi.Input[_builtins.float] scale_group_id: scale group ID
        :param pulumi.Input[_builtins.str] scale_type: scale type
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputeAutoscalePolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComputeAutoscalePolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComputeAutoscalePolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeAutoscalePolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_autoscale_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cooldown: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_amount: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComputeAutoscalePolicyTriggerArgs', 'ComputeAutoscalePolicyTriggerArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeAutoscalePolicyArgs.__new__(ComputeAutoscalePolicyArgs)

            __props__.__dict__["compute_autoscale_policy_id"] = compute_autoscale_policy_id
            __props__.__dict__["cooldown"] = cooldown
            __props__.__dict__["name"] = name
            if scale_amount is None and not opts.urn:
                raise TypeError("Missing required property 'scale_amount'")
            __props__.__dict__["scale_amount"] = scale_amount
            if scale_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'scale_group_id'")
            __props__.__dict__["scale_group_id"] = scale_group_id
            if scale_type is None and not opts.urn:
                raise TypeError("Missing required property 'scale_type'")
            __props__.__dict__["scale_type"] = scale_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["triggers"] = triggers
        super(ComputeAutoscalePolicy, __self__).__init__(
            'ibm:index/computeAutoscalePolicy:ComputeAutoscalePolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compute_autoscale_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            cooldown: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            scale_amount: Optional[pulumi.Input[_builtins.float]] = None,
            scale_group_id: Optional[pulumi.Input[_builtins.float]] = None,
            scale_type: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComputeAutoscalePolicyTriggerArgs', 'ComputeAutoscalePolicyTriggerArgsDict']]]]] = None) -> 'ComputeAutoscalePolicy':
        """
        Get an existing ComputeAutoscalePolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] cooldown: cooldown value
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.float] scale_amount: Scale amount
        :param pulumi.Input[_builtins.float] scale_group_id: scale group ID
        :param pulumi.Input[_builtins.str] scale_type: scale type
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeAutoscalePolicyState.__new__(_ComputeAutoscalePolicyState)

        __props__.__dict__["compute_autoscale_policy_id"] = compute_autoscale_policy_id
        __props__.__dict__["cooldown"] = cooldown
        __props__.__dict__["name"] = name
        __props__.__dict__["scale_amount"] = scale_amount
        __props__.__dict__["scale_group_id"] = scale_group_id
        __props__.__dict__["scale_type"] = scale_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["triggers"] = triggers
        return ComputeAutoscalePolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="computeAutoscalePolicyId")
    def compute_autoscale_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "compute_autoscale_policy_id")

    @_builtins.property
    @pulumi.getter
    def cooldown(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        cooldown value
        """
        return pulumi.get(self, "cooldown")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="scaleAmount")
    def scale_amount(self) -> pulumi.Output[_builtins.float]:
        """
        Scale amount
        """
        return pulumi.get(self, "scale_amount")

    @_builtins.property
    @pulumi.getter(name="scaleGroupId")
    def scale_group_id(self) -> pulumi.Output[_builtins.float]:
        """
        scale group ID
        """
        return pulumi.get(self, "scale_group_id")

    @_builtins.property
    @pulumi.getter(name="scaleType")
    def scale_type(self) -> pulumi.Output[_builtins.str]:
        """
        scale type
        """
        return pulumi.get(self, "scale_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Optional[Sequence['outputs.ComputeAutoscalePolicyTrigger']]]:
        return pulumi.get(self, "triggers")

