# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsInstanceTemplateResult',
    'AwaitableGetIsInstanceTemplateResult',
    'get_is_instance_template',
    'get_is_instance_template_output',
]

@pulumi.output_type
class GetIsInstanceTemplateResult:
    """
    A collection of values returned by getIsInstanceTemplate.
    """
    def __init__(__self__, availability_policy_host_failure=None, boot_volume_attachments=None, catalog_offerings=None, cluster_network_attachments=None, confidential_compute_mode=None, crn=None, default_trusted_profile_auto_link=None, default_trusted_profile_target=None, enable_secure_boot=None, href=None, id=None, identifier=None, image=None, keys=None, metadata_service_enabled=None, metadata_services=None, name=None, network_attachments=None, network_interfaces=None, placement_targets=None, primary_network_attachments=None, primary_network_interfaces=None, profile=None, reservation_affinities=None, resource_group=None, total_volume_bandwidth=None, user_data=None, volume_attachments=None, vpc=None, zone=None):
        if availability_policy_host_failure and not isinstance(availability_policy_host_failure, str):
            raise TypeError("Expected argument 'availability_policy_host_failure' to be a str")
        pulumi.set(__self__, "availability_policy_host_failure", availability_policy_host_failure)
        if boot_volume_attachments and not isinstance(boot_volume_attachments, list):
            raise TypeError("Expected argument 'boot_volume_attachments' to be a list")
        pulumi.set(__self__, "boot_volume_attachments", boot_volume_attachments)
        if catalog_offerings and not isinstance(catalog_offerings, list):
            raise TypeError("Expected argument 'catalog_offerings' to be a list")
        pulumi.set(__self__, "catalog_offerings", catalog_offerings)
        if cluster_network_attachments and not isinstance(cluster_network_attachments, list):
            raise TypeError("Expected argument 'cluster_network_attachments' to be a list")
        pulumi.set(__self__, "cluster_network_attachments", cluster_network_attachments)
        if confidential_compute_mode and not isinstance(confidential_compute_mode, str):
            raise TypeError("Expected argument 'confidential_compute_mode' to be a str")
        pulumi.set(__self__, "confidential_compute_mode", confidential_compute_mode)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if default_trusted_profile_auto_link and not isinstance(default_trusted_profile_auto_link, bool):
            raise TypeError("Expected argument 'default_trusted_profile_auto_link' to be a bool")
        pulumi.set(__self__, "default_trusted_profile_auto_link", default_trusted_profile_auto_link)
        if default_trusted_profile_target and not isinstance(default_trusted_profile_target, str):
            raise TypeError("Expected argument 'default_trusted_profile_target' to be a str")
        pulumi.set(__self__, "default_trusted_profile_target", default_trusted_profile_target)
        if enable_secure_boot and not isinstance(enable_secure_boot, bool):
            raise TypeError("Expected argument 'enable_secure_boot' to be a bool")
        pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        pulumi.set(__self__, "image", image)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)
        if metadata_service_enabled and not isinstance(metadata_service_enabled, bool):
            raise TypeError("Expected argument 'metadata_service_enabled' to be a bool")
        pulumi.set(__self__, "metadata_service_enabled", metadata_service_enabled)
        if metadata_services and not isinstance(metadata_services, list):
            raise TypeError("Expected argument 'metadata_services' to be a list")
        pulumi.set(__self__, "metadata_services", metadata_services)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_attachments and not isinstance(network_attachments, list):
            raise TypeError("Expected argument 'network_attachments' to be a list")
        pulumi.set(__self__, "network_attachments", network_attachments)
        if network_interfaces and not isinstance(network_interfaces, list):
            raise TypeError("Expected argument 'network_interfaces' to be a list")
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        if placement_targets and not isinstance(placement_targets, list):
            raise TypeError("Expected argument 'placement_targets' to be a list")
        pulumi.set(__self__, "placement_targets", placement_targets)
        if primary_network_attachments and not isinstance(primary_network_attachments, list):
            raise TypeError("Expected argument 'primary_network_attachments' to be a list")
        pulumi.set(__self__, "primary_network_attachments", primary_network_attachments)
        if primary_network_interfaces and not isinstance(primary_network_interfaces, list):
            raise TypeError("Expected argument 'primary_network_interfaces' to be a list")
        pulumi.set(__self__, "primary_network_interfaces", primary_network_interfaces)
        if profile and not isinstance(profile, str):
            raise TypeError("Expected argument 'profile' to be a str")
        pulumi.set(__self__, "profile", profile)
        if reservation_affinities and not isinstance(reservation_affinities, list):
            raise TypeError("Expected argument 'reservation_affinities' to be a list")
        pulumi.set(__self__, "reservation_affinities", reservation_affinities)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if total_volume_bandwidth and not isinstance(total_volume_bandwidth, float):
            raise TypeError("Expected argument 'total_volume_bandwidth' to be a float")
        pulumi.set(__self__, "total_volume_bandwidth", total_volume_bandwidth)
        if user_data and not isinstance(user_data, str):
            raise TypeError("Expected argument 'user_data' to be a str")
        pulumi.set(__self__, "user_data", user_data)
        if volume_attachments and not isinstance(volume_attachments, list):
            raise TypeError("Expected argument 'volume_attachments' to be a list")
        pulumi.set(__self__, "volume_attachments", volume_attachments)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="availabilityPolicyHostFailure")
    def availability_policy_host_failure(self) -> _builtins.str:
        return pulumi.get(self, "availability_policy_host_failure")

    @_builtins.property
    @pulumi.getter(name="bootVolumeAttachments")
    def boot_volume_attachments(self) -> Sequence['outputs.GetIsInstanceTemplateBootVolumeAttachmentResult']:
        return pulumi.get(self, "boot_volume_attachments")

    @_builtins.property
    @pulumi.getter(name="catalogOfferings")
    def catalog_offerings(self) -> Sequence['outputs.GetIsInstanceTemplateCatalogOfferingResult']:
        return pulumi.get(self, "catalog_offerings")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkAttachments")
    def cluster_network_attachments(self) -> Sequence['outputs.GetIsInstanceTemplateClusterNetworkAttachmentResult']:
        return pulumi.get(self, "cluster_network_attachments")

    @_builtins.property
    @pulumi.getter(name="confidentialComputeMode")
    def confidential_compute_mode(self) -> _builtins.str:
        return pulumi.get(self, "confidential_compute_mode")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileAutoLink")
    def default_trusted_profile_auto_link(self) -> _builtins.bool:
        return pulumi.get(self, "default_trusted_profile_auto_link")

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileTarget")
    def default_trusted_profile_target(self) -> _builtins.str:
        return pulumi.get(self, "default_trusted_profile_target")

    @_builtins.property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> _builtins.bool:
        return pulumi.get(self, "enable_secure_boot")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter(name="metadataServiceEnabled")
    def metadata_service_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "metadata_service_enabled")

    @_builtins.property
    @pulumi.getter(name="metadataServices")
    def metadata_services(self) -> Sequence['outputs.GetIsInstanceTemplateMetadataServiceResult']:
        return pulumi.get(self, "metadata_services")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> Sequence['outputs.GetIsInstanceTemplateNetworkAttachmentResult']:
        return pulumi.get(self, "network_attachments")

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.GetIsInstanceTemplateNetworkInterfaceResult']:
        return pulumi.get(self, "network_interfaces")

    @_builtins.property
    @pulumi.getter(name="placementTargets")
    def placement_targets(self) -> Sequence['outputs.GetIsInstanceTemplatePlacementTargetResult']:
        return pulumi.get(self, "placement_targets")

    @_builtins.property
    @pulumi.getter(name="primaryNetworkAttachments")
    def primary_network_attachments(self) -> Sequence['outputs.GetIsInstanceTemplatePrimaryNetworkAttachmentResult']:
        return pulumi.get(self, "primary_network_attachments")

    @_builtins.property
    @pulumi.getter(name="primaryNetworkInterfaces")
    def primary_network_interfaces(self) -> Sequence['outputs.GetIsInstanceTemplatePrimaryNetworkInterfaceResult']:
        return pulumi.get(self, "primary_network_interfaces")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> _builtins.str:
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="reservationAffinities")
    def reservation_affinities(self) -> Sequence['outputs.GetIsInstanceTemplateReservationAffinityResult']:
        return pulumi.get(self, "reservation_affinities")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="totalVolumeBandwidth")
    def total_volume_bandwidth(self) -> _builtins.float:
        return pulumi.get(self, "total_volume_bandwidth")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> _builtins.str:
        return pulumi.get(self, "user_data")

    @_builtins.property
    @pulumi.getter(name="volumeAttachments")
    def volume_attachments(self) -> Sequence['outputs.GetIsInstanceTemplateVolumeAttachmentResult']:
        return pulumi.get(self, "volume_attachments")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> _builtins.str:
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetIsInstanceTemplateResult(GetIsInstanceTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceTemplateResult(
            availability_policy_host_failure=self.availability_policy_host_failure,
            boot_volume_attachments=self.boot_volume_attachments,
            catalog_offerings=self.catalog_offerings,
            cluster_network_attachments=self.cluster_network_attachments,
            confidential_compute_mode=self.confidential_compute_mode,
            crn=self.crn,
            default_trusted_profile_auto_link=self.default_trusted_profile_auto_link,
            default_trusted_profile_target=self.default_trusted_profile_target,
            enable_secure_boot=self.enable_secure_boot,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            image=self.image,
            keys=self.keys,
            metadata_service_enabled=self.metadata_service_enabled,
            metadata_services=self.metadata_services,
            name=self.name,
            network_attachments=self.network_attachments,
            network_interfaces=self.network_interfaces,
            placement_targets=self.placement_targets,
            primary_network_attachments=self.primary_network_attachments,
            primary_network_interfaces=self.primary_network_interfaces,
            profile=self.profile,
            reservation_affinities=self.reservation_affinities,
            resource_group=self.resource_group,
            total_volume_bandwidth=self.total_volume_bandwidth,
            user_data=self.user_data,
            volume_attachments=self.volume_attachments,
            vpc=self.vpc,
            zone=self.zone)


def get_is_instance_template(id: Optional[_builtins.str] = None,
                             identifier: Optional[_builtins.str] = None,
                             name: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceTemplateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceTemplate:getIsInstanceTemplate', __args__, opts=opts, typ=GetIsInstanceTemplateResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceTemplateResult(
        availability_policy_host_failure=pulumi.get(__ret__, 'availability_policy_host_failure'),
        boot_volume_attachments=pulumi.get(__ret__, 'boot_volume_attachments'),
        catalog_offerings=pulumi.get(__ret__, 'catalog_offerings'),
        cluster_network_attachments=pulumi.get(__ret__, 'cluster_network_attachments'),
        confidential_compute_mode=pulumi.get(__ret__, 'confidential_compute_mode'),
        crn=pulumi.get(__ret__, 'crn'),
        default_trusted_profile_auto_link=pulumi.get(__ret__, 'default_trusted_profile_auto_link'),
        default_trusted_profile_target=pulumi.get(__ret__, 'default_trusted_profile_target'),
        enable_secure_boot=pulumi.get(__ret__, 'enable_secure_boot'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        image=pulumi.get(__ret__, 'image'),
        keys=pulumi.get(__ret__, 'keys'),
        metadata_service_enabled=pulumi.get(__ret__, 'metadata_service_enabled'),
        metadata_services=pulumi.get(__ret__, 'metadata_services'),
        name=pulumi.get(__ret__, 'name'),
        network_attachments=pulumi.get(__ret__, 'network_attachments'),
        network_interfaces=pulumi.get(__ret__, 'network_interfaces'),
        placement_targets=pulumi.get(__ret__, 'placement_targets'),
        primary_network_attachments=pulumi.get(__ret__, 'primary_network_attachments'),
        primary_network_interfaces=pulumi.get(__ret__, 'primary_network_interfaces'),
        profile=pulumi.get(__ret__, 'profile'),
        reservation_affinities=pulumi.get(__ret__, 'reservation_affinities'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        total_volume_bandwidth=pulumi.get(__ret__, 'total_volume_bandwidth'),
        user_data=pulumi.get(__ret__, 'user_data'),
        volume_attachments=pulumi.get(__ret__, 'volume_attachments'),
        vpc=pulumi.get(__ret__, 'vpc'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_instance_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceTemplateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceTemplate:getIsInstanceTemplate', __args__, opts=opts, typ=GetIsInstanceTemplateResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceTemplateResult(
        availability_policy_host_failure=pulumi.get(__response__, 'availability_policy_host_failure'),
        boot_volume_attachments=pulumi.get(__response__, 'boot_volume_attachments'),
        catalog_offerings=pulumi.get(__response__, 'catalog_offerings'),
        cluster_network_attachments=pulumi.get(__response__, 'cluster_network_attachments'),
        confidential_compute_mode=pulumi.get(__response__, 'confidential_compute_mode'),
        crn=pulumi.get(__response__, 'crn'),
        default_trusted_profile_auto_link=pulumi.get(__response__, 'default_trusted_profile_auto_link'),
        default_trusted_profile_target=pulumi.get(__response__, 'default_trusted_profile_target'),
        enable_secure_boot=pulumi.get(__response__, 'enable_secure_boot'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        image=pulumi.get(__response__, 'image'),
        keys=pulumi.get(__response__, 'keys'),
        metadata_service_enabled=pulumi.get(__response__, 'metadata_service_enabled'),
        metadata_services=pulumi.get(__response__, 'metadata_services'),
        name=pulumi.get(__response__, 'name'),
        network_attachments=pulumi.get(__response__, 'network_attachments'),
        network_interfaces=pulumi.get(__response__, 'network_interfaces'),
        placement_targets=pulumi.get(__response__, 'placement_targets'),
        primary_network_attachments=pulumi.get(__response__, 'primary_network_attachments'),
        primary_network_interfaces=pulumi.get(__response__, 'primary_network_interfaces'),
        profile=pulumi.get(__response__, 'profile'),
        reservation_affinities=pulumi.get(__response__, 'reservation_affinities'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        total_volume_bandwidth=pulumi.get(__response__, 'total_volume_bandwidth'),
        user_data=pulumi.get(__response__, 'user_data'),
        volume_attachments=pulumi.get(__response__, 'volume_attachments'),
        vpc=pulumi.get(__response__, 'vpc'),
        zone=pulumi.get(__response__, 'zone')))
