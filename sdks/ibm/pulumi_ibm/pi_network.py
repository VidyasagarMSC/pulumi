# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiNetworkArgs', 'PiNetwork']

@pulumi.input_type
class PiNetworkArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_network_name: pulumi.Input[_builtins.str],
                 pi_network_type: pulumi.Input[_builtins.str],
                 pi_advertise: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_arp_broadcast: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ipaddress_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkPiIpaddressRangeArgs']]]] = None,
                 pi_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_mtu: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_network_peer: Optional[pulumi.Input['PiNetworkPiNetworkPeerArgs']] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['PiNetworkTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiNetwork resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_network_name: The name of the network.
        :param pulumi.Input[_builtins.str] pi_network_type: The type of network that you want to create. Valid values are `pub-vlan`, and `vlan`.
        :param pulumi.Input[_builtins.str] pi_advertise: Enable the network to be advertised.
        :param pulumi.Input[_builtins.str] pi_arp_broadcast: Enable ARP Broadcast.
        :param pulumi.Input[_builtins.str] pi_cidr: The network CIDR. Required for `vlan` network type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_dns: The DNS Servers for the network.
        :param pulumi.Input[_builtins.str] pi_gateway: The gateway ip address.
        :param pulumi.Input[Sequence[pulumi.Input['PiNetworkPiIpaddressRangeArgs']]] pi_ipaddress_ranges: List of one or more ip address range(s).
        :param pulumi.Input[_builtins.float] pi_network_mtu: Maximum Transmission Unit option of the network. Minimum is 1450 and maximum is 9000.
        :param pulumi.Input['PiNetworkPiNetworkPeerArgs'] pi_network_peer: Network peer information.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_network_name", pi_network_name)
        pulumi.set(__self__, "pi_network_type", pi_network_type)
        if pi_advertise is not None:
            pulumi.set(__self__, "pi_advertise", pi_advertise)
        if pi_arp_broadcast is not None:
            pulumi.set(__self__, "pi_arp_broadcast", pi_arp_broadcast)
        if pi_cidr is not None:
            pulumi.set(__self__, "pi_cidr", pi_cidr)
        if pi_dns is not None:
            pulumi.set(__self__, "pi_dns", pi_dns)
        if pi_gateway is not None:
            pulumi.set(__self__, "pi_gateway", pi_gateway)
        if pi_ipaddress_ranges is not None:
            pulumi.set(__self__, "pi_ipaddress_ranges", pi_ipaddress_ranges)
        if pi_network_id is not None:
            pulumi.set(__self__, "pi_network_id", pi_network_id)
        if pi_network_mtu is not None:
            pulumi.set(__self__, "pi_network_mtu", pi_network_mtu)
        if pi_network_peer is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""pi_network_peer is deprecated: Deprecated""")
        if pi_network_peer is not None:
            pulumi.set(__self__, "pi_network_peer", pi_network_peer)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkName")
    def pi_network_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the network.
        """
        return pulumi.get(self, "pi_network_name")

    @pi_network_name.setter
    def pi_network_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_network_name", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkType")
    def pi_network_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of network that you want to create. Valid values are `pub-vlan`, and `vlan`.
        """
        return pulumi.get(self, "pi_network_type")

    @pi_network_type.setter
    def pi_network_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_network_type", value)

    @_builtins.property
    @pulumi.getter(name="piAdvertise")
    def pi_advertise(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable the network to be advertised.
        """
        return pulumi.get(self, "pi_advertise")

    @pi_advertise.setter
    def pi_advertise(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_advertise", value)

    @_builtins.property
    @pulumi.getter(name="piArpBroadcast")
    def pi_arp_broadcast(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable ARP Broadcast.
        """
        return pulumi.get(self, "pi_arp_broadcast")

    @pi_arp_broadcast.setter
    def pi_arp_broadcast(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_arp_broadcast", value)

    @_builtins.property
    @pulumi.getter(name="piCidr")
    def pi_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network CIDR. Required for `vlan` network type.
        """
        return pulumi.get(self, "pi_cidr")

    @pi_cidr.setter
    def pi_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cidr", value)

    @_builtins.property
    @pulumi.getter(name="piDns")
    def pi_dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The DNS Servers for the network.
        """
        return pulumi.get(self, "pi_dns")

    @pi_dns.setter
    def pi_dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_dns", value)

    @_builtins.property
    @pulumi.getter(name="piGateway")
    def pi_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The gateway ip address.
        """
        return pulumi.get(self, "pi_gateway")

    @pi_gateway.setter
    def pi_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_gateway", value)

    @_builtins.property
    @pulumi.getter(name="piIpaddressRanges")
    def pi_ipaddress_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkPiIpaddressRangeArgs']]]]:
        """
        List of one or more ip address range(s).
        """
        return pulumi.get(self, "pi_ipaddress_ranges")

    @pi_ipaddress_ranges.setter
    def pi_ipaddress_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkPiIpaddressRangeArgs']]]]):
        pulumi.set(self, "pi_ipaddress_ranges", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkId")
    def pi_network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_network_id")

    @pi_network_id.setter
    def pi_network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_id", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkMtu")
    def pi_network_mtu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Maximum Transmission Unit option of the network. Minimum is 1450 and maximum is 9000.
        """
        return pulumi.get(self, "pi_network_mtu")

    @pi_network_mtu.setter
    def pi_network_mtu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_network_mtu", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkPeer")
    @_utilities.deprecated("""Deprecated""")
    def pi_network_peer(self) -> Optional[pulumi.Input['PiNetworkPiNetworkPeerArgs']]:
        """
        Network peer information.
        """
        return pulumi.get(self, "pi_network_peer")

    @pi_network_peer.setter
    def pi_network_peer(self, value: Optional[pulumi.Input['PiNetworkPiNetworkPeerArgs']]):
        pulumi.set(self, "pi_network_peer", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiNetworkTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiNetworkTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiNetworkState:
    def __init__(__self__, *,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address_translations: Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkNetworkAddressTranslationArgs']]]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_advertise: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_arp_broadcast: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ipaddress_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkPiIpaddressRangeArgs']]]] = None,
                 pi_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_mtu: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_network_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_peer: Optional[pulumi.Input['PiNetworkPiNetworkPeerArgs']] = None,
                 pi_network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['PiNetworkTimeoutsArgs']] = None,
                 vlan_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering PiNetwork resources.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[Sequence[pulumi.Input['PiNetworkNetworkAddressTranslationArgs']]] network_address_translations: Contains the Network Address Translation Details (for on-prem locations only).
        :param pulumi.Input[_builtins.str] network_id: The unique identifier of the network.
        :param pulumi.Input[_builtins.str] peer_id: Network Peer ID (for on-prem locations only).
        :param pulumi.Input[_builtins.str] pi_advertise: Enable the network to be advertised.
        :param pulumi.Input[_builtins.str] pi_arp_broadcast: Enable ARP Broadcast.
        :param pulumi.Input[_builtins.str] pi_cidr: The network CIDR. Required for `vlan` network type.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_dns: The DNS Servers for the network.
        :param pulumi.Input[_builtins.str] pi_gateway: The gateway ip address.
        :param pulumi.Input[Sequence[pulumi.Input['PiNetworkPiIpaddressRangeArgs']]] pi_ipaddress_ranges: List of one or more ip address range(s).
        :param pulumi.Input[_builtins.float] pi_network_mtu: Maximum Transmission Unit option of the network. Minimum is 1450 and maximum is 9000.
        :param pulumi.Input[_builtins.str] pi_network_name: The name of the network.
        :param pulumi.Input['PiNetworkPiNetworkPeerArgs'] pi_network_peer: Network peer information.
        :param pulumi.Input[_builtins.str] pi_network_type: The type of network that you want to create. Valid values are `pub-vlan`, and `vlan`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.float] vlan_id: The ID of the VLAN that your network is attached to.
        """
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if network_address_translations is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""network_address_translations is deprecated: Deprecated""")
        if network_address_translations is not None:
            pulumi.set(__self__, "network_address_translations", network_address_translations)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if peer_id is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""peer_id is deprecated: Deprecated""")
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if pi_advertise is not None:
            pulumi.set(__self__, "pi_advertise", pi_advertise)
        if pi_arp_broadcast is not None:
            pulumi.set(__self__, "pi_arp_broadcast", pi_arp_broadcast)
        if pi_cidr is not None:
            pulumi.set(__self__, "pi_cidr", pi_cidr)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_dns is not None:
            pulumi.set(__self__, "pi_dns", pi_dns)
        if pi_gateway is not None:
            pulumi.set(__self__, "pi_gateway", pi_gateway)
        if pi_ipaddress_ranges is not None:
            pulumi.set(__self__, "pi_ipaddress_ranges", pi_ipaddress_ranges)
        if pi_network_id is not None:
            pulumi.set(__self__, "pi_network_id", pi_network_id)
        if pi_network_mtu is not None:
            pulumi.set(__self__, "pi_network_mtu", pi_network_mtu)
        if pi_network_name is not None:
            pulumi.set(__self__, "pi_network_name", pi_network_name)
        if pi_network_peer is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""pi_network_peer is deprecated: Deprecated""")
        if pi_network_peer is not None:
            pulumi.set(__self__, "pi_network_peer", pi_network_peer)
        if pi_network_type is not None:
            pulumi.set(__self__, "pi_network_type", pi_network_type)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="networkAddressTranslations")
    @_utilities.deprecated("""Deprecated""")
    def network_address_translations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkNetworkAddressTranslationArgs']]]]:
        """
        Contains the Network Address Translation Details (for on-prem locations only).
        """
        return pulumi.get(self, "network_address_translations")

    @network_address_translations.setter
    def network_address_translations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkNetworkAddressTranslationArgs']]]]):
        pulumi.set(self, "network_address_translations", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the network.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter(name="peerId")
    @_utilities.deprecated("""Deprecated""")
    def peer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Network Peer ID (for on-prem locations only).
        """
        return pulumi.get(self, "peer_id")

    @peer_id.setter
    def peer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_id", value)

    @_builtins.property
    @pulumi.getter(name="piAdvertise")
    def pi_advertise(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable the network to be advertised.
        """
        return pulumi.get(self, "pi_advertise")

    @pi_advertise.setter
    def pi_advertise(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_advertise", value)

    @_builtins.property
    @pulumi.getter(name="piArpBroadcast")
    def pi_arp_broadcast(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable ARP Broadcast.
        """
        return pulumi.get(self, "pi_arp_broadcast")

    @pi_arp_broadcast.setter
    def pi_arp_broadcast(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_arp_broadcast", value)

    @_builtins.property
    @pulumi.getter(name="piCidr")
    def pi_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network CIDR. Required for `vlan` network type.
        """
        return pulumi.get(self, "pi_cidr")

    @pi_cidr.setter
    def pi_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cidr", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piDns")
    def pi_dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The DNS Servers for the network.
        """
        return pulumi.get(self, "pi_dns")

    @pi_dns.setter
    def pi_dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_dns", value)

    @_builtins.property
    @pulumi.getter(name="piGateway")
    def pi_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The gateway ip address.
        """
        return pulumi.get(self, "pi_gateway")

    @pi_gateway.setter
    def pi_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_gateway", value)

    @_builtins.property
    @pulumi.getter(name="piIpaddressRanges")
    def pi_ipaddress_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkPiIpaddressRangeArgs']]]]:
        """
        List of one or more ip address range(s).
        """
        return pulumi.get(self, "pi_ipaddress_ranges")

    @pi_ipaddress_ranges.setter
    def pi_ipaddress_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkPiIpaddressRangeArgs']]]]):
        pulumi.set(self, "pi_ipaddress_ranges", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkId")
    def pi_network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_network_id")

    @pi_network_id.setter
    def pi_network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_id", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkMtu")
    def pi_network_mtu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Maximum Transmission Unit option of the network. Minimum is 1450 and maximum is 9000.
        """
        return pulumi.get(self, "pi_network_mtu")

    @pi_network_mtu.setter
    def pi_network_mtu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_network_mtu", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkName")
    def pi_network_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the network.
        """
        return pulumi.get(self, "pi_network_name")

    @pi_network_name.setter
    def pi_network_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_name", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkPeer")
    @_utilities.deprecated("""Deprecated""")
    def pi_network_peer(self) -> Optional[pulumi.Input['PiNetworkPiNetworkPeerArgs']]:
        """
        Network peer information.
        """
        return pulumi.get(self, "pi_network_peer")

    @pi_network_peer.setter
    def pi_network_peer(self, value: Optional[pulumi.Input['PiNetworkPiNetworkPeerArgs']]):
        pulumi.set(self, "pi_network_peer", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkType")
    def pi_network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of network that you want to create. Valid values are `pub-vlan`, and `vlan`.
        """
        return pulumi.get(self, "pi_network_type")

    @pi_network_type.setter
    def pi_network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_type", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiNetworkTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiNetworkTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The ID of the VLAN that your network is attached to.
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.type_token("ibm:index/piNetwork:PiNetwork")
class PiNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_advertise: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_arp_broadcast: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ipaddress_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiNetworkPiIpaddressRangeArgs', 'PiNetworkPiIpaddressRangeArgsDict']]]]] = None,
                 pi_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_mtu: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_network_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_peer: Optional[pulumi.Input[Union['PiNetworkPiNetworkPeerArgs', 'PiNetworkPiNetworkPeerArgsDict']]] = None,
                 pi_network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiNetworkTimeoutsArgs', 'PiNetworkTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiNetwork resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_advertise: Enable the network to be advertised.
        :param pulumi.Input[_builtins.str] pi_arp_broadcast: Enable ARP Broadcast.
        :param pulumi.Input[_builtins.str] pi_cidr: The network CIDR. Required for `vlan` network type.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_dns: The DNS Servers for the network.
        :param pulumi.Input[_builtins.str] pi_gateway: The gateway ip address.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiNetworkPiIpaddressRangeArgs', 'PiNetworkPiIpaddressRangeArgsDict']]]] pi_ipaddress_ranges: List of one or more ip address range(s).
        :param pulumi.Input[_builtins.float] pi_network_mtu: Maximum Transmission Unit option of the network. Minimum is 1450 and maximum is 9000.
        :param pulumi.Input[_builtins.str] pi_network_name: The name of the network.
        :param pulumi.Input[Union['PiNetworkPiNetworkPeerArgs', 'PiNetworkPiNetworkPeerArgsDict']] pi_network_peer: Network peer information.
        :param pulumi.Input[_builtins.str] pi_network_type: The type of network that you want to create. Valid values are `pub-vlan`, and `vlan`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiNetwork resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_advertise: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_arp_broadcast: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ipaddress_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiNetworkPiIpaddressRangeArgs', 'PiNetworkPiIpaddressRangeArgsDict']]]]] = None,
                 pi_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_mtu: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_network_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_peer: Optional[pulumi.Input[Union['PiNetworkPiNetworkPeerArgs', 'PiNetworkPiNetworkPeerArgsDict']]] = None,
                 pi_network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiNetworkTimeoutsArgs', 'PiNetworkTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiNetworkArgs.__new__(PiNetworkArgs)

            __props__.__dict__["pi_advertise"] = pi_advertise
            __props__.__dict__["pi_arp_broadcast"] = pi_arp_broadcast
            __props__.__dict__["pi_cidr"] = pi_cidr
            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_dns"] = pi_dns
            __props__.__dict__["pi_gateway"] = pi_gateway
            __props__.__dict__["pi_ipaddress_ranges"] = pi_ipaddress_ranges
            __props__.__dict__["pi_network_id"] = pi_network_id
            __props__.__dict__["pi_network_mtu"] = pi_network_mtu
            if pi_network_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_network_name'")
            __props__.__dict__["pi_network_name"] = pi_network_name
            __props__.__dict__["pi_network_peer"] = pi_network_peer
            if pi_network_type is None and not opts.urn:
                raise TypeError("Missing required property 'pi_network_type'")
            __props__.__dict__["pi_network_type"] = pi_network_type
            __props__.__dict__["pi_user_tags"] = pi_user_tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["network_address_translations"] = None
            __props__.__dict__["network_id"] = None
            __props__.__dict__["peer_id"] = None
            __props__.__dict__["vlan_id"] = None
        super(PiNetwork, __self__).__init__(
            'ibm:index/piNetwork:PiNetwork',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            network_address_translations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiNetworkNetworkAddressTranslationArgs', 'PiNetworkNetworkAddressTranslationArgsDict']]]]] = None,
            network_id: Optional[pulumi.Input[_builtins.str]] = None,
            peer_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_advertise: Optional[pulumi.Input[_builtins.str]] = None,
            pi_arp_broadcast: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_dns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_gateway: Optional[pulumi.Input[_builtins.str]] = None,
            pi_ipaddress_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiNetworkPiIpaddressRangeArgs', 'PiNetworkPiIpaddressRangeArgsDict']]]]] = None,
            pi_network_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_network_mtu: Optional[pulumi.Input[_builtins.float]] = None,
            pi_network_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_network_peer: Optional[pulumi.Input[Union['PiNetworkPiNetworkPeerArgs', 'PiNetworkPiNetworkPeerArgsDict']]] = None,
            pi_network_type: Optional[pulumi.Input[_builtins.str]] = None,
            pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['PiNetworkTimeoutsArgs', 'PiNetworkTimeoutsArgsDict']]] = None,
            vlan_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'PiNetwork':
        """
        Get an existing PiNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiNetworkNetworkAddressTranslationArgs', 'PiNetworkNetworkAddressTranslationArgsDict']]]] network_address_translations: Contains the Network Address Translation Details (for on-prem locations only).
        :param pulumi.Input[_builtins.str] network_id: The unique identifier of the network.
        :param pulumi.Input[_builtins.str] peer_id: Network Peer ID (for on-prem locations only).
        :param pulumi.Input[_builtins.str] pi_advertise: Enable the network to be advertised.
        :param pulumi.Input[_builtins.str] pi_arp_broadcast: Enable ARP Broadcast.
        :param pulumi.Input[_builtins.str] pi_cidr: The network CIDR. Required for `vlan` network type.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_dns: The DNS Servers for the network.
        :param pulumi.Input[_builtins.str] pi_gateway: The gateway ip address.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiNetworkPiIpaddressRangeArgs', 'PiNetworkPiIpaddressRangeArgsDict']]]] pi_ipaddress_ranges: List of one or more ip address range(s).
        :param pulumi.Input[_builtins.float] pi_network_mtu: Maximum Transmission Unit option of the network. Minimum is 1450 and maximum is 9000.
        :param pulumi.Input[_builtins.str] pi_network_name: The name of the network.
        :param pulumi.Input[Union['PiNetworkPiNetworkPeerArgs', 'PiNetworkPiNetworkPeerArgsDict']] pi_network_peer: Network peer information.
        :param pulumi.Input[_builtins.str] pi_network_type: The type of network that you want to create. Valid values are `pub-vlan`, and `vlan`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.float] vlan_id: The ID of the VLAN that your network is attached to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiNetworkState.__new__(_PiNetworkState)

        __props__.__dict__["crn"] = crn
        __props__.__dict__["network_address_translations"] = network_address_translations
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["peer_id"] = peer_id
        __props__.__dict__["pi_advertise"] = pi_advertise
        __props__.__dict__["pi_arp_broadcast"] = pi_arp_broadcast
        __props__.__dict__["pi_cidr"] = pi_cidr
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_dns"] = pi_dns
        __props__.__dict__["pi_gateway"] = pi_gateway
        __props__.__dict__["pi_ipaddress_ranges"] = pi_ipaddress_ranges
        __props__.__dict__["pi_network_id"] = pi_network_id
        __props__.__dict__["pi_network_mtu"] = pi_network_mtu
        __props__.__dict__["pi_network_name"] = pi_network_name
        __props__.__dict__["pi_network_peer"] = pi_network_peer
        __props__.__dict__["pi_network_type"] = pi_network_type
        __props__.__dict__["pi_user_tags"] = pi_user_tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vlan_id"] = vlan_id
        return PiNetwork(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="networkAddressTranslations")
    @_utilities.deprecated("""Deprecated""")
    def network_address_translations(self) -> pulumi.Output[Sequence['outputs.PiNetworkNetworkAddressTranslation']]:
        """
        Contains the Network Address Translation Details (for on-prem locations only).
        """
        return pulumi.get(self, "network_address_translations")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the network.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="peerId")
    @_utilities.deprecated("""Deprecated""")
    def peer_id(self) -> pulumi.Output[_builtins.str]:
        """
        Network Peer ID (for on-prem locations only).
        """
        return pulumi.get(self, "peer_id")

    @_builtins.property
    @pulumi.getter(name="piAdvertise")
    def pi_advertise(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Enable the network to be advertised.
        """
        return pulumi.get(self, "pi_advertise")

    @_builtins.property
    @pulumi.getter(name="piArpBroadcast")
    def pi_arp_broadcast(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Enable ARP Broadcast.
        """
        return pulumi.get(self, "pi_arp_broadcast")

    @_builtins.property
    @pulumi.getter(name="piCidr")
    def pi_cidr(self) -> pulumi.Output[_builtins.str]:
        """
        The network CIDR. Required for `vlan` network type.
        """
        return pulumi.get(self, "pi_cidr")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piDns")
    def pi_dns(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The DNS Servers for the network.
        """
        return pulumi.get(self, "pi_dns")

    @_builtins.property
    @pulumi.getter(name="piGateway")
    def pi_gateway(self) -> pulumi.Output[_builtins.str]:
        """
        The gateway ip address.
        """
        return pulumi.get(self, "pi_gateway")

    @_builtins.property
    @pulumi.getter(name="piIpaddressRanges")
    def pi_ipaddress_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.PiNetworkPiIpaddressRange']]]:
        """
        List of one or more ip address range(s).
        """
        return pulumi.get(self, "pi_ipaddress_ranges")

    @_builtins.property
    @pulumi.getter(name="piNetworkId")
    def pi_network_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_network_id")

    @_builtins.property
    @pulumi.getter(name="piNetworkMtu")
    def pi_network_mtu(self) -> pulumi.Output[_builtins.float]:
        """
        Maximum Transmission Unit option of the network. Minimum is 1450 and maximum is 9000.
        """
        return pulumi.get(self, "pi_network_mtu")

    @_builtins.property
    @pulumi.getter(name="piNetworkName")
    def pi_network_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the network.
        """
        return pulumi.get(self, "pi_network_name")

    @_builtins.property
    @pulumi.getter(name="piNetworkPeer")
    @_utilities.deprecated("""Deprecated""")
    def pi_network_peer(self) -> pulumi.Output[Optional['outputs.PiNetworkPiNetworkPeer']]:
        """
        Network peer information.
        """
        return pulumi.get(self, "pi_network_peer")

    @_builtins.property
    @pulumi.getter(name="piNetworkType")
    def pi_network_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of network that you want to create. Valid values are `pub-vlan`, and `vlan`.
        """
        return pulumi.get(self, "pi_network_type")

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiNetworkTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Output[_builtins.float]:
        """
        The ID of the VLAN that your network is attached to.
        """
        return pulumi.get(self, "vlan_id")

