# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSmCustomCredentialsConfigurationResult',
    'AwaitableGetSmCustomCredentialsConfigurationResult',
    'get_sm_custom_credentials_configuration',
    'get_sm_custom_credentials_configuration_output',
]

@pulumi.output_type
class GetSmCustomCredentialsConfigurationResult:
    """
    A collection of values returned by getSmCustomCredentialsConfiguration.
    """
    def __init__(__self__, api_key_ref=None, code_engine_key_ref=None, code_engines=None, created_at=None, created_by=None, endpoint_type=None, id=None, instance_id=None, name=None, region=None, schemas=None, task_timeout=None, updated_at=None):
        if api_key_ref and not isinstance(api_key_ref, str):
            raise TypeError("Expected argument 'api_key_ref' to be a str")
        pulumi.set(__self__, "api_key_ref", api_key_ref)
        if code_engine_key_ref and not isinstance(code_engine_key_ref, str):
            raise TypeError("Expected argument 'code_engine_key_ref' to be a str")
        pulumi.set(__self__, "code_engine_key_ref", code_engine_key_ref)
        if code_engines and not isinstance(code_engines, list):
            raise TypeError("Expected argument 'code_engines' to be a list")
        pulumi.set(__self__, "code_engines", code_engines)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if task_timeout and not isinstance(task_timeout, str):
            raise TypeError("Expected argument 'task_timeout' to be a str")
        pulumi.set(__self__, "task_timeout", task_timeout)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="apiKeyRef")
    def api_key_ref(self) -> _builtins.str:
        return pulumi.get(self, "api_key_ref")

    @_builtins.property
    @pulumi.getter(name="codeEngineKeyRef")
    def code_engine_key_ref(self) -> _builtins.str:
        return pulumi.get(self, "code_engine_key_ref")

    @_builtins.property
    @pulumi.getter(name="codeEngines")
    def code_engines(self) -> Sequence['outputs.GetSmCustomCredentialsConfigurationCodeEngineResult']:
        return pulumi.get(self, "code_engines")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def schemas(self) -> Sequence['outputs.GetSmCustomCredentialsConfigurationSchemaResult']:
        return pulumi.get(self, "schemas")

    @_builtins.property
    @pulumi.getter(name="taskTimeout")
    def task_timeout(self) -> _builtins.str:
        return pulumi.get(self, "task_timeout")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetSmCustomCredentialsConfigurationResult(GetSmCustomCredentialsConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSmCustomCredentialsConfigurationResult(
            api_key_ref=self.api_key_ref,
            code_engine_key_ref=self.code_engine_key_ref,
            code_engines=self.code_engines,
            created_at=self.created_at,
            created_by=self.created_by,
            endpoint_type=self.endpoint_type,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region,
            schemas=self.schemas,
            task_timeout=self.task_timeout,
            updated_at=self.updated_at)


def get_sm_custom_credentials_configuration(endpoint_type: Optional[_builtins.str] = None,
                                            id: Optional[_builtins.str] = None,
                                            instance_id: Optional[_builtins.str] = None,
                                            name: Optional[_builtins.str] = None,
                                            region: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSmCustomCredentialsConfigurationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSmCustomCredentialsConfiguration:getSmCustomCredentialsConfiguration', __args__, opts=opts, typ=GetSmCustomCredentialsConfigurationResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSmCustomCredentialsConfigurationResult(
        api_key_ref=pulumi.get(__ret__, 'api_key_ref'),
        code_engine_key_ref=pulumi.get(__ret__, 'code_engine_key_ref'),
        code_engines=pulumi.get(__ret__, 'code_engines'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        schemas=pulumi.get(__ret__, 'schemas'),
        task_timeout=pulumi.get(__ret__, 'task_timeout'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_sm_custom_credentials_configuration_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   name: Optional[pulumi.Input[_builtins.str]] = None,
                                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSmCustomCredentialsConfigurationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSmCustomCredentialsConfiguration:getSmCustomCredentialsConfiguration', __args__, opts=opts, typ=GetSmCustomCredentialsConfigurationResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSmCustomCredentialsConfigurationResult(
        api_key_ref=pulumi.get(__response__, 'api_key_ref'),
        code_engine_key_ref=pulumi.get(__response__, 'code_engine_key_ref'),
        code_engines=pulumi.get(__response__, 'code_engines'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        schemas=pulumi.get(__response__, 'schemas'),
        task_timeout=pulumi.get(__response__, 'task_timeout'),
        updated_at=pulumi.get(__response__, 'updated_at')))
