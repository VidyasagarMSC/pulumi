# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogsDataAccessRuleArgs', 'LogsDataAccessRule']

@pulumi.input_type
class LogsDataAccessRuleArgs:
    def __init__(__self__, *,
                 default_expression: pulumi.Input[_builtins.str],
                 display_name: pulumi.Input[_builtins.str],
                 filters: pulumi.Input[Sequence[pulumi.Input['LogsDataAccessRuleFilterArgs']]],
                 instance_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_data_access_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LogsDataAccessRule resource.
        :param pulumi.Input[_builtins.str] default_expression: Default expression to use when no filter matches the query.
        :param pulumi.Input[_builtins.str] display_name: Data Access Rule Display Name.
        :param pulumi.Input[Sequence[pulumi.Input['LogsDataAccessRuleFilterArgs']]] filters: List of filters that the Data Access Rule is composed of.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.str] description: Optional Data Access Rule Description.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        """
        pulumi.set(__self__, "default_expression", default_expression)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "instance_id", instance_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if logs_data_access_rule_id is not None:
            pulumi.set(__self__, "logs_data_access_rule_id", logs_data_access_rule_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="defaultExpression")
    def default_expression(self) -> pulumi.Input[_builtins.str]:
        """
        Default expression to use when no filter matches the query.
        """
        return pulumi.get(self, "default_expression")

    @default_expression.setter
    def default_expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "default_expression", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[_builtins.str]:
        """
        Data Access Rule Display Name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['LogsDataAccessRuleFilterArgs']]]:
        """
        List of filters that the Data Access Rule is composed of.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['LogsDataAccessRuleFilterArgs']]]):
        pulumi.set(self, "filters", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional Data Access Rule Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="logsDataAccessRuleId")
    def logs_data_access_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_data_access_rule_id")

    @logs_data_access_rule_id.setter
    def logs_data_access_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_data_access_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LogsDataAccessRuleState:
    def __init__(__self__, *,
                 access_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDataAccessRuleFilterArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_data_access_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogsDataAccessRule resources.
        :param pulumi.Input[_builtins.str] access_rule_id: Data access rule ID.
        :param pulumi.Input[_builtins.str] default_expression: Default expression to use when no filter matches the query.
        :param pulumi.Input[_builtins.str] description: Optional Data Access Rule Description.
        :param pulumi.Input[_builtins.str] display_name: Data Access Rule Display Name.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[Sequence[pulumi.Input['LogsDataAccessRuleFilterArgs']]] filters: List of filters that the Data Access Rule is composed of.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        """
        if access_rule_id is not None:
            pulumi.set(__self__, "access_rule_id", access_rule_id)
        if default_expression is not None:
            pulumi.set(__self__, "default_expression", default_expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if logs_data_access_rule_id is not None:
            pulumi.set(__self__, "logs_data_access_rule_id", logs_data_access_rule_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="accessRuleId")
    def access_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Data access rule ID.
        """
        return pulumi.get(self, "access_rule_id")

    @access_rule_id.setter
    def access_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_rule_id", value)

    @_builtins.property
    @pulumi.getter(name="defaultExpression")
    def default_expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default expression to use when no filter matches the query.
        """
        return pulumi.get(self, "default_expression")

    @default_expression.setter
    def default_expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_expression", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional Data Access Rule Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Data Access Rule Display Name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsDataAccessRuleFilterArgs']]]]:
        """
        List of filters that the Data Access Rule is composed of.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDataAccessRuleFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="logsDataAccessRuleId")
    def logs_data_access_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_data_access_rule_id")

    @logs_data_access_rule_id.setter
    def logs_data_access_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_data_access_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("ibm:index/logsDataAccessRule:LogsDataAccessRule")
class LogsDataAccessRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsDataAccessRuleFilterArgs', 'LogsDataAccessRuleFilterArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_data_access_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a LogsDataAccessRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] default_expression: Default expression to use when no filter matches the query.
        :param pulumi.Input[_builtins.str] description: Optional Data Access Rule Description.
        :param pulumi.Input[_builtins.str] display_name: Data Access Rule Display Name.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsDataAccessRuleFilterArgs', 'LogsDataAccessRuleFilterArgsDict']]]] filters: List of filters that the Data Access Rule is composed of.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogsDataAccessRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogsDataAccessRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogsDataAccessRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogsDataAccessRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsDataAccessRuleFilterArgs', 'LogsDataAccessRuleFilterArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_data_access_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogsDataAccessRuleArgs.__new__(LogsDataAccessRuleArgs)

            if default_expression is None and not opts.urn:
                raise TypeError("Missing required property 'default_expression'")
            __props__.__dict__["default_expression"] = default_expression
            __props__.__dict__["description"] = description
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["endpoint_type"] = endpoint_type
            if filters is None and not opts.urn:
                raise TypeError("Missing required property 'filters'")
            __props__.__dict__["filters"] = filters
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["logs_data_access_rule_id"] = logs_data_access_rule_id
            __props__.__dict__["region"] = region
            __props__.__dict__["access_rule_id"] = None
        super(LogsDataAccessRule, __self__).__init__(
            'ibm:index/logsDataAccessRule:LogsDataAccessRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            default_expression: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            display_name: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsDataAccessRuleFilterArgs', 'LogsDataAccessRuleFilterArgsDict']]]]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            logs_data_access_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogsDataAccessRule':
        """
        Get an existing LogsDataAccessRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_rule_id: Data access rule ID.
        :param pulumi.Input[_builtins.str] default_expression: Default expression to use when no filter matches the query.
        :param pulumi.Input[_builtins.str] description: Optional Data Access Rule Description.
        :param pulumi.Input[_builtins.str] display_name: Data Access Rule Display Name.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsDataAccessRuleFilterArgs', 'LogsDataAccessRuleFilterArgsDict']]]] filters: List of filters that the Data Access Rule is composed of.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogsDataAccessRuleState.__new__(_LogsDataAccessRuleState)

        __props__.__dict__["access_rule_id"] = access_rule_id
        __props__.__dict__["default_expression"] = default_expression
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["filters"] = filters
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["logs_data_access_rule_id"] = logs_data_access_rule_id
        __props__.__dict__["region"] = region
        return LogsDataAccessRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessRuleId")
    def access_rule_id(self) -> pulumi.Output[_builtins.str]:
        """
        Data access rule ID.
        """
        return pulumi.get(self, "access_rule_id")

    @_builtins.property
    @pulumi.getter(name="defaultExpression")
    def default_expression(self) -> pulumi.Output[_builtins.str]:
        """
        Default expression to use when no filter matches the query.
        """
        return pulumi.get(self, "default_expression")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional Data Access Rule Description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[_builtins.str]:
        """
        Data Access Rule Display Name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> pulumi.Output[Sequence['outputs.LogsDataAccessRuleFilter']]:
        """
        List of filters that the Data Access Rule is composed of.
        """
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="logsDataAccessRuleId")
    def logs_data_access_rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "logs_data_access_rule_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

