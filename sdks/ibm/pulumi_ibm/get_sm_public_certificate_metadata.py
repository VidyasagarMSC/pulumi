# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSmPublicCertificateMetadataResult',
    'AwaitableGetSmPublicCertificateMetadataResult',
    'get_sm_public_certificate_metadata',
    'get_sm_public_certificate_metadata_output',
]

@pulumi.output_type
class GetSmPublicCertificateMetadataResult:
    """
    A collection of values returned by getSmPublicCertificateMetadata.
    """
    def __init__(__self__, alt_names=None, bundle_certs=None, ca=None, common_name=None, created_at=None, created_by=None, crn=None, custom_metadata=None, description=None, dns=None, downloaded=None, endpoint_type=None, expiration_date=None, id=None, instance_id=None, issuance_infos=None, issuer=None, key_algorithm=None, labels=None, locks_total=None, name=None, region=None, rotations=None, secret_group_id=None, secret_id=None, secret_type=None, serial_number=None, signing_algorithm=None, state=None, state_description=None, updated_at=None, validities=None, versions_total=None):
        if alt_names and not isinstance(alt_names, list):
            raise TypeError("Expected argument 'alt_names' to be a list")
        pulumi.set(__self__, "alt_names", alt_names)
        if bundle_certs and not isinstance(bundle_certs, bool):
            raise TypeError("Expected argument 'bundle_certs' to be a bool")
        pulumi.set(__self__, "bundle_certs", bundle_certs)
        if ca and not isinstance(ca, str):
            raise TypeError("Expected argument 'ca' to be a str")
        pulumi.set(__self__, "ca", ca)
        if common_name and not isinstance(common_name, str):
            raise TypeError("Expected argument 'common_name' to be a str")
        pulumi.set(__self__, "common_name", common_name)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if custom_metadata and not isinstance(custom_metadata, dict):
            raise TypeError("Expected argument 'custom_metadata' to be a dict")
        pulumi.set(__self__, "custom_metadata", custom_metadata)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dns and not isinstance(dns, str):
            raise TypeError("Expected argument 'dns' to be a str")
        pulumi.set(__self__, "dns", dns)
        if downloaded and not isinstance(downloaded, bool):
            raise TypeError("Expected argument 'downloaded' to be a bool")
        pulumi.set(__self__, "downloaded", downloaded)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if expiration_date and not isinstance(expiration_date, str):
            raise TypeError("Expected argument 'expiration_date' to be a str")
        pulumi.set(__self__, "expiration_date", expiration_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if issuance_infos and not isinstance(issuance_infos, list):
            raise TypeError("Expected argument 'issuance_infos' to be a list")
        pulumi.set(__self__, "issuance_infos", issuance_infos)
        if issuer and not isinstance(issuer, str):
            raise TypeError("Expected argument 'issuer' to be a str")
        pulumi.set(__self__, "issuer", issuer)
        if key_algorithm and not isinstance(key_algorithm, str):
            raise TypeError("Expected argument 'key_algorithm' to be a str")
        pulumi.set(__self__, "key_algorithm", key_algorithm)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if locks_total and not isinstance(locks_total, float):
            raise TypeError("Expected argument 'locks_total' to be a float")
        pulumi.set(__self__, "locks_total", locks_total)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rotations and not isinstance(rotations, list):
            raise TypeError("Expected argument 'rotations' to be a list")
        pulumi.set(__self__, "rotations", rotations)
        if secret_group_id and not isinstance(secret_group_id, str):
            raise TypeError("Expected argument 'secret_group_id' to be a str")
        pulumi.set(__self__, "secret_group_id", secret_group_id)
        if secret_id and not isinstance(secret_id, str):
            raise TypeError("Expected argument 'secret_id' to be a str")
        pulumi.set(__self__, "secret_id", secret_id)
        if secret_type and not isinstance(secret_type, str):
            raise TypeError("Expected argument 'secret_type' to be a str")
        pulumi.set(__self__, "secret_type", secret_type)
        if serial_number and not isinstance(serial_number, str):
            raise TypeError("Expected argument 'serial_number' to be a str")
        pulumi.set(__self__, "serial_number", serial_number)
        if signing_algorithm and not isinstance(signing_algorithm, str):
            raise TypeError("Expected argument 'signing_algorithm' to be a str")
        pulumi.set(__self__, "signing_algorithm", signing_algorithm)
        if state and not isinstance(state, float):
            raise TypeError("Expected argument 'state' to be a float")
        pulumi.set(__self__, "state", state)
        if state_description and not isinstance(state_description, str):
            raise TypeError("Expected argument 'state_description' to be a str")
        pulumi.set(__self__, "state_description", state_description)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if validities and not isinstance(validities, list):
            raise TypeError("Expected argument 'validities' to be a list")
        pulumi.set(__self__, "validities", validities)
        if versions_total and not isinstance(versions_total, float):
            raise TypeError("Expected argument 'versions_total' to be a float")
        pulumi.set(__self__, "versions_total", versions_total)

    @_builtins.property
    @pulumi.getter(name="altNames")
    def alt_names(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "alt_names")

    @_builtins.property
    @pulumi.getter(name="bundleCerts")
    def bundle_certs(self) -> _builtins.bool:
        return pulumi.get(self, "bundle_certs")

    @_builtins.property
    @pulumi.getter
    def ca(self) -> _builtins.str:
        return pulumi.get(self, "ca")

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> _builtins.str:
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="customMetadata")
    def custom_metadata(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "custom_metadata")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> _builtins.str:
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter
    def downloaded(self) -> _builtins.bool:
        return pulumi.get(self, "downloaded")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> _builtins.str:
        return pulumi.get(self, "expiration_date")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="issuanceInfos")
    def issuance_infos(self) -> Sequence['outputs.GetSmPublicCertificateMetadataIssuanceInfoResult']:
        return pulumi.get(self, "issuance_infos")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> _builtins.str:
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> _builtins.str:
        return pulumi.get(self, "key_algorithm")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="locksTotal")
    def locks_total(self) -> _builtins.float:
        return pulumi.get(self, "locks_total")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def rotations(self) -> Sequence['outputs.GetSmPublicCertificateMetadataRotationResult']:
        return pulumi.get(self, "rotations")

    @_builtins.property
    @pulumi.getter(name="secretGroupId")
    def secret_group_id(self) -> _builtins.str:
        return pulumi.get(self, "secret_group_id")

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> _builtins.str:
        return pulumi.get(self, "secret_id")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> _builtins.str:
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="signingAlgorithm")
    def signing_algorithm(self) -> _builtins.str:
        return pulumi.get(self, "signing_algorithm")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.float:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateDescription")
    def state_description(self) -> _builtins.str:
        return pulumi.get(self, "state_description")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def validities(self) -> Sequence['outputs.GetSmPublicCertificateMetadataValidityResult']:
        return pulumi.get(self, "validities")

    @_builtins.property
    @pulumi.getter(name="versionsTotal")
    def versions_total(self) -> _builtins.float:
        return pulumi.get(self, "versions_total")


class AwaitableGetSmPublicCertificateMetadataResult(GetSmPublicCertificateMetadataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSmPublicCertificateMetadataResult(
            alt_names=self.alt_names,
            bundle_certs=self.bundle_certs,
            ca=self.ca,
            common_name=self.common_name,
            created_at=self.created_at,
            created_by=self.created_by,
            crn=self.crn,
            custom_metadata=self.custom_metadata,
            description=self.description,
            dns=self.dns,
            downloaded=self.downloaded,
            endpoint_type=self.endpoint_type,
            expiration_date=self.expiration_date,
            id=self.id,
            instance_id=self.instance_id,
            issuance_infos=self.issuance_infos,
            issuer=self.issuer,
            key_algorithm=self.key_algorithm,
            labels=self.labels,
            locks_total=self.locks_total,
            name=self.name,
            region=self.region,
            rotations=self.rotations,
            secret_group_id=self.secret_group_id,
            secret_id=self.secret_id,
            secret_type=self.secret_type,
            serial_number=self.serial_number,
            signing_algorithm=self.signing_algorithm,
            state=self.state,
            state_description=self.state_description,
            updated_at=self.updated_at,
            validities=self.validities,
            versions_total=self.versions_total)


def get_sm_public_certificate_metadata(endpoint_type: Optional[_builtins.str] = None,
                                       id: Optional[_builtins.str] = None,
                                       instance_id: Optional[_builtins.str] = None,
                                       region: Optional[_builtins.str] = None,
                                       secret_id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSmPublicCertificateMetadataResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['secretId'] = secret_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSmPublicCertificateMetadata:getSmPublicCertificateMetadata', __args__, opts=opts, typ=GetSmPublicCertificateMetadataResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSmPublicCertificateMetadataResult(
        alt_names=pulumi.get(__ret__, 'alt_names'),
        bundle_certs=pulumi.get(__ret__, 'bundle_certs'),
        ca=pulumi.get(__ret__, 'ca'),
        common_name=pulumi.get(__ret__, 'common_name'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        crn=pulumi.get(__ret__, 'crn'),
        custom_metadata=pulumi.get(__ret__, 'custom_metadata'),
        description=pulumi.get(__ret__, 'description'),
        dns=pulumi.get(__ret__, 'dns'),
        downloaded=pulumi.get(__ret__, 'downloaded'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        expiration_date=pulumi.get(__ret__, 'expiration_date'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        issuance_infos=pulumi.get(__ret__, 'issuance_infos'),
        issuer=pulumi.get(__ret__, 'issuer'),
        key_algorithm=pulumi.get(__ret__, 'key_algorithm'),
        labels=pulumi.get(__ret__, 'labels'),
        locks_total=pulumi.get(__ret__, 'locks_total'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        rotations=pulumi.get(__ret__, 'rotations'),
        secret_group_id=pulumi.get(__ret__, 'secret_group_id'),
        secret_id=pulumi.get(__ret__, 'secret_id'),
        secret_type=pulumi.get(__ret__, 'secret_type'),
        serial_number=pulumi.get(__ret__, 'serial_number'),
        signing_algorithm=pulumi.get(__ret__, 'signing_algorithm'),
        state=pulumi.get(__ret__, 'state'),
        state_description=pulumi.get(__ret__, 'state_description'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        validities=pulumi.get(__ret__, 'validities'),
        versions_total=pulumi.get(__ret__, 'versions_total'))
def get_sm_public_certificate_metadata_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              secret_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSmPublicCertificateMetadataResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['secretId'] = secret_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSmPublicCertificateMetadata:getSmPublicCertificateMetadata', __args__, opts=opts, typ=GetSmPublicCertificateMetadataResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSmPublicCertificateMetadataResult(
        alt_names=pulumi.get(__response__, 'alt_names'),
        bundle_certs=pulumi.get(__response__, 'bundle_certs'),
        ca=pulumi.get(__response__, 'ca'),
        common_name=pulumi.get(__response__, 'common_name'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        crn=pulumi.get(__response__, 'crn'),
        custom_metadata=pulumi.get(__response__, 'custom_metadata'),
        description=pulumi.get(__response__, 'description'),
        dns=pulumi.get(__response__, 'dns'),
        downloaded=pulumi.get(__response__, 'downloaded'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        expiration_date=pulumi.get(__response__, 'expiration_date'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        issuance_infos=pulumi.get(__response__, 'issuance_infos'),
        issuer=pulumi.get(__response__, 'issuer'),
        key_algorithm=pulumi.get(__response__, 'key_algorithm'),
        labels=pulumi.get(__response__, 'labels'),
        locks_total=pulumi.get(__response__, 'locks_total'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        rotations=pulumi.get(__response__, 'rotations'),
        secret_group_id=pulumi.get(__response__, 'secret_group_id'),
        secret_id=pulumi.get(__response__, 'secret_id'),
        secret_type=pulumi.get(__response__, 'secret_type'),
        serial_number=pulumi.get(__response__, 'serial_number'),
        signing_algorithm=pulumi.get(__response__, 'signing_algorithm'),
        state=pulumi.get(__response__, 'state'),
        state_description=pulumi.get(__response__, 'state_description'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        validities=pulumi.get(__response__, 'validities'),
        versions_total=pulumi.get(__response__, 'versions_total')))
