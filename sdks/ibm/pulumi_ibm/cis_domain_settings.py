# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CisDomainSettingsArgs', 'CisDomainSettings']

@pulumi.input_type
class CisDomainSettingsArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 always_use_https: Optional[pulumi.Input[_builtins.str]] = None,
                 automatic_https_rewrites: Optional[pulumi.Input[_builtins.str]] = None,
                 brotli: Optional[pulumi.Input[_builtins.str]] = None,
                 browser_check: Optional[pulumi.Input[_builtins.str]] = None,
                 challenge_ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cis_domain_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cname_flattening: Optional[pulumi.Input[_builtins.str]] = None,
                 dnssec: Optional[pulumi.Input[_builtins.str]] = None,
                 hotlink_protection: Optional[pulumi.Input[_builtins.str]] = None,
                 http2: Optional[pulumi.Input[_builtins.str]] = None,
                 image_load_optimization: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size_optimization: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_geolocation: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6: Optional[pulumi.Input[_builtins.str]] = None,
                 log_retention: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_upload: Optional[pulumi.Input[_builtins.float]] = None,
                 min_tls_version: Optional[pulumi.Input[_builtins.str]] = None,
                 minify: Optional[pulumi.Input['CisDomainSettingsMinifyArgs']] = None,
                 mobile_redirect: Optional[pulumi.Input['CisDomainSettingsMobileRedirectArgs']] = None,
                 opportunistic_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 opportunistic_onion: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_error_page_pass_thru: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_max_http_version: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_post_quantum_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 prefetch_preload: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_read_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 pseudo_ipv4: Optional[pulumi.Input[_builtins.str]] = None,
                 response_buffering: Optional[pulumi.Input[_builtins.str]] = None,
                 script_load_optimization: Optional[pulumi.Input[_builtins.str]] = None,
                 security_header: Optional[pulumi.Input['CisDomainSettingsSecurityHeaderArgs']] = None,
                 server_side_exclude: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_client_auth: Optional[pulumi.Input[_builtins.str]] = None,
                 true_client_ip_header: Optional[pulumi.Input[_builtins.str]] = None,
                 waf: Optional[pulumi.Input[_builtins.str]] = None,
                 websockets: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisDomainSettings resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] always_use_https: always_use_https setting
        :param pulumi.Input[_builtins.str] automatic_https_rewrites: automatic_https_rewrites setting
        :param pulumi.Input[_builtins.str] brotli: brotli setting
        :param pulumi.Input[_builtins.str] browser_check: browser_check setting
        :param pulumi.Input[_builtins.float] challenge_ttl: Challenge TTL setting
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ciphers: Cipher settings
        :param pulumi.Input[_builtins.str] cname_flattening: cname_flattening setting
        :param pulumi.Input[_builtins.str] dnssec: DNS Sec setting
        :param pulumi.Input[_builtins.str] hotlink_protection: hotlink_protection setting
        :param pulumi.Input[_builtins.str] http2: http2 setting
        :param pulumi.Input[_builtins.str] image_load_optimization: image_load_optimization setting
        :param pulumi.Input[_builtins.str] image_size_optimization: image_size_optimization setting
        :param pulumi.Input[_builtins.str] ip_geolocation: ip_geolocation setting
        :param pulumi.Input[_builtins.str] ipv6: ipv6 setting
        :param pulumi.Input[_builtins.bool] log_retention: Log Retention setting
        :param pulumi.Input[_builtins.float] max_upload: Maximum upload
        :param pulumi.Input[_builtins.str] min_tls_version: Minimum version of TLS required
        :param pulumi.Input['CisDomainSettingsMinifyArgs'] minify: Minify setting
        :param pulumi.Input[_builtins.str] opportunistic_encryption: opportunistic_encryption setting
        :param pulumi.Input[_builtins.str] opportunistic_onion: Opportunistic onion setting
        :param pulumi.Input[_builtins.str] origin_error_page_pass_thru: origin_error_page_pass_thru setting
        :param pulumi.Input[_builtins.str] origin_max_http_version: Max HTTP version used to connect to the origin
        :param pulumi.Input[_builtins.str] origin_post_quantum_encryption: Enables post-quantum cryptography to connect to the origin
        :param pulumi.Input[_builtins.str] prefetch_preload: prefetch_preload setting
        :param pulumi.Input[_builtins.float] proxy_read_timeout: Update proxy read timeout setting
        :param pulumi.Input[_builtins.str] pseudo_ipv4: pseudo_ipv4 setting
        :param pulumi.Input[_builtins.str] response_buffering: response_buffering setting
        :param pulumi.Input[_builtins.str] script_load_optimization: script_load_optimization setting
        :param pulumi.Input['CisDomainSettingsSecurityHeaderArgs'] security_header: Security Header Setting
        :param pulumi.Input[_builtins.str] server_side_exclude: server_side_exclude setting
        :param pulumi.Input[_builtins.str] ssl: SSL/TLS setting
        :param pulumi.Input[_builtins.str] tls_client_auth: tls_client_auth setting
        :param pulumi.Input[_builtins.str] true_client_ip_header: true_client_ip_header setting
        :param pulumi.Input[_builtins.str] waf: WAF setting
        :param pulumi.Input[_builtins.str] websockets: websockets setting
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "domain_id", domain_id)
        if always_use_https is not None:
            pulumi.set(__self__, "always_use_https", always_use_https)
        if automatic_https_rewrites is not None:
            pulumi.set(__self__, "automatic_https_rewrites", automatic_https_rewrites)
        if brotli is not None:
            pulumi.set(__self__, "brotli", brotli)
        if browser_check is not None:
            pulumi.set(__self__, "browser_check", browser_check)
        if challenge_ttl is not None:
            pulumi.set(__self__, "challenge_ttl", challenge_ttl)
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if cis_domain_settings_id is not None:
            pulumi.set(__self__, "cis_domain_settings_id", cis_domain_settings_id)
        if cname_flattening is not None:
            pulumi.set(__self__, "cname_flattening", cname_flattening)
        if dnssec is not None:
            pulumi.set(__self__, "dnssec", dnssec)
        if hotlink_protection is not None:
            pulumi.set(__self__, "hotlink_protection", hotlink_protection)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if image_load_optimization is not None:
            pulumi.set(__self__, "image_load_optimization", image_load_optimization)
        if image_size_optimization is not None:
            pulumi.set(__self__, "image_size_optimization", image_size_optimization)
        if ip_geolocation is not None:
            pulumi.set(__self__, "ip_geolocation", ip_geolocation)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if log_retention is not None:
            pulumi.set(__self__, "log_retention", log_retention)
        if max_upload is not None:
            pulumi.set(__self__, "max_upload", max_upload)
        if min_tls_version is not None:
            pulumi.set(__self__, "min_tls_version", min_tls_version)
        if minify is not None:
            pulumi.set(__self__, "minify", minify)
        if mobile_redirect is not None:
            pulumi.set(__self__, "mobile_redirect", mobile_redirect)
        if opportunistic_encryption is not None:
            pulumi.set(__self__, "opportunistic_encryption", opportunistic_encryption)
        if opportunistic_onion is not None:
            pulumi.set(__self__, "opportunistic_onion", opportunistic_onion)
        if origin_error_page_pass_thru is not None:
            pulumi.set(__self__, "origin_error_page_pass_thru", origin_error_page_pass_thru)
        if origin_max_http_version is not None:
            pulumi.set(__self__, "origin_max_http_version", origin_max_http_version)
        if origin_post_quantum_encryption is not None:
            pulumi.set(__self__, "origin_post_quantum_encryption", origin_post_quantum_encryption)
        if prefetch_preload is not None:
            pulumi.set(__self__, "prefetch_preload", prefetch_preload)
        if proxy_read_timeout is not None:
            pulumi.set(__self__, "proxy_read_timeout", proxy_read_timeout)
        if pseudo_ipv4 is not None:
            pulumi.set(__self__, "pseudo_ipv4", pseudo_ipv4)
        if response_buffering is not None:
            pulumi.set(__self__, "response_buffering", response_buffering)
        if script_load_optimization is not None:
            pulumi.set(__self__, "script_load_optimization", script_load_optimization)
        if security_header is not None:
            pulumi.set(__self__, "security_header", security_header)
        if server_side_exclude is not None:
            pulumi.set(__self__, "server_side_exclude", server_side_exclude)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if tls_client_auth is not None:
            pulumi.set(__self__, "tls_client_auth", tls_client_auth)
        if true_client_ip_header is not None:
            pulumi.set(__self__, "true_client_ip_header", true_client_ip_header)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)
        if websockets is not None:
            pulumi.set(__self__, "websockets", websockets)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="alwaysUseHttps")
    def always_use_https(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        always_use_https setting
        """
        return pulumi.get(self, "always_use_https")

    @always_use_https.setter
    def always_use_https(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "always_use_https", value)

    @_builtins.property
    @pulumi.getter(name="automaticHttpsRewrites")
    def automatic_https_rewrites(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        automatic_https_rewrites setting
        """
        return pulumi.get(self, "automatic_https_rewrites")

    @automatic_https_rewrites.setter
    def automatic_https_rewrites(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "automatic_https_rewrites", value)

    @_builtins.property
    @pulumi.getter
    def brotli(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        brotli setting
        """
        return pulumi.get(self, "brotli")

    @brotli.setter
    def brotli(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "brotli", value)

    @_builtins.property
    @pulumi.getter(name="browserCheck")
    def browser_check(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        browser_check setting
        """
        return pulumi.get(self, "browser_check")

    @browser_check.setter
    def browser_check(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "browser_check", value)

    @_builtins.property
    @pulumi.getter(name="challengeTtl")
    def challenge_ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Challenge TTL setting
        """
        return pulumi.get(self, "challenge_ttl")

    @challenge_ttl.setter
    def challenge_ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "challenge_ttl", value)

    @_builtins.property
    @pulumi.getter
    def ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Cipher settings
        """
        return pulumi.get(self, "ciphers")

    @ciphers.setter
    def ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ciphers", value)

    @_builtins.property
    @pulumi.getter(name="cisDomainSettingsId")
    def cis_domain_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_domain_settings_id")

    @cis_domain_settings_id.setter
    def cis_domain_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_domain_settings_id", value)

    @_builtins.property
    @pulumi.getter(name="cnameFlattening")
    def cname_flattening(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        cname_flattening setting
        """
        return pulumi.get(self, "cname_flattening")

    @cname_flattening.setter
    def cname_flattening(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cname_flattening", value)

    @_builtins.property
    @pulumi.getter
    def dnssec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS Sec setting
        """
        return pulumi.get(self, "dnssec")

    @dnssec.setter
    def dnssec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dnssec", value)

    @_builtins.property
    @pulumi.getter(name="hotlinkProtection")
    def hotlink_protection(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        hotlink_protection setting
        """
        return pulumi.get(self, "hotlink_protection")

    @hotlink_protection.setter
    def hotlink_protection(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hotlink_protection", value)

    @_builtins.property
    @pulumi.getter
    def http2(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        http2 setting
        """
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "http2", value)

    @_builtins.property
    @pulumi.getter(name="imageLoadOptimization")
    def image_load_optimization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        image_load_optimization setting
        """
        return pulumi.get(self, "image_load_optimization")

    @image_load_optimization.setter
    def image_load_optimization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_load_optimization", value)

    @_builtins.property
    @pulumi.getter(name="imageSizeOptimization")
    def image_size_optimization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        image_size_optimization setting
        """
        return pulumi.get(self, "image_size_optimization")

    @image_size_optimization.setter
    def image_size_optimization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_size_optimization", value)

    @_builtins.property
    @pulumi.getter(name="ipGeolocation")
    def ip_geolocation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ip_geolocation setting
        """
        return pulumi.get(self, "ip_geolocation")

    @ip_geolocation.setter
    def ip_geolocation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_geolocation", value)

    @_builtins.property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ipv6 setting
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6", value)

    @_builtins.property
    @pulumi.getter(name="logRetention")
    def log_retention(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Log Retention setting
        """
        return pulumi.get(self, "log_retention")

    @log_retention.setter
    def log_retention(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "log_retention", value)

    @_builtins.property
    @pulumi.getter(name="maxUpload")
    def max_upload(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Maximum upload
        """
        return pulumi.get(self, "max_upload")

    @max_upload.setter
    def max_upload(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_upload", value)

    @_builtins.property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Minimum version of TLS required
        """
        return pulumi.get(self, "min_tls_version")

    @min_tls_version.setter
    def min_tls_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "min_tls_version", value)

    @_builtins.property
    @pulumi.getter
    def minify(self) -> Optional[pulumi.Input['CisDomainSettingsMinifyArgs']]:
        """
        Minify setting
        """
        return pulumi.get(self, "minify")

    @minify.setter
    def minify(self, value: Optional[pulumi.Input['CisDomainSettingsMinifyArgs']]):
        pulumi.set(self, "minify", value)

    @_builtins.property
    @pulumi.getter(name="mobileRedirect")
    def mobile_redirect(self) -> Optional[pulumi.Input['CisDomainSettingsMobileRedirectArgs']]:
        return pulumi.get(self, "mobile_redirect")

    @mobile_redirect.setter
    def mobile_redirect(self, value: Optional[pulumi.Input['CisDomainSettingsMobileRedirectArgs']]):
        pulumi.set(self, "mobile_redirect", value)

    @_builtins.property
    @pulumi.getter(name="opportunisticEncryption")
    def opportunistic_encryption(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        opportunistic_encryption setting
        """
        return pulumi.get(self, "opportunistic_encryption")

    @opportunistic_encryption.setter
    def opportunistic_encryption(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "opportunistic_encryption", value)

    @_builtins.property
    @pulumi.getter(name="opportunisticOnion")
    def opportunistic_onion(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Opportunistic onion setting
        """
        return pulumi.get(self, "opportunistic_onion")

    @opportunistic_onion.setter
    def opportunistic_onion(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "opportunistic_onion", value)

    @_builtins.property
    @pulumi.getter(name="originErrorPagePassThru")
    def origin_error_page_pass_thru(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        origin_error_page_pass_thru setting
        """
        return pulumi.get(self, "origin_error_page_pass_thru")

    @origin_error_page_pass_thru.setter
    def origin_error_page_pass_thru(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin_error_page_pass_thru", value)

    @_builtins.property
    @pulumi.getter(name="originMaxHttpVersion")
    def origin_max_http_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Max HTTP version used to connect to the origin
        """
        return pulumi.get(self, "origin_max_http_version")

    @origin_max_http_version.setter
    def origin_max_http_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin_max_http_version", value)

    @_builtins.property
    @pulumi.getter(name="originPostQuantumEncryption")
    def origin_post_quantum_encryption(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enables post-quantum cryptography to connect to the origin
        """
        return pulumi.get(self, "origin_post_quantum_encryption")

    @origin_post_quantum_encryption.setter
    def origin_post_quantum_encryption(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin_post_quantum_encryption", value)

    @_builtins.property
    @pulumi.getter(name="prefetchPreload")
    def prefetch_preload(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        prefetch_preload setting
        """
        return pulumi.get(self, "prefetch_preload")

    @prefetch_preload.setter
    def prefetch_preload(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefetch_preload", value)

    @_builtins.property
    @pulumi.getter(name="proxyReadTimeout")
    def proxy_read_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Update proxy read timeout setting
        """
        return pulumi.get(self, "proxy_read_timeout")

    @proxy_read_timeout.setter
    def proxy_read_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "proxy_read_timeout", value)

    @_builtins.property
    @pulumi.getter(name="pseudoIpv4")
    def pseudo_ipv4(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        pseudo_ipv4 setting
        """
        return pulumi.get(self, "pseudo_ipv4")

    @pseudo_ipv4.setter
    def pseudo_ipv4(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pseudo_ipv4", value)

    @_builtins.property
    @pulumi.getter(name="responseBuffering")
    def response_buffering(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        response_buffering setting
        """
        return pulumi.get(self, "response_buffering")

    @response_buffering.setter
    def response_buffering(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "response_buffering", value)

    @_builtins.property
    @pulumi.getter(name="scriptLoadOptimization")
    def script_load_optimization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        script_load_optimization setting
        """
        return pulumi.get(self, "script_load_optimization")

    @script_load_optimization.setter
    def script_load_optimization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "script_load_optimization", value)

    @_builtins.property
    @pulumi.getter(name="securityHeader")
    def security_header(self) -> Optional[pulumi.Input['CisDomainSettingsSecurityHeaderArgs']]:
        """
        Security Header Setting
        """
        return pulumi.get(self, "security_header")

    @security_header.setter
    def security_header(self, value: Optional[pulumi.Input['CisDomainSettingsSecurityHeaderArgs']]):
        pulumi.set(self, "security_header", value)

    @_builtins.property
    @pulumi.getter(name="serverSideExclude")
    def server_side_exclude(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        server_side_exclude setting
        """
        return pulumi.get(self, "server_side_exclude")

    @server_side_exclude.setter
    def server_side_exclude(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_side_exclude", value)

    @_builtins.property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSL/TLS setting
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssl", value)

    @_builtins.property
    @pulumi.getter(name="tlsClientAuth")
    def tls_client_auth(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        tls_client_auth setting
        """
        return pulumi.get(self, "tls_client_auth")

    @tls_client_auth.setter
    def tls_client_auth(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_client_auth", value)

    @_builtins.property
    @pulumi.getter(name="trueClientIpHeader")
    def true_client_ip_header(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        true_client_ip_header setting
        """
        return pulumi.get(self, "true_client_ip_header")

    @true_client_ip_header.setter
    def true_client_ip_header(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "true_client_ip_header", value)

    @_builtins.property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        WAF setting
        """
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "waf", value)

    @_builtins.property
    @pulumi.getter
    def websockets(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        websockets setting
        """
        return pulumi.get(self, "websockets")

    @websockets.setter
    def websockets(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "websockets", value)


@pulumi.input_type
class _CisDomainSettingsState:
    def __init__(__self__, *,
                 always_use_https: Optional[pulumi.Input[_builtins.str]] = None,
                 automatic_https_rewrites: Optional[pulumi.Input[_builtins.str]] = None,
                 brotli: Optional[pulumi.Input[_builtins.str]] = None,
                 browser_check: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_status: Optional[pulumi.Input[_builtins.str]] = None,
                 challenge_ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cis_domain_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cname_flattening: Optional[pulumi.Input[_builtins.str]] = None,
                 dnssec: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hotlink_protection: Optional[pulumi.Input[_builtins.str]] = None,
                 http2: Optional[pulumi.Input[_builtins.str]] = None,
                 image_load_optimization: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size_optimization: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_geolocation: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6: Optional[pulumi.Input[_builtins.str]] = None,
                 log_retention: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_upload: Optional[pulumi.Input[_builtins.float]] = None,
                 min_tls_version: Optional[pulumi.Input[_builtins.str]] = None,
                 minify: Optional[pulumi.Input['CisDomainSettingsMinifyArgs']] = None,
                 mobile_redirect: Optional[pulumi.Input['CisDomainSettingsMobileRedirectArgs']] = None,
                 opportunistic_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 opportunistic_onion: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_error_page_pass_thru: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_max_http_version: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_post_quantum_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 prefetch_preload: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_read_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 pseudo_ipv4: Optional[pulumi.Input[_builtins.str]] = None,
                 response_buffering: Optional[pulumi.Input[_builtins.str]] = None,
                 script_load_optimization: Optional[pulumi.Input[_builtins.str]] = None,
                 security_header: Optional[pulumi.Input['CisDomainSettingsSecurityHeaderArgs']] = None,
                 server_side_exclude: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_client_auth: Optional[pulumi.Input[_builtins.str]] = None,
                 true_client_ip_header: Optional[pulumi.Input[_builtins.str]] = None,
                 waf: Optional[pulumi.Input[_builtins.str]] = None,
                 websockets: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisDomainSettings resources.
        :param pulumi.Input[_builtins.str] always_use_https: always_use_https setting
        :param pulumi.Input[_builtins.str] automatic_https_rewrites: automatic_https_rewrites setting
        :param pulumi.Input[_builtins.str] brotli: brotli setting
        :param pulumi.Input[_builtins.str] browser_check: browser_check setting
        :param pulumi.Input[_builtins.str] certificate_status: Certificate status
        :param pulumi.Input[_builtins.float] challenge_ttl: Challenge TTL setting
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ciphers: Cipher settings
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] cname_flattening: cname_flattening setting
        :param pulumi.Input[_builtins.str] dnssec: DNS Sec setting
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] hotlink_protection: hotlink_protection setting
        :param pulumi.Input[_builtins.str] http2: http2 setting
        :param pulumi.Input[_builtins.str] image_load_optimization: image_load_optimization setting
        :param pulumi.Input[_builtins.str] image_size_optimization: image_size_optimization setting
        :param pulumi.Input[_builtins.str] ip_geolocation: ip_geolocation setting
        :param pulumi.Input[_builtins.str] ipv6: ipv6 setting
        :param pulumi.Input[_builtins.bool] log_retention: Log Retention setting
        :param pulumi.Input[_builtins.float] max_upload: Maximum upload
        :param pulumi.Input[_builtins.str] min_tls_version: Minimum version of TLS required
        :param pulumi.Input['CisDomainSettingsMinifyArgs'] minify: Minify setting
        :param pulumi.Input[_builtins.str] opportunistic_encryption: opportunistic_encryption setting
        :param pulumi.Input[_builtins.str] opportunistic_onion: Opportunistic onion setting
        :param pulumi.Input[_builtins.str] origin_error_page_pass_thru: origin_error_page_pass_thru setting
        :param pulumi.Input[_builtins.str] origin_max_http_version: Max HTTP version used to connect to the origin
        :param pulumi.Input[_builtins.str] origin_post_quantum_encryption: Enables post-quantum cryptography to connect to the origin
        :param pulumi.Input[_builtins.str] prefetch_preload: prefetch_preload setting
        :param pulumi.Input[_builtins.float] proxy_read_timeout: Update proxy read timeout setting
        :param pulumi.Input[_builtins.str] pseudo_ipv4: pseudo_ipv4 setting
        :param pulumi.Input[_builtins.str] response_buffering: response_buffering setting
        :param pulumi.Input[_builtins.str] script_load_optimization: script_load_optimization setting
        :param pulumi.Input['CisDomainSettingsSecurityHeaderArgs'] security_header: Security Header Setting
        :param pulumi.Input[_builtins.str] server_side_exclude: server_side_exclude setting
        :param pulumi.Input[_builtins.str] ssl: SSL/TLS setting
        :param pulumi.Input[_builtins.str] tls_client_auth: tls_client_auth setting
        :param pulumi.Input[_builtins.str] true_client_ip_header: true_client_ip_header setting
        :param pulumi.Input[_builtins.str] waf: WAF setting
        :param pulumi.Input[_builtins.str] websockets: websockets setting
        """
        if always_use_https is not None:
            pulumi.set(__self__, "always_use_https", always_use_https)
        if automatic_https_rewrites is not None:
            pulumi.set(__self__, "automatic_https_rewrites", automatic_https_rewrites)
        if brotli is not None:
            pulumi.set(__self__, "brotli", brotli)
        if browser_check is not None:
            pulumi.set(__self__, "browser_check", browser_check)
        if certificate_status is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""certificate_status is deprecated: Deprecated""")
        if certificate_status is not None:
            pulumi.set(__self__, "certificate_status", certificate_status)
        if challenge_ttl is not None:
            pulumi.set(__self__, "challenge_ttl", challenge_ttl)
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if cis_domain_settings_id is not None:
            pulumi.set(__self__, "cis_domain_settings_id", cis_domain_settings_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if cname_flattening is not None:
            pulumi.set(__self__, "cname_flattening", cname_flattening)
        if dnssec is not None:
            pulumi.set(__self__, "dnssec", dnssec)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if hotlink_protection is not None:
            pulumi.set(__self__, "hotlink_protection", hotlink_protection)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if image_load_optimization is not None:
            pulumi.set(__self__, "image_load_optimization", image_load_optimization)
        if image_size_optimization is not None:
            pulumi.set(__self__, "image_size_optimization", image_size_optimization)
        if ip_geolocation is not None:
            pulumi.set(__self__, "ip_geolocation", ip_geolocation)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if log_retention is not None:
            pulumi.set(__self__, "log_retention", log_retention)
        if max_upload is not None:
            pulumi.set(__self__, "max_upload", max_upload)
        if min_tls_version is not None:
            pulumi.set(__self__, "min_tls_version", min_tls_version)
        if minify is not None:
            pulumi.set(__self__, "minify", minify)
        if mobile_redirect is not None:
            pulumi.set(__self__, "mobile_redirect", mobile_redirect)
        if opportunistic_encryption is not None:
            pulumi.set(__self__, "opportunistic_encryption", opportunistic_encryption)
        if opportunistic_onion is not None:
            pulumi.set(__self__, "opportunistic_onion", opportunistic_onion)
        if origin_error_page_pass_thru is not None:
            pulumi.set(__self__, "origin_error_page_pass_thru", origin_error_page_pass_thru)
        if origin_max_http_version is not None:
            pulumi.set(__self__, "origin_max_http_version", origin_max_http_version)
        if origin_post_quantum_encryption is not None:
            pulumi.set(__self__, "origin_post_quantum_encryption", origin_post_quantum_encryption)
        if prefetch_preload is not None:
            pulumi.set(__self__, "prefetch_preload", prefetch_preload)
        if proxy_read_timeout is not None:
            pulumi.set(__self__, "proxy_read_timeout", proxy_read_timeout)
        if pseudo_ipv4 is not None:
            pulumi.set(__self__, "pseudo_ipv4", pseudo_ipv4)
        if response_buffering is not None:
            pulumi.set(__self__, "response_buffering", response_buffering)
        if script_load_optimization is not None:
            pulumi.set(__self__, "script_load_optimization", script_load_optimization)
        if security_header is not None:
            pulumi.set(__self__, "security_header", security_header)
        if server_side_exclude is not None:
            pulumi.set(__self__, "server_side_exclude", server_side_exclude)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if tls_client_auth is not None:
            pulumi.set(__self__, "tls_client_auth", tls_client_auth)
        if true_client_ip_header is not None:
            pulumi.set(__self__, "true_client_ip_header", true_client_ip_header)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)
        if websockets is not None:
            pulumi.set(__self__, "websockets", websockets)

    @_builtins.property
    @pulumi.getter(name="alwaysUseHttps")
    def always_use_https(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        always_use_https setting
        """
        return pulumi.get(self, "always_use_https")

    @always_use_https.setter
    def always_use_https(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "always_use_https", value)

    @_builtins.property
    @pulumi.getter(name="automaticHttpsRewrites")
    def automatic_https_rewrites(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        automatic_https_rewrites setting
        """
        return pulumi.get(self, "automatic_https_rewrites")

    @automatic_https_rewrites.setter
    def automatic_https_rewrites(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "automatic_https_rewrites", value)

    @_builtins.property
    @pulumi.getter
    def brotli(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        brotli setting
        """
        return pulumi.get(self, "brotli")

    @brotli.setter
    def brotli(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "brotli", value)

    @_builtins.property
    @pulumi.getter(name="browserCheck")
    def browser_check(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        browser_check setting
        """
        return pulumi.get(self, "browser_check")

    @browser_check.setter
    def browser_check(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "browser_check", value)

    @_builtins.property
    @pulumi.getter(name="certificateStatus")
    @_utilities.deprecated("""Deprecated""")
    def certificate_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate status
        """
        return pulumi.get(self, "certificate_status")

    @certificate_status.setter
    def certificate_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_status", value)

    @_builtins.property
    @pulumi.getter(name="challengeTtl")
    def challenge_ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Challenge TTL setting
        """
        return pulumi.get(self, "challenge_ttl")

    @challenge_ttl.setter
    def challenge_ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "challenge_ttl", value)

    @_builtins.property
    @pulumi.getter
    def ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Cipher settings
        """
        return pulumi.get(self, "ciphers")

    @ciphers.setter
    def ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ciphers", value)

    @_builtins.property
    @pulumi.getter(name="cisDomainSettingsId")
    def cis_domain_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_domain_settings_id")

    @cis_domain_settings_id.setter
    def cis_domain_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_domain_settings_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cnameFlattening")
    def cname_flattening(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        cname_flattening setting
        """
        return pulumi.get(self, "cname_flattening")

    @cname_flattening.setter
    def cname_flattening(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cname_flattening", value)

    @_builtins.property
    @pulumi.getter
    def dnssec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS Sec setting
        """
        return pulumi.get(self, "dnssec")

    @dnssec.setter
    def dnssec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dnssec", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="hotlinkProtection")
    def hotlink_protection(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        hotlink_protection setting
        """
        return pulumi.get(self, "hotlink_protection")

    @hotlink_protection.setter
    def hotlink_protection(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hotlink_protection", value)

    @_builtins.property
    @pulumi.getter
    def http2(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        http2 setting
        """
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "http2", value)

    @_builtins.property
    @pulumi.getter(name="imageLoadOptimization")
    def image_load_optimization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        image_load_optimization setting
        """
        return pulumi.get(self, "image_load_optimization")

    @image_load_optimization.setter
    def image_load_optimization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_load_optimization", value)

    @_builtins.property
    @pulumi.getter(name="imageSizeOptimization")
    def image_size_optimization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        image_size_optimization setting
        """
        return pulumi.get(self, "image_size_optimization")

    @image_size_optimization.setter
    def image_size_optimization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_size_optimization", value)

    @_builtins.property
    @pulumi.getter(name="ipGeolocation")
    def ip_geolocation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ip_geolocation setting
        """
        return pulumi.get(self, "ip_geolocation")

    @ip_geolocation.setter
    def ip_geolocation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_geolocation", value)

    @_builtins.property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ipv6 setting
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6", value)

    @_builtins.property
    @pulumi.getter(name="logRetention")
    def log_retention(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Log Retention setting
        """
        return pulumi.get(self, "log_retention")

    @log_retention.setter
    def log_retention(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "log_retention", value)

    @_builtins.property
    @pulumi.getter(name="maxUpload")
    def max_upload(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Maximum upload
        """
        return pulumi.get(self, "max_upload")

    @max_upload.setter
    def max_upload(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_upload", value)

    @_builtins.property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Minimum version of TLS required
        """
        return pulumi.get(self, "min_tls_version")

    @min_tls_version.setter
    def min_tls_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "min_tls_version", value)

    @_builtins.property
    @pulumi.getter
    def minify(self) -> Optional[pulumi.Input['CisDomainSettingsMinifyArgs']]:
        """
        Minify setting
        """
        return pulumi.get(self, "minify")

    @minify.setter
    def minify(self, value: Optional[pulumi.Input['CisDomainSettingsMinifyArgs']]):
        pulumi.set(self, "minify", value)

    @_builtins.property
    @pulumi.getter(name="mobileRedirect")
    def mobile_redirect(self) -> Optional[pulumi.Input['CisDomainSettingsMobileRedirectArgs']]:
        return pulumi.get(self, "mobile_redirect")

    @mobile_redirect.setter
    def mobile_redirect(self, value: Optional[pulumi.Input['CisDomainSettingsMobileRedirectArgs']]):
        pulumi.set(self, "mobile_redirect", value)

    @_builtins.property
    @pulumi.getter(name="opportunisticEncryption")
    def opportunistic_encryption(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        opportunistic_encryption setting
        """
        return pulumi.get(self, "opportunistic_encryption")

    @opportunistic_encryption.setter
    def opportunistic_encryption(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "opportunistic_encryption", value)

    @_builtins.property
    @pulumi.getter(name="opportunisticOnion")
    def opportunistic_onion(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Opportunistic onion setting
        """
        return pulumi.get(self, "opportunistic_onion")

    @opportunistic_onion.setter
    def opportunistic_onion(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "opportunistic_onion", value)

    @_builtins.property
    @pulumi.getter(name="originErrorPagePassThru")
    def origin_error_page_pass_thru(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        origin_error_page_pass_thru setting
        """
        return pulumi.get(self, "origin_error_page_pass_thru")

    @origin_error_page_pass_thru.setter
    def origin_error_page_pass_thru(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin_error_page_pass_thru", value)

    @_builtins.property
    @pulumi.getter(name="originMaxHttpVersion")
    def origin_max_http_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Max HTTP version used to connect to the origin
        """
        return pulumi.get(self, "origin_max_http_version")

    @origin_max_http_version.setter
    def origin_max_http_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin_max_http_version", value)

    @_builtins.property
    @pulumi.getter(name="originPostQuantumEncryption")
    def origin_post_quantum_encryption(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enables post-quantum cryptography to connect to the origin
        """
        return pulumi.get(self, "origin_post_quantum_encryption")

    @origin_post_quantum_encryption.setter
    def origin_post_quantum_encryption(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin_post_quantum_encryption", value)

    @_builtins.property
    @pulumi.getter(name="prefetchPreload")
    def prefetch_preload(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        prefetch_preload setting
        """
        return pulumi.get(self, "prefetch_preload")

    @prefetch_preload.setter
    def prefetch_preload(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefetch_preload", value)

    @_builtins.property
    @pulumi.getter(name="proxyReadTimeout")
    def proxy_read_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Update proxy read timeout setting
        """
        return pulumi.get(self, "proxy_read_timeout")

    @proxy_read_timeout.setter
    def proxy_read_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "proxy_read_timeout", value)

    @_builtins.property
    @pulumi.getter(name="pseudoIpv4")
    def pseudo_ipv4(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        pseudo_ipv4 setting
        """
        return pulumi.get(self, "pseudo_ipv4")

    @pseudo_ipv4.setter
    def pseudo_ipv4(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pseudo_ipv4", value)

    @_builtins.property
    @pulumi.getter(name="responseBuffering")
    def response_buffering(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        response_buffering setting
        """
        return pulumi.get(self, "response_buffering")

    @response_buffering.setter
    def response_buffering(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "response_buffering", value)

    @_builtins.property
    @pulumi.getter(name="scriptLoadOptimization")
    def script_load_optimization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        script_load_optimization setting
        """
        return pulumi.get(self, "script_load_optimization")

    @script_load_optimization.setter
    def script_load_optimization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "script_load_optimization", value)

    @_builtins.property
    @pulumi.getter(name="securityHeader")
    def security_header(self) -> Optional[pulumi.Input['CisDomainSettingsSecurityHeaderArgs']]:
        """
        Security Header Setting
        """
        return pulumi.get(self, "security_header")

    @security_header.setter
    def security_header(self, value: Optional[pulumi.Input['CisDomainSettingsSecurityHeaderArgs']]):
        pulumi.set(self, "security_header", value)

    @_builtins.property
    @pulumi.getter(name="serverSideExclude")
    def server_side_exclude(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        server_side_exclude setting
        """
        return pulumi.get(self, "server_side_exclude")

    @server_side_exclude.setter
    def server_side_exclude(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_side_exclude", value)

    @_builtins.property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSL/TLS setting
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssl", value)

    @_builtins.property
    @pulumi.getter(name="tlsClientAuth")
    def tls_client_auth(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        tls_client_auth setting
        """
        return pulumi.get(self, "tls_client_auth")

    @tls_client_auth.setter
    def tls_client_auth(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_client_auth", value)

    @_builtins.property
    @pulumi.getter(name="trueClientIpHeader")
    def true_client_ip_header(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        true_client_ip_header setting
        """
        return pulumi.get(self, "true_client_ip_header")

    @true_client_ip_header.setter
    def true_client_ip_header(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "true_client_ip_header", value)

    @_builtins.property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        WAF setting
        """
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "waf", value)

    @_builtins.property
    @pulumi.getter
    def websockets(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        websockets setting
        """
        return pulumi.get(self, "websockets")

    @websockets.setter
    def websockets(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "websockets", value)


@pulumi.type_token("ibm:index/cisDomainSettings:CisDomainSettings")
class CisDomainSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 always_use_https: Optional[pulumi.Input[_builtins.str]] = None,
                 automatic_https_rewrites: Optional[pulumi.Input[_builtins.str]] = None,
                 brotli: Optional[pulumi.Input[_builtins.str]] = None,
                 browser_check: Optional[pulumi.Input[_builtins.str]] = None,
                 challenge_ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cis_domain_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cname_flattening: Optional[pulumi.Input[_builtins.str]] = None,
                 dnssec: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hotlink_protection: Optional[pulumi.Input[_builtins.str]] = None,
                 http2: Optional[pulumi.Input[_builtins.str]] = None,
                 image_load_optimization: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size_optimization: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_geolocation: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6: Optional[pulumi.Input[_builtins.str]] = None,
                 log_retention: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_upload: Optional[pulumi.Input[_builtins.float]] = None,
                 min_tls_version: Optional[pulumi.Input[_builtins.str]] = None,
                 minify: Optional[pulumi.Input[Union['CisDomainSettingsMinifyArgs', 'CisDomainSettingsMinifyArgsDict']]] = None,
                 mobile_redirect: Optional[pulumi.Input[Union['CisDomainSettingsMobileRedirectArgs', 'CisDomainSettingsMobileRedirectArgsDict']]] = None,
                 opportunistic_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 opportunistic_onion: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_error_page_pass_thru: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_max_http_version: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_post_quantum_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 prefetch_preload: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_read_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 pseudo_ipv4: Optional[pulumi.Input[_builtins.str]] = None,
                 response_buffering: Optional[pulumi.Input[_builtins.str]] = None,
                 script_load_optimization: Optional[pulumi.Input[_builtins.str]] = None,
                 security_header: Optional[pulumi.Input[Union['CisDomainSettingsSecurityHeaderArgs', 'CisDomainSettingsSecurityHeaderArgsDict']]] = None,
                 server_side_exclude: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_client_auth: Optional[pulumi.Input[_builtins.str]] = None,
                 true_client_ip_header: Optional[pulumi.Input[_builtins.str]] = None,
                 waf: Optional[pulumi.Input[_builtins.str]] = None,
                 websockets: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisDomainSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] always_use_https: always_use_https setting
        :param pulumi.Input[_builtins.str] automatic_https_rewrites: automatic_https_rewrites setting
        :param pulumi.Input[_builtins.str] brotli: brotli setting
        :param pulumi.Input[_builtins.str] browser_check: browser_check setting
        :param pulumi.Input[_builtins.float] challenge_ttl: Challenge TTL setting
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ciphers: Cipher settings
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] cname_flattening: cname_flattening setting
        :param pulumi.Input[_builtins.str] dnssec: DNS Sec setting
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] hotlink_protection: hotlink_protection setting
        :param pulumi.Input[_builtins.str] http2: http2 setting
        :param pulumi.Input[_builtins.str] image_load_optimization: image_load_optimization setting
        :param pulumi.Input[_builtins.str] image_size_optimization: image_size_optimization setting
        :param pulumi.Input[_builtins.str] ip_geolocation: ip_geolocation setting
        :param pulumi.Input[_builtins.str] ipv6: ipv6 setting
        :param pulumi.Input[_builtins.bool] log_retention: Log Retention setting
        :param pulumi.Input[_builtins.float] max_upload: Maximum upload
        :param pulumi.Input[_builtins.str] min_tls_version: Minimum version of TLS required
        :param pulumi.Input[Union['CisDomainSettingsMinifyArgs', 'CisDomainSettingsMinifyArgsDict']] minify: Minify setting
        :param pulumi.Input[_builtins.str] opportunistic_encryption: opportunistic_encryption setting
        :param pulumi.Input[_builtins.str] opportunistic_onion: Opportunistic onion setting
        :param pulumi.Input[_builtins.str] origin_error_page_pass_thru: origin_error_page_pass_thru setting
        :param pulumi.Input[_builtins.str] origin_max_http_version: Max HTTP version used to connect to the origin
        :param pulumi.Input[_builtins.str] origin_post_quantum_encryption: Enables post-quantum cryptography to connect to the origin
        :param pulumi.Input[_builtins.str] prefetch_preload: prefetch_preload setting
        :param pulumi.Input[_builtins.float] proxy_read_timeout: Update proxy read timeout setting
        :param pulumi.Input[_builtins.str] pseudo_ipv4: pseudo_ipv4 setting
        :param pulumi.Input[_builtins.str] response_buffering: response_buffering setting
        :param pulumi.Input[_builtins.str] script_load_optimization: script_load_optimization setting
        :param pulumi.Input[Union['CisDomainSettingsSecurityHeaderArgs', 'CisDomainSettingsSecurityHeaderArgsDict']] security_header: Security Header Setting
        :param pulumi.Input[_builtins.str] server_side_exclude: server_side_exclude setting
        :param pulumi.Input[_builtins.str] ssl: SSL/TLS setting
        :param pulumi.Input[_builtins.str] tls_client_auth: tls_client_auth setting
        :param pulumi.Input[_builtins.str] true_client_ip_header: true_client_ip_header setting
        :param pulumi.Input[_builtins.str] waf: WAF setting
        :param pulumi.Input[_builtins.str] websockets: websockets setting
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisDomainSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisDomainSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisDomainSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisDomainSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 always_use_https: Optional[pulumi.Input[_builtins.str]] = None,
                 automatic_https_rewrites: Optional[pulumi.Input[_builtins.str]] = None,
                 brotli: Optional[pulumi.Input[_builtins.str]] = None,
                 browser_check: Optional[pulumi.Input[_builtins.str]] = None,
                 challenge_ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cis_domain_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cname_flattening: Optional[pulumi.Input[_builtins.str]] = None,
                 dnssec: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hotlink_protection: Optional[pulumi.Input[_builtins.str]] = None,
                 http2: Optional[pulumi.Input[_builtins.str]] = None,
                 image_load_optimization: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size_optimization: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_geolocation: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6: Optional[pulumi.Input[_builtins.str]] = None,
                 log_retention: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_upload: Optional[pulumi.Input[_builtins.float]] = None,
                 min_tls_version: Optional[pulumi.Input[_builtins.str]] = None,
                 minify: Optional[pulumi.Input[Union['CisDomainSettingsMinifyArgs', 'CisDomainSettingsMinifyArgsDict']]] = None,
                 mobile_redirect: Optional[pulumi.Input[Union['CisDomainSettingsMobileRedirectArgs', 'CisDomainSettingsMobileRedirectArgsDict']]] = None,
                 opportunistic_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 opportunistic_onion: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_error_page_pass_thru: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_max_http_version: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_post_quantum_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 prefetch_preload: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_read_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 pseudo_ipv4: Optional[pulumi.Input[_builtins.str]] = None,
                 response_buffering: Optional[pulumi.Input[_builtins.str]] = None,
                 script_load_optimization: Optional[pulumi.Input[_builtins.str]] = None,
                 security_header: Optional[pulumi.Input[Union['CisDomainSettingsSecurityHeaderArgs', 'CisDomainSettingsSecurityHeaderArgsDict']]] = None,
                 server_side_exclude: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_client_auth: Optional[pulumi.Input[_builtins.str]] = None,
                 true_client_ip_header: Optional[pulumi.Input[_builtins.str]] = None,
                 waf: Optional[pulumi.Input[_builtins.str]] = None,
                 websockets: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisDomainSettingsArgs.__new__(CisDomainSettingsArgs)

            __props__.__dict__["always_use_https"] = always_use_https
            __props__.__dict__["automatic_https_rewrites"] = automatic_https_rewrites
            __props__.__dict__["brotli"] = brotli
            __props__.__dict__["browser_check"] = browser_check
            __props__.__dict__["challenge_ttl"] = challenge_ttl
            __props__.__dict__["ciphers"] = ciphers
            __props__.__dict__["cis_domain_settings_id"] = cis_domain_settings_id
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["cname_flattening"] = cname_flattening
            __props__.__dict__["dnssec"] = dnssec
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["hotlink_protection"] = hotlink_protection
            __props__.__dict__["http2"] = http2
            __props__.__dict__["image_load_optimization"] = image_load_optimization
            __props__.__dict__["image_size_optimization"] = image_size_optimization
            __props__.__dict__["ip_geolocation"] = ip_geolocation
            __props__.__dict__["ipv6"] = ipv6
            __props__.__dict__["log_retention"] = log_retention
            __props__.__dict__["max_upload"] = max_upload
            __props__.__dict__["min_tls_version"] = min_tls_version
            __props__.__dict__["minify"] = minify
            __props__.__dict__["mobile_redirect"] = mobile_redirect
            __props__.__dict__["opportunistic_encryption"] = opportunistic_encryption
            __props__.__dict__["opportunistic_onion"] = opportunistic_onion
            __props__.__dict__["origin_error_page_pass_thru"] = origin_error_page_pass_thru
            __props__.__dict__["origin_max_http_version"] = origin_max_http_version
            __props__.__dict__["origin_post_quantum_encryption"] = origin_post_quantum_encryption
            __props__.__dict__["prefetch_preload"] = prefetch_preload
            __props__.__dict__["proxy_read_timeout"] = proxy_read_timeout
            __props__.__dict__["pseudo_ipv4"] = pseudo_ipv4
            __props__.__dict__["response_buffering"] = response_buffering
            __props__.__dict__["script_load_optimization"] = script_load_optimization
            __props__.__dict__["security_header"] = security_header
            __props__.__dict__["server_side_exclude"] = server_side_exclude
            __props__.__dict__["ssl"] = ssl
            __props__.__dict__["tls_client_auth"] = tls_client_auth
            __props__.__dict__["true_client_ip_header"] = true_client_ip_header
            __props__.__dict__["waf"] = waf
            __props__.__dict__["websockets"] = websockets
            __props__.__dict__["certificate_status"] = None
        super(CisDomainSettings, __self__).__init__(
            'ibm:index/cisDomainSettings:CisDomainSettings',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            always_use_https: Optional[pulumi.Input[_builtins.str]] = None,
            automatic_https_rewrites: Optional[pulumi.Input[_builtins.str]] = None,
            brotli: Optional[pulumi.Input[_builtins.str]] = None,
            browser_check: Optional[pulumi.Input[_builtins.str]] = None,
            certificate_status: Optional[pulumi.Input[_builtins.str]] = None,
            challenge_ttl: Optional[pulumi.Input[_builtins.float]] = None,
            ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            cis_domain_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            cname_flattening: Optional[pulumi.Input[_builtins.str]] = None,
            dnssec: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            hotlink_protection: Optional[pulumi.Input[_builtins.str]] = None,
            http2: Optional[pulumi.Input[_builtins.str]] = None,
            image_load_optimization: Optional[pulumi.Input[_builtins.str]] = None,
            image_size_optimization: Optional[pulumi.Input[_builtins.str]] = None,
            ip_geolocation: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6: Optional[pulumi.Input[_builtins.str]] = None,
            log_retention: Optional[pulumi.Input[_builtins.bool]] = None,
            max_upload: Optional[pulumi.Input[_builtins.float]] = None,
            min_tls_version: Optional[pulumi.Input[_builtins.str]] = None,
            minify: Optional[pulumi.Input[Union['CisDomainSettingsMinifyArgs', 'CisDomainSettingsMinifyArgsDict']]] = None,
            mobile_redirect: Optional[pulumi.Input[Union['CisDomainSettingsMobileRedirectArgs', 'CisDomainSettingsMobileRedirectArgsDict']]] = None,
            opportunistic_encryption: Optional[pulumi.Input[_builtins.str]] = None,
            opportunistic_onion: Optional[pulumi.Input[_builtins.str]] = None,
            origin_error_page_pass_thru: Optional[pulumi.Input[_builtins.str]] = None,
            origin_max_http_version: Optional[pulumi.Input[_builtins.str]] = None,
            origin_post_quantum_encryption: Optional[pulumi.Input[_builtins.str]] = None,
            prefetch_preload: Optional[pulumi.Input[_builtins.str]] = None,
            proxy_read_timeout: Optional[pulumi.Input[_builtins.float]] = None,
            pseudo_ipv4: Optional[pulumi.Input[_builtins.str]] = None,
            response_buffering: Optional[pulumi.Input[_builtins.str]] = None,
            script_load_optimization: Optional[pulumi.Input[_builtins.str]] = None,
            security_header: Optional[pulumi.Input[Union['CisDomainSettingsSecurityHeaderArgs', 'CisDomainSettingsSecurityHeaderArgsDict']]] = None,
            server_side_exclude: Optional[pulumi.Input[_builtins.str]] = None,
            ssl: Optional[pulumi.Input[_builtins.str]] = None,
            tls_client_auth: Optional[pulumi.Input[_builtins.str]] = None,
            true_client_ip_header: Optional[pulumi.Input[_builtins.str]] = None,
            waf: Optional[pulumi.Input[_builtins.str]] = None,
            websockets: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisDomainSettings':
        """
        Get an existing CisDomainSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] always_use_https: always_use_https setting
        :param pulumi.Input[_builtins.str] automatic_https_rewrites: automatic_https_rewrites setting
        :param pulumi.Input[_builtins.str] brotli: brotli setting
        :param pulumi.Input[_builtins.str] browser_check: browser_check setting
        :param pulumi.Input[_builtins.str] certificate_status: Certificate status
        :param pulumi.Input[_builtins.float] challenge_ttl: Challenge TTL setting
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ciphers: Cipher settings
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] cname_flattening: cname_flattening setting
        :param pulumi.Input[_builtins.str] dnssec: DNS Sec setting
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] hotlink_protection: hotlink_protection setting
        :param pulumi.Input[_builtins.str] http2: http2 setting
        :param pulumi.Input[_builtins.str] image_load_optimization: image_load_optimization setting
        :param pulumi.Input[_builtins.str] image_size_optimization: image_size_optimization setting
        :param pulumi.Input[_builtins.str] ip_geolocation: ip_geolocation setting
        :param pulumi.Input[_builtins.str] ipv6: ipv6 setting
        :param pulumi.Input[_builtins.bool] log_retention: Log Retention setting
        :param pulumi.Input[_builtins.float] max_upload: Maximum upload
        :param pulumi.Input[_builtins.str] min_tls_version: Minimum version of TLS required
        :param pulumi.Input[Union['CisDomainSettingsMinifyArgs', 'CisDomainSettingsMinifyArgsDict']] minify: Minify setting
        :param pulumi.Input[_builtins.str] opportunistic_encryption: opportunistic_encryption setting
        :param pulumi.Input[_builtins.str] opportunistic_onion: Opportunistic onion setting
        :param pulumi.Input[_builtins.str] origin_error_page_pass_thru: origin_error_page_pass_thru setting
        :param pulumi.Input[_builtins.str] origin_max_http_version: Max HTTP version used to connect to the origin
        :param pulumi.Input[_builtins.str] origin_post_quantum_encryption: Enables post-quantum cryptography to connect to the origin
        :param pulumi.Input[_builtins.str] prefetch_preload: prefetch_preload setting
        :param pulumi.Input[_builtins.float] proxy_read_timeout: Update proxy read timeout setting
        :param pulumi.Input[_builtins.str] pseudo_ipv4: pseudo_ipv4 setting
        :param pulumi.Input[_builtins.str] response_buffering: response_buffering setting
        :param pulumi.Input[_builtins.str] script_load_optimization: script_load_optimization setting
        :param pulumi.Input[Union['CisDomainSettingsSecurityHeaderArgs', 'CisDomainSettingsSecurityHeaderArgsDict']] security_header: Security Header Setting
        :param pulumi.Input[_builtins.str] server_side_exclude: server_side_exclude setting
        :param pulumi.Input[_builtins.str] ssl: SSL/TLS setting
        :param pulumi.Input[_builtins.str] tls_client_auth: tls_client_auth setting
        :param pulumi.Input[_builtins.str] true_client_ip_header: true_client_ip_header setting
        :param pulumi.Input[_builtins.str] waf: WAF setting
        :param pulumi.Input[_builtins.str] websockets: websockets setting
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisDomainSettingsState.__new__(_CisDomainSettingsState)

        __props__.__dict__["always_use_https"] = always_use_https
        __props__.__dict__["automatic_https_rewrites"] = automatic_https_rewrites
        __props__.__dict__["brotli"] = brotli
        __props__.__dict__["browser_check"] = browser_check
        __props__.__dict__["certificate_status"] = certificate_status
        __props__.__dict__["challenge_ttl"] = challenge_ttl
        __props__.__dict__["ciphers"] = ciphers
        __props__.__dict__["cis_domain_settings_id"] = cis_domain_settings_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["cname_flattening"] = cname_flattening
        __props__.__dict__["dnssec"] = dnssec
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["hotlink_protection"] = hotlink_protection
        __props__.__dict__["http2"] = http2
        __props__.__dict__["image_load_optimization"] = image_load_optimization
        __props__.__dict__["image_size_optimization"] = image_size_optimization
        __props__.__dict__["ip_geolocation"] = ip_geolocation
        __props__.__dict__["ipv6"] = ipv6
        __props__.__dict__["log_retention"] = log_retention
        __props__.__dict__["max_upload"] = max_upload
        __props__.__dict__["min_tls_version"] = min_tls_version
        __props__.__dict__["minify"] = minify
        __props__.__dict__["mobile_redirect"] = mobile_redirect
        __props__.__dict__["opportunistic_encryption"] = opportunistic_encryption
        __props__.__dict__["opportunistic_onion"] = opportunistic_onion
        __props__.__dict__["origin_error_page_pass_thru"] = origin_error_page_pass_thru
        __props__.__dict__["origin_max_http_version"] = origin_max_http_version
        __props__.__dict__["origin_post_quantum_encryption"] = origin_post_quantum_encryption
        __props__.__dict__["prefetch_preload"] = prefetch_preload
        __props__.__dict__["proxy_read_timeout"] = proxy_read_timeout
        __props__.__dict__["pseudo_ipv4"] = pseudo_ipv4
        __props__.__dict__["response_buffering"] = response_buffering
        __props__.__dict__["script_load_optimization"] = script_load_optimization
        __props__.__dict__["security_header"] = security_header
        __props__.__dict__["server_side_exclude"] = server_side_exclude
        __props__.__dict__["ssl"] = ssl
        __props__.__dict__["tls_client_auth"] = tls_client_auth
        __props__.__dict__["true_client_ip_header"] = true_client_ip_header
        __props__.__dict__["waf"] = waf
        __props__.__dict__["websockets"] = websockets
        return CisDomainSettings(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="alwaysUseHttps")
    def always_use_https(self) -> pulumi.Output[_builtins.str]:
        """
        always_use_https setting
        """
        return pulumi.get(self, "always_use_https")

    @_builtins.property
    @pulumi.getter(name="automaticHttpsRewrites")
    def automatic_https_rewrites(self) -> pulumi.Output[_builtins.str]:
        """
        automatic_https_rewrites setting
        """
        return pulumi.get(self, "automatic_https_rewrites")

    @_builtins.property
    @pulumi.getter
    def brotli(self) -> pulumi.Output[_builtins.str]:
        """
        brotli setting
        """
        return pulumi.get(self, "brotli")

    @_builtins.property
    @pulumi.getter(name="browserCheck")
    def browser_check(self) -> pulumi.Output[_builtins.str]:
        """
        browser_check setting
        """
        return pulumi.get(self, "browser_check")

    @_builtins.property
    @pulumi.getter(name="certificateStatus")
    @_utilities.deprecated("""Deprecated""")
    def certificate_status(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate status
        """
        return pulumi.get(self, "certificate_status")

    @_builtins.property
    @pulumi.getter(name="challengeTtl")
    def challenge_ttl(self) -> pulumi.Output[_builtins.float]:
        """
        Challenge TTL setting
        """
        return pulumi.get(self, "challenge_ttl")

    @_builtins.property
    @pulumi.getter
    def ciphers(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Cipher settings
        """
        return pulumi.get(self, "ciphers")

    @_builtins.property
    @pulumi.getter(name="cisDomainSettingsId")
    def cis_domain_settings_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_domain_settings_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cnameFlattening")
    def cname_flattening(self) -> pulumi.Output[_builtins.str]:
        """
        cname_flattening setting
        """
        return pulumi.get(self, "cname_flattening")

    @_builtins.property
    @pulumi.getter
    def dnssec(self) -> pulumi.Output[_builtins.str]:
        """
        DNS Sec setting
        """
        return pulumi.get(self, "dnssec")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="hotlinkProtection")
    def hotlink_protection(self) -> pulumi.Output[_builtins.str]:
        """
        hotlink_protection setting
        """
        return pulumi.get(self, "hotlink_protection")

    @_builtins.property
    @pulumi.getter
    def http2(self) -> pulumi.Output[_builtins.str]:
        """
        http2 setting
        """
        return pulumi.get(self, "http2")

    @_builtins.property
    @pulumi.getter(name="imageLoadOptimization")
    def image_load_optimization(self) -> pulumi.Output[_builtins.str]:
        """
        image_load_optimization setting
        """
        return pulumi.get(self, "image_load_optimization")

    @_builtins.property
    @pulumi.getter(name="imageSizeOptimization")
    def image_size_optimization(self) -> pulumi.Output[_builtins.str]:
        """
        image_size_optimization setting
        """
        return pulumi.get(self, "image_size_optimization")

    @_builtins.property
    @pulumi.getter(name="ipGeolocation")
    def ip_geolocation(self) -> pulumi.Output[_builtins.str]:
        """
        ip_geolocation setting
        """
        return pulumi.get(self, "ip_geolocation")

    @_builtins.property
    @pulumi.getter
    def ipv6(self) -> pulumi.Output[_builtins.str]:
        """
        ipv6 setting
        """
        return pulumi.get(self, "ipv6")

    @_builtins.property
    @pulumi.getter(name="logRetention")
    def log_retention(self) -> pulumi.Output[_builtins.bool]:
        """
        Log Retention setting
        """
        return pulumi.get(self, "log_retention")

    @_builtins.property
    @pulumi.getter(name="maxUpload")
    def max_upload(self) -> pulumi.Output[_builtins.float]:
        """
        Maximum upload
        """
        return pulumi.get(self, "max_upload")

    @_builtins.property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Minimum version of TLS required
        """
        return pulumi.get(self, "min_tls_version")

    @_builtins.property
    @pulumi.getter
    def minify(self) -> pulumi.Output[Optional['outputs.CisDomainSettingsMinify']]:
        """
        Minify setting
        """
        return pulumi.get(self, "minify")

    @_builtins.property
    @pulumi.getter(name="mobileRedirect")
    def mobile_redirect(self) -> pulumi.Output[Optional['outputs.CisDomainSettingsMobileRedirect']]:
        return pulumi.get(self, "mobile_redirect")

    @_builtins.property
    @pulumi.getter(name="opportunisticEncryption")
    def opportunistic_encryption(self) -> pulumi.Output[_builtins.str]:
        """
        opportunistic_encryption setting
        """
        return pulumi.get(self, "opportunistic_encryption")

    @_builtins.property
    @pulumi.getter(name="opportunisticOnion")
    def opportunistic_onion(self) -> pulumi.Output[_builtins.str]:
        """
        Opportunistic onion setting
        """
        return pulumi.get(self, "opportunistic_onion")

    @_builtins.property
    @pulumi.getter(name="originErrorPagePassThru")
    def origin_error_page_pass_thru(self) -> pulumi.Output[_builtins.str]:
        """
        origin_error_page_pass_thru setting
        """
        return pulumi.get(self, "origin_error_page_pass_thru")

    @_builtins.property
    @pulumi.getter(name="originMaxHttpVersion")
    def origin_max_http_version(self) -> pulumi.Output[_builtins.str]:
        """
        Max HTTP version used to connect to the origin
        """
        return pulumi.get(self, "origin_max_http_version")

    @_builtins.property
    @pulumi.getter(name="originPostQuantumEncryption")
    def origin_post_quantum_encryption(self) -> pulumi.Output[_builtins.str]:
        """
        Enables post-quantum cryptography to connect to the origin
        """
        return pulumi.get(self, "origin_post_quantum_encryption")

    @_builtins.property
    @pulumi.getter(name="prefetchPreload")
    def prefetch_preload(self) -> pulumi.Output[_builtins.str]:
        """
        prefetch_preload setting
        """
        return pulumi.get(self, "prefetch_preload")

    @_builtins.property
    @pulumi.getter(name="proxyReadTimeout")
    def proxy_read_timeout(self) -> pulumi.Output[_builtins.float]:
        """
        Update proxy read timeout setting
        """
        return pulumi.get(self, "proxy_read_timeout")

    @_builtins.property
    @pulumi.getter(name="pseudoIpv4")
    def pseudo_ipv4(self) -> pulumi.Output[_builtins.str]:
        """
        pseudo_ipv4 setting
        """
        return pulumi.get(self, "pseudo_ipv4")

    @_builtins.property
    @pulumi.getter(name="responseBuffering")
    def response_buffering(self) -> pulumi.Output[_builtins.str]:
        """
        response_buffering setting
        """
        return pulumi.get(self, "response_buffering")

    @_builtins.property
    @pulumi.getter(name="scriptLoadOptimization")
    def script_load_optimization(self) -> pulumi.Output[_builtins.str]:
        """
        script_load_optimization setting
        """
        return pulumi.get(self, "script_load_optimization")

    @_builtins.property
    @pulumi.getter(name="securityHeader")
    def security_header(self) -> pulumi.Output[Optional['outputs.CisDomainSettingsSecurityHeader']]:
        """
        Security Header Setting
        """
        return pulumi.get(self, "security_header")

    @_builtins.property
    @pulumi.getter(name="serverSideExclude")
    def server_side_exclude(self) -> pulumi.Output[_builtins.str]:
        """
        server_side_exclude setting
        """
        return pulumi.get(self, "server_side_exclude")

    @_builtins.property
    @pulumi.getter
    def ssl(self) -> pulumi.Output[_builtins.str]:
        """
        SSL/TLS setting
        """
        return pulumi.get(self, "ssl")

    @_builtins.property
    @pulumi.getter(name="tlsClientAuth")
    def tls_client_auth(self) -> pulumi.Output[_builtins.str]:
        """
        tls_client_auth setting
        """
        return pulumi.get(self, "tls_client_auth")

    @_builtins.property
    @pulumi.getter(name="trueClientIpHeader")
    def true_client_ip_header(self) -> pulumi.Output[_builtins.str]:
        """
        true_client_ip_header setting
        """
        return pulumi.get(self, "true_client_ip_header")

    @_builtins.property
    @pulumi.getter
    def waf(self) -> pulumi.Output[_builtins.str]:
        """
        WAF setting
        """
        return pulumi.get(self, "waf")

    @_builtins.property
    @pulumi.getter
    def websockets(self) -> pulumi.Output[_builtins.str]:
        """
        websockets setting
        """
        return pulumi.get(self, "websockets")

