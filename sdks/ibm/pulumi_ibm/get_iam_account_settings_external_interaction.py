# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamAccountSettingsExternalInteractionResult',
    'AwaitableGetIamAccountSettingsExternalInteractionResult',
    'get_iam_account_settings_external_interaction',
    'get_iam_account_settings_external_interaction_output',
]

@pulumi.output_type
class GetIamAccountSettingsExternalInteractionResult:
    """
    A collection of values returned by getIamAccountSettingsExternalInteraction.
    """
    def __init__(__self__, accept_language=None, account_id=None, external_account_identity_interactions=None, id=None):
        if accept_language and not isinstance(accept_language, str):
            raise TypeError("Expected argument 'accept_language' to be a str")
        pulumi.set(__self__, "accept_language", accept_language)
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if external_account_identity_interactions and not isinstance(external_account_identity_interactions, list):
            raise TypeError("Expected argument 'external_account_identity_interactions' to be a list")
        pulumi.set(__self__, "external_account_identity_interactions", external_account_identity_interactions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="acceptLanguage")
    def accept_language(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "accept_language")

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="externalAccountIdentityInteractions")
    def external_account_identity_interactions(self) -> Sequence['outputs.GetIamAccountSettingsExternalInteractionExternalAccountIdentityInteractionResult']:
        return pulumi.get(self, "external_account_identity_interactions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")


class AwaitableGetIamAccountSettingsExternalInteractionResult(GetIamAccountSettingsExternalInteractionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamAccountSettingsExternalInteractionResult(
            accept_language=self.accept_language,
            account_id=self.account_id,
            external_account_identity_interactions=self.external_account_identity_interactions,
            id=self.id)


def get_iam_account_settings_external_interaction(accept_language: Optional[_builtins.str] = None,
                                                  account_id: Optional[_builtins.str] = None,
                                                  id: Optional[_builtins.str] = None,
                                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamAccountSettingsExternalInteractionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['acceptLanguage'] = accept_language
    __args__['accountId'] = account_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamAccountSettingsExternalInteraction:getIamAccountSettingsExternalInteraction', __args__, opts=opts, typ=GetIamAccountSettingsExternalInteractionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamAccountSettingsExternalInteractionResult(
        accept_language=pulumi.get(__ret__, 'accept_language'),
        account_id=pulumi.get(__ret__, 'account_id'),
        external_account_identity_interactions=pulumi.get(__ret__, 'external_account_identity_interactions'),
        id=pulumi.get(__ret__, 'id'))
def get_iam_account_settings_external_interaction_output(accept_language: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                         account_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                         id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamAccountSettingsExternalInteractionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['acceptLanguage'] = accept_language
    __args__['accountId'] = account_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamAccountSettingsExternalInteraction:getIamAccountSettingsExternalInteraction', __args__, opts=opts, typ=GetIamAccountSettingsExternalInteractionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamAccountSettingsExternalInteractionResult(
        accept_language=pulumi.get(__response__, 'accept_language'),
        account_id=pulumi.get(__response__, 'account_id'),
        external_account_identity_interactions=pulumi.get(__response__, 'external_account_identity_interactions'),
        id=pulumi.get(__response__, 'id')))
