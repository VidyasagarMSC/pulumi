# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['MqcloudApplicationArgs', 'MqcloudApplication']

@pulumi.input_type
class MqcloudApplicationArgs:
    def __init__(__self__, *,
                 service_instance_guid: pulumi.Input[_builtins.str],
                 mqcloud_application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MqcloudApplication resource.
        :param pulumi.Input[_builtins.str] service_instance_guid: The GUID that uniquely identifies the MQaaS service instance.
        :param pulumi.Input[_builtins.str] name: The name of the application - conforming to MQ rules.
        """
        pulumi.set(__self__, "service_instance_guid", service_instance_guid)
        if mqcloud_application_id is not None:
            pulumi.set(__self__, "mqcloud_application_id", mqcloud_application_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID that uniquely identifies the MQaaS service instance.
        """
        return pulumi.get(self, "service_instance_guid")

    @service_instance_guid.setter
    def service_instance_guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_instance_guid", value)

    @_builtins.property
    @pulumi.getter(name="mqcloudApplicationId")
    def mqcloud_application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "mqcloud_application_id")

    @mqcloud_application_id.setter
    def mqcloud_application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mqcloud_application_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the application - conforming to MQ rules.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _MqcloudApplicationState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 create_api_key_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 mqcloud_application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MqcloudApplication resources.
        :param pulumi.Input[_builtins.str] application_id: The ID of the application which was allocated on creation, and can be used for delete calls.
        :param pulumi.Input[_builtins.str] create_api_key_uri: The URI to create a new apikey for the application.
        :param pulumi.Input[_builtins.str] href: The URL for this application.
        :param pulumi.Input[_builtins.str] name: The name of the application - conforming to MQ rules.
        :param pulumi.Input[_builtins.str] service_instance_guid: The GUID that uniquely identifies the MQaaS service instance.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if create_api_key_uri is not None:
            pulumi.set(__self__, "create_api_key_uri", create_api_key_uri)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if mqcloud_application_id is not None:
            pulumi.set(__self__, "mqcloud_application_id", mqcloud_application_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_instance_guid is not None:
            pulumi.set(__self__, "service_instance_guid", service_instance_guid)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the application which was allocated on creation, and can be used for delete calls.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_id", value)

    @_builtins.property
    @pulumi.getter(name="createApiKeyUri")
    def create_api_key_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URI to create a new apikey for the application.
        """
        return pulumi.get(self, "create_api_key_uri")

    @create_api_key_uri.setter
    def create_api_key_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_api_key_uri", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this application.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="mqcloudApplicationId")
    def mqcloud_application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "mqcloud_application_id")

    @mqcloud_application_id.setter
    def mqcloud_application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mqcloud_application_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the application - conforming to MQ rules.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID that uniquely identifies the MQaaS service instance.
        """
        return pulumi.get(self, "service_instance_guid")

    @service_instance_guid.setter
    def service_instance_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_instance_guid", value)


@pulumi.type_token("ibm:index/mqcloudApplication:MqcloudApplication")
class MqcloudApplication(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mqcloud_application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a MqcloudApplication resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name of the application - conforming to MQ rules.
        :param pulumi.Input[_builtins.str] service_instance_guid: The GUID that uniquely identifies the MQaaS service instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MqcloudApplicationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MqcloudApplication resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MqcloudApplicationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MqcloudApplicationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mqcloud_application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MqcloudApplicationArgs.__new__(MqcloudApplicationArgs)

            __props__.__dict__["mqcloud_application_id"] = mqcloud_application_id
            __props__.__dict__["name"] = name
            if service_instance_guid is None and not opts.urn:
                raise TypeError("Missing required property 'service_instance_guid'")
            __props__.__dict__["service_instance_guid"] = service_instance_guid
            __props__.__dict__["application_id"] = None
            __props__.__dict__["create_api_key_uri"] = None
            __props__.__dict__["href"] = None
        super(MqcloudApplication, __self__).__init__(
            'ibm:index/mqcloudApplication:MqcloudApplication',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[_builtins.str]] = None,
            create_api_key_uri: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            mqcloud_application_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None) -> 'MqcloudApplication':
        """
        Get an existing MqcloudApplication resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_id: The ID of the application which was allocated on creation, and can be used for delete calls.
        :param pulumi.Input[_builtins.str] create_api_key_uri: The URI to create a new apikey for the application.
        :param pulumi.Input[_builtins.str] href: The URL for this application.
        :param pulumi.Input[_builtins.str] name: The name of the application - conforming to MQ rules.
        :param pulumi.Input[_builtins.str] service_instance_guid: The GUID that uniquely identifies the MQaaS service instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MqcloudApplicationState.__new__(_MqcloudApplicationState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["create_api_key_uri"] = create_api_key_uri
        __props__.__dict__["href"] = href
        __props__.__dict__["mqcloud_application_id"] = mqcloud_application_id
        __props__.__dict__["name"] = name
        __props__.__dict__["service_instance_guid"] = service_instance_guid
        return MqcloudApplication(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the application which was allocated on creation, and can be used for delete calls.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="createApiKeyUri")
    def create_api_key_uri(self) -> pulumi.Output[_builtins.str]:
        """
        The URI to create a new apikey for the application.
        """
        return pulumi.get(self, "create_api_key_uri")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this application.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="mqcloudApplicationId")
    def mqcloud_application_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "mqcloud_application_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the application - conforming to MQ rules.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID that uniquely identifies the MQaaS service instance.
        """
        return pulumi.get(self, "service_instance_guid")

