# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetOrgQuotaResult',
    'AwaitableGetOrgQuotaResult',
    'get_org_quota',
    'get_org_quota_output',
]

@pulumi.output_type
class GetOrgQuotaResult:
    """
    A collection of values returned by getOrgQuota.
    """
    def __init__(__self__, app_instance_limit=None, app_tasks_limit=None, id=None, instance_memory_limit=None, memory_limit=None, name=None, non_basic_services_allowed=None, total_private_domains=None, total_reserved_route_ports=None, total_routes=None, total_service_keys=None, total_services=None, trial_db_allowed=None):
        if app_instance_limit and not isinstance(app_instance_limit, float):
            raise TypeError("Expected argument 'app_instance_limit' to be a float")
        pulumi.set(__self__, "app_instance_limit", app_instance_limit)
        if app_tasks_limit and not isinstance(app_tasks_limit, float):
            raise TypeError("Expected argument 'app_tasks_limit' to be a float")
        pulumi.set(__self__, "app_tasks_limit", app_tasks_limit)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_memory_limit and not isinstance(instance_memory_limit, float):
            raise TypeError("Expected argument 'instance_memory_limit' to be a float")
        pulumi.set(__self__, "instance_memory_limit", instance_memory_limit)
        if memory_limit and not isinstance(memory_limit, float):
            raise TypeError("Expected argument 'memory_limit' to be a float")
        pulumi.set(__self__, "memory_limit", memory_limit)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if non_basic_services_allowed and not isinstance(non_basic_services_allowed, bool):
            raise TypeError("Expected argument 'non_basic_services_allowed' to be a bool")
        pulumi.set(__self__, "non_basic_services_allowed", non_basic_services_allowed)
        if total_private_domains and not isinstance(total_private_domains, float):
            raise TypeError("Expected argument 'total_private_domains' to be a float")
        pulumi.set(__self__, "total_private_domains", total_private_domains)
        if total_reserved_route_ports and not isinstance(total_reserved_route_ports, float):
            raise TypeError("Expected argument 'total_reserved_route_ports' to be a float")
        pulumi.set(__self__, "total_reserved_route_ports", total_reserved_route_ports)
        if total_routes and not isinstance(total_routes, float):
            raise TypeError("Expected argument 'total_routes' to be a float")
        pulumi.set(__self__, "total_routes", total_routes)
        if total_service_keys and not isinstance(total_service_keys, float):
            raise TypeError("Expected argument 'total_service_keys' to be a float")
        pulumi.set(__self__, "total_service_keys", total_service_keys)
        if total_services and not isinstance(total_services, float):
            raise TypeError("Expected argument 'total_services' to be a float")
        pulumi.set(__self__, "total_services", total_services)
        if trial_db_allowed and not isinstance(trial_db_allowed, bool):
            raise TypeError("Expected argument 'trial_db_allowed' to be a bool")
        pulumi.set(__self__, "trial_db_allowed", trial_db_allowed)

    @_builtins.property
    @pulumi.getter(name="appInstanceLimit")
    def app_instance_limit(self) -> _builtins.float:
        return pulumi.get(self, "app_instance_limit")

    @_builtins.property
    @pulumi.getter(name="appTasksLimit")
    def app_tasks_limit(self) -> _builtins.float:
        return pulumi.get(self, "app_tasks_limit")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceMemoryLimit")
    def instance_memory_limit(self) -> _builtins.float:
        return pulumi.get(self, "instance_memory_limit")

    @_builtins.property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> _builtins.float:
        return pulumi.get(self, "memory_limit")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nonBasicServicesAllowed")
    def non_basic_services_allowed(self) -> _builtins.bool:
        return pulumi.get(self, "non_basic_services_allowed")

    @_builtins.property
    @pulumi.getter(name="totalPrivateDomains")
    def total_private_domains(self) -> _builtins.float:
        return pulumi.get(self, "total_private_domains")

    @_builtins.property
    @pulumi.getter(name="totalReservedRoutePorts")
    def total_reserved_route_ports(self) -> _builtins.float:
        return pulumi.get(self, "total_reserved_route_ports")

    @_builtins.property
    @pulumi.getter(name="totalRoutes")
    def total_routes(self) -> _builtins.float:
        return pulumi.get(self, "total_routes")

    @_builtins.property
    @pulumi.getter(name="totalServiceKeys")
    def total_service_keys(self) -> _builtins.float:
        return pulumi.get(self, "total_service_keys")

    @_builtins.property
    @pulumi.getter(name="totalServices")
    def total_services(self) -> _builtins.float:
        return pulumi.get(self, "total_services")

    @_builtins.property
    @pulumi.getter(name="trialDbAllowed")
    def trial_db_allowed(self) -> _builtins.bool:
        return pulumi.get(self, "trial_db_allowed")


class AwaitableGetOrgQuotaResult(GetOrgQuotaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgQuotaResult(
            app_instance_limit=self.app_instance_limit,
            app_tasks_limit=self.app_tasks_limit,
            id=self.id,
            instance_memory_limit=self.instance_memory_limit,
            memory_limit=self.memory_limit,
            name=self.name,
            non_basic_services_allowed=self.non_basic_services_allowed,
            total_private_domains=self.total_private_domains,
            total_reserved_route_ports=self.total_reserved_route_ports,
            total_routes=self.total_routes,
            total_service_keys=self.total_service_keys,
            total_services=self.total_services,
            trial_db_allowed=self.trial_db_allowed)


def get_org_quota(id: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgQuotaResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getOrgQuota:getOrgQuota', __args__, opts=opts, typ=GetOrgQuotaResult, package_ref=_utilities.get_package()).value

    return AwaitableGetOrgQuotaResult(
        app_instance_limit=pulumi.get(__ret__, 'app_instance_limit'),
        app_tasks_limit=pulumi.get(__ret__, 'app_tasks_limit'),
        id=pulumi.get(__ret__, 'id'),
        instance_memory_limit=pulumi.get(__ret__, 'instance_memory_limit'),
        memory_limit=pulumi.get(__ret__, 'memory_limit'),
        name=pulumi.get(__ret__, 'name'),
        non_basic_services_allowed=pulumi.get(__ret__, 'non_basic_services_allowed'),
        total_private_domains=pulumi.get(__ret__, 'total_private_domains'),
        total_reserved_route_ports=pulumi.get(__ret__, 'total_reserved_route_ports'),
        total_routes=pulumi.get(__ret__, 'total_routes'),
        total_service_keys=pulumi.get(__ret__, 'total_service_keys'),
        total_services=pulumi.get(__ret__, 'total_services'),
        trial_db_allowed=pulumi.get(__ret__, 'trial_db_allowed'))
def get_org_quota_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrgQuotaResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getOrgQuota:getOrgQuota', __args__, opts=opts, typ=GetOrgQuotaResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetOrgQuotaResult(
        app_instance_limit=pulumi.get(__response__, 'app_instance_limit'),
        app_tasks_limit=pulumi.get(__response__, 'app_tasks_limit'),
        id=pulumi.get(__response__, 'id'),
        instance_memory_limit=pulumi.get(__response__, 'instance_memory_limit'),
        memory_limit=pulumi.get(__response__, 'memory_limit'),
        name=pulumi.get(__response__, 'name'),
        non_basic_services_allowed=pulumi.get(__response__, 'non_basic_services_allowed'),
        total_private_domains=pulumi.get(__response__, 'total_private_domains'),
        total_reserved_route_ports=pulumi.get(__response__, 'total_reserved_route_ports'),
        total_routes=pulumi.get(__response__, 'total_routes'),
        total_service_keys=pulumi.get(__response__, 'total_service_keys'),
        total_services=pulumi.get(__response__, 'total_services'),
        trial_db_allowed=pulumi.get(__response__, 'trial_db_allowed')))
