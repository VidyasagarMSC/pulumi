# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CisHealthcheckArgs', 'CisHealthcheck']

@pulumi.input_type
class CisHealthcheckArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 allow_insecure: Optional[pulumi.Input[_builtins.bool]] = None,
                 cis_healthcheck_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expected_body: Optional[pulumi.Input[_builtins.str]] = None,
                 expected_codes: Optional[pulumi.Input[_builtins.str]] = None,
                 follow_redirects: Optional[pulumi.Input[_builtins.bool]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['CisHealthcheckHeaderArgs']]]] = None,
                 interval: Optional[pulumi.Input[_builtins.float]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 retries: Optional[pulumi.Input[_builtins.float]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisHealthcheck resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.bool] allow_insecure: allow_insecure
        :param pulumi.Input[_builtins.str] description: description
        :param pulumi.Input[_builtins.str] expected_body: expected_body
        :param pulumi.Input[_builtins.str] expected_codes: expected_codes
        :param pulumi.Input[_builtins.bool] follow_redirects: follow_redirects
        :param pulumi.Input[_builtins.float] interval: interval
        :param pulumi.Input[_builtins.str] method: method
        :param pulumi.Input[_builtins.str] path: path
        :param pulumi.Input[_builtins.float] port: port number
        :param pulumi.Input[_builtins.float] retries: retries
        :param pulumi.Input[_builtins.float] timeout: timeout
        :param pulumi.Input[_builtins.str] type: type
        """
        pulumi.set(__self__, "cis_id", cis_id)
        if allow_insecure is not None:
            pulumi.set(__self__, "allow_insecure", allow_insecure)
        if cis_healthcheck_id is not None:
            pulumi.set(__self__, "cis_healthcheck_id", cis_healthcheck_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expected_body is not None:
            pulumi.set(__self__, "expected_body", expected_body)
        if expected_codes is not None:
            pulumi.set(__self__, "expected_codes", expected_codes)
        if follow_redirects is not None:
            pulumi.set(__self__, "follow_redirects", follow_redirects)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        allow_insecure
        """
        return pulumi.get(self, "allow_insecure")

    @allow_insecure.setter
    def allow_insecure(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_insecure", value)

    @_builtins.property
    @pulumi.getter(name="cisHealthcheckId")
    def cis_healthcheck_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_healthcheck_id")

    @cis_healthcheck_id.setter
    def cis_healthcheck_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_healthcheck_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="expectedBody")
    def expected_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        expected_body
        """
        return pulumi.get(self, "expected_body")

    @expected_body.setter
    def expected_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expected_body", value)

    @_builtins.property
    @pulumi.getter(name="expectedCodes")
    def expected_codes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        expected_codes
        """
        return pulumi.get(self, "expected_codes")

    @expected_codes.setter
    def expected_codes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expected_codes", value)

    @_builtins.property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        follow_redirects
        """
        return pulumi.get(self, "follow_redirects")

    @follow_redirects.setter
    def follow_redirects(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "follow_redirects", value)

    @_builtins.property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CisHealthcheckHeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CisHealthcheckHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        interval
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        method
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        path
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        retries
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retries", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        timeout
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _CisHealthcheckState:
    def __init__(__self__, *,
                 allow_insecure: Optional[pulumi.Input[_builtins.bool]] = None,
                 cis_healthcheck_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 create_on: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expected_body: Optional[pulumi.Input[_builtins.str]] = None,
                 expected_codes: Optional[pulumi.Input[_builtins.str]] = None,
                 follow_redirects: Optional[pulumi.Input[_builtins.bool]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['CisHealthcheckHeaderArgs']]]] = None,
                 interval: Optional[pulumi.Input[_builtins.float]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 modified_on: Optional[pulumi.Input[_builtins.str]] = None,
                 monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 retries: Optional[pulumi.Input[_builtins.float]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisHealthcheck resources.
        :param pulumi.Input[_builtins.bool] allow_insecure: allow_insecure
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] description: description
        :param pulumi.Input[_builtins.str] expected_body: expected_body
        :param pulumi.Input[_builtins.str] expected_codes: expected_codes
        :param pulumi.Input[_builtins.bool] follow_redirects: follow_redirects
        :param pulumi.Input[_builtins.float] interval: interval
        :param pulumi.Input[_builtins.str] method: method
        :param pulumi.Input[_builtins.str] monitor_id: GLB Monitor/Health check id
        :param pulumi.Input[_builtins.str] path: path
        :param pulumi.Input[_builtins.float] port: port number
        :param pulumi.Input[_builtins.float] retries: retries
        :param pulumi.Input[_builtins.float] timeout: timeout
        :param pulumi.Input[_builtins.str] type: type
        """
        if allow_insecure is not None:
            pulumi.set(__self__, "allow_insecure", allow_insecure)
        if cis_healthcheck_id is not None:
            pulumi.set(__self__, "cis_healthcheck_id", cis_healthcheck_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if create_on is not None:
            pulumi.set(__self__, "create_on", create_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expected_body is not None:
            pulumi.set(__self__, "expected_body", expected_body)
        if expected_codes is not None:
            pulumi.set(__self__, "expected_codes", expected_codes)
        if follow_redirects is not None:
            pulumi.set(__self__, "follow_redirects", follow_redirects)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if monitor_id is not None:
            pulumi.set(__self__, "monitor_id", monitor_id)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        allow_insecure
        """
        return pulumi.get(self, "allow_insecure")

    @allow_insecure.setter
    def allow_insecure(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_insecure", value)

    @_builtins.property
    @pulumi.getter(name="cisHealthcheckId")
    def cis_healthcheck_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_healthcheck_id")

    @cis_healthcheck_id.setter
    def cis_healthcheck_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_healthcheck_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="createOn")
    def create_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "create_on")

    @create_on.setter
    def create_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_on", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="expectedBody")
    def expected_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        expected_body
        """
        return pulumi.get(self, "expected_body")

    @expected_body.setter
    def expected_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expected_body", value)

    @_builtins.property
    @pulumi.getter(name="expectedCodes")
    def expected_codes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        expected_codes
        """
        return pulumi.get(self, "expected_codes")

    @expected_codes.setter
    def expected_codes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expected_codes", value)

    @_builtins.property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        follow_redirects
        """
        return pulumi.get(self, "follow_redirects")

    @follow_redirects.setter
    def follow_redirects(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "follow_redirects", value)

    @_builtins.property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CisHealthcheckHeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CisHealthcheckHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        interval
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        method
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @_builtins.property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        GLB Monitor/Health check id
        """
        return pulumi.get(self, "monitor_id")

    @monitor_id.setter
    def monitor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "monitor_id", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        path
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        retries
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retries", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        timeout
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("ibm:index/cisHealthcheck:CisHealthcheck")
class CisHealthcheck(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_insecure: Optional[pulumi.Input[_builtins.bool]] = None,
                 cis_healthcheck_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expected_body: Optional[pulumi.Input[_builtins.str]] = None,
                 expected_codes: Optional[pulumi.Input[_builtins.str]] = None,
                 follow_redirects: Optional[pulumi.Input[_builtins.bool]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisHealthcheckHeaderArgs', 'CisHealthcheckHeaderArgsDict']]]]] = None,
                 interval: Optional[pulumi.Input[_builtins.float]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 retries: Optional[pulumi.Input[_builtins.float]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisHealthcheck resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_insecure: allow_insecure
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] description: description
        :param pulumi.Input[_builtins.str] expected_body: expected_body
        :param pulumi.Input[_builtins.str] expected_codes: expected_codes
        :param pulumi.Input[_builtins.bool] follow_redirects: follow_redirects
        :param pulumi.Input[_builtins.float] interval: interval
        :param pulumi.Input[_builtins.str] method: method
        :param pulumi.Input[_builtins.str] path: path
        :param pulumi.Input[_builtins.float] port: port number
        :param pulumi.Input[_builtins.float] retries: retries
        :param pulumi.Input[_builtins.float] timeout: timeout
        :param pulumi.Input[_builtins.str] type: type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisHealthcheckArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisHealthcheck resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisHealthcheckArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisHealthcheckArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_insecure: Optional[pulumi.Input[_builtins.bool]] = None,
                 cis_healthcheck_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expected_body: Optional[pulumi.Input[_builtins.str]] = None,
                 expected_codes: Optional[pulumi.Input[_builtins.str]] = None,
                 follow_redirects: Optional[pulumi.Input[_builtins.bool]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisHealthcheckHeaderArgs', 'CisHealthcheckHeaderArgsDict']]]]] = None,
                 interval: Optional[pulumi.Input[_builtins.float]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 retries: Optional[pulumi.Input[_builtins.float]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisHealthcheckArgs.__new__(CisHealthcheckArgs)

            __props__.__dict__["allow_insecure"] = allow_insecure
            __props__.__dict__["cis_healthcheck_id"] = cis_healthcheck_id
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["description"] = description
            __props__.__dict__["expected_body"] = expected_body
            __props__.__dict__["expected_codes"] = expected_codes
            __props__.__dict__["follow_redirects"] = follow_redirects
            __props__.__dict__["headers"] = headers
            __props__.__dict__["interval"] = interval
            __props__.__dict__["method"] = method
            __props__.__dict__["path"] = path
            __props__.__dict__["port"] = port
            __props__.__dict__["retries"] = retries
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["type"] = type
            __props__.__dict__["create_on"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["monitor_id"] = None
        super(CisHealthcheck, __self__).__init__(
            'ibm:index/cisHealthcheck:CisHealthcheck',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_insecure: Optional[pulumi.Input[_builtins.bool]] = None,
            cis_healthcheck_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            create_on: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            expected_body: Optional[pulumi.Input[_builtins.str]] = None,
            expected_codes: Optional[pulumi.Input[_builtins.str]] = None,
            follow_redirects: Optional[pulumi.Input[_builtins.bool]] = None,
            headers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisHealthcheckHeaderArgs', 'CisHealthcheckHeaderArgsDict']]]]] = None,
            interval: Optional[pulumi.Input[_builtins.float]] = None,
            method: Optional[pulumi.Input[_builtins.str]] = None,
            modified_on: Optional[pulumi.Input[_builtins.str]] = None,
            monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.float]] = None,
            retries: Optional[pulumi.Input[_builtins.float]] = None,
            timeout: Optional[pulumi.Input[_builtins.float]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisHealthcheck':
        """
        Get an existing CisHealthcheck resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_insecure: allow_insecure
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] description: description
        :param pulumi.Input[_builtins.str] expected_body: expected_body
        :param pulumi.Input[_builtins.str] expected_codes: expected_codes
        :param pulumi.Input[_builtins.bool] follow_redirects: follow_redirects
        :param pulumi.Input[_builtins.float] interval: interval
        :param pulumi.Input[_builtins.str] method: method
        :param pulumi.Input[_builtins.str] monitor_id: GLB Monitor/Health check id
        :param pulumi.Input[_builtins.str] path: path
        :param pulumi.Input[_builtins.float] port: port number
        :param pulumi.Input[_builtins.float] retries: retries
        :param pulumi.Input[_builtins.float] timeout: timeout
        :param pulumi.Input[_builtins.str] type: type
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisHealthcheckState.__new__(_CisHealthcheckState)

        __props__.__dict__["allow_insecure"] = allow_insecure
        __props__.__dict__["cis_healthcheck_id"] = cis_healthcheck_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["create_on"] = create_on
        __props__.__dict__["description"] = description
        __props__.__dict__["expected_body"] = expected_body
        __props__.__dict__["expected_codes"] = expected_codes
        __props__.__dict__["follow_redirects"] = follow_redirects
        __props__.__dict__["headers"] = headers
        __props__.__dict__["interval"] = interval
        __props__.__dict__["method"] = method
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["monitor_id"] = monitor_id
        __props__.__dict__["path"] = path
        __props__.__dict__["port"] = port
        __props__.__dict__["retries"] = retries
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["type"] = type
        return CisHealthcheck(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        allow_insecure
        """
        return pulumi.get(self, "allow_insecure")

    @_builtins.property
    @pulumi.getter(name="cisHealthcheckId")
    def cis_healthcheck_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_healthcheck_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="createOn")
    def create_on(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "create_on")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="expectedBody")
    def expected_body(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        expected_body
        """
        return pulumi.get(self, "expected_body")

    @_builtins.property
    @pulumi.getter(name="expectedCodes")
    def expected_codes(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        expected_codes
        """
        return pulumi.get(self, "expected_codes")

    @_builtins.property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        follow_redirects
        """
        return pulumi.get(self, "follow_redirects")

    @_builtins.property
    @pulumi.getter
    def headers(self) -> pulumi.Output[Optional[Sequence['outputs.CisHealthcheckHeader']]]:
        return pulumi.get(self, "headers")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        interval
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def method(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        method
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> pulumi.Output[_builtins.str]:
        """
        GLB Monitor/Health check id
        """
        return pulumi.get(self, "monitor_id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        path
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.float]:
        """
        port number
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def retries(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        retries
        """
        return pulumi.get(self, "retries")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        timeout
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        type
        """
        return pulumi.get(self, "type")

