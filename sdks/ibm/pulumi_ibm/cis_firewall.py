# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CisFirewallArgs', 'CisFirewall']

@pulumi.input_type
class CisFirewallArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 firewall_type: pulumi.Input[_builtins.str],
                 access_rule: Optional[pulumi.Input['CisFirewallAccessRuleArgs']] = None,
                 cis_firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lockdown: Optional[pulumi.Input['CisFirewallLockdownArgs']] = None,
                 ua_rule: Optional[pulumi.Input['CisFirewallUaRuleArgs']] = None):
        """
        The set of arguments for constructing a CisFirewall resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS object id
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] firewall_type: Type of firewall.Allowable values are access-rules,ua-rules,lockdowns
        :param pulumi.Input['CisFirewallAccessRuleArgs'] access_rule: Access Rule Data
        :param pulumi.Input['CisFirewallLockdownArgs'] lockdown: Lockdown Data
        :param pulumi.Input['CisFirewallUaRuleArgs'] ua_rule: User Agent Rule Data
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "firewall_type", firewall_type)
        if access_rule is not None:
            pulumi.set(__self__, "access_rule", access_rule)
        if cis_firewall_id is not None:
            pulumi.set(__self__, "cis_firewall_id", cis_firewall_id)
        if lockdown is not None:
            pulumi.set(__self__, "lockdown", lockdown)
        if ua_rule is not None:
            pulumi.set(__self__, "ua_rule", ua_rule)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS object id
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of firewall.Allowable values are access-rules,ua-rules,lockdowns
        """
        return pulumi.get(self, "firewall_type")

    @firewall_type.setter
    def firewall_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "firewall_type", value)

    @_builtins.property
    @pulumi.getter(name="accessRule")
    def access_rule(self) -> Optional[pulumi.Input['CisFirewallAccessRuleArgs']]:
        """
        Access Rule Data
        """
        return pulumi.get(self, "access_rule")

    @access_rule.setter
    def access_rule(self, value: Optional[pulumi.Input['CisFirewallAccessRuleArgs']]):
        pulumi.set(self, "access_rule", value)

    @_builtins.property
    @pulumi.getter(name="cisFirewallId")
    def cis_firewall_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_firewall_id")

    @cis_firewall_id.setter
    def cis_firewall_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_firewall_id", value)

    @_builtins.property
    @pulumi.getter
    def lockdown(self) -> Optional[pulumi.Input['CisFirewallLockdownArgs']]:
        """
        Lockdown Data
        """
        return pulumi.get(self, "lockdown")

    @lockdown.setter
    def lockdown(self, value: Optional[pulumi.Input['CisFirewallLockdownArgs']]):
        pulumi.set(self, "lockdown", value)

    @_builtins.property
    @pulumi.getter(name="uaRule")
    def ua_rule(self) -> Optional[pulumi.Input['CisFirewallUaRuleArgs']]:
        """
        User Agent Rule Data
        """
        return pulumi.get(self, "ua_rule")

    @ua_rule.setter
    def ua_rule(self, value: Optional[pulumi.Input['CisFirewallUaRuleArgs']]):
        pulumi.set(self, "ua_rule", value)


@pulumi.input_type
class _CisFirewallState:
    def __init__(__self__, *,
                 access_rule: Optional[pulumi.Input['CisFirewallAccessRuleArgs']] = None,
                 cis_firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
                 lockdown: Optional[pulumi.Input['CisFirewallLockdownArgs']] = None,
                 ua_rule: Optional[pulumi.Input['CisFirewallUaRuleArgs']] = None):
        """
        Input properties used for looking up and filtering CisFirewall resources.
        :param pulumi.Input['CisFirewallAccessRuleArgs'] access_rule: Access Rule Data
        :param pulumi.Input[_builtins.str] cis_id: CIS object id
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] firewall_type: Type of firewall.Allowable values are access-rules,ua-rules,lockdowns
        :param pulumi.Input['CisFirewallLockdownArgs'] lockdown: Lockdown Data
        :param pulumi.Input['CisFirewallUaRuleArgs'] ua_rule: User Agent Rule Data
        """
        if access_rule is not None:
            pulumi.set(__self__, "access_rule", access_rule)
        if cis_firewall_id is not None:
            pulumi.set(__self__, "cis_firewall_id", cis_firewall_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if firewall_type is not None:
            pulumi.set(__self__, "firewall_type", firewall_type)
        if lockdown is not None:
            pulumi.set(__self__, "lockdown", lockdown)
        if ua_rule is not None:
            pulumi.set(__self__, "ua_rule", ua_rule)

    @_builtins.property
    @pulumi.getter(name="accessRule")
    def access_rule(self) -> Optional[pulumi.Input['CisFirewallAccessRuleArgs']]:
        """
        Access Rule Data
        """
        return pulumi.get(self, "access_rule")

    @access_rule.setter
    def access_rule(self, value: Optional[pulumi.Input['CisFirewallAccessRuleArgs']]):
        pulumi.set(self, "access_rule", value)

    @_builtins.property
    @pulumi.getter(name="cisFirewallId")
    def cis_firewall_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_firewall_id")

    @cis_firewall_id.setter
    def cis_firewall_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_firewall_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS object id
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of firewall.Allowable values are access-rules,ua-rules,lockdowns
        """
        return pulumi.get(self, "firewall_type")

    @firewall_type.setter
    def firewall_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "firewall_type", value)

    @_builtins.property
    @pulumi.getter
    def lockdown(self) -> Optional[pulumi.Input['CisFirewallLockdownArgs']]:
        """
        Lockdown Data
        """
        return pulumi.get(self, "lockdown")

    @lockdown.setter
    def lockdown(self, value: Optional[pulumi.Input['CisFirewallLockdownArgs']]):
        pulumi.set(self, "lockdown", value)

    @_builtins.property
    @pulumi.getter(name="uaRule")
    def ua_rule(self) -> Optional[pulumi.Input['CisFirewallUaRuleArgs']]:
        """
        User Agent Rule Data
        """
        return pulumi.get(self, "ua_rule")

    @ua_rule.setter
    def ua_rule(self, value: Optional[pulumi.Input['CisFirewallUaRuleArgs']]):
        pulumi.set(self, "ua_rule", value)


@pulumi.type_token("ibm:index/cisFirewall:CisFirewall")
class CisFirewall(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_rule: Optional[pulumi.Input[Union['CisFirewallAccessRuleArgs', 'CisFirewallAccessRuleArgsDict']]] = None,
                 cis_firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
                 lockdown: Optional[pulumi.Input[Union['CisFirewallLockdownArgs', 'CisFirewallLockdownArgsDict']]] = None,
                 ua_rule: Optional[pulumi.Input[Union['CisFirewallUaRuleArgs', 'CisFirewallUaRuleArgsDict']]] = None,
                 __props__=None):
        """
        Create a CisFirewall resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CisFirewallAccessRuleArgs', 'CisFirewallAccessRuleArgsDict']] access_rule: Access Rule Data
        :param pulumi.Input[_builtins.str] cis_id: CIS object id
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] firewall_type: Type of firewall.Allowable values are access-rules,ua-rules,lockdowns
        :param pulumi.Input[Union['CisFirewallLockdownArgs', 'CisFirewallLockdownArgsDict']] lockdown: Lockdown Data
        :param pulumi.Input[Union['CisFirewallUaRuleArgs', 'CisFirewallUaRuleArgsDict']] ua_rule: User Agent Rule Data
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisFirewallArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisFirewall resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisFirewallArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisFirewallArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_rule: Optional[pulumi.Input[Union['CisFirewallAccessRuleArgs', 'CisFirewallAccessRuleArgsDict']]] = None,
                 cis_firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
                 lockdown: Optional[pulumi.Input[Union['CisFirewallLockdownArgs', 'CisFirewallLockdownArgsDict']]] = None,
                 ua_rule: Optional[pulumi.Input[Union['CisFirewallUaRuleArgs', 'CisFirewallUaRuleArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisFirewallArgs.__new__(CisFirewallArgs)

            __props__.__dict__["access_rule"] = access_rule
            __props__.__dict__["cis_firewall_id"] = cis_firewall_id
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            if firewall_type is None and not opts.urn:
                raise TypeError("Missing required property 'firewall_type'")
            __props__.__dict__["firewall_type"] = firewall_type
            __props__.__dict__["lockdown"] = lockdown
            __props__.__dict__["ua_rule"] = ua_rule
        super(CisFirewall, __self__).__init__(
            'ibm:index/cisFirewall:CisFirewall',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_rule: Optional[pulumi.Input[Union['CisFirewallAccessRuleArgs', 'CisFirewallAccessRuleArgsDict']]] = None,
            cis_firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
            lockdown: Optional[pulumi.Input[Union['CisFirewallLockdownArgs', 'CisFirewallLockdownArgsDict']]] = None,
            ua_rule: Optional[pulumi.Input[Union['CisFirewallUaRuleArgs', 'CisFirewallUaRuleArgsDict']]] = None) -> 'CisFirewall':
        """
        Get an existing CisFirewall resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CisFirewallAccessRuleArgs', 'CisFirewallAccessRuleArgsDict']] access_rule: Access Rule Data
        :param pulumi.Input[_builtins.str] cis_id: CIS object id
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] firewall_type: Type of firewall.Allowable values are access-rules,ua-rules,lockdowns
        :param pulumi.Input[Union['CisFirewallLockdownArgs', 'CisFirewallLockdownArgsDict']] lockdown: Lockdown Data
        :param pulumi.Input[Union['CisFirewallUaRuleArgs', 'CisFirewallUaRuleArgsDict']] ua_rule: User Agent Rule Data
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisFirewallState.__new__(_CisFirewallState)

        __props__.__dict__["access_rule"] = access_rule
        __props__.__dict__["cis_firewall_id"] = cis_firewall_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["firewall_type"] = firewall_type
        __props__.__dict__["lockdown"] = lockdown
        __props__.__dict__["ua_rule"] = ua_rule
        return CisFirewall(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessRule")
    def access_rule(self) -> pulumi.Output[Optional['outputs.CisFirewallAccessRule']]:
        """
        Access Rule Data
        """
        return pulumi.get(self, "access_rule")

    @_builtins.property
    @pulumi.getter(name="cisFirewallId")
    def cis_firewall_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_firewall_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS object id
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of firewall.Allowable values are access-rules,ua-rules,lockdowns
        """
        return pulumi.get(self, "firewall_type")

    @_builtins.property
    @pulumi.getter
    def lockdown(self) -> pulumi.Output[Optional['outputs.CisFirewallLockdown']]:
        """
        Lockdown Data
        """
        return pulumi.get(self, "lockdown")

    @_builtins.property
    @pulumi.getter(name="uaRule")
    def ua_rule(self) -> pulumi.Output[Optional['outputs.CisFirewallUaRule']]:
        """
        User Agent Rule Data
        """
        return pulumi.get(self, "ua_rule")

