# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAppidIdpCustomResult',
    'AwaitableGetAppidIdpCustomResult',
    'get_appid_idp_custom',
    'get_appid_idp_custom_output',
]

@pulumi.output_type
class GetAppidIdpCustomResult:
    """
    A collection of values returned by getAppidIdpCustom.
    """
    def __init__(__self__, id=None, is_active=None, public_key=None, tenant_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_active and not isinstance(is_active, bool):
            raise TypeError("Expected argument 'is_active' to be a bool")
        pulumi.set(__self__, "is_active", is_active)
        if public_key and not isinstance(public_key, str):
            raise TypeError("Expected argument 'public_key' to be a str")
        pulumi.set(__self__, "public_key", public_key)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> _builtins.bool:
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> _builtins.str:
        return pulumi.get(self, "public_key")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetAppidIdpCustomResult(GetAppidIdpCustomResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppidIdpCustomResult(
            id=self.id,
            is_active=self.is_active,
            public_key=self.public_key,
            tenant_id=self.tenant_id)


def get_appid_idp_custom(id: Optional[_builtins.str] = None,
                         tenant_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppidIdpCustomResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppidIdpCustom:getAppidIdpCustom', __args__, opts=opts, typ=GetAppidIdpCustomResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppidIdpCustomResult(
        id=pulumi.get(__ret__, 'id'),
        is_active=pulumi.get(__ret__, 'is_active'),
        public_key=pulumi.get(__ret__, 'public_key'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_appid_idp_custom_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppidIdpCustomResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppidIdpCustom:getAppidIdpCustom', __args__, opts=opts, typ=GetAppidIdpCustomResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppidIdpCustomResult(
        id=pulumi.get(__response__, 'id'),
        is_active=pulumi.get(__response__, 'is_active'),
        public_key=pulumi.get(__response__, 'public_key'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
