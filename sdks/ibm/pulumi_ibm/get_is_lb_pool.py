# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsLbPoolResult',
    'AwaitableGetIsLbPoolResult',
    'get_is_lb_pool',
    'get_is_lb_pool_output',
]

@pulumi.output_type
class GetIsLbPoolResult:
    """
    A collection of values returned by getIsLbPool.
    """
    def __init__(__self__, algorithm=None, created_at=None, failsafe_policies=None, health_monitors=None, href=None, id=None, identifier=None, instance_groups=None, lb=None, members=None, name=None, protocol=None, provisioning_status=None, proxy_protocol=None, session_persistences=None):
        if algorithm and not isinstance(algorithm, str):
            raise TypeError("Expected argument 'algorithm' to be a str")
        pulumi.set(__self__, "algorithm", algorithm)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if failsafe_policies and not isinstance(failsafe_policies, list):
            raise TypeError("Expected argument 'failsafe_policies' to be a list")
        pulumi.set(__self__, "failsafe_policies", failsafe_policies)
        if health_monitors and not isinstance(health_monitors, list):
            raise TypeError("Expected argument 'health_monitors' to be a list")
        pulumi.set(__self__, "health_monitors", health_monitors)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if instance_groups and not isinstance(instance_groups, list):
            raise TypeError("Expected argument 'instance_groups' to be a list")
        pulumi.set(__self__, "instance_groups", instance_groups)
        if lb and not isinstance(lb, str):
            raise TypeError("Expected argument 'lb' to be a str")
        pulumi.set(__self__, "lb", lb)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if provisioning_status and not isinstance(provisioning_status, str):
            raise TypeError("Expected argument 'provisioning_status' to be a str")
        pulumi.set(__self__, "provisioning_status", provisioning_status)
        if proxy_protocol and not isinstance(proxy_protocol, str):
            raise TypeError("Expected argument 'proxy_protocol' to be a str")
        pulumi.set(__self__, "proxy_protocol", proxy_protocol)
        if session_persistences and not isinstance(session_persistences, list):
            raise TypeError("Expected argument 'session_persistences' to be a list")
        pulumi.set(__self__, "session_persistences", session_persistences)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> _builtins.str:
        return pulumi.get(self, "algorithm")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="failsafePolicies")
    def failsafe_policies(self) -> Sequence['outputs.GetIsLbPoolFailsafePolicyResult']:
        return pulumi.get(self, "failsafe_policies")

    @_builtins.property
    @pulumi.getter(name="healthMonitors")
    def health_monitors(self) -> Sequence['outputs.GetIsLbPoolHealthMonitorResult']:
        return pulumi.get(self, "health_monitors")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="instanceGroups")
    def instance_groups(self) -> Sequence['outputs.GetIsLbPoolInstanceGroupResult']:
        return pulumi.get(self, "instance_groups")

    @_builtins.property
    @pulumi.getter
    def lb(self) -> _builtins.str:
        return pulumi.get(self, "lb")

    @_builtins.property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetIsLbPoolMemberResult']:
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> _builtins.str:
        return pulumi.get(self, "provisioning_status")

    @_builtins.property
    @pulumi.getter(name="proxyProtocol")
    def proxy_protocol(self) -> _builtins.str:
        return pulumi.get(self, "proxy_protocol")

    @_builtins.property
    @pulumi.getter(name="sessionPersistences")
    def session_persistences(self) -> Sequence['outputs.GetIsLbPoolSessionPersistenceResult']:
        return pulumi.get(self, "session_persistences")


class AwaitableGetIsLbPoolResult(GetIsLbPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsLbPoolResult(
            algorithm=self.algorithm,
            created_at=self.created_at,
            failsafe_policies=self.failsafe_policies,
            health_monitors=self.health_monitors,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            instance_groups=self.instance_groups,
            lb=self.lb,
            members=self.members,
            name=self.name,
            protocol=self.protocol,
            provisioning_status=self.provisioning_status,
            proxy_protocol=self.proxy_protocol,
            session_persistences=self.session_persistences)


def get_is_lb_pool(id: Optional[_builtins.str] = None,
                   identifier: Optional[_builtins.str] = None,
                   lb: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsLbPoolResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['lb'] = lb
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsLbPool:getIsLbPool', __args__, opts=opts, typ=GetIsLbPoolResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsLbPoolResult(
        algorithm=pulumi.get(__ret__, 'algorithm'),
        created_at=pulumi.get(__ret__, 'created_at'),
        failsafe_policies=pulumi.get(__ret__, 'failsafe_policies'),
        health_monitors=pulumi.get(__ret__, 'health_monitors'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        instance_groups=pulumi.get(__ret__, 'instance_groups'),
        lb=pulumi.get(__ret__, 'lb'),
        members=pulumi.get(__ret__, 'members'),
        name=pulumi.get(__ret__, 'name'),
        protocol=pulumi.get(__ret__, 'protocol'),
        provisioning_status=pulumi.get(__ret__, 'provisioning_status'),
        proxy_protocol=pulumi.get(__ret__, 'proxy_protocol'),
        session_persistences=pulumi.get(__ret__, 'session_persistences'))
def get_is_lb_pool_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          lb: Optional[pulumi.Input[_builtins.str]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsLbPoolResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['lb'] = lb
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsLbPool:getIsLbPool', __args__, opts=opts, typ=GetIsLbPoolResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsLbPoolResult(
        algorithm=pulumi.get(__response__, 'algorithm'),
        created_at=pulumi.get(__response__, 'created_at'),
        failsafe_policies=pulumi.get(__response__, 'failsafe_policies'),
        health_monitors=pulumi.get(__response__, 'health_monitors'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        instance_groups=pulumi.get(__response__, 'instance_groups'),
        lb=pulumi.get(__response__, 'lb'),
        members=pulumi.get(__response__, 'members'),
        name=pulumi.get(__response__, 'name'),
        protocol=pulumi.get(__response__, 'protocol'),
        provisioning_status=pulumi.get(__response__, 'provisioning_status'),
        proxy_protocol=pulumi.get(__response__, 'proxy_protocol'),
        session_persistences=pulumi.get(__response__, 'session_persistences')))
