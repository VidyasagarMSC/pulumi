# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsSnapshotInstanceProfilesResult',
    'AwaitableGetIsSnapshotInstanceProfilesResult',
    'get_is_snapshot_instance_profiles',
    'get_is_snapshot_instance_profiles_output',
]

@pulumi.output_type
class GetIsSnapshotInstanceProfilesResult:
    """
    A collection of values returned by getIsSnapshotInstanceProfiles.
    """
    def __init__(__self__, id=None, identifier=None, instance_profiles=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if instance_profiles and not isinstance(instance_profiles, list):
            raise TypeError("Expected argument 'instance_profiles' to be a list")
        pulumi.set(__self__, "instance_profiles", instance_profiles)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="instanceProfiles")
    def instance_profiles(self) -> Sequence['outputs.GetIsSnapshotInstanceProfilesInstanceProfileResult']:
        return pulumi.get(self, "instance_profiles")


class AwaitableGetIsSnapshotInstanceProfilesResult(GetIsSnapshotInstanceProfilesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsSnapshotInstanceProfilesResult(
            id=self.id,
            identifier=self.identifier,
            instance_profiles=self.instance_profiles)


def get_is_snapshot_instance_profiles(id: Optional[_builtins.str] = None,
                                      identifier: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsSnapshotInstanceProfilesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsSnapshotInstanceProfiles:getIsSnapshotInstanceProfiles', __args__, opts=opts, typ=GetIsSnapshotInstanceProfilesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsSnapshotInstanceProfilesResult(
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        instance_profiles=pulumi.get(__ret__, 'instance_profiles'))
def get_is_snapshot_instance_profiles_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             identifier: Optional[pulumi.Input[_builtins.str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsSnapshotInstanceProfilesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsSnapshotInstanceProfiles:getIsSnapshotInstanceProfiles', __args__, opts=opts, typ=GetIsSnapshotInstanceProfilesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsSnapshotInstanceProfilesResult(
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        instance_profiles=pulumi.get(__response__, 'instance_profiles')))
