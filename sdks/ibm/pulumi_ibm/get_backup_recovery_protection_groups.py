# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryProtectionGroupsResult',
    'AwaitableGetBackupRecoveryProtectionGroupsResult',
    'get_backup_recovery_protection_groups',
    'get_backup_recovery_protection_groups_output',
]

@pulumi.output_type
class GetBackupRecoveryProtectionGroupsResult:
    """
    A collection of values returned by getBackupRecoveryProtectionGroups.
    """
    def __init__(__self__, environments=None, id=None, ids=None, include_groups_with_datalock_only=None, include_last_run_info=None, is_active=None, is_deleted=None, is_last_run_sla_violated=None, is_paused=None, last_run_any_statuses=None, last_run_archival_statuses=None, last_run_cloud_spin_statuses=None, last_run_local_backup_statuses=None, last_run_replication_statuses=None, names=None, policy_ids=None, protection_groups=None, prune_excluded_source_ids=None, prune_source_ids=None, request_initiator_type=None, source_ids=None, use_cached_data=None, x_ibm_tenant_id=None):
        if environments and not isinstance(environments, list):
            raise TypeError("Expected argument 'environments' to be a list")
        pulumi.set(__self__, "environments", environments)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if include_groups_with_datalock_only and not isinstance(include_groups_with_datalock_only, bool):
            raise TypeError("Expected argument 'include_groups_with_datalock_only' to be a bool")
        pulumi.set(__self__, "include_groups_with_datalock_only", include_groups_with_datalock_only)
        if include_last_run_info and not isinstance(include_last_run_info, bool):
            raise TypeError("Expected argument 'include_last_run_info' to be a bool")
        pulumi.set(__self__, "include_last_run_info", include_last_run_info)
        if is_active and not isinstance(is_active, bool):
            raise TypeError("Expected argument 'is_active' to be a bool")
        pulumi.set(__self__, "is_active", is_active)
        if is_deleted and not isinstance(is_deleted, bool):
            raise TypeError("Expected argument 'is_deleted' to be a bool")
        pulumi.set(__self__, "is_deleted", is_deleted)
        if is_last_run_sla_violated and not isinstance(is_last_run_sla_violated, bool):
            raise TypeError("Expected argument 'is_last_run_sla_violated' to be a bool")
        pulumi.set(__self__, "is_last_run_sla_violated", is_last_run_sla_violated)
        if is_paused and not isinstance(is_paused, bool):
            raise TypeError("Expected argument 'is_paused' to be a bool")
        pulumi.set(__self__, "is_paused", is_paused)
        if last_run_any_statuses and not isinstance(last_run_any_statuses, list):
            raise TypeError("Expected argument 'last_run_any_statuses' to be a list")
        pulumi.set(__self__, "last_run_any_statuses", last_run_any_statuses)
        if last_run_archival_statuses and not isinstance(last_run_archival_statuses, list):
            raise TypeError("Expected argument 'last_run_archival_statuses' to be a list")
        pulumi.set(__self__, "last_run_archival_statuses", last_run_archival_statuses)
        if last_run_cloud_spin_statuses and not isinstance(last_run_cloud_spin_statuses, list):
            raise TypeError("Expected argument 'last_run_cloud_spin_statuses' to be a list")
        pulumi.set(__self__, "last_run_cloud_spin_statuses", last_run_cloud_spin_statuses)
        if last_run_local_backup_statuses and not isinstance(last_run_local_backup_statuses, list):
            raise TypeError("Expected argument 'last_run_local_backup_statuses' to be a list")
        pulumi.set(__self__, "last_run_local_backup_statuses", last_run_local_backup_statuses)
        if last_run_replication_statuses and not isinstance(last_run_replication_statuses, list):
            raise TypeError("Expected argument 'last_run_replication_statuses' to be a list")
        pulumi.set(__self__, "last_run_replication_statuses", last_run_replication_statuses)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if policy_ids and not isinstance(policy_ids, list):
            raise TypeError("Expected argument 'policy_ids' to be a list")
        pulumi.set(__self__, "policy_ids", policy_ids)
        if protection_groups and not isinstance(protection_groups, list):
            raise TypeError("Expected argument 'protection_groups' to be a list")
        pulumi.set(__self__, "protection_groups", protection_groups)
        if prune_excluded_source_ids and not isinstance(prune_excluded_source_ids, bool):
            raise TypeError("Expected argument 'prune_excluded_source_ids' to be a bool")
        pulumi.set(__self__, "prune_excluded_source_ids", prune_excluded_source_ids)
        if prune_source_ids and not isinstance(prune_source_ids, bool):
            raise TypeError("Expected argument 'prune_source_ids' to be a bool")
        pulumi.set(__self__, "prune_source_ids", prune_source_ids)
        if request_initiator_type and not isinstance(request_initiator_type, str):
            raise TypeError("Expected argument 'request_initiator_type' to be a str")
        pulumi.set(__self__, "request_initiator_type", request_initiator_type)
        if source_ids and not isinstance(source_ids, list):
            raise TypeError("Expected argument 'source_ids' to be a list")
        pulumi.set(__self__, "source_ids", source_ids)
        if use_cached_data and not isinstance(use_cached_data, bool):
            raise TypeError("Expected argument 'use_cached_data' to be a bool")
        pulumi.set(__self__, "use_cached_data", use_cached_data)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "ids")

    @_builtins.property
    @pulumi.getter(name="includeGroupsWithDatalockOnly")
    def include_groups_with_datalock_only(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_groups_with_datalock_only")

    @_builtins.property
    @pulumi.getter(name="includeLastRunInfo")
    def include_last_run_info(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_last_run_info")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter(name="isDeleted")
    def is_deleted(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_deleted")

    @_builtins.property
    @pulumi.getter(name="isLastRunSlaViolated")
    def is_last_run_sla_violated(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_last_run_sla_violated")

    @_builtins.property
    @pulumi.getter(name="isPaused")
    def is_paused(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_paused")

    @_builtins.property
    @pulumi.getter(name="lastRunAnyStatuses")
    def last_run_any_statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "last_run_any_statuses")

    @_builtins.property
    @pulumi.getter(name="lastRunArchivalStatuses")
    def last_run_archival_statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "last_run_archival_statuses")

    @_builtins.property
    @pulumi.getter(name="lastRunCloudSpinStatuses")
    def last_run_cloud_spin_statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "last_run_cloud_spin_statuses")

    @_builtins.property
    @pulumi.getter(name="lastRunLocalBackupStatuses")
    def last_run_local_backup_statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "last_run_local_backup_statuses")

    @_builtins.property
    @pulumi.getter(name="lastRunReplicationStatuses")
    def last_run_replication_statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "last_run_replication_statuses")

    @_builtins.property
    @pulumi.getter
    def names(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "names")

    @_builtins.property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "policy_ids")

    @_builtins.property
    @pulumi.getter(name="protectionGroups")
    def protection_groups(self) -> Sequence['outputs.GetBackupRecoveryProtectionGroupsProtectionGroupResult']:
        return pulumi.get(self, "protection_groups")

    @_builtins.property
    @pulumi.getter(name="pruneExcludedSourceIds")
    def prune_excluded_source_ids(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "prune_excluded_source_ids")

    @_builtins.property
    @pulumi.getter(name="pruneSourceIds")
    def prune_source_ids(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "prune_source_ids")

    @_builtins.property
    @pulumi.getter(name="requestInitiatorType")
    def request_initiator_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "request_initiator_type")

    @_builtins.property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> Optional[Sequence[_builtins.float]]:
        return pulumi.get(self, "source_ids")

    @_builtins.property
    @pulumi.getter(name="useCachedData")
    def use_cached_data(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "use_cached_data")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryProtectionGroupsResult(GetBackupRecoveryProtectionGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryProtectionGroupsResult(
            environments=self.environments,
            id=self.id,
            ids=self.ids,
            include_groups_with_datalock_only=self.include_groups_with_datalock_only,
            include_last_run_info=self.include_last_run_info,
            is_active=self.is_active,
            is_deleted=self.is_deleted,
            is_last_run_sla_violated=self.is_last_run_sla_violated,
            is_paused=self.is_paused,
            last_run_any_statuses=self.last_run_any_statuses,
            last_run_archival_statuses=self.last_run_archival_statuses,
            last_run_cloud_spin_statuses=self.last_run_cloud_spin_statuses,
            last_run_local_backup_statuses=self.last_run_local_backup_statuses,
            last_run_replication_statuses=self.last_run_replication_statuses,
            names=self.names,
            policy_ids=self.policy_ids,
            protection_groups=self.protection_groups,
            prune_excluded_source_ids=self.prune_excluded_source_ids,
            prune_source_ids=self.prune_source_ids,
            request_initiator_type=self.request_initiator_type,
            source_ids=self.source_ids,
            use_cached_data=self.use_cached_data,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_protection_groups(environments: Optional[Sequence[_builtins.str]] = None,
                                          id: Optional[_builtins.str] = None,
                                          ids: Optional[Sequence[_builtins.str]] = None,
                                          include_groups_with_datalock_only: Optional[_builtins.bool] = None,
                                          include_last_run_info: Optional[_builtins.bool] = None,
                                          is_active: Optional[_builtins.bool] = None,
                                          is_deleted: Optional[_builtins.bool] = None,
                                          is_last_run_sla_violated: Optional[_builtins.bool] = None,
                                          is_paused: Optional[_builtins.bool] = None,
                                          last_run_any_statuses: Optional[Sequence[_builtins.str]] = None,
                                          last_run_archival_statuses: Optional[Sequence[_builtins.str]] = None,
                                          last_run_cloud_spin_statuses: Optional[Sequence[_builtins.str]] = None,
                                          last_run_local_backup_statuses: Optional[Sequence[_builtins.str]] = None,
                                          last_run_replication_statuses: Optional[Sequence[_builtins.str]] = None,
                                          names: Optional[Sequence[_builtins.str]] = None,
                                          policy_ids: Optional[Sequence[_builtins.str]] = None,
                                          prune_excluded_source_ids: Optional[_builtins.bool] = None,
                                          prune_source_ids: Optional[_builtins.bool] = None,
                                          request_initiator_type: Optional[_builtins.str] = None,
                                          source_ids: Optional[Sequence[_builtins.float]] = None,
                                          use_cached_data: Optional[_builtins.bool] = None,
                                          x_ibm_tenant_id: Optional[_builtins.str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryProtectionGroupsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['environments'] = environments
    __args__['id'] = id
    __args__['ids'] = ids
    __args__['includeGroupsWithDatalockOnly'] = include_groups_with_datalock_only
    __args__['includeLastRunInfo'] = include_last_run_info
    __args__['isActive'] = is_active
    __args__['isDeleted'] = is_deleted
    __args__['isLastRunSlaViolated'] = is_last_run_sla_violated
    __args__['isPaused'] = is_paused
    __args__['lastRunAnyStatuses'] = last_run_any_statuses
    __args__['lastRunArchivalStatuses'] = last_run_archival_statuses
    __args__['lastRunCloudSpinStatuses'] = last_run_cloud_spin_statuses
    __args__['lastRunLocalBackupStatuses'] = last_run_local_backup_statuses
    __args__['lastRunReplicationStatuses'] = last_run_replication_statuses
    __args__['names'] = names
    __args__['policyIds'] = policy_ids
    __args__['pruneExcludedSourceIds'] = prune_excluded_source_ids
    __args__['pruneSourceIds'] = prune_source_ids
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['sourceIds'] = source_ids
    __args__['useCachedData'] = use_cached_data
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryProtectionGroups:getBackupRecoveryProtectionGroups', __args__, opts=opts, typ=GetBackupRecoveryProtectionGroupsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryProtectionGroupsResult(
        environments=pulumi.get(__ret__, 'environments'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        include_groups_with_datalock_only=pulumi.get(__ret__, 'include_groups_with_datalock_only'),
        include_last_run_info=pulumi.get(__ret__, 'include_last_run_info'),
        is_active=pulumi.get(__ret__, 'is_active'),
        is_deleted=pulumi.get(__ret__, 'is_deleted'),
        is_last_run_sla_violated=pulumi.get(__ret__, 'is_last_run_sla_violated'),
        is_paused=pulumi.get(__ret__, 'is_paused'),
        last_run_any_statuses=pulumi.get(__ret__, 'last_run_any_statuses'),
        last_run_archival_statuses=pulumi.get(__ret__, 'last_run_archival_statuses'),
        last_run_cloud_spin_statuses=pulumi.get(__ret__, 'last_run_cloud_spin_statuses'),
        last_run_local_backup_statuses=pulumi.get(__ret__, 'last_run_local_backup_statuses'),
        last_run_replication_statuses=pulumi.get(__ret__, 'last_run_replication_statuses'),
        names=pulumi.get(__ret__, 'names'),
        policy_ids=pulumi.get(__ret__, 'policy_ids'),
        protection_groups=pulumi.get(__ret__, 'protection_groups'),
        prune_excluded_source_ids=pulumi.get(__ret__, 'prune_excluded_source_ids'),
        prune_source_ids=pulumi.get(__ret__, 'prune_source_ids'),
        request_initiator_type=pulumi.get(__ret__, 'request_initiator_type'),
        source_ids=pulumi.get(__ret__, 'source_ids'),
        use_cached_data=pulumi.get(__ret__, 'use_cached_data'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_protection_groups_output(environments: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                 include_groups_with_datalock_only: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                 include_last_run_info: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                 is_active: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                 is_deleted: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                 is_last_run_sla_violated: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                 is_paused: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                 last_run_any_statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                 last_run_archival_statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                 last_run_cloud_spin_statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                 last_run_local_backup_statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                 last_run_replication_statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                 names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                 policy_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                 prune_excluded_source_ids: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                 prune_source_ids: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                 request_initiator_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 source_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.float]]]] = None,
                                                 use_cached_data: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryProtectionGroupsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['environments'] = environments
    __args__['id'] = id
    __args__['ids'] = ids
    __args__['includeGroupsWithDatalockOnly'] = include_groups_with_datalock_only
    __args__['includeLastRunInfo'] = include_last_run_info
    __args__['isActive'] = is_active
    __args__['isDeleted'] = is_deleted
    __args__['isLastRunSlaViolated'] = is_last_run_sla_violated
    __args__['isPaused'] = is_paused
    __args__['lastRunAnyStatuses'] = last_run_any_statuses
    __args__['lastRunArchivalStatuses'] = last_run_archival_statuses
    __args__['lastRunCloudSpinStatuses'] = last_run_cloud_spin_statuses
    __args__['lastRunLocalBackupStatuses'] = last_run_local_backup_statuses
    __args__['lastRunReplicationStatuses'] = last_run_replication_statuses
    __args__['names'] = names
    __args__['policyIds'] = policy_ids
    __args__['pruneExcludedSourceIds'] = prune_excluded_source_ids
    __args__['pruneSourceIds'] = prune_source_ids
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['sourceIds'] = source_ids
    __args__['useCachedData'] = use_cached_data
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryProtectionGroups:getBackupRecoveryProtectionGroups', __args__, opts=opts, typ=GetBackupRecoveryProtectionGroupsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryProtectionGroupsResult(
        environments=pulumi.get(__response__, 'environments'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        include_groups_with_datalock_only=pulumi.get(__response__, 'include_groups_with_datalock_only'),
        include_last_run_info=pulumi.get(__response__, 'include_last_run_info'),
        is_active=pulumi.get(__response__, 'is_active'),
        is_deleted=pulumi.get(__response__, 'is_deleted'),
        is_last_run_sla_violated=pulumi.get(__response__, 'is_last_run_sla_violated'),
        is_paused=pulumi.get(__response__, 'is_paused'),
        last_run_any_statuses=pulumi.get(__response__, 'last_run_any_statuses'),
        last_run_archival_statuses=pulumi.get(__response__, 'last_run_archival_statuses'),
        last_run_cloud_spin_statuses=pulumi.get(__response__, 'last_run_cloud_spin_statuses'),
        last_run_local_backup_statuses=pulumi.get(__response__, 'last_run_local_backup_statuses'),
        last_run_replication_statuses=pulumi.get(__response__, 'last_run_replication_statuses'),
        names=pulumi.get(__response__, 'names'),
        policy_ids=pulumi.get(__response__, 'policy_ids'),
        protection_groups=pulumi.get(__response__, 'protection_groups'),
        prune_excluded_source_ids=pulumi.get(__response__, 'prune_excluded_source_ids'),
        prune_source_ids=pulumi.get(__response__, 'prune_source_ids'),
        request_initiator_type=pulumi.get(__response__, 'request_initiator_type'),
        source_ids=pulumi.get(__response__, 'source_ids'),
        use_cached_data=pulumi.get(__response__, 'use_cached_data'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
