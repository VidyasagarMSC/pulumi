# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsLbListenerPolicyResult',
    'AwaitableGetIsLbListenerPolicyResult',
    'get_is_lb_listener_policy',
    'get_is_lb_listener_policy_output',
]

@pulumi.output_type
class GetIsLbListenerPolicyResult:
    """
    A collection of values returned by getIsLbListenerPolicy.
    """
    def __init__(__self__, action=None, created_at=None, href=None, id=None, lb=None, listener=None, name=None, policy_id=None, priority=None, provisioning_status=None, rules=None, targets=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lb and not isinstance(lb, str):
            raise TypeError("Expected argument 'lb' to be a str")
        pulumi.set(__self__, "lb", lb)
        if listener and not isinstance(listener, str):
            raise TypeError("Expected argument 'listener' to be a str")
        pulumi.set(__self__, "listener", listener)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if priority and not isinstance(priority, float):
            raise TypeError("Expected argument 'priority' to be a float")
        pulumi.set(__self__, "priority", priority)
        if provisioning_status and not isinstance(provisioning_status, str):
            raise TypeError("Expected argument 'provisioning_status' to be a str")
        pulumi.set(__self__, "provisioning_status", provisioning_status)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lb(self) -> _builtins.str:
        return pulumi.get(self, "lb")

    @_builtins.property
    @pulumi.getter
    def listener(self) -> _builtins.str:
        return pulumi.get(self, "listener")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.float:
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> _builtins.str:
        return pulumi.get(self, "provisioning_status")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetIsLbListenerPolicyRuleResult']:
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetIsLbListenerPolicyTargetResult']:
        return pulumi.get(self, "targets")


class AwaitableGetIsLbListenerPolicyResult(GetIsLbListenerPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsLbListenerPolicyResult(
            action=self.action,
            created_at=self.created_at,
            href=self.href,
            id=self.id,
            lb=self.lb,
            listener=self.listener,
            name=self.name,
            policy_id=self.policy_id,
            priority=self.priority,
            provisioning_status=self.provisioning_status,
            rules=self.rules,
            targets=self.targets)


def get_is_lb_listener_policy(id: Optional[_builtins.str] = None,
                              lb: Optional[_builtins.str] = None,
                              listener: Optional[_builtins.str] = None,
                              policy_id: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsLbListenerPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    __args__['listener'] = listener
    __args__['policyId'] = policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsLbListenerPolicy:getIsLbListenerPolicy', __args__, opts=opts, typ=GetIsLbListenerPolicyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsLbListenerPolicyResult(
        action=pulumi.get(__ret__, 'action'),
        created_at=pulumi.get(__ret__, 'created_at'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        lb=pulumi.get(__ret__, 'lb'),
        listener=pulumi.get(__ret__, 'listener'),
        name=pulumi.get(__ret__, 'name'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        priority=pulumi.get(__ret__, 'priority'),
        provisioning_status=pulumi.get(__ret__, 'provisioning_status'),
        rules=pulumi.get(__ret__, 'rules'),
        targets=pulumi.get(__ret__, 'targets'))
def get_is_lb_listener_policy_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     lb: Optional[pulumi.Input[_builtins.str]] = None,
                                     listener: Optional[pulumi.Input[_builtins.str]] = None,
                                     policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsLbListenerPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    __args__['listener'] = listener
    __args__['policyId'] = policy_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsLbListenerPolicy:getIsLbListenerPolicy', __args__, opts=opts, typ=GetIsLbListenerPolicyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsLbListenerPolicyResult(
        action=pulumi.get(__response__, 'action'),
        created_at=pulumi.get(__response__, 'created_at'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        lb=pulumi.get(__response__, 'lb'),
        listener=pulumi.get(__response__, 'listener'),
        name=pulumi.get(__response__, 'name'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        priority=pulumi.get(__response__, 'priority'),
        provisioning_status=pulumi.get(__response__, 'provisioning_status'),
        rules=pulumi.get(__response__, 'rules'),
        targets=pulumi.get(__response__, 'targets')))
