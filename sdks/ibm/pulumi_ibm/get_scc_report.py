# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccReportResult',
    'AwaitableGetSccReportResult',
    'get_scc_report',
    'get_scc_report_output',
]

@pulumi.output_type
class GetSccReportResult:
    """
    A collection of values returned by getSccReport.
    """
    def __init__(__self__, accounts=None, attachments=None, cos_object=None, created_on=None, group_id=None, id=None, instance_id=None, profiles=None, report_id=None, scan_time=None, type=None):
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if attachments and not isinstance(attachments, list):
            raise TypeError("Expected argument 'attachments' to be a list")
        pulumi.set(__self__, "attachments", attachments)
        if cos_object and not isinstance(cos_object, str):
            raise TypeError("Expected argument 'cos_object' to be a str")
        pulumi.set(__self__, "cos_object", cos_object)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if profiles and not isinstance(profiles, list):
            raise TypeError("Expected argument 'profiles' to be a list")
        pulumi.set(__self__, "profiles", profiles)
        if report_id and not isinstance(report_id, str):
            raise TypeError("Expected argument 'report_id' to be a str")
        pulumi.set(__self__, "report_id", report_id)
        if scan_time and not isinstance(scan_time, str):
            raise TypeError("Expected argument 'scan_time' to be a str")
        pulumi.set(__self__, "scan_time", scan_time)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetSccReportAccountResult']:
        return pulumi.get(self, "accounts")

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> Sequence['outputs.GetSccReportAttachmentResult']:
        return pulumi.get(self, "attachments")

    @_builtins.property
    @pulumi.getter(name="cosObject")
    def cos_object(self) -> _builtins.str:
        return pulumi.get(self, "cos_object")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> _builtins.str:
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetSccReportProfileResult']:
        return pulumi.get(self, "profiles")

    @_builtins.property
    @pulumi.getter(name="reportId")
    def report_id(self) -> _builtins.str:
        return pulumi.get(self, "report_id")

    @_builtins.property
    @pulumi.getter(name="scanTime")
    def scan_time(self) -> _builtins.str:
        return pulumi.get(self, "scan_time")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetSccReportResult(GetSccReportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccReportResult(
            accounts=self.accounts,
            attachments=self.attachments,
            cos_object=self.cos_object,
            created_on=self.created_on,
            group_id=self.group_id,
            id=self.id,
            instance_id=self.instance_id,
            profiles=self.profiles,
            report_id=self.report_id,
            scan_time=self.scan_time,
            type=self.type)


def get_scc_report(instance_id: Optional[_builtins.str] = None,
                   report_id: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccReportResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccReport:getSccReport', __args__, opts=opts, typ=GetSccReportResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccReportResult(
        accounts=pulumi.get(__ret__, 'accounts'),
        attachments=pulumi.get(__ret__, 'attachments'),
        cos_object=pulumi.get(__ret__, 'cos_object'),
        created_on=pulumi.get(__ret__, 'created_on'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        profiles=pulumi.get(__ret__, 'profiles'),
        report_id=pulumi.get(__ret__, 'report_id'),
        scan_time=pulumi.get(__ret__, 'scan_time'),
        type=pulumi.get(__ret__, 'type'))
def get_scc_report_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                          report_id: Optional[pulumi.Input[_builtins.str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccReportResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccReport:getSccReport', __args__, opts=opts, typ=GetSccReportResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccReportResult(
        accounts=pulumi.get(__response__, 'accounts'),
        attachments=pulumi.get(__response__, 'attachments'),
        cos_object=pulumi.get(__response__, 'cos_object'),
        created_on=pulumi.get(__response__, 'created_on'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        profiles=pulumi.get(__response__, 'profiles'),
        report_id=pulumi.get(__response__, 'report_id'),
        scan_time=pulumi.get(__response__, 'scan_time'),
        type=pulumi.get(__response__, 'type')))
