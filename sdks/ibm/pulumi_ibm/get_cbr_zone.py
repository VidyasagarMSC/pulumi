# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCbrZoneResult',
    'AwaitableGetCbrZoneResult',
    'get_cbr_zone',
    'get_cbr_zone_output',
]

@pulumi.output_type
class GetCbrZoneResult:
    """
    A collection of values returned by getCbrZone.
    """
    def __init__(__self__, account_id=None, address_count=None, addresses=None, created_at=None, created_by_id=None, crn=None, description=None, excluded_count=None, excludeds=None, href=None, id=None, last_modified_at=None, last_modified_by_id=None, name=None, zone_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if address_count and not isinstance(address_count, float):
            raise TypeError("Expected argument 'address_count' to be a float")
        pulumi.set(__self__, "address_count", address_count)
        if addresses and not isinstance(addresses, list):
            raise TypeError("Expected argument 'addresses' to be a list")
        pulumi.set(__self__, "addresses", addresses)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by_id and not isinstance(created_by_id, str):
            raise TypeError("Expected argument 'created_by_id' to be a str")
        pulumi.set(__self__, "created_by_id", created_by_id)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if excluded_count and not isinstance(excluded_count, float):
            raise TypeError("Expected argument 'excluded_count' to be a float")
        pulumi.set(__self__, "excluded_count", excluded_count)
        if excludeds and not isinstance(excludeds, list):
            raise TypeError("Expected argument 'excludeds' to be a list")
        pulumi.set(__self__, "excludeds", excludeds)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_modified_at and not isinstance(last_modified_at, str):
            raise TypeError("Expected argument 'last_modified_at' to be a str")
        pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by_id and not isinstance(last_modified_by_id, str):
            raise TypeError("Expected argument 'last_modified_by_id' to be a str")
        pulumi.set(__self__, "last_modified_by_id", last_modified_by_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="addressCount")
    def address_count(self) -> _builtins.float:
        return pulumi.get(self, "address_count")

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.GetCbrZoneAddressResult']:
        return pulumi.get(self, "addresses")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> _builtins.str:
        return pulumi.get(self, "created_by_id")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="excludedCount")
    def excluded_count(self) -> _builtins.float:
        return pulumi.get(self, "excluded_count")

    @_builtins.property
    @pulumi.getter
    def excludeds(self) -> Sequence['outputs.GetCbrZoneExcludedResult']:
        return pulumi.get(self, "excludeds")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> _builtins.str:
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedById")
    def last_modified_by_id(self) -> _builtins.str:
        return pulumi.get(self, "last_modified_by_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> _builtins.str:
        return pulumi.get(self, "zone_id")


class AwaitableGetCbrZoneResult(GetCbrZoneResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCbrZoneResult(
            account_id=self.account_id,
            address_count=self.address_count,
            addresses=self.addresses,
            created_at=self.created_at,
            created_by_id=self.created_by_id,
            crn=self.crn,
            description=self.description,
            excluded_count=self.excluded_count,
            excludeds=self.excludeds,
            href=self.href,
            id=self.id,
            last_modified_at=self.last_modified_at,
            last_modified_by_id=self.last_modified_by_id,
            name=self.name,
            zone_id=self.zone_id)


def get_cbr_zone(id: Optional[_builtins.str] = None,
                 zone_id: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCbrZoneResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCbrZone:getCbrZone', __args__, opts=opts, typ=GetCbrZoneResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCbrZoneResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        address_count=pulumi.get(__ret__, 'address_count'),
        addresses=pulumi.get(__ret__, 'addresses'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by_id=pulumi.get(__ret__, 'created_by_id'),
        crn=pulumi.get(__ret__, 'crn'),
        description=pulumi.get(__ret__, 'description'),
        excluded_count=pulumi.get(__ret__, 'excluded_count'),
        excludeds=pulumi.get(__ret__, 'excludeds'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        last_modified_at=pulumi.get(__ret__, 'last_modified_at'),
        last_modified_by_id=pulumi.get(__ret__, 'last_modified_by_id'),
        name=pulumi.get(__ret__, 'name'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_cbr_zone_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCbrZoneResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCbrZone:getCbrZone', __args__, opts=opts, typ=GetCbrZoneResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCbrZoneResult(
        account_id=pulumi.get(__response__, 'account_id'),
        address_count=pulumi.get(__response__, 'address_count'),
        addresses=pulumi.get(__response__, 'addresses'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by_id=pulumi.get(__response__, 'created_by_id'),
        crn=pulumi.get(__response__, 'crn'),
        description=pulumi.get(__response__, 'description'),
        excluded_count=pulumi.get(__response__, 'excluded_count'),
        excludeds=pulumi.get(__response__, 'excludeds'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        last_modified_at=pulumi.get(__response__, 'last_modified_at'),
        last_modified_by_id=pulumi.get(__response__, 'last_modified_by_id'),
        name=pulumi.get(__response__, 'name'),
        zone_id=pulumi.get(__response__, 'zone_id')))
