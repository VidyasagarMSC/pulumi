# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisDomainArgs', 'CisDomain']

@pulumi.input_type
class CisDomainArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 domain: pulumi.Input[_builtins.str],
                 cis_domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisDomain resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain: CISzone - Domain
        :param pulumi.Input[_builtins.str] type: CISzone - Domain Type
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "domain", domain)
        if cis_domain_id is not None:
            pulumi.set(__self__, "cis_domain_id", cis_domain_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Input[_builtins.str]:
        """
        CISzone - Domain
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="cisDomainId")
    def cis_domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_domain_id")

    @cis_domain_id.setter
    def cis_domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_domain_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CISzone - Domain Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _CisDomainState:
    def __init__(__self__, *,
                 cis_domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cname_suffix: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 original_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 paused: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 verification_key: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisDomain resources.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain: CISzone - Domain
        :param pulumi.Input[_builtins.str] type: CISzone - Domain Type
        """
        if cis_domain_id is not None:
            pulumi.set(__self__, "cis_domain_id", cis_domain_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if cname_suffix is not None:
            pulumi.set(__self__, "cname_suffix", cname_suffix)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if name_servers is not None:
            pulumi.set(__self__, "name_servers", name_servers)
        if original_name_servers is not None:
            pulumi.set(__self__, "original_name_servers", original_name_servers)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if verification_key is not None:
            pulumi.set(__self__, "verification_key", verification_key)

    @_builtins.property
    @pulumi.getter(name="cisDomainId")
    def cis_domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_domain_id")

    @cis_domain_id.setter
    def cis_domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_domain_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cnameSuffix")
    def cname_suffix(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cname_suffix")

    @cname_suffix.setter
    def cname_suffix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cname_suffix", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CISzone - Domain
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "name_servers")

    @name_servers.setter
    def name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "name_servers", value)

    @_builtins.property
    @pulumi.getter(name="originalNameServers")
    def original_name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "original_name_servers")

    @original_name_servers.setter
    def original_name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "original_name_servers", value)

    @_builtins.property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "paused", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CISzone - Domain Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="verificationKey")
    def verification_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "verification_key")

    @verification_key.setter
    def verification_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "verification_key", value)


@pulumi.type_token("ibm:index/cisDomain:CisDomain")
class CisDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisDomain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain: CISzone - Domain
        :param pulumi.Input[_builtins.str] type: CISzone - Domain Type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisDomain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisDomainArgs.__new__(CisDomainArgs)

            __props__.__dict__["cis_domain_id"] = cis_domain_id
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["type"] = type
            __props__.__dict__["cname_suffix"] = None
            __props__.__dict__["domain_id"] = None
            __props__.__dict__["name_servers"] = None
            __props__.__dict__["original_name_servers"] = None
            __props__.__dict__["paused"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["verification_key"] = None
        super(CisDomain, __self__).__init__(
            'ibm:index/cisDomain:CisDomain',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cis_domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            cname_suffix: Optional[pulumi.Input[_builtins.str]] = None,
            domain: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            original_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            paused: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            verification_key: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisDomain':
        """
        Get an existing CisDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain: CISzone - Domain
        :param pulumi.Input[_builtins.str] type: CISzone - Domain Type
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisDomainState.__new__(_CisDomainState)

        __props__.__dict__["cis_domain_id"] = cis_domain_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["cname_suffix"] = cname_suffix
        __props__.__dict__["domain"] = domain
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["name_servers"] = name_servers
        __props__.__dict__["original_name_servers"] = original_name_servers
        __props__.__dict__["paused"] = paused
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["verification_key"] = verification_key
        return CisDomain(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cisDomainId")
    def cis_domain_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_domain_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cnameSuffix")
    def cname_suffix(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cname_suffix")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Output[_builtins.str]:
        """
        CISzone - Domain
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "name_servers")

    @_builtins.property
    @pulumi.getter(name="originalNameServers")
    def original_name_servers(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "original_name_servers")

    @_builtins.property
    @pulumi.getter
    def paused(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "paused")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        CISzone - Domain Type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="verificationKey")
    def verification_key(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "verification_key")

