# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AppArgs', 'App']

@pulumi.input_type
class AppArgs:
    def __init__(__self__, *,
                 app_path: pulumi.Input[_builtins.str],
                 space_guid: pulumi.Input[_builtins.str],
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_version: Optional[pulumi.Input[_builtins.str]] = None,
                 buildpack: Optional[pulumi.Input[_builtins.str]] = None,
                 command: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_quota: Optional[pulumi.Input[_builtins.float]] = None,
                 environment_json: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 health_check_http_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 health_check_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instances: Optional[pulumi.Input[_builtins.float]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 route_guids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_instance_guids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a App resource.
        :param pulumi.Input[_builtins.str] app_path: Define the path of the zip file of the application.
        :param pulumi.Input[_builtins.str] space_guid: Define space guid to which app belongs
        :param pulumi.Input[_builtins.str] app_version: Version of the application
        :param pulumi.Input[_builtins.str] buildpack: Buildpack to build the app. 3 options: a) Blank means autodetection; b) A Git Url pointing to a buildpack; c) Name of an
               installed buildpack.
        :param pulumi.Input[_builtins.str] command: The initial command for the app
        :param pulumi.Input[_builtins.float] disk_quota: The maximum amount of disk available to an instance of an app. In megabytes.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] environment_json: Key/value pairs of all the environment variables to run in your app. Does not include any system or service variables.
        :param pulumi.Input[_builtins.str] health_check_http_endpoint: Endpoint called to determine if the app is healthy.
        :param pulumi.Input[_builtins.float] health_check_timeout: Timeout in seconds for health checking of an staged app when starting up.
        :param pulumi.Input[_builtins.str] health_check_type: Type of health check to perform.
        :param pulumi.Input[_builtins.float] instances: The number of instances
        :param pulumi.Input[_builtins.float] memory: The amount of memory each instance should have. In megabytes.
        :param pulumi.Input[_builtins.str] name: The name for the app
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] route_guids: Define the route guids which should be bound to the application.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_instance_guids: Define the service instance guids that should be bound to this application.
        :param pulumi.Input[_builtins.float] wait_time_minutes: Define timeout to wait for the app instances to start/update/restage etc.
        """
        pulumi.set(__self__, "app_path", app_path)
        pulumi.set(__self__, "space_guid", space_guid)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_version is not None:
            pulumi.set(__self__, "app_version", app_version)
        if buildpack is not None:
            pulumi.set(__self__, "buildpack", buildpack)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if disk_quota is not None:
            pulumi.set(__self__, "disk_quota", disk_quota)
        if environment_json is not None:
            pulumi.set(__self__, "environment_json", environment_json)
        if health_check_http_endpoint is not None:
            pulumi.set(__self__, "health_check_http_endpoint", health_check_http_endpoint)
        if health_check_timeout is not None:
            pulumi.set(__self__, "health_check_timeout", health_check_timeout)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_guids is not None:
            pulumi.set(__self__, "route_guids", route_guids)
        if service_instance_guids is not None:
            pulumi.set(__self__, "service_instance_guids", service_instance_guids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if wait_time_minutes is not None:
            pulumi.set(__self__, "wait_time_minutes", wait_time_minutes)

    @_builtins.property
    @pulumi.getter(name="appPath")
    def app_path(self) -> pulumi.Input[_builtins.str]:
        """
        Define the path of the zip file of the application.
        """
        return pulumi.get(self, "app_path")

    @app_path.setter
    def app_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "app_path", value)

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    def space_guid(self) -> pulumi.Input[_builtins.str]:
        """
        Define space guid to which app belongs
        """
        return pulumi.get(self, "space_guid")

    @space_guid.setter
    def space_guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "space_guid", value)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_id", value)

    @_builtins.property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the application
        """
        return pulumi.get(self, "app_version")

    @app_version.setter
    def app_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_version", value)

    @_builtins.property
    @pulumi.getter
    def buildpack(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Buildpack to build the app. 3 options: a) Blank means autodetection; b) A Git Url pointing to a buildpack; c) Name of an
        installed buildpack.
        """
        return pulumi.get(self, "buildpack")

    @buildpack.setter
    def buildpack(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "buildpack", value)

    @_builtins.property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The initial command for the app
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "command", value)

    @_builtins.property
    @pulumi.getter(name="diskQuota")
    def disk_quota(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum amount of disk available to an instance of an app. In megabytes.
        """
        return pulumi.get(self, "disk_quota")

    @disk_quota.setter
    def disk_quota(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "disk_quota", value)

    @_builtins.property
    @pulumi.getter(name="environmentJson")
    def environment_json(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Key/value pairs of all the environment variables to run in your app. Does not include any system or service variables.
        """
        return pulumi.get(self, "environment_json")

    @environment_json.setter
    def environment_json(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "environment_json", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckHttpEndpoint")
    def health_check_http_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint called to determine if the app is healthy.
        """
        return pulumi.get(self, "health_check_http_endpoint")

    @health_check_http_endpoint.setter
    def health_check_http_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_check_http_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckTimeout")
    def health_check_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timeout in seconds for health checking of an staged app when starting up.
        """
        return pulumi.get(self, "health_check_timeout")

    @health_check_timeout.setter
    def health_check_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "health_check_timeout", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of health check to perform.
        """
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_check_type", value)

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of instances
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "instances", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The amount of memory each instance should have. In megabytes.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for the app
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="routeGuids")
    def route_guids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Define the route guids which should be bound to the application.
        """
        return pulumi.get(self, "route_guids")

    @route_guids.setter
    def route_guids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "route_guids", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuids")
    def service_instance_guids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Define the service instance guids that should be bound to this application.
        """
        return pulumi.get(self, "service_instance_guids")

    @service_instance_guids.setter
    def service_instance_guids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "service_instance_guids", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    def wait_time_minutes(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Define timeout to wait for the app instances to start/update/restage etc.
        """
        return pulumi.get(self, "wait_time_minutes")

    @wait_time_minutes.setter
    def wait_time_minutes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "wait_time_minutes", value)


@pulumi.input_type
class _AppState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_path: Optional[pulumi.Input[_builtins.str]] = None,
                 app_version: Optional[pulumi.Input[_builtins.str]] = None,
                 buildpack: Optional[pulumi.Input[_builtins.str]] = None,
                 command: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_quota: Optional[pulumi.Input[_builtins.float]] = None,
                 environment_json: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 health_check_http_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 health_check_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instances: Optional[pulumi.Input[_builtins.float]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 route_guids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_instance_guids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering App resources.
        :param pulumi.Input[_builtins.str] app_path: Define the path of the zip file of the application.
        :param pulumi.Input[_builtins.str] app_version: Version of the application
        :param pulumi.Input[_builtins.str] buildpack: Buildpack to build the app. 3 options: a) Blank means autodetection; b) A Git Url pointing to a buildpack; c) Name of an
               installed buildpack.
        :param pulumi.Input[_builtins.str] command: The initial command for the app
        :param pulumi.Input[_builtins.float] disk_quota: The maximum amount of disk available to an instance of an app. In megabytes.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] environment_json: Key/value pairs of all the environment variables to run in your app. Does not include any system or service variables.
        :param pulumi.Input[_builtins.str] health_check_http_endpoint: Endpoint called to determine if the app is healthy.
        :param pulumi.Input[_builtins.float] health_check_timeout: Timeout in seconds for health checking of an staged app when starting up.
        :param pulumi.Input[_builtins.str] health_check_type: Type of health check to perform.
        :param pulumi.Input[_builtins.float] instances: The number of instances
        :param pulumi.Input[_builtins.float] memory: The amount of memory each instance should have. In megabytes.
        :param pulumi.Input[_builtins.str] name: The name for the app
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] route_guids: Define the route guids which should be bound to the application.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_instance_guids: Define the service instance guids that should be bound to this application.
        :param pulumi.Input[_builtins.str] space_guid: Define space guid to which app belongs
        :param pulumi.Input[_builtins.float] wait_time_minutes: Define timeout to wait for the app instances to start/update/restage etc.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_path is not None:
            pulumi.set(__self__, "app_path", app_path)
        if app_version is not None:
            pulumi.set(__self__, "app_version", app_version)
        if buildpack is not None:
            pulumi.set(__self__, "buildpack", buildpack)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if disk_quota is not None:
            pulumi.set(__self__, "disk_quota", disk_quota)
        if environment_json is not None:
            pulumi.set(__self__, "environment_json", environment_json)
        if health_check_http_endpoint is not None:
            pulumi.set(__self__, "health_check_http_endpoint", health_check_http_endpoint)
        if health_check_timeout is not None:
            pulumi.set(__self__, "health_check_timeout", health_check_timeout)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_guids is not None:
            pulumi.set(__self__, "route_guids", route_guids)
        if service_instance_guids is not None:
            pulumi.set(__self__, "service_instance_guids", service_instance_guids)
        if space_guid is not None:
            pulumi.set(__self__, "space_guid", space_guid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if wait_time_minutes is not None:
            pulumi.set(__self__, "wait_time_minutes", wait_time_minutes)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_id", value)

    @_builtins.property
    @pulumi.getter(name="appPath")
    def app_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Define the path of the zip file of the application.
        """
        return pulumi.get(self, "app_path")

    @app_path.setter
    def app_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_path", value)

    @_builtins.property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the application
        """
        return pulumi.get(self, "app_version")

    @app_version.setter
    def app_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_version", value)

    @_builtins.property
    @pulumi.getter
    def buildpack(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Buildpack to build the app. 3 options: a) Blank means autodetection; b) A Git Url pointing to a buildpack; c) Name of an
        installed buildpack.
        """
        return pulumi.get(self, "buildpack")

    @buildpack.setter
    def buildpack(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "buildpack", value)

    @_builtins.property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The initial command for the app
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "command", value)

    @_builtins.property
    @pulumi.getter(name="diskQuota")
    def disk_quota(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum amount of disk available to an instance of an app. In megabytes.
        """
        return pulumi.get(self, "disk_quota")

    @disk_quota.setter
    def disk_quota(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "disk_quota", value)

    @_builtins.property
    @pulumi.getter(name="environmentJson")
    def environment_json(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Key/value pairs of all the environment variables to run in your app. Does not include any system or service variables.
        """
        return pulumi.get(self, "environment_json")

    @environment_json.setter
    def environment_json(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "environment_json", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckHttpEndpoint")
    def health_check_http_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint called to determine if the app is healthy.
        """
        return pulumi.get(self, "health_check_http_endpoint")

    @health_check_http_endpoint.setter
    def health_check_http_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_check_http_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckTimeout")
    def health_check_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timeout in seconds for health checking of an staged app when starting up.
        """
        return pulumi.get(self, "health_check_timeout")

    @health_check_timeout.setter
    def health_check_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "health_check_timeout", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of health check to perform.
        """
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_check_type", value)

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of instances
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "instances", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The amount of memory each instance should have. In megabytes.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for the app
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="routeGuids")
    def route_guids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Define the route guids which should be bound to the application.
        """
        return pulumi.get(self, "route_guids")

    @route_guids.setter
    def route_guids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "route_guids", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuids")
    def service_instance_guids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Define the service instance guids that should be bound to this application.
        """
        return pulumi.get(self, "service_instance_guids")

    @service_instance_guids.setter
    def service_instance_guids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "service_instance_guids", value)

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    def space_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Define space guid to which app belongs
        """
        return pulumi.get(self, "space_guid")

    @space_guid.setter
    def space_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_guid", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    def wait_time_minutes(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Define timeout to wait for the app instances to start/update/restage etc.
        """
        return pulumi.get(self, "wait_time_minutes")

    @wait_time_minutes.setter
    def wait_time_minutes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "wait_time_minutes", value)


@pulumi.type_token("ibm:index/app:App")
class App(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_path: Optional[pulumi.Input[_builtins.str]] = None,
                 app_version: Optional[pulumi.Input[_builtins.str]] = None,
                 buildpack: Optional[pulumi.Input[_builtins.str]] = None,
                 command: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_quota: Optional[pulumi.Input[_builtins.float]] = None,
                 environment_json: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 health_check_http_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 health_check_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instances: Optional[pulumi.Input[_builtins.float]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 route_guids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_instance_guids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a App resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_path: Define the path of the zip file of the application.
        :param pulumi.Input[_builtins.str] app_version: Version of the application
        :param pulumi.Input[_builtins.str] buildpack: Buildpack to build the app. 3 options: a) Blank means autodetection; b) A Git Url pointing to a buildpack; c) Name of an
               installed buildpack.
        :param pulumi.Input[_builtins.str] command: The initial command for the app
        :param pulumi.Input[_builtins.float] disk_quota: The maximum amount of disk available to an instance of an app. In megabytes.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] environment_json: Key/value pairs of all the environment variables to run in your app. Does not include any system or service variables.
        :param pulumi.Input[_builtins.str] health_check_http_endpoint: Endpoint called to determine if the app is healthy.
        :param pulumi.Input[_builtins.float] health_check_timeout: Timeout in seconds for health checking of an staged app when starting up.
        :param pulumi.Input[_builtins.str] health_check_type: Type of health check to perform.
        :param pulumi.Input[_builtins.float] instances: The number of instances
        :param pulumi.Input[_builtins.float] memory: The amount of memory each instance should have. In megabytes.
        :param pulumi.Input[_builtins.str] name: The name for the app
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] route_guids: Define the route guids which should be bound to the application.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_instance_guids: Define the service instance guids that should be bound to this application.
        :param pulumi.Input[_builtins.str] space_guid: Define space guid to which app belongs
        :param pulumi.Input[_builtins.float] wait_time_minutes: Define timeout to wait for the app instances to start/update/restage etc.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a App resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_path: Optional[pulumi.Input[_builtins.str]] = None,
                 app_version: Optional[pulumi.Input[_builtins.str]] = None,
                 buildpack: Optional[pulumi.Input[_builtins.str]] = None,
                 command: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_quota: Optional[pulumi.Input[_builtins.float]] = None,
                 environment_json: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 health_check_http_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 health_check_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instances: Optional[pulumi.Input[_builtins.float]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 route_guids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_instance_guids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppArgs.__new__(AppArgs)

            __props__.__dict__["app_id"] = app_id
            if app_path is None and not opts.urn:
                raise TypeError("Missing required property 'app_path'")
            __props__.__dict__["app_path"] = app_path
            __props__.__dict__["app_version"] = app_version
            __props__.__dict__["buildpack"] = buildpack
            __props__.__dict__["command"] = command
            __props__.__dict__["disk_quota"] = disk_quota
            __props__.__dict__["environment_json"] = environment_json
            __props__.__dict__["health_check_http_endpoint"] = health_check_http_endpoint
            __props__.__dict__["health_check_timeout"] = health_check_timeout
            __props__.__dict__["health_check_type"] = health_check_type
            __props__.__dict__["instances"] = instances
            __props__.__dict__["memory"] = memory
            __props__.__dict__["name"] = name
            __props__.__dict__["route_guids"] = route_guids
            __props__.__dict__["service_instance_guids"] = service_instance_guids
            if space_guid is None and not opts.urn:
                raise TypeError("Missing required property 'space_guid'")
            __props__.__dict__["space_guid"] = space_guid
            __props__.__dict__["tags"] = tags
            __props__.__dict__["wait_time_minutes"] = wait_time_minutes
        super(App, __self__).__init__(
            'ibm:index/app:App',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[_builtins.str]] = None,
            app_path: Optional[pulumi.Input[_builtins.str]] = None,
            app_version: Optional[pulumi.Input[_builtins.str]] = None,
            buildpack: Optional[pulumi.Input[_builtins.str]] = None,
            command: Optional[pulumi.Input[_builtins.str]] = None,
            disk_quota: Optional[pulumi.Input[_builtins.float]] = None,
            environment_json: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            health_check_http_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            health_check_timeout: Optional[pulumi.Input[_builtins.float]] = None,
            health_check_type: Optional[pulumi.Input[_builtins.str]] = None,
            instances: Optional[pulumi.Input[_builtins.float]] = None,
            memory: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            route_guids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            service_instance_guids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            space_guid: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None) -> 'App':
        """
        Get an existing App resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_path: Define the path of the zip file of the application.
        :param pulumi.Input[_builtins.str] app_version: Version of the application
        :param pulumi.Input[_builtins.str] buildpack: Buildpack to build the app. 3 options: a) Blank means autodetection; b) A Git Url pointing to a buildpack; c) Name of an
               installed buildpack.
        :param pulumi.Input[_builtins.str] command: The initial command for the app
        :param pulumi.Input[_builtins.float] disk_quota: The maximum amount of disk available to an instance of an app. In megabytes.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] environment_json: Key/value pairs of all the environment variables to run in your app. Does not include any system or service variables.
        :param pulumi.Input[_builtins.str] health_check_http_endpoint: Endpoint called to determine if the app is healthy.
        :param pulumi.Input[_builtins.float] health_check_timeout: Timeout in seconds for health checking of an staged app when starting up.
        :param pulumi.Input[_builtins.str] health_check_type: Type of health check to perform.
        :param pulumi.Input[_builtins.float] instances: The number of instances
        :param pulumi.Input[_builtins.float] memory: The amount of memory each instance should have. In megabytes.
        :param pulumi.Input[_builtins.str] name: The name for the app
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] route_guids: Define the route guids which should be bound to the application.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_instance_guids: Define the service instance guids that should be bound to this application.
        :param pulumi.Input[_builtins.str] space_guid: Define space guid to which app belongs
        :param pulumi.Input[_builtins.float] wait_time_minutes: Define timeout to wait for the app instances to start/update/restage etc.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppState.__new__(_AppState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["app_path"] = app_path
        __props__.__dict__["app_version"] = app_version
        __props__.__dict__["buildpack"] = buildpack
        __props__.__dict__["command"] = command
        __props__.__dict__["disk_quota"] = disk_quota
        __props__.__dict__["environment_json"] = environment_json
        __props__.__dict__["health_check_http_endpoint"] = health_check_http_endpoint
        __props__.__dict__["health_check_timeout"] = health_check_timeout
        __props__.__dict__["health_check_type"] = health_check_type
        __props__.__dict__["instances"] = instances
        __props__.__dict__["memory"] = memory
        __props__.__dict__["name"] = name
        __props__.__dict__["route_guids"] = route_guids
        __props__.__dict__["service_instance_guids"] = service_instance_guids
        __props__.__dict__["space_guid"] = space_guid
        __props__.__dict__["tags"] = tags
        __props__.__dict__["wait_time_minutes"] = wait_time_minutes
        return App(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter(name="appPath")
    def app_path(self) -> pulumi.Output[_builtins.str]:
        """
        Define the path of the zip file of the application.
        """
        return pulumi.get(self, "app_path")

    @_builtins.property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Version of the application
        """
        return pulumi.get(self, "app_version")

    @_builtins.property
    @pulumi.getter
    def buildpack(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Buildpack to build the app. 3 options: a) Blank means autodetection; b) A Git Url pointing to a buildpack; c) Name of an
        installed buildpack.
        """
        return pulumi.get(self, "buildpack")

    @_builtins.property
    @pulumi.getter
    def command(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The initial command for the app
        """
        return pulumi.get(self, "command")

    @_builtins.property
    @pulumi.getter(name="diskQuota")
    def disk_quota(self) -> pulumi.Output[_builtins.float]:
        """
        The maximum amount of disk available to an instance of an app. In megabytes.
        """
        return pulumi.get(self, "disk_quota")

    @_builtins.property
    @pulumi.getter(name="environmentJson")
    def environment_json(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Key/value pairs of all the environment variables to run in your app. Does not include any system or service variables.
        """
        return pulumi.get(self, "environment_json")

    @_builtins.property
    @pulumi.getter(name="healthCheckHttpEndpoint")
    def health_check_http_endpoint(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Endpoint called to determine if the app is healthy.
        """
        return pulumi.get(self, "health_check_http_endpoint")

    @_builtins.property
    @pulumi.getter(name="healthCheckTimeout")
    def health_check_timeout(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Timeout in seconds for health checking of an staged app when starting up.
        """
        return pulumi.get(self, "health_check_timeout")

    @_builtins.property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Type of health check to perform.
        """
        return pulumi.get(self, "health_check_type")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The number of instances
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> pulumi.Output[_builtins.float]:
        """
        The amount of memory each instance should have. In megabytes.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for the app
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="routeGuids")
    def route_guids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Define the route guids which should be bound to the application.
        """
        return pulumi.get(self, "route_guids")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuids")
    def service_instance_guids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Define the service instance guids that should be bound to this application.
        """
        return pulumi.get(self, "service_instance_guids")

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    def space_guid(self) -> pulumi.Output[_builtins.str]:
        """
        Define space guid to which app belongs
        """
        return pulumi.get(self, "space_guid")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    def wait_time_minutes(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Define timeout to wait for the app instances to start/update/restage etc.
        """
        return pulumi.get(self, "wait_time_minutes")

