# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLogsAlertResult',
    'AwaitableGetLogsAlertResult',
    'get_logs_alert',
    'get_logs_alert_output',
]

@pulumi.output_type
class GetLogsAlertResult:
    """
    A collection of values returned by getLogsAlert.
    """
    def __init__(__self__, active_whens=None, conditions=None, description=None, endpoint_type=None, expirations=None, filters=None, id=None, incident_settings=None, instance_id=None, is_active=None, logs_alert_id=None, meta_labels=None, meta_labels_strings=None, name=None, notification_groups=None, notification_payload_filters=None, region=None, severity=None, unique_identifier=None):
        if active_whens and not isinstance(active_whens, list):
            raise TypeError("Expected argument 'active_whens' to be a list")
        pulumi.set(__self__, "active_whens", active_whens)
        if conditions and not isinstance(conditions, list):
            raise TypeError("Expected argument 'conditions' to be a list")
        pulumi.set(__self__, "conditions", conditions)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if expirations and not isinstance(expirations, list):
            raise TypeError("Expected argument 'expirations' to be a list")
        pulumi.set(__self__, "expirations", expirations)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if incident_settings and not isinstance(incident_settings, list):
            raise TypeError("Expected argument 'incident_settings' to be a list")
        pulumi.set(__self__, "incident_settings", incident_settings)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if is_active and not isinstance(is_active, bool):
            raise TypeError("Expected argument 'is_active' to be a bool")
        pulumi.set(__self__, "is_active", is_active)
        if logs_alert_id and not isinstance(logs_alert_id, str):
            raise TypeError("Expected argument 'logs_alert_id' to be a str")
        pulumi.set(__self__, "logs_alert_id", logs_alert_id)
        if meta_labels and not isinstance(meta_labels, list):
            raise TypeError("Expected argument 'meta_labels' to be a list")
        pulumi.set(__self__, "meta_labels", meta_labels)
        if meta_labels_strings and not isinstance(meta_labels_strings, list):
            raise TypeError("Expected argument 'meta_labels_strings' to be a list")
        pulumi.set(__self__, "meta_labels_strings", meta_labels_strings)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notification_groups and not isinstance(notification_groups, list):
            raise TypeError("Expected argument 'notification_groups' to be a list")
        pulumi.set(__self__, "notification_groups", notification_groups)
        if notification_payload_filters and not isinstance(notification_payload_filters, list):
            raise TypeError("Expected argument 'notification_payload_filters' to be a list")
        pulumi.set(__self__, "notification_payload_filters", notification_payload_filters)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if severity and not isinstance(severity, str):
            raise TypeError("Expected argument 'severity' to be a str")
        pulumi.set(__self__, "severity", severity)
        if unique_identifier and not isinstance(unique_identifier, str):
            raise TypeError("Expected argument 'unique_identifier' to be a str")
        pulumi.set(__self__, "unique_identifier", unique_identifier)

    @_builtins.property
    @pulumi.getter(name="activeWhens")
    def active_whens(self) -> Sequence['outputs.GetLogsAlertActiveWhenResult']:
        return pulumi.get(self, "active_whens")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetLogsAlertConditionResult']:
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def expirations(self) -> Sequence['outputs.GetLogsAlertExpirationResult']:
        return pulumi.get(self, "expirations")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetLogsAlertFilterResult']:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="incidentSettings")
    def incident_settings(self) -> Sequence['outputs.GetLogsAlertIncidentSettingResult']:
        return pulumi.get(self, "incident_settings")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> _builtins.bool:
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter(name="logsAlertId")
    def logs_alert_id(self) -> _builtins.str:
        return pulumi.get(self, "logs_alert_id")

    @_builtins.property
    @pulumi.getter(name="metaLabels")
    def meta_labels(self) -> Sequence['outputs.GetLogsAlertMetaLabelResult']:
        return pulumi.get(self, "meta_labels")

    @_builtins.property
    @pulumi.getter(name="metaLabelsStrings")
    def meta_labels_strings(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "meta_labels_strings")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notificationGroups")
    def notification_groups(self) -> Sequence['outputs.GetLogsAlertNotificationGroupResult']:
        return pulumi.get(self, "notification_groups")

    @_builtins.property
    @pulumi.getter(name="notificationPayloadFilters")
    def notification_payload_filters(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "notification_payload_filters")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter(name="uniqueIdentifier")
    def unique_identifier(self) -> _builtins.str:
        return pulumi.get(self, "unique_identifier")


class AwaitableGetLogsAlertResult(GetLogsAlertResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogsAlertResult(
            active_whens=self.active_whens,
            conditions=self.conditions,
            description=self.description,
            endpoint_type=self.endpoint_type,
            expirations=self.expirations,
            filters=self.filters,
            id=self.id,
            incident_settings=self.incident_settings,
            instance_id=self.instance_id,
            is_active=self.is_active,
            logs_alert_id=self.logs_alert_id,
            meta_labels=self.meta_labels,
            meta_labels_strings=self.meta_labels_strings,
            name=self.name,
            notification_groups=self.notification_groups,
            notification_payload_filters=self.notification_payload_filters,
            region=self.region,
            severity=self.severity,
            unique_identifier=self.unique_identifier)


def get_logs_alert(endpoint_type: Optional[_builtins.str] = None,
                   id: Optional[_builtins.str] = None,
                   instance_id: Optional[_builtins.str] = None,
                   logs_alert_id: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogsAlertResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['logsAlertId'] = logs_alert_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getLogsAlert:getLogsAlert', __args__, opts=opts, typ=GetLogsAlertResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLogsAlertResult(
        active_whens=pulumi.get(__ret__, 'active_whens'),
        conditions=pulumi.get(__ret__, 'conditions'),
        description=pulumi.get(__ret__, 'description'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        expirations=pulumi.get(__ret__, 'expirations'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        incident_settings=pulumi.get(__ret__, 'incident_settings'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        is_active=pulumi.get(__ret__, 'is_active'),
        logs_alert_id=pulumi.get(__ret__, 'logs_alert_id'),
        meta_labels=pulumi.get(__ret__, 'meta_labels'),
        meta_labels_strings=pulumi.get(__ret__, 'meta_labels_strings'),
        name=pulumi.get(__ret__, 'name'),
        notification_groups=pulumi.get(__ret__, 'notification_groups'),
        notification_payload_filters=pulumi.get(__ret__, 'notification_payload_filters'),
        region=pulumi.get(__ret__, 'region'),
        severity=pulumi.get(__ret__, 'severity'),
        unique_identifier=pulumi.get(__ret__, 'unique_identifier'))
def get_logs_alert_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                          logs_alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogsAlertResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['logsAlertId'] = logs_alert_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getLogsAlert:getLogsAlert', __args__, opts=opts, typ=GetLogsAlertResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLogsAlertResult(
        active_whens=pulumi.get(__response__, 'active_whens'),
        conditions=pulumi.get(__response__, 'conditions'),
        description=pulumi.get(__response__, 'description'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        expirations=pulumi.get(__response__, 'expirations'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        incident_settings=pulumi.get(__response__, 'incident_settings'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        is_active=pulumi.get(__response__, 'is_active'),
        logs_alert_id=pulumi.get(__response__, 'logs_alert_id'),
        meta_labels=pulumi.get(__response__, 'meta_labels'),
        meta_labels_strings=pulumi.get(__response__, 'meta_labels_strings'),
        name=pulumi.get(__response__, 'name'),
        notification_groups=pulumi.get(__response__, 'notification_groups'),
        notification_payload_filters=pulumi.get(__response__, 'notification_payload_filters'),
        region=pulumi.get(__response__, 'region'),
        severity=pulumi.get(__response__, 'severity'),
        unique_identifier=pulumi.get(__response__, 'unique_identifier')))
