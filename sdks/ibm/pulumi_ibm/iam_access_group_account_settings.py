# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IamAccessGroupAccountSettingsArgs', 'IamAccessGroupAccountSettings']

@pulumi.input_type
class IamAccessGroupAccountSettingsArgs:
    def __init__(__self__, *,
                 public_access_enabled: pulumi.Input[_builtins.bool],
                 iam_access_group_account_settings_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamAccessGroupAccountSettings resource.
        :param pulumi.Input[_builtins.bool] public_access_enabled: Flag to enable/disable public access groups
        """
        pulumi.set(__self__, "public_access_enabled", public_access_enabled)
        if iam_access_group_account_settings_id is not None:
            pulumi.set(__self__, "iam_access_group_account_settings_id", iam_access_group_account_settings_id)

    @_builtins.property
    @pulumi.getter(name="publicAccessEnabled")
    def public_access_enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        Flag to enable/disable public access groups
        """
        return pulumi.get(self, "public_access_enabled")

    @public_access_enabled.setter
    def public_access_enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "public_access_enabled", value)

    @_builtins.property
    @pulumi.getter(name="iamAccessGroupAccountSettingsId")
    def iam_access_group_account_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_access_group_account_settings_id")

    @iam_access_group_account_settings_id.setter
    def iam_access_group_account_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_access_group_account_settings_id", value)


@pulumi.input_type
class _IamAccessGroupAccountSettingsState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_access_group_account_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_access_enabled: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering IamAccessGroupAccountSettings resources.
        :param pulumi.Input[_builtins.str] account_id: Id of the account
        :param pulumi.Input[_builtins.bool] public_access_enabled: Flag to enable/disable public access groups
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if iam_access_group_account_settings_id is not None:
            pulumi.set(__self__, "iam_access_group_account_settings_id", iam_access_group_account_settings_id)
        if public_access_enabled is not None:
            pulumi.set(__self__, "public_access_enabled", public_access_enabled)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Id of the account
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="iamAccessGroupAccountSettingsId")
    def iam_access_group_account_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_access_group_account_settings_id")

    @iam_access_group_account_settings_id.setter
    def iam_access_group_account_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_access_group_account_settings_id", value)

    @_builtins.property
    @pulumi.getter(name="publicAccessEnabled")
    def public_access_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag to enable/disable public access groups
        """
        return pulumi.get(self, "public_access_enabled")

    @public_access_enabled.setter
    def public_access_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public_access_enabled", value)


@pulumi.type_token("ibm:index/iamAccessGroupAccountSettings:IamAccessGroupAccountSettings")
class IamAccessGroupAccountSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iam_access_group_account_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_access_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a IamAccessGroupAccountSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] public_access_enabled: Flag to enable/disable public access groups
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamAccessGroupAccountSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamAccessGroupAccountSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamAccessGroupAccountSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamAccessGroupAccountSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iam_access_group_account_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_access_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamAccessGroupAccountSettingsArgs.__new__(IamAccessGroupAccountSettingsArgs)

            __props__.__dict__["iam_access_group_account_settings_id"] = iam_access_group_account_settings_id
            if public_access_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'public_access_enabled'")
            __props__.__dict__["public_access_enabled"] = public_access_enabled
            __props__.__dict__["account_id"] = None
        super(IamAccessGroupAccountSettings, __self__).__init__(
            'ibm:index/iamAccessGroupAccountSettings:IamAccessGroupAccountSettings',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            iam_access_group_account_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
            public_access_enabled: Optional[pulumi.Input[_builtins.bool]] = None) -> 'IamAccessGroupAccountSettings':
        """
        Get an existing IamAccessGroupAccountSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: Id of the account
        :param pulumi.Input[_builtins.bool] public_access_enabled: Flag to enable/disable public access groups
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamAccessGroupAccountSettingsState.__new__(_IamAccessGroupAccountSettingsState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["iam_access_group_account_settings_id"] = iam_access_group_account_settings_id
        __props__.__dict__["public_access_enabled"] = public_access_enabled
        return IamAccessGroupAccountSettings(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        Id of the account
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="iamAccessGroupAccountSettingsId")
    def iam_access_group_account_settings_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_access_group_account_settings_id")

    @_builtins.property
    @pulumi.getter(name="publicAccessEnabled")
    def public_access_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Flag to enable/disable public access groups
        """
        return pulumi.get(self, "public_access_enabled")

