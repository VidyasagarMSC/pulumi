# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsInstanceResult',
    'AwaitableGetIsInstanceResult',
    'get_is_instance',
    'get_is_instance_output',
]

@pulumi.output_type
class GetIsInstanceResult:
    """
    A collection of values returned by getIsInstance.
    """
    def __init__(__self__, access_tags=None, availability_policy_host_failure=None, bandwidth=None, boot_volumes=None, catalog_offerings=None, cluster_network_attachments=None, cluster_networks=None, confidential_compute_mode=None, crn=None, disks=None, enable_secure_boot=None, gpus=None, health_reasons=None, health_state=None, id=None, image=None, keys=None, lifecycle_reasons=None, lifecycle_state=None, memory=None, metadata_service_enabled=None, metadata_services=None, name=None, network_attachments=None, network_interfaces=None, numa_count=None, passphrase=None, password=None, placement_targets=None, primary_network_attachments=None, primary_network_interfaces=None, private_key=None, profile=None, reservation_affinities=None, reservations=None, resource_controller_url=None, resource_crn=None, resource_group=None, resource_group_name=None, resource_name=None, resource_status=None, status=None, status_reasons=None, tags=None, total_network_bandwidth=None, total_volume_bandwidth=None, vcpus=None, volume_attachments=None, volumes=None, vpc=None, zone=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if availability_policy_host_failure and not isinstance(availability_policy_host_failure, str):
            raise TypeError("Expected argument 'availability_policy_host_failure' to be a str")
        pulumi.set(__self__, "availability_policy_host_failure", availability_policy_host_failure)
        if bandwidth and not isinstance(bandwidth, float):
            raise TypeError("Expected argument 'bandwidth' to be a float")
        pulumi.set(__self__, "bandwidth", bandwidth)
        if boot_volumes and not isinstance(boot_volumes, list):
            raise TypeError("Expected argument 'boot_volumes' to be a list")
        pulumi.set(__self__, "boot_volumes", boot_volumes)
        if catalog_offerings and not isinstance(catalog_offerings, list):
            raise TypeError("Expected argument 'catalog_offerings' to be a list")
        pulumi.set(__self__, "catalog_offerings", catalog_offerings)
        if cluster_network_attachments and not isinstance(cluster_network_attachments, list):
            raise TypeError("Expected argument 'cluster_network_attachments' to be a list")
        pulumi.set(__self__, "cluster_network_attachments", cluster_network_attachments)
        if cluster_networks and not isinstance(cluster_networks, list):
            raise TypeError("Expected argument 'cluster_networks' to be a list")
        pulumi.set(__self__, "cluster_networks", cluster_networks)
        if confidential_compute_mode and not isinstance(confidential_compute_mode, str):
            raise TypeError("Expected argument 'confidential_compute_mode' to be a str")
        pulumi.set(__self__, "confidential_compute_mode", confidential_compute_mode)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if disks and not isinstance(disks, list):
            raise TypeError("Expected argument 'disks' to be a list")
        pulumi.set(__self__, "disks", disks)
        if enable_secure_boot and not isinstance(enable_secure_boot, bool):
            raise TypeError("Expected argument 'enable_secure_boot' to be a bool")
        pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)
        if gpus and not isinstance(gpus, list):
            raise TypeError("Expected argument 'gpus' to be a list")
        pulumi.set(__self__, "gpus", gpus)
        if health_reasons and not isinstance(health_reasons, list):
            raise TypeError("Expected argument 'health_reasons' to be a list")
        pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state and not isinstance(health_state, str):
            raise TypeError("Expected argument 'health_state' to be a str")
        pulumi.set(__self__, "health_state", health_state)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        pulumi.set(__self__, "image", image)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)
        if lifecycle_reasons and not isinstance(lifecycle_reasons, list):
            raise TypeError("Expected argument 'lifecycle_reasons' to be a list")
        pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if memory and not isinstance(memory, float):
            raise TypeError("Expected argument 'memory' to be a float")
        pulumi.set(__self__, "memory", memory)
        if metadata_service_enabled and not isinstance(metadata_service_enabled, bool):
            raise TypeError("Expected argument 'metadata_service_enabled' to be a bool")
        pulumi.set(__self__, "metadata_service_enabled", metadata_service_enabled)
        if metadata_services and not isinstance(metadata_services, list):
            raise TypeError("Expected argument 'metadata_services' to be a list")
        pulumi.set(__self__, "metadata_services", metadata_services)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_attachments and not isinstance(network_attachments, list):
            raise TypeError("Expected argument 'network_attachments' to be a list")
        pulumi.set(__self__, "network_attachments", network_attachments)
        if network_interfaces and not isinstance(network_interfaces, list):
            raise TypeError("Expected argument 'network_interfaces' to be a list")
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        if numa_count and not isinstance(numa_count, float):
            raise TypeError("Expected argument 'numa_count' to be a float")
        pulumi.set(__self__, "numa_count", numa_count)
        if passphrase and not isinstance(passphrase, str):
            raise TypeError("Expected argument 'passphrase' to be a str")
        pulumi.set(__self__, "passphrase", passphrase)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if placement_targets and not isinstance(placement_targets, list):
            raise TypeError("Expected argument 'placement_targets' to be a list")
        pulumi.set(__self__, "placement_targets", placement_targets)
        if primary_network_attachments and not isinstance(primary_network_attachments, list):
            raise TypeError("Expected argument 'primary_network_attachments' to be a list")
        pulumi.set(__self__, "primary_network_attachments", primary_network_attachments)
        if primary_network_interfaces and not isinstance(primary_network_interfaces, list):
            raise TypeError("Expected argument 'primary_network_interfaces' to be a list")
        pulumi.set(__self__, "primary_network_interfaces", primary_network_interfaces)
        if private_key and not isinstance(private_key, str):
            raise TypeError("Expected argument 'private_key' to be a str")
        pulumi.set(__self__, "private_key", private_key)
        if profile and not isinstance(profile, str):
            raise TypeError("Expected argument 'profile' to be a str")
        pulumi.set(__self__, "profile", profile)
        if reservation_affinities and not isinstance(reservation_affinities, list):
            raise TypeError("Expected argument 'reservation_affinities' to be a list")
        pulumi.set(__self__, "reservation_affinities", reservation_affinities)
        if reservations and not isinstance(reservations, list):
            raise TypeError("Expected argument 'reservations' to be a list")
        pulumi.set(__self__, "reservations", reservations)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn and not isinstance(resource_crn, str):
            raise TypeError("Expected argument 'resource_crn' to be a str")
        pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if resource_status and not isinstance(resource_status, str):
            raise TypeError("Expected argument 'resource_status' to be a str")
        pulumi.set(__self__, "resource_status", resource_status)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_network_bandwidth and not isinstance(total_network_bandwidth, float):
            raise TypeError("Expected argument 'total_network_bandwidth' to be a float")
        pulumi.set(__self__, "total_network_bandwidth", total_network_bandwidth)
        if total_volume_bandwidth and not isinstance(total_volume_bandwidth, float):
            raise TypeError("Expected argument 'total_volume_bandwidth' to be a float")
        pulumi.set(__self__, "total_volume_bandwidth", total_volume_bandwidth)
        if vcpus and not isinstance(vcpus, list):
            raise TypeError("Expected argument 'vcpus' to be a list")
        pulumi.set(__self__, "vcpus", vcpus)
        if volume_attachments and not isinstance(volume_attachments, list):
            raise TypeError("Expected argument 'volume_attachments' to be a list")
        pulumi.set(__self__, "volume_attachments", volume_attachments)
        if volumes and not isinstance(volumes, list):
            raise TypeError("Expected argument 'volumes' to be a list")
        pulumi.set(__self__, "volumes", volumes)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="availabilityPolicyHostFailure")
    def availability_policy_host_failure(self) -> _builtins.str:
        return pulumi.get(self, "availability_policy_host_failure")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.float:
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="bootVolumes")
    def boot_volumes(self) -> Sequence['outputs.GetIsInstanceBootVolumeResult']:
        return pulumi.get(self, "boot_volumes")

    @_builtins.property
    @pulumi.getter(name="catalogOfferings")
    def catalog_offerings(self) -> Sequence['outputs.GetIsInstanceCatalogOfferingResult']:
        return pulumi.get(self, "catalog_offerings")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkAttachments")
    def cluster_network_attachments(self) -> Sequence['outputs.GetIsInstanceClusterNetworkAttachmentResult']:
        return pulumi.get(self, "cluster_network_attachments")

    @_builtins.property
    @pulumi.getter(name="clusterNetworks")
    def cluster_networks(self) -> Sequence['outputs.GetIsInstanceClusterNetworkResult']:
        return pulumi.get(self, "cluster_networks")

    @_builtins.property
    @pulumi.getter(name="confidentialComputeMode")
    def confidential_compute_mode(self) -> _builtins.str:
        return pulumi.get(self, "confidential_compute_mode")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetIsInstanceDiskResult']:
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> _builtins.bool:
        return pulumi.get(self, "enable_secure_boot")

    @_builtins.property
    @pulumi.getter
    def gpus(self) -> Sequence['outputs.GetIsInstanceGpusResult']:
        return pulumi.get(self, "gpus")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Sequence['outputs.GetIsInstanceHealthReasonResult']:
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> _builtins.str:
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Sequence['outputs.GetIsInstanceKeyResult']:
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Sequence['outputs.GetIsInstanceLifecycleReasonResult']:
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.float:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="metadataServiceEnabled")
    def metadata_service_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "metadata_service_enabled")

    @_builtins.property
    @pulumi.getter(name="metadataServices")
    def metadata_services(self) -> Sequence['outputs.GetIsInstanceMetadataServiceResult']:
        return pulumi.get(self, "metadata_services")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> Sequence['outputs.GetIsInstanceNetworkAttachmentResult']:
        return pulumi.get(self, "network_attachments")

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.GetIsInstanceNetworkInterfaceResult']:
        return pulumi.get(self, "network_interfaces")

    @_builtins.property
    @pulumi.getter(name="numaCount")
    def numa_count(self) -> _builtins.float:
        return pulumi.get(self, "numa_count")

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "passphrase")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="placementTargets")
    def placement_targets(self) -> Sequence['outputs.GetIsInstancePlacementTargetResult']:
        return pulumi.get(self, "placement_targets")

    @_builtins.property
    @pulumi.getter(name="primaryNetworkAttachments")
    def primary_network_attachments(self) -> Sequence['outputs.GetIsInstancePrimaryNetworkAttachmentResult']:
        return pulumi.get(self, "primary_network_attachments")

    @_builtins.property
    @pulumi.getter(name="primaryNetworkInterfaces")
    def primary_network_interfaces(self) -> Sequence['outputs.GetIsInstancePrimaryNetworkInterfaceResult']:
        return pulumi.get(self, "primary_network_interfaces")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> _builtins.str:
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="reservationAffinities")
    def reservation_affinities(self) -> Sequence['outputs.GetIsInstanceReservationAffinityResult']:
        return pulumi.get(self, "reservation_affinities")

    @_builtins.property
    @pulumi.getter
    def reservations(self) -> Sequence['outputs.GetIsInstanceReservationResult']:
        return pulumi.get(self, "reservations")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> _builtins.str:
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> _builtins.str:
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Sequence['outputs.GetIsInstanceStatusReasonResult']:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="totalNetworkBandwidth")
    def total_network_bandwidth(self) -> _builtins.float:
        return pulumi.get(self, "total_network_bandwidth")

    @_builtins.property
    @pulumi.getter(name="totalVolumeBandwidth")
    def total_volume_bandwidth(self) -> _builtins.float:
        return pulumi.get(self, "total_volume_bandwidth")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Sequence['outputs.GetIsInstanceVcpusResult']:
        return pulumi.get(self, "vcpus")

    @_builtins.property
    @pulumi.getter(name="volumeAttachments")
    def volume_attachments(self) -> Sequence['outputs.GetIsInstanceVolumeAttachmentResult']:
        return pulumi.get(self, "volume_attachments")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> _builtins.str:
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetIsInstanceResult(GetIsInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceResult(
            access_tags=self.access_tags,
            availability_policy_host_failure=self.availability_policy_host_failure,
            bandwidth=self.bandwidth,
            boot_volumes=self.boot_volumes,
            catalog_offerings=self.catalog_offerings,
            cluster_network_attachments=self.cluster_network_attachments,
            cluster_networks=self.cluster_networks,
            confidential_compute_mode=self.confidential_compute_mode,
            crn=self.crn,
            disks=self.disks,
            enable_secure_boot=self.enable_secure_boot,
            gpus=self.gpus,
            health_reasons=self.health_reasons,
            health_state=self.health_state,
            id=self.id,
            image=self.image,
            keys=self.keys,
            lifecycle_reasons=self.lifecycle_reasons,
            lifecycle_state=self.lifecycle_state,
            memory=self.memory,
            metadata_service_enabled=self.metadata_service_enabled,
            metadata_services=self.metadata_services,
            name=self.name,
            network_attachments=self.network_attachments,
            network_interfaces=self.network_interfaces,
            numa_count=self.numa_count,
            passphrase=self.passphrase,
            password=self.password,
            placement_targets=self.placement_targets,
            primary_network_attachments=self.primary_network_attachments,
            primary_network_interfaces=self.primary_network_interfaces,
            private_key=self.private_key,
            profile=self.profile,
            reservation_affinities=self.reservation_affinities,
            reservations=self.reservations,
            resource_controller_url=self.resource_controller_url,
            resource_crn=self.resource_crn,
            resource_group=self.resource_group,
            resource_group_name=self.resource_group_name,
            resource_name=self.resource_name,
            resource_status=self.resource_status,
            status=self.status,
            status_reasons=self.status_reasons,
            tags=self.tags,
            total_network_bandwidth=self.total_network_bandwidth,
            total_volume_bandwidth=self.total_volume_bandwidth,
            vcpus=self.vcpus,
            volume_attachments=self.volume_attachments,
            volumes=self.volumes,
            vpc=self.vpc,
            zone=self.zone)


def get_is_instance(id: Optional[_builtins.str] = None,
                    name: Optional[_builtins.str] = None,
                    passphrase: Optional[_builtins.str] = None,
                    private_key: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['passphrase'] = passphrase
    __args__['privateKey'] = private_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstance:getIsInstance', __args__, opts=opts, typ=GetIsInstanceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        availability_policy_host_failure=pulumi.get(__ret__, 'availability_policy_host_failure'),
        bandwidth=pulumi.get(__ret__, 'bandwidth'),
        boot_volumes=pulumi.get(__ret__, 'boot_volumes'),
        catalog_offerings=pulumi.get(__ret__, 'catalog_offerings'),
        cluster_network_attachments=pulumi.get(__ret__, 'cluster_network_attachments'),
        cluster_networks=pulumi.get(__ret__, 'cluster_networks'),
        confidential_compute_mode=pulumi.get(__ret__, 'confidential_compute_mode'),
        crn=pulumi.get(__ret__, 'crn'),
        disks=pulumi.get(__ret__, 'disks'),
        enable_secure_boot=pulumi.get(__ret__, 'enable_secure_boot'),
        gpus=pulumi.get(__ret__, 'gpus'),
        health_reasons=pulumi.get(__ret__, 'health_reasons'),
        health_state=pulumi.get(__ret__, 'health_state'),
        id=pulumi.get(__ret__, 'id'),
        image=pulumi.get(__ret__, 'image'),
        keys=pulumi.get(__ret__, 'keys'),
        lifecycle_reasons=pulumi.get(__ret__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        memory=pulumi.get(__ret__, 'memory'),
        metadata_service_enabled=pulumi.get(__ret__, 'metadata_service_enabled'),
        metadata_services=pulumi.get(__ret__, 'metadata_services'),
        name=pulumi.get(__ret__, 'name'),
        network_attachments=pulumi.get(__ret__, 'network_attachments'),
        network_interfaces=pulumi.get(__ret__, 'network_interfaces'),
        numa_count=pulumi.get(__ret__, 'numa_count'),
        passphrase=pulumi.get(__ret__, 'passphrase'),
        password=pulumi.get(__ret__, 'password'),
        placement_targets=pulumi.get(__ret__, 'placement_targets'),
        primary_network_attachments=pulumi.get(__ret__, 'primary_network_attachments'),
        primary_network_interfaces=pulumi.get(__ret__, 'primary_network_interfaces'),
        private_key=pulumi.get(__ret__, 'private_key'),
        profile=pulumi.get(__ret__, 'profile'),
        reservation_affinities=pulumi.get(__ret__, 'reservation_affinities'),
        reservations=pulumi.get(__ret__, 'reservations'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        resource_crn=pulumi.get(__ret__, 'resource_crn'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        resource_status=pulumi.get(__ret__, 'resource_status'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        tags=pulumi.get(__ret__, 'tags'),
        total_network_bandwidth=pulumi.get(__ret__, 'total_network_bandwidth'),
        total_volume_bandwidth=pulumi.get(__ret__, 'total_volume_bandwidth'),
        vcpus=pulumi.get(__ret__, 'vcpus'),
        volume_attachments=pulumi.get(__ret__, 'volume_attachments'),
        volumes=pulumi.get(__ret__, 'volumes'),
        vpc=pulumi.get(__ret__, 'vpc'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_instance_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           name: Optional[pulumi.Input[_builtins.str]] = None,
                           passphrase: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           private_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['passphrase'] = passphrase
    __args__['privateKey'] = private_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstance:getIsInstance', __args__, opts=opts, typ=GetIsInstanceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        availability_policy_host_failure=pulumi.get(__response__, 'availability_policy_host_failure'),
        bandwidth=pulumi.get(__response__, 'bandwidth'),
        boot_volumes=pulumi.get(__response__, 'boot_volumes'),
        catalog_offerings=pulumi.get(__response__, 'catalog_offerings'),
        cluster_network_attachments=pulumi.get(__response__, 'cluster_network_attachments'),
        cluster_networks=pulumi.get(__response__, 'cluster_networks'),
        confidential_compute_mode=pulumi.get(__response__, 'confidential_compute_mode'),
        crn=pulumi.get(__response__, 'crn'),
        disks=pulumi.get(__response__, 'disks'),
        enable_secure_boot=pulumi.get(__response__, 'enable_secure_boot'),
        gpus=pulumi.get(__response__, 'gpus'),
        health_reasons=pulumi.get(__response__, 'health_reasons'),
        health_state=pulumi.get(__response__, 'health_state'),
        id=pulumi.get(__response__, 'id'),
        image=pulumi.get(__response__, 'image'),
        keys=pulumi.get(__response__, 'keys'),
        lifecycle_reasons=pulumi.get(__response__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        memory=pulumi.get(__response__, 'memory'),
        metadata_service_enabled=pulumi.get(__response__, 'metadata_service_enabled'),
        metadata_services=pulumi.get(__response__, 'metadata_services'),
        name=pulumi.get(__response__, 'name'),
        network_attachments=pulumi.get(__response__, 'network_attachments'),
        network_interfaces=pulumi.get(__response__, 'network_interfaces'),
        numa_count=pulumi.get(__response__, 'numa_count'),
        passphrase=pulumi.get(__response__, 'passphrase'),
        password=pulumi.get(__response__, 'password'),
        placement_targets=pulumi.get(__response__, 'placement_targets'),
        primary_network_attachments=pulumi.get(__response__, 'primary_network_attachments'),
        primary_network_interfaces=pulumi.get(__response__, 'primary_network_interfaces'),
        private_key=pulumi.get(__response__, 'private_key'),
        profile=pulumi.get(__response__, 'profile'),
        reservation_affinities=pulumi.get(__response__, 'reservation_affinities'),
        reservations=pulumi.get(__response__, 'reservations'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        resource_crn=pulumi.get(__response__, 'resource_crn'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_group_name=pulumi.get(__response__, 'resource_group_name'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        resource_status=pulumi.get(__response__, 'resource_status'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        tags=pulumi.get(__response__, 'tags'),
        total_network_bandwidth=pulumi.get(__response__, 'total_network_bandwidth'),
        total_volume_bandwidth=pulumi.get(__response__, 'total_volume_bandwidth'),
        vcpus=pulumi.get(__response__, 'vcpus'),
        volume_attachments=pulumi.get(__response__, 'volume_attachments'),
        volumes=pulumi.get(__response__, 'volumes'),
        vpc=pulumi.get(__response__, 'vpc'),
        zone=pulumi.get(__response__, 'zone')))
