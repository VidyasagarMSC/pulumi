# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsShareArgs', 'IsShare']

@pulumi.input_type
class IsShareArgs:
    def __init__(__self__, *,
                 access_control_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_transit_encryption_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 initial_owner: Optional[pulumi.Input['IsShareInitialOwnerArgs']] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 is_share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mount_targets: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareMountTargetArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_share: Optional[pulumi.Input['IsShareOriginShareArgs']] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 replica_share: Optional[pulumi.Input['IsShareReplicaShareArgs']] = None,
                 replication_cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.float]] = None,
                 source_share: Optional[pulumi.Input[_builtins.str]] = None,
                 source_share_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot: Optional[pulumi.Input['IsShareSourceSnapshotArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsShare resource.
        :param pulumi.Input[_builtins.str] access_control_mode: The access control mode for the share:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_transit_encryption_modes: Allowed transit encryption modes
        :param pulumi.Input[_builtins.str] encryption_key: The CRN of the key to use for encrypting this file share.If no encryption key is provided, the share will not be
               encrypted.
        :param pulumi.Input['IsShareInitialOwnerArgs'] initial_owner: The owner assigned to the file share at creation.
        :param pulumi.Input[_builtins.float] iops: The maximum input/output operation performance bandwidth per second for the file share.
        :param pulumi.Input[Sequence[pulumi.Input['IsShareMountTargetArgs']]] mount_targets: The share targets for this file share.Share targets mounted from a replica must be mounted read-only.
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this file share. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input['IsShareOriginShareArgs'] origin_share: The origin share this accessor share is referring to.This property will be present when the `accessor_binding_role` is
               `accessor`.
        :param pulumi.Input[_builtins.str] profile: The globally unique name for this share profile.
        :param pulumi.Input['IsShareReplicaShareArgs'] replica_share: Configuration for a replica file share to create and associate with this file share. Ifunspecified, a replica may be
               subsequently added by creating a new file share with a`source_share` referencing this file share.
        :param pulumi.Input[_builtins.str] replication_cron_spec: The cron specification for the file share replication schedule.Replication of a share can be scheduled to occur at most
               once per hour.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier of the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.float] size: The size of the file share rounded up to the next gigabyte.
        :param pulumi.Input[_builtins.str] source_share: The ID of the source file share for this replica file share. The specified file share must not already have a replica,
               and must not be a replica.
        :param pulumi.Input[_builtins.str] source_share_crn: The CRN of the source file share for this replica file share. The specified file share must not already have a replica,
               and must not be a replica.
        :param pulumi.Input['IsShareSourceSnapshotArgs'] source_snapshot: The snapshot from which this share was cloned.This property will be present when the share was created from a
               snapshot.The resources supported by this property
               may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in thefuture.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: User Tags for the file share
        :param pulumi.Input[_builtins.str] zone: The globally unique name of the zone this file share will reside in.
        """
        if access_control_mode is not None:
            pulumi.set(__self__, "access_control_mode", access_control_mode)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if allowed_transit_encryption_modes is not None:
            pulumi.set(__self__, "allowed_transit_encryption_modes", allowed_transit_encryption_modes)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if initial_owner is not None:
            pulumi.set(__self__, "initial_owner", initial_owner)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if is_share_id is not None:
            pulumi.set(__self__, "is_share_id", is_share_id)
        if mount_targets is not None:
            pulumi.set(__self__, "mount_targets", mount_targets)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if origin_share is not None:
            pulumi.set(__self__, "origin_share", origin_share)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if replica_share is not None:
            pulumi.set(__self__, "replica_share", replica_share)
        if replication_cron_spec is not None:
            pulumi.set(__self__, "replication_cron_spec", replication_cron_spec)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if source_share is not None:
            pulumi.set(__self__, "source_share", source_share)
        if source_share_crn is not None:
            pulumi.set(__self__, "source_share_crn", source_share_crn)
        if source_snapshot is not None:
            pulumi.set(__self__, "source_snapshot", source_snapshot)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessControlMode")
    def access_control_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The access control mode for the share:
        """
        return pulumi.get(self, "access_control_mode")

    @access_control_mode.setter
    def access_control_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_control_mode", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="allowedTransitEncryptionModes")
    def allowed_transit_encryption_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Allowed transit encryption modes
        """
        return pulumi.get(self, "allowed_transit_encryption_modes")

    @allowed_transit_encryption_modes.setter
    def allowed_transit_encryption_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_transit_encryption_modes", value)

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of the key to use for encrypting this file share.If no encryption key is provided, the share will not be
        encrypted.
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_key", value)

    @_builtins.property
    @pulumi.getter(name="initialOwner")
    def initial_owner(self) -> Optional[pulumi.Input['IsShareInitialOwnerArgs']]:
        """
        The owner assigned to the file share at creation.
        """
        return pulumi.get(self, "initial_owner")

    @initial_owner.setter
    def initial_owner(self, value: Optional[pulumi.Input['IsShareInitialOwnerArgs']]):
        pulumi.set(self, "initial_owner", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum input/output operation performance bandwidth per second for the file share.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter(name="isShareId")
    def is_share_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_share_id")

    @is_share_id.setter
    def is_share_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_share_id", value)

    @_builtins.property
    @pulumi.getter(name="mountTargets")
    def mount_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsShareMountTargetArgs']]]]:
        """
        The share targets for this file share.Share targets mounted from a replica must be mounted read-only.
        """
        return pulumi.get(self, "mount_targets")

    @mount_targets.setter
    def mount_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareMountTargetArgs']]]]):
        pulumi.set(self, "mount_targets", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique user-defined name for this file share. If unspecified, the name will be a hyphenated list of
        randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="originShare")
    def origin_share(self) -> Optional[pulumi.Input['IsShareOriginShareArgs']]:
        """
        The origin share this accessor share is referring to.This property will be present when the `accessor_binding_role` is
        `accessor`.
        """
        return pulumi.get(self, "origin_share")

    @origin_share.setter
    def origin_share(self, value: Optional[pulumi.Input['IsShareOriginShareArgs']]):
        pulumi.set(self, "origin_share", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique name for this share profile.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="replicaShare")
    def replica_share(self) -> Optional[pulumi.Input['IsShareReplicaShareArgs']]:
        """
        Configuration for a replica file share to create and associate with this file share. Ifunspecified, a replica may be
        subsequently added by creating a new file share with a`source_share` referencing this file share.
        """
        return pulumi.get(self, "replica_share")

    @replica_share.setter
    def replica_share(self, value: Optional[pulumi.Input['IsShareReplicaShareArgs']]):
        pulumi.set(self, "replica_share", value)

    @_builtins.property
    @pulumi.getter(name="replicationCronSpec")
    def replication_cron_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cron specification for the file share replication schedule.Replication of a share can be scheduled to occur at most
        once per hour.
        """
        return pulumi.get(self, "replication_cron_spec")

    @replication_cron_spec.setter
    def replication_cron_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "replication_cron_spec", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The size of the file share rounded up to the next gigabyte.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="sourceShare")
    def source_share(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the source file share for this replica file share. The specified file share must not already have a replica,
        and must not be a replica.
        """
        return pulumi.get(self, "source_share")

    @source_share.setter
    def source_share(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_share", value)

    @_builtins.property
    @pulumi.getter(name="sourceShareCrn")
    def source_share_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of the source file share for this replica file share. The specified file share must not already have a replica,
        and must not be a replica.
        """
        return pulumi.get(self, "source_share_crn")

    @source_share_crn.setter
    def source_share_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_share_crn", value)

    @_builtins.property
    @pulumi.getter(name="sourceSnapshot")
    def source_snapshot(self) -> Optional[pulumi.Input['IsShareSourceSnapshotArgs']]:
        """
        The snapshot from which this share was cloned.This property will be present when the share was created from a
        snapshot.The resources supported by this property
        may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in thefuture.
        """
        return pulumi.get(self, "source_snapshot")

    @source_snapshot.setter
    def source_snapshot(self, value: Optional[pulumi.Input['IsShareSourceSnapshotArgs']]):
        pulumi.set(self, "source_snapshot", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        User Tags for the file share
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique name of the zone this file share will reside in.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class _IsShareState:
    def __init__(__self__, *,
                 access_control_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 accessor_binding_role: Optional[pulumi.Input[_builtins.str]] = None,
                 accessor_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareAccessorBindingArgs']]]] = None,
                 allowed_transit_encryption_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 initial_owner: Optional[pulumi.Input['IsShareInitialOwnerArgs']] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 is_share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_sync_at: Optional[pulumi.Input[_builtins.str]] = None,
                 latest_jobs: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareLatestJobArgs']]]] = None,
                 latest_syncs: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareLatestSyncArgs']]]] = None,
                 lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareLifecycleReasonArgs']]]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 mount_targets: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareMountTargetArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_share: Optional[pulumi.Input['IsShareOriginShareArgs']] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 replica_share: Optional[pulumi.Input['IsShareReplicaShareArgs']] = None,
                 replication_cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 replication_role: Optional[pulumi.Input[_builtins.str]] = None,
                 replication_status: Optional[pulumi.Input[_builtins.str]] = None,
                 replication_status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareReplicationStatusReasonArgs']]]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.float]] = None,
                 snapshot_count: Optional[pulumi.Input[_builtins.float]] = None,
                 snapshot_size: Optional[pulumi.Input[_builtins.float]] = None,
                 source_share: Optional[pulumi.Input[_builtins.str]] = None,
                 source_share_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot: Optional[pulumi.Input['IsShareSourceSnapshotArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsShare resources.
        :param pulumi.Input[_builtins.str] access_control_mode: The access control mode for the share:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] accessor_binding_role: The accessor binding role of this file share:- `none`: This file share is not participating in access with another file
               share- `origin`: This file share is the origin for one or more file shares (which may be in other accounts)- `accessor`:
               This file share is providing access to another file share (which may be in another account).
        :param pulumi.Input[Sequence[pulumi.Input['IsShareAccessorBindingArgs']]] accessor_bindings: The accessor bindings for this file share. Each accessor binding identifies a resource (possibly in another account)
               with access to this file share's data.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_transit_encryption_modes: Allowed transit encryption modes
        :param pulumi.Input[_builtins.str] created_at: The date and time that the file share is created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this share.
        :param pulumi.Input[_builtins.str] encryption: The type of encryption used for this file share.
        :param pulumi.Input[_builtins.str] encryption_key: The CRN of the key to use for encrypting this file share.If no encryption key is provided, the share will not be
               encrypted.
        :param pulumi.Input[_builtins.str] href: The URL for this share.
        :param pulumi.Input['IsShareInitialOwnerArgs'] initial_owner: The owner assigned to the file share at creation.
        :param pulumi.Input[_builtins.float] iops: The maximum input/output operation performance bandwidth per second for the file share.
        :param pulumi.Input[_builtins.str] last_sync_at: The date and time that the file share was last synchronized to its replica.This property will be present when the
               `replication_role` is `source`.
        :param pulumi.Input[Sequence[pulumi.Input['IsShareLatestJobArgs']]] latest_jobs: The latest job associated with this file share.This property will be absent if no jobs have been created for this file
               share.
        :param pulumi.Input[Sequence[pulumi.Input['IsShareLatestSyncArgs']]] latest_syncs: Information about the latest synchronization for this file share.
        :param pulumi.Input[Sequence[pulumi.Input['IsShareLifecycleReasonArgs']]] lifecycle_reasons: The reasons for the current lifecycle_state (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the file share.
        :param pulumi.Input[Sequence[pulumi.Input['IsShareMountTargetArgs']]] mount_targets: The share targets for this file share.Share targets mounted from a replica must be mounted read-only.
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this file share. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input['IsShareOriginShareArgs'] origin_share: The origin share this accessor share is referring to.This property will be present when the `accessor_binding_role` is
               `accessor`.
        :param pulumi.Input[_builtins.str] profile: The globally unique name for this share profile.
        :param pulumi.Input['IsShareReplicaShareArgs'] replica_share: Configuration for a replica file share to create and associate with this file share. Ifunspecified, a replica may be
               subsequently added by creating a new file share with a`source_share` referencing this file share.
        :param pulumi.Input[_builtins.str] replication_cron_spec: The cron specification for the file share replication schedule.Replication of a share can be scheduled to occur at most
               once per hour.
        :param pulumi.Input[_builtins.str] replication_role: The replication role of the file share.* `none`: This share is not participating in replication.* `replica`: This share
               is a replication target.* `source`: This share is a replication source.
        :param pulumi.Input[_builtins.str] replication_status: The replication status of the file share.* `initializing`: This share is initializing replication.* `active`: This share
               is actively participating in replication.* `failover_pending`: This share is performing a replication failover.*
               `split_pending`: This share is performing a replication split.* `none`: This share is not participating in replication.*
               `degraded`: This share's replication sync is degraded.* `sync_pending`: This share is performing a replication sync.
        :param pulumi.Input[Sequence[pulumi.Input['IsShareReplicationStatusReasonArgs']]] replication_status_reasons: The reasons for the current replication status (if any).The enumerated reason code values for this property will expand
               in the future. When processing this property, check for and log unknown values. Optionally halt processing and surface
               the error, or bypass the resource on which the unexpected reason code was encountered.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier of the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] resource_type: The type of resource referenced.
        :param pulumi.Input[_builtins.float] size: The size of the file share rounded up to the next gigabyte.
        :param pulumi.Input[_builtins.float] snapshot_count: The total number of snapshots for this share.
        :param pulumi.Input[_builtins.float] snapshot_size: The total size (in gigabytes) of snapshots used for this file share.
        :param pulumi.Input[_builtins.str] source_share: The ID of the source file share for this replica file share. The specified file share must not already have a replica,
               and must not be a replica.
        :param pulumi.Input[_builtins.str] source_share_crn: The CRN of the source file share for this replica file share. The specified file share must not already have a replica,
               and must not be a replica.
        :param pulumi.Input['IsShareSourceSnapshotArgs'] source_snapshot: The snapshot from which this share was cloned.This property will be present when the share was created from a
               snapshot.The resources supported by this property
               may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in thefuture.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: User Tags for the file share
        :param pulumi.Input[_builtins.str] zone: The globally unique name of the zone this file share will reside in.
        """
        if access_control_mode is not None:
            pulumi.set(__self__, "access_control_mode", access_control_mode)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if accessor_binding_role is not None:
            pulumi.set(__self__, "accessor_binding_role", accessor_binding_role)
        if accessor_bindings is not None:
            pulumi.set(__self__, "accessor_bindings", accessor_bindings)
        if allowed_transit_encryption_modes is not None:
            pulumi.set(__self__, "allowed_transit_encryption_modes", allowed_transit_encryption_modes)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if initial_owner is not None:
            pulumi.set(__self__, "initial_owner", initial_owner)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if is_share_id is not None:
            pulumi.set(__self__, "is_share_id", is_share_id)
        if last_sync_at is not None:
            pulumi.set(__self__, "last_sync_at", last_sync_at)
        if latest_jobs is not None:
            pulumi.set(__self__, "latest_jobs", latest_jobs)
        if latest_syncs is not None:
            pulumi.set(__self__, "latest_syncs", latest_syncs)
        if lifecycle_reasons is not None:
            pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if mount_targets is not None:
            pulumi.set(__self__, "mount_targets", mount_targets)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if origin_share is not None:
            pulumi.set(__self__, "origin_share", origin_share)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if replica_share is not None:
            pulumi.set(__self__, "replica_share", replica_share)
        if replication_cron_spec is not None:
            pulumi.set(__self__, "replication_cron_spec", replication_cron_spec)
        if replication_role is not None:
            pulumi.set(__self__, "replication_role", replication_role)
        if replication_status is not None:
            pulumi.set(__self__, "replication_status", replication_status)
        if replication_status_reasons is not None:
            pulumi.set(__self__, "replication_status_reasons", replication_status_reasons)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_count is not None:
            pulumi.set(__self__, "snapshot_count", snapshot_count)
        if snapshot_size is not None:
            pulumi.set(__self__, "snapshot_size", snapshot_size)
        if source_share is not None:
            pulumi.set(__self__, "source_share", source_share)
        if source_share_crn is not None:
            pulumi.set(__self__, "source_share_crn", source_share_crn)
        if source_snapshot is not None:
            pulumi.set(__self__, "source_snapshot", source_snapshot)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessControlMode")
    def access_control_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The access control mode for the share:
        """
        return pulumi.get(self, "access_control_mode")

    @access_control_mode.setter
    def access_control_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_control_mode", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="accessorBindingRole")
    def accessor_binding_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The accessor binding role of this file share:- `none`: This file share is not participating in access with another file
        share- `origin`: This file share is the origin for one or more file shares (which may be in other accounts)- `accessor`:
        This file share is providing access to another file share (which may be in another account).
        """
        return pulumi.get(self, "accessor_binding_role")

    @accessor_binding_role.setter
    def accessor_binding_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accessor_binding_role", value)

    @_builtins.property
    @pulumi.getter(name="accessorBindings")
    def accessor_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsShareAccessorBindingArgs']]]]:
        """
        The accessor bindings for this file share. Each accessor binding identifies a resource (possibly in another account)
        with access to this file share's data.
        """
        return pulumi.get(self, "accessor_bindings")

    @accessor_bindings.setter
    def accessor_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareAccessorBindingArgs']]]]):
        pulumi.set(self, "accessor_bindings", value)

    @_builtins.property
    @pulumi.getter(name="allowedTransitEncryptionModes")
    def allowed_transit_encryption_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Allowed transit encryption modes
        """
        return pulumi.get(self, "allowed_transit_encryption_modes")

    @allowed_transit_encryption_modes.setter
    def allowed_transit_encryption_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_transit_encryption_modes", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the file share is created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this share.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of encryption used for this file share.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption", value)

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of the key to use for encrypting this file share.If no encryption key is provided, the share will not be
        encrypted.
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_key", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this share.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="initialOwner")
    def initial_owner(self) -> Optional[pulumi.Input['IsShareInitialOwnerArgs']]:
        """
        The owner assigned to the file share at creation.
        """
        return pulumi.get(self, "initial_owner")

    @initial_owner.setter
    def initial_owner(self, value: Optional[pulumi.Input['IsShareInitialOwnerArgs']]):
        pulumi.set(self, "initial_owner", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum input/output operation performance bandwidth per second for the file share.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter(name="isShareId")
    def is_share_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_share_id")

    @is_share_id.setter
    def is_share_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_share_id", value)

    @_builtins.property
    @pulumi.getter(name="lastSyncAt")
    def last_sync_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the file share was last synchronized to its replica.This property will be present when the
        `replication_role` is `source`.
        """
        return pulumi.get(self, "last_sync_at")

    @last_sync_at.setter
    def last_sync_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_sync_at", value)

    @_builtins.property
    @pulumi.getter(name="latestJobs")
    def latest_jobs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsShareLatestJobArgs']]]]:
        """
        The latest job associated with this file share.This property will be absent if no jobs have been created for this file
        share.
        """
        return pulumi.get(self, "latest_jobs")

    @latest_jobs.setter
    def latest_jobs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareLatestJobArgs']]]]):
        pulumi.set(self, "latest_jobs", value)

    @_builtins.property
    @pulumi.getter(name="latestSyncs")
    def latest_syncs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsShareLatestSyncArgs']]]]:
        """
        Information about the latest synchronization for this file share.
        """
        return pulumi.get(self, "latest_syncs")

    @latest_syncs.setter
    def latest_syncs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareLatestSyncArgs']]]]):
        pulumi.set(self, "latest_syncs", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsShareLifecycleReasonArgs']]]]:
        """
        The reasons for the current lifecycle_state (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @lifecycle_reasons.setter
    def lifecycle_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareLifecycleReasonArgs']]]]):
        pulumi.set(self, "lifecycle_reasons", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the file share.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter(name="mountTargets")
    def mount_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsShareMountTargetArgs']]]]:
        """
        The share targets for this file share.Share targets mounted from a replica must be mounted read-only.
        """
        return pulumi.get(self, "mount_targets")

    @mount_targets.setter
    def mount_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareMountTargetArgs']]]]):
        pulumi.set(self, "mount_targets", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique user-defined name for this file share. If unspecified, the name will be a hyphenated list of
        randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="originShare")
    def origin_share(self) -> Optional[pulumi.Input['IsShareOriginShareArgs']]:
        """
        The origin share this accessor share is referring to.This property will be present when the `accessor_binding_role` is
        `accessor`.
        """
        return pulumi.get(self, "origin_share")

    @origin_share.setter
    def origin_share(self, value: Optional[pulumi.Input['IsShareOriginShareArgs']]):
        pulumi.set(self, "origin_share", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique name for this share profile.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="replicaShare")
    def replica_share(self) -> Optional[pulumi.Input['IsShareReplicaShareArgs']]:
        """
        Configuration for a replica file share to create and associate with this file share. Ifunspecified, a replica may be
        subsequently added by creating a new file share with a`source_share` referencing this file share.
        """
        return pulumi.get(self, "replica_share")

    @replica_share.setter
    def replica_share(self, value: Optional[pulumi.Input['IsShareReplicaShareArgs']]):
        pulumi.set(self, "replica_share", value)

    @_builtins.property
    @pulumi.getter(name="replicationCronSpec")
    def replication_cron_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cron specification for the file share replication schedule.Replication of a share can be scheduled to occur at most
        once per hour.
        """
        return pulumi.get(self, "replication_cron_spec")

    @replication_cron_spec.setter
    def replication_cron_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "replication_cron_spec", value)

    @_builtins.property
    @pulumi.getter(name="replicationRole")
    def replication_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The replication role of the file share.* `none`: This share is not participating in replication.* `replica`: This share
        is a replication target.* `source`: This share is a replication source.
        """
        return pulumi.get(self, "replication_role")

    @replication_role.setter
    def replication_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "replication_role", value)

    @_builtins.property
    @pulumi.getter(name="replicationStatus")
    def replication_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The replication status of the file share.* `initializing`: This share is initializing replication.* `active`: This share
        is actively participating in replication.* `failover_pending`: This share is performing a replication failover.*
        `split_pending`: This share is performing a replication split.* `none`: This share is not participating in replication.*
        `degraded`: This share's replication sync is degraded.* `sync_pending`: This share is performing a replication sync.
        """
        return pulumi.get(self, "replication_status")

    @replication_status.setter
    def replication_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "replication_status", value)

    @_builtins.property
    @pulumi.getter(name="replicationStatusReasons")
    def replication_status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsShareReplicationStatusReasonArgs']]]]:
        """
        The reasons for the current replication status (if any).The enumerated reason code values for this property will expand
        in the future. When processing this property, check for and log unknown values. Optionally halt processing and surface
        the error, or bypass the resource on which the unexpected reason code was encountered.
        """
        return pulumi.get(self, "replication_status_reasons")

    @replication_status_reasons.setter
    def replication_status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareReplicationStatusReasonArgs']]]]):
        pulumi.set(self, "replication_status_reasons", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of resource referenced.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The size of the file share rounded up to the next gigabyte.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="snapshotCount")
    def snapshot_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total number of snapshots for this share.
        """
        return pulumi.get(self, "snapshot_count")

    @snapshot_count.setter
    def snapshot_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "snapshot_count", value)

    @_builtins.property
    @pulumi.getter(name="snapshotSize")
    def snapshot_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total size (in gigabytes) of snapshots used for this file share.
        """
        return pulumi.get(self, "snapshot_size")

    @snapshot_size.setter
    def snapshot_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "snapshot_size", value)

    @_builtins.property
    @pulumi.getter(name="sourceShare")
    def source_share(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the source file share for this replica file share. The specified file share must not already have a replica,
        and must not be a replica.
        """
        return pulumi.get(self, "source_share")

    @source_share.setter
    def source_share(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_share", value)

    @_builtins.property
    @pulumi.getter(name="sourceShareCrn")
    def source_share_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of the source file share for this replica file share. The specified file share must not already have a replica,
        and must not be a replica.
        """
        return pulumi.get(self, "source_share_crn")

    @source_share_crn.setter
    def source_share_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_share_crn", value)

    @_builtins.property
    @pulumi.getter(name="sourceSnapshot")
    def source_snapshot(self) -> Optional[pulumi.Input['IsShareSourceSnapshotArgs']]:
        """
        The snapshot from which this share was cloned.This property will be present when the share was created from a
        snapshot.The resources supported by this property
        may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in thefuture.
        """
        return pulumi.get(self, "source_snapshot")

    @source_snapshot.setter
    def source_snapshot(self, value: Optional[pulumi.Input['IsShareSourceSnapshotArgs']]):
        pulumi.set(self, "source_snapshot", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        User Tags for the file share
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique name of the zone this file share will reside in.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isShare:IsShare")
class IsShare(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_transit_encryption_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 initial_owner: Optional[pulumi.Input[Union['IsShareInitialOwnerArgs', 'IsShareInitialOwnerArgsDict']]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 is_share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mount_targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsShareMountTargetArgs', 'IsShareMountTargetArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_share: Optional[pulumi.Input[Union['IsShareOriginShareArgs', 'IsShareOriginShareArgsDict']]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 replica_share: Optional[pulumi.Input[Union['IsShareReplicaShareArgs', 'IsShareReplicaShareArgsDict']]] = None,
                 replication_cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.float]] = None,
                 source_share: Optional[pulumi.Input[_builtins.str]] = None,
                 source_share_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot: Optional[pulumi.Input[Union['IsShareSourceSnapshotArgs', 'IsShareSourceSnapshotArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsShare resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_control_mode: The access control mode for the share:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_transit_encryption_modes: Allowed transit encryption modes
        :param pulumi.Input[_builtins.str] encryption_key: The CRN of the key to use for encrypting this file share.If no encryption key is provided, the share will not be
               encrypted.
        :param pulumi.Input[Union['IsShareInitialOwnerArgs', 'IsShareInitialOwnerArgsDict']] initial_owner: The owner assigned to the file share at creation.
        :param pulumi.Input[_builtins.float] iops: The maximum input/output operation performance bandwidth per second for the file share.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsShareMountTargetArgs', 'IsShareMountTargetArgsDict']]]] mount_targets: The share targets for this file share.Share targets mounted from a replica must be mounted read-only.
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this file share. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[Union['IsShareOriginShareArgs', 'IsShareOriginShareArgsDict']] origin_share: The origin share this accessor share is referring to.This property will be present when the `accessor_binding_role` is
               `accessor`.
        :param pulumi.Input[_builtins.str] profile: The globally unique name for this share profile.
        :param pulumi.Input[Union['IsShareReplicaShareArgs', 'IsShareReplicaShareArgsDict']] replica_share: Configuration for a replica file share to create and associate with this file share. Ifunspecified, a replica may be
               subsequently added by creating a new file share with a`source_share` referencing this file share.
        :param pulumi.Input[_builtins.str] replication_cron_spec: The cron specification for the file share replication schedule.Replication of a share can be scheduled to occur at most
               once per hour.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier of the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.float] size: The size of the file share rounded up to the next gigabyte.
        :param pulumi.Input[_builtins.str] source_share: The ID of the source file share for this replica file share. The specified file share must not already have a replica,
               and must not be a replica.
        :param pulumi.Input[_builtins.str] source_share_crn: The CRN of the source file share for this replica file share. The specified file share must not already have a replica,
               and must not be a replica.
        :param pulumi.Input[Union['IsShareSourceSnapshotArgs', 'IsShareSourceSnapshotArgsDict']] source_snapshot: The snapshot from which this share was cloned.This property will be present when the share was created from a
               snapshot.The resources supported by this property
               may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in thefuture.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: User Tags for the file share
        :param pulumi.Input[_builtins.str] zone: The globally unique name of the zone this file share will reside in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IsShareArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsShare resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsShareArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsShareArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_transit_encryption_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 initial_owner: Optional[pulumi.Input[Union['IsShareInitialOwnerArgs', 'IsShareInitialOwnerArgsDict']]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 is_share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mount_targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsShareMountTargetArgs', 'IsShareMountTargetArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_share: Optional[pulumi.Input[Union['IsShareOriginShareArgs', 'IsShareOriginShareArgsDict']]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 replica_share: Optional[pulumi.Input[Union['IsShareReplicaShareArgs', 'IsShareReplicaShareArgsDict']]] = None,
                 replication_cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.float]] = None,
                 source_share: Optional[pulumi.Input[_builtins.str]] = None,
                 source_share_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot: Optional[pulumi.Input[Union['IsShareSourceSnapshotArgs', 'IsShareSourceSnapshotArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsShareArgs.__new__(IsShareArgs)

            __props__.__dict__["access_control_mode"] = access_control_mode
            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["allowed_transit_encryption_modes"] = allowed_transit_encryption_modes
            __props__.__dict__["encryption_key"] = encryption_key
            __props__.__dict__["initial_owner"] = initial_owner
            __props__.__dict__["iops"] = iops
            __props__.__dict__["is_share_id"] = is_share_id
            __props__.__dict__["mount_targets"] = mount_targets
            __props__.__dict__["name"] = name
            __props__.__dict__["origin_share"] = origin_share
            __props__.__dict__["profile"] = profile
            __props__.__dict__["replica_share"] = replica_share
            __props__.__dict__["replication_cron_spec"] = replication_cron_spec
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["size"] = size
            __props__.__dict__["source_share"] = source_share
            __props__.__dict__["source_share_crn"] = source_share_crn
            __props__.__dict__["source_snapshot"] = source_snapshot
            __props__.__dict__["tags"] = tags
            __props__.__dict__["zone"] = zone
            __props__.__dict__["accessor_binding_role"] = None
            __props__.__dict__["accessor_bindings"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["encryption"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["last_sync_at"] = None
            __props__.__dict__["latest_jobs"] = None
            __props__.__dict__["latest_syncs"] = None
            __props__.__dict__["lifecycle_reasons"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["replication_role"] = None
            __props__.__dict__["replication_status"] = None
            __props__.__dict__["replication_status_reasons"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["snapshot_count"] = None
            __props__.__dict__["snapshot_size"] = None
        super(IsShare, __self__).__init__(
            'ibm:index/isShare:IsShare',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_control_mode: Optional[pulumi.Input[_builtins.str]] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            accessor_binding_role: Optional[pulumi.Input[_builtins.str]] = None,
            accessor_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsShareAccessorBindingArgs', 'IsShareAccessorBindingArgsDict']]]]] = None,
            allowed_transit_encryption_modes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            encryption: Optional[pulumi.Input[_builtins.str]] = None,
            encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            initial_owner: Optional[pulumi.Input[Union['IsShareInitialOwnerArgs', 'IsShareInitialOwnerArgsDict']]] = None,
            iops: Optional[pulumi.Input[_builtins.float]] = None,
            is_share_id: Optional[pulumi.Input[_builtins.str]] = None,
            last_sync_at: Optional[pulumi.Input[_builtins.str]] = None,
            latest_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsShareLatestJobArgs', 'IsShareLatestJobArgsDict']]]]] = None,
            latest_syncs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsShareLatestSyncArgs', 'IsShareLatestSyncArgsDict']]]]] = None,
            lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsShareLifecycleReasonArgs', 'IsShareLifecycleReasonArgsDict']]]]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            mount_targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsShareMountTargetArgs', 'IsShareMountTargetArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            origin_share: Optional[pulumi.Input[Union['IsShareOriginShareArgs', 'IsShareOriginShareArgsDict']]] = None,
            profile: Optional[pulumi.Input[_builtins.str]] = None,
            replica_share: Optional[pulumi.Input[Union['IsShareReplicaShareArgs', 'IsShareReplicaShareArgsDict']]] = None,
            replication_cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
            replication_role: Optional[pulumi.Input[_builtins.str]] = None,
            replication_status: Optional[pulumi.Input[_builtins.str]] = None,
            replication_status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsShareReplicationStatusReasonArgs', 'IsShareReplicationStatusReasonArgsDict']]]]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.float]] = None,
            snapshot_count: Optional[pulumi.Input[_builtins.float]] = None,
            snapshot_size: Optional[pulumi.Input[_builtins.float]] = None,
            source_share: Optional[pulumi.Input[_builtins.str]] = None,
            source_share_crn: Optional[pulumi.Input[_builtins.str]] = None,
            source_snapshot: Optional[pulumi.Input[Union['IsShareSourceSnapshotArgs', 'IsShareSourceSnapshotArgsDict']]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsShare':
        """
        Get an existing IsShare resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_control_mode: The access control mode for the share:
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] accessor_binding_role: The accessor binding role of this file share:- `none`: This file share is not participating in access with another file
               share- `origin`: This file share is the origin for one or more file shares (which may be in other accounts)- `accessor`:
               This file share is providing access to another file share (which may be in another account).
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsShareAccessorBindingArgs', 'IsShareAccessorBindingArgsDict']]]] accessor_bindings: The accessor bindings for this file share. Each accessor binding identifies a resource (possibly in another account)
               with access to this file share's data.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_transit_encryption_modes: Allowed transit encryption modes
        :param pulumi.Input[_builtins.str] created_at: The date and time that the file share is created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this share.
        :param pulumi.Input[_builtins.str] encryption: The type of encryption used for this file share.
        :param pulumi.Input[_builtins.str] encryption_key: The CRN of the key to use for encrypting this file share.If no encryption key is provided, the share will not be
               encrypted.
        :param pulumi.Input[_builtins.str] href: The URL for this share.
        :param pulumi.Input[Union['IsShareInitialOwnerArgs', 'IsShareInitialOwnerArgsDict']] initial_owner: The owner assigned to the file share at creation.
        :param pulumi.Input[_builtins.float] iops: The maximum input/output operation performance bandwidth per second for the file share.
        :param pulumi.Input[_builtins.str] last_sync_at: The date and time that the file share was last synchronized to its replica.This property will be present when the
               `replication_role` is `source`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsShareLatestJobArgs', 'IsShareLatestJobArgsDict']]]] latest_jobs: The latest job associated with this file share.This property will be absent if no jobs have been created for this file
               share.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsShareLatestSyncArgs', 'IsShareLatestSyncArgsDict']]]] latest_syncs: Information about the latest synchronization for this file share.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsShareLifecycleReasonArgs', 'IsShareLifecycleReasonArgsDict']]]] lifecycle_reasons: The reasons for the current lifecycle_state (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the file share.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsShareMountTargetArgs', 'IsShareMountTargetArgsDict']]]] mount_targets: The share targets for this file share.Share targets mounted from a replica must be mounted read-only.
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this file share. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[Union['IsShareOriginShareArgs', 'IsShareOriginShareArgsDict']] origin_share: The origin share this accessor share is referring to.This property will be present when the `accessor_binding_role` is
               `accessor`.
        :param pulumi.Input[_builtins.str] profile: The globally unique name for this share profile.
        :param pulumi.Input[Union['IsShareReplicaShareArgs', 'IsShareReplicaShareArgsDict']] replica_share: Configuration for a replica file share to create and associate with this file share. Ifunspecified, a replica may be
               subsequently added by creating a new file share with a`source_share` referencing this file share.
        :param pulumi.Input[_builtins.str] replication_cron_spec: The cron specification for the file share replication schedule.Replication of a share can be scheduled to occur at most
               once per hour.
        :param pulumi.Input[_builtins.str] replication_role: The replication role of the file share.* `none`: This share is not participating in replication.* `replica`: This share
               is a replication target.* `source`: This share is a replication source.
        :param pulumi.Input[_builtins.str] replication_status: The replication status of the file share.* `initializing`: This share is initializing replication.* `active`: This share
               is actively participating in replication.* `failover_pending`: This share is performing a replication failover.*
               `split_pending`: This share is performing a replication split.* `none`: This share is not participating in replication.*
               `degraded`: This share's replication sync is degraded.* `sync_pending`: This share is performing a replication sync.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsShareReplicationStatusReasonArgs', 'IsShareReplicationStatusReasonArgsDict']]]] replication_status_reasons: The reasons for the current replication status (if any).The enumerated reason code values for this property will expand
               in the future. When processing this property, check for and log unknown values. Optionally halt processing and surface
               the error, or bypass the resource on which the unexpected reason code was encountered.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier of the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] resource_type: The type of resource referenced.
        :param pulumi.Input[_builtins.float] size: The size of the file share rounded up to the next gigabyte.
        :param pulumi.Input[_builtins.float] snapshot_count: The total number of snapshots for this share.
        :param pulumi.Input[_builtins.float] snapshot_size: The total size (in gigabytes) of snapshots used for this file share.
        :param pulumi.Input[_builtins.str] source_share: The ID of the source file share for this replica file share. The specified file share must not already have a replica,
               and must not be a replica.
        :param pulumi.Input[_builtins.str] source_share_crn: The CRN of the source file share for this replica file share. The specified file share must not already have a replica,
               and must not be a replica.
        :param pulumi.Input[Union['IsShareSourceSnapshotArgs', 'IsShareSourceSnapshotArgsDict']] source_snapshot: The snapshot from which this share was cloned.This property will be present when the share was created from a
               snapshot.The resources supported by this property
               may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in thefuture.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: User Tags for the file share
        :param pulumi.Input[_builtins.str] zone: The globally unique name of the zone this file share will reside in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsShareState.__new__(_IsShareState)

        __props__.__dict__["access_control_mode"] = access_control_mode
        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["accessor_binding_role"] = accessor_binding_role
        __props__.__dict__["accessor_bindings"] = accessor_bindings
        __props__.__dict__["allowed_transit_encryption_modes"] = allowed_transit_encryption_modes
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["encryption"] = encryption
        __props__.__dict__["encryption_key"] = encryption_key
        __props__.__dict__["href"] = href
        __props__.__dict__["initial_owner"] = initial_owner
        __props__.__dict__["iops"] = iops
        __props__.__dict__["is_share_id"] = is_share_id
        __props__.__dict__["last_sync_at"] = last_sync_at
        __props__.__dict__["latest_jobs"] = latest_jobs
        __props__.__dict__["latest_syncs"] = latest_syncs
        __props__.__dict__["lifecycle_reasons"] = lifecycle_reasons
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["mount_targets"] = mount_targets
        __props__.__dict__["name"] = name
        __props__.__dict__["origin_share"] = origin_share
        __props__.__dict__["profile"] = profile
        __props__.__dict__["replica_share"] = replica_share
        __props__.__dict__["replication_cron_spec"] = replication_cron_spec
        __props__.__dict__["replication_role"] = replication_role
        __props__.__dict__["replication_status"] = replication_status
        __props__.__dict__["replication_status_reasons"] = replication_status_reasons
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["size"] = size
        __props__.__dict__["snapshot_count"] = snapshot_count
        __props__.__dict__["snapshot_size"] = snapshot_size
        __props__.__dict__["source_share"] = source_share
        __props__.__dict__["source_share_crn"] = source_share_crn
        __props__.__dict__["source_snapshot"] = source_snapshot
        __props__.__dict__["tags"] = tags
        __props__.__dict__["zone"] = zone
        return IsShare(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessControlMode")
    def access_control_mode(self) -> pulumi.Output[_builtins.str]:
        """
        The access control mode for the share:
        """
        return pulumi.get(self, "access_control_mode")

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="accessorBindingRole")
    def accessor_binding_role(self) -> pulumi.Output[_builtins.str]:
        """
        The accessor binding role of this file share:- `none`: This file share is not participating in access with another file
        share- `origin`: This file share is the origin for one or more file shares (which may be in other accounts)- `accessor`:
        This file share is providing access to another file share (which may be in another account).
        """
        return pulumi.get(self, "accessor_binding_role")

    @_builtins.property
    @pulumi.getter(name="accessorBindings")
    def accessor_bindings(self) -> pulumi.Output[Sequence['outputs.IsShareAccessorBinding']]:
        """
        The accessor bindings for this file share. Each accessor binding identifies a resource (possibly in another account)
        with access to this file share's data.
        """
        return pulumi.get(self, "accessor_bindings")

    @_builtins.property
    @pulumi.getter(name="allowedTransitEncryptionModes")
    def allowed_transit_encryption_modes(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Allowed transit encryption modes
        """
        return pulumi.get(self, "allowed_transit_encryption_modes")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the file share is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this share.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> pulumi.Output[_builtins.str]:
        """
        The type of encryption used for this file share.
        """
        return pulumi.get(self, "encryption")

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of the key to use for encrypting this file share.If no encryption key is provided, the share will not be
        encrypted.
        """
        return pulumi.get(self, "encryption_key")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this share.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="initialOwner")
    def initial_owner(self) -> pulumi.Output[Optional['outputs.IsShareInitialOwner']]:
        """
        The owner assigned to the file share at creation.
        """
        return pulumi.get(self, "initial_owner")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> pulumi.Output[_builtins.float]:
        """
        The maximum input/output operation performance bandwidth per second for the file share.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="isShareId")
    def is_share_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_share_id")

    @_builtins.property
    @pulumi.getter(name="lastSyncAt")
    def last_sync_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the file share was last synchronized to its replica.This property will be present when the
        `replication_role` is `source`.
        """
        return pulumi.get(self, "last_sync_at")

    @_builtins.property
    @pulumi.getter(name="latestJobs")
    def latest_jobs(self) -> pulumi.Output[Sequence['outputs.IsShareLatestJob']]:
        """
        The latest job associated with this file share.This property will be absent if no jobs have been created for this file
        share.
        """
        return pulumi.get(self, "latest_jobs")

    @_builtins.property
    @pulumi.getter(name="latestSyncs")
    def latest_syncs(self) -> pulumi.Output[Sequence['outputs.IsShareLatestSync']]:
        """
        Information about the latest synchronization for this file share.
        """
        return pulumi.get(self, "latest_syncs")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> pulumi.Output[Sequence['outputs.IsShareLifecycleReason']]:
        """
        The reasons for the current lifecycle_state (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the file share.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="mountTargets")
    def mount_targets(self) -> pulumi.Output[Optional[Sequence['outputs.IsShareMountTarget']]]:
        """
        The share targets for this file share.Share targets mounted from a replica must be mounted read-only.
        """
        return pulumi.get(self, "mount_targets")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The unique user-defined name for this file share. If unspecified, the name will be a hyphenated list of
        randomly-selected words.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="originShare")
    def origin_share(self) -> pulumi.Output[Optional['outputs.IsShareOriginShare']]:
        """
        The origin share this accessor share is referring to.This property will be present when the `accessor_binding_role` is
        `accessor`.
        """
        return pulumi.get(self, "origin_share")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique name for this share profile.
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="replicaShare")
    def replica_share(self) -> pulumi.Output[Optional['outputs.IsShareReplicaShare']]:
        """
        Configuration for a replica file share to create and associate with this file share. Ifunspecified, a replica may be
        subsequently added by creating a new file share with a`source_share` referencing this file share.
        """
        return pulumi.get(self, "replica_share")

    @_builtins.property
    @pulumi.getter(name="replicationCronSpec")
    def replication_cron_spec(self) -> pulumi.Output[_builtins.str]:
        """
        The cron specification for the file share replication schedule.Replication of a share can be scheduled to occur at most
        once per hour.
        """
        return pulumi.get(self, "replication_cron_spec")

    @_builtins.property
    @pulumi.getter(name="replicationRole")
    def replication_role(self) -> pulumi.Output[_builtins.str]:
        """
        The replication role of the file share.* `none`: This share is not participating in replication.* `replica`: This share
        is a replication target.* `source`: This share is a replication source.
        """
        return pulumi.get(self, "replication_role")

    @_builtins.property
    @pulumi.getter(name="replicationStatus")
    def replication_status(self) -> pulumi.Output[_builtins.str]:
        """
        The replication status of the file share.* `initializing`: This share is initializing replication.* `active`: This share
        is actively participating in replication.* `failover_pending`: This share is performing a replication failover.*
        `split_pending`: This share is performing a replication split.* `none`: This share is not participating in replication.*
        `degraded`: This share's replication sync is degraded.* `sync_pending`: This share is performing a replication sync.
        """
        return pulumi.get(self, "replication_status")

    @_builtins.property
    @pulumi.getter(name="replicationStatusReasons")
    def replication_status_reasons(self) -> pulumi.Output[Sequence['outputs.IsShareReplicationStatusReason']]:
        """
        The reasons for the current replication status (if any).The enumerated reason code values for this property will expand
        in the future. When processing this property, check for and log unknown values. Optionally halt processing and surface
        the error, or bypass the resource on which the unexpected reason code was encountered.
        """
        return pulumi.get(self, "replication_status_reasons")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of resource referenced.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.float]:
        """
        The size of the file share rounded up to the next gigabyte.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotCount")
    def snapshot_count(self) -> pulumi.Output[_builtins.float]:
        """
        The total number of snapshots for this share.
        """
        return pulumi.get(self, "snapshot_count")

    @_builtins.property
    @pulumi.getter(name="snapshotSize")
    def snapshot_size(self) -> pulumi.Output[_builtins.float]:
        """
        The total size (in gigabytes) of snapshots used for this file share.
        """
        return pulumi.get(self, "snapshot_size")

    @_builtins.property
    @pulumi.getter(name="sourceShare")
    def source_share(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the source file share for this replica file share. The specified file share must not already have a replica,
        and must not be a replica.
        """
        return pulumi.get(self, "source_share")

    @_builtins.property
    @pulumi.getter(name="sourceShareCrn")
    def source_share_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of the source file share for this replica file share. The specified file share must not already have a replica,
        and must not be a replica.
        """
        return pulumi.get(self, "source_share_crn")

    @_builtins.property
    @pulumi.getter(name="sourceSnapshot")
    def source_snapshot(self) -> pulumi.Output[Optional['outputs.IsShareSourceSnapshot']]:
        """
        The snapshot from which this share was cloned.This property will be present when the share was created from a
        snapshot.The resources supported by this property
        may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in thefuture.
        """
        return pulumi.get(self, "source_snapshot")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        User Tags for the file share
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique name of the zone this file share will reside in.
        """
        return pulumi.get(self, "zone")

