# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiNetworkResult',
    'AwaitableGetPiNetworkResult',
    'get_pi_network',
    'get_pi_network_output',
]

@pulumi.output_type
class GetPiNetworkResult:
    """
    A collection of values returned by getPiNetwork.
    """
    def __init__(__self__, advertise=None, arp_broadcast=None, available_ip_count=None, cidr=None, crn=None, dns=None, gateway=None, id=None, mtu=None, name=None, network_address_translations=None, peer_id=None, pi_cloud_instance_id=None, pi_network_name=None, type=None, used_ip_count=None, used_ip_percent=None, user_tags=None, vlan_id=None):
        if advertise and not isinstance(advertise, str):
            raise TypeError("Expected argument 'advertise' to be a str")
        pulumi.set(__self__, "advertise", advertise)
        if arp_broadcast and not isinstance(arp_broadcast, str):
            raise TypeError("Expected argument 'arp_broadcast' to be a str")
        pulumi.set(__self__, "arp_broadcast", arp_broadcast)
        if available_ip_count and not isinstance(available_ip_count, float):
            raise TypeError("Expected argument 'available_ip_count' to be a float")
        pulumi.set(__self__, "available_ip_count", available_ip_count)
        if cidr and not isinstance(cidr, str):
            raise TypeError("Expected argument 'cidr' to be a str")
        pulumi.set(__self__, "cidr", cidr)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if dns and not isinstance(dns, list):
            raise TypeError("Expected argument 'dns' to be a list")
        pulumi.set(__self__, "dns", dns)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mtu and not isinstance(mtu, float):
            raise TypeError("Expected argument 'mtu' to be a float")
        pulumi.set(__self__, "mtu", mtu)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_address_translations and not isinstance(network_address_translations, list):
            raise TypeError("Expected argument 'network_address_translations' to be a list")
        pulumi.set(__self__, "network_address_translations", network_address_translations)
        if peer_id and not isinstance(peer_id, str):
            raise TypeError("Expected argument 'peer_id' to be a str")
        pulumi.set(__self__, "peer_id", peer_id)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_network_name and not isinstance(pi_network_name, str):
            raise TypeError("Expected argument 'pi_network_name' to be a str")
        pulumi.set(__self__, "pi_network_name", pi_network_name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if used_ip_count and not isinstance(used_ip_count, float):
            raise TypeError("Expected argument 'used_ip_count' to be a float")
        pulumi.set(__self__, "used_ip_count", used_ip_count)
        if used_ip_percent and not isinstance(used_ip_percent, float):
            raise TypeError("Expected argument 'used_ip_percent' to be a float")
        pulumi.set(__self__, "used_ip_percent", used_ip_percent)
        if user_tags and not isinstance(user_tags, list):
            raise TypeError("Expected argument 'user_tags' to be a list")
        pulumi.set(__self__, "user_tags", user_tags)
        if vlan_id and not isinstance(vlan_id, float):
            raise TypeError("Expected argument 'vlan_id' to be a float")
        pulumi.set(__self__, "vlan_id", vlan_id)

    @_builtins.property
    @pulumi.getter
    def advertise(self) -> _builtins.str:
        return pulumi.get(self, "advertise")

    @_builtins.property
    @pulumi.getter(name="arpBroadcast")
    def arp_broadcast(self) -> _builtins.str:
        return pulumi.get(self, "arp_broadcast")

    @_builtins.property
    @pulumi.getter(name="availableIpCount")
    def available_ip_count(self) -> _builtins.float:
        return pulumi.get(self, "available_ip_count")

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> _builtins.float:
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAddressTranslations")
    def network_address_translations(self) -> Sequence['outputs.GetPiNetworkNetworkAddressTranslationResult']:
        return pulumi.get(self, "network_address_translations")

    @_builtins.property
    @pulumi.getter(name="peerId")
    @_utilities.deprecated("""Deprecated""")
    def peer_id(self) -> _builtins.str:
        return pulumi.get(self, "peer_id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piNetworkName")
    def pi_network_name(self) -> _builtins.str:
        return pulumi.get(self, "pi_network_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="usedIpCount")
    def used_ip_count(self) -> _builtins.float:
        return pulumi.get(self, "used_ip_count")

    @_builtins.property
    @pulumi.getter(name="usedIpPercent")
    def used_ip_percent(self) -> _builtins.float:
        return pulumi.get(self, "used_ip_percent")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "user_tags")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> _builtins.float:
        return pulumi.get(self, "vlan_id")


class AwaitableGetPiNetworkResult(GetPiNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiNetworkResult(
            advertise=self.advertise,
            arp_broadcast=self.arp_broadcast,
            available_ip_count=self.available_ip_count,
            cidr=self.cidr,
            crn=self.crn,
            dns=self.dns,
            gateway=self.gateway,
            id=self.id,
            mtu=self.mtu,
            name=self.name,
            network_address_translations=self.network_address_translations,
            peer_id=self.peer_id,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_network_name=self.pi_network_name,
            type=self.type,
            used_ip_count=self.used_ip_count,
            used_ip_percent=self.used_ip_percent,
            user_tags=self.user_tags,
            vlan_id=self.vlan_id)


def get_pi_network(id: Optional[_builtins.str] = None,
                   pi_cloud_instance_id: Optional[_builtins.str] = None,
                   pi_network_name: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiNetworkResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piNetworkName'] = pi_network_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiNetwork:getPiNetwork', __args__, opts=opts, typ=GetPiNetworkResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiNetworkResult(
        advertise=pulumi.get(__ret__, 'advertise'),
        arp_broadcast=pulumi.get(__ret__, 'arp_broadcast'),
        available_ip_count=pulumi.get(__ret__, 'available_ip_count'),
        cidr=pulumi.get(__ret__, 'cidr'),
        crn=pulumi.get(__ret__, 'crn'),
        dns=pulumi.get(__ret__, 'dns'),
        gateway=pulumi.get(__ret__, 'gateway'),
        id=pulumi.get(__ret__, 'id'),
        mtu=pulumi.get(__ret__, 'mtu'),
        name=pulumi.get(__ret__, 'name'),
        network_address_translations=pulumi.get(__ret__, 'network_address_translations'),
        peer_id=pulumi.get(__ret__, 'peer_id'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_network_name=pulumi.get(__ret__, 'pi_network_name'),
        type=pulumi.get(__ret__, 'type'),
        used_ip_count=pulumi.get(__ret__, 'used_ip_count'),
        used_ip_percent=pulumi.get(__ret__, 'used_ip_percent'),
        user_tags=pulumi.get(__ret__, 'user_tags'),
        vlan_id=pulumi.get(__ret__, 'vlan_id'))
def get_pi_network_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                          pi_network_name: Optional[pulumi.Input[_builtins.str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiNetworkResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piNetworkName'] = pi_network_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiNetwork:getPiNetwork', __args__, opts=opts, typ=GetPiNetworkResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiNetworkResult(
        advertise=pulumi.get(__response__, 'advertise'),
        arp_broadcast=pulumi.get(__response__, 'arp_broadcast'),
        available_ip_count=pulumi.get(__response__, 'available_ip_count'),
        cidr=pulumi.get(__response__, 'cidr'),
        crn=pulumi.get(__response__, 'crn'),
        dns=pulumi.get(__response__, 'dns'),
        gateway=pulumi.get(__response__, 'gateway'),
        id=pulumi.get(__response__, 'id'),
        mtu=pulumi.get(__response__, 'mtu'),
        name=pulumi.get(__response__, 'name'),
        network_address_translations=pulumi.get(__response__, 'network_address_translations'),
        peer_id=pulumi.get(__response__, 'peer_id'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_network_name=pulumi.get(__response__, 'pi_network_name'),
        type=pulumi.get(__response__, 'type'),
        used_ip_count=pulumi.get(__response__, 'used_ip_count'),
        used_ip_percent=pulumi.get(__response__, 'used_ip_percent'),
        user_tags=pulumi.get(__response__, 'user_tags'),
        vlan_id=pulumi.get(__response__, 'vlan_id')))
