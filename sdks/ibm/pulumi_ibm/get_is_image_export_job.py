# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsImageExportJobResult',
    'AwaitableGetIsImageExportJobResult',
    'get_is_image_export_job',
    'get_is_image_export_job_output',
]

@pulumi.output_type
class GetIsImageExportJobResult:
    """
    A collection of values returned by getIsImageExportJob.
    """
    def __init__(__self__, completed_at=None, created_at=None, encrypted_data_key=None, format=None, href=None, id=None, image=None, image_export_job=None, name=None, resource_type=None, started_at=None, status=None, status_reasons=None, storage_buckets=None, storage_href=None, storage_objects=None):
        if completed_at and not isinstance(completed_at, str):
            raise TypeError("Expected argument 'completed_at' to be a str")
        pulumi.set(__self__, "completed_at", completed_at)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if encrypted_data_key and not isinstance(encrypted_data_key, str):
            raise TypeError("Expected argument 'encrypted_data_key' to be a str")
        pulumi.set(__self__, "encrypted_data_key", encrypted_data_key)
        if format and not isinstance(format, str):
            raise TypeError("Expected argument 'format' to be a str")
        pulumi.set(__self__, "format", format)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        pulumi.set(__self__, "image", image)
        if image_export_job and not isinstance(image_export_job, str):
            raise TypeError("Expected argument 'image_export_job' to be a str")
        pulumi.set(__self__, "image_export_job", image_export_job)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if started_at and not isinstance(started_at, str):
            raise TypeError("Expected argument 'started_at' to be a str")
        pulumi.set(__self__, "started_at", started_at)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if storage_buckets and not isinstance(storage_buckets, list):
            raise TypeError("Expected argument 'storage_buckets' to be a list")
        pulumi.set(__self__, "storage_buckets", storage_buckets)
        if storage_href and not isinstance(storage_href, str):
            raise TypeError("Expected argument 'storage_href' to be a str")
        pulumi.set(__self__, "storage_href", storage_href)
        if storage_objects and not isinstance(storage_objects, list):
            raise TypeError("Expected argument 'storage_objects' to be a list")
        pulumi.set(__self__, "storage_objects", storage_objects)

    @_builtins.property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> _builtins.str:
        return pulumi.get(self, "completed_at")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="encryptedDataKey")
    def encrypted_data_key(self) -> _builtins.str:
        return pulumi.get(self, "encrypted_data_key")

    @_builtins.property
    @pulumi.getter
    def format(self) -> _builtins.str:
        return pulumi.get(self, "format")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="imageExportJob")
    def image_export_job(self) -> _builtins.str:
        return pulumi.get(self, "image_export_job")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> _builtins.str:
        return pulumi.get(self, "started_at")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Sequence['outputs.GetIsImageExportJobStatusReasonResult']:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter(name="storageBuckets")
    def storage_buckets(self) -> Sequence['outputs.GetIsImageExportJobStorageBucketResult']:
        return pulumi.get(self, "storage_buckets")

    @_builtins.property
    @pulumi.getter(name="storageHref")
    def storage_href(self) -> _builtins.str:
        return pulumi.get(self, "storage_href")

    @_builtins.property
    @pulumi.getter(name="storageObjects")
    def storage_objects(self) -> Sequence['outputs.GetIsImageExportJobStorageObjectResult']:
        return pulumi.get(self, "storage_objects")


class AwaitableGetIsImageExportJobResult(GetIsImageExportJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsImageExportJobResult(
            completed_at=self.completed_at,
            created_at=self.created_at,
            encrypted_data_key=self.encrypted_data_key,
            format=self.format,
            href=self.href,
            id=self.id,
            image=self.image,
            image_export_job=self.image_export_job,
            name=self.name,
            resource_type=self.resource_type,
            started_at=self.started_at,
            status=self.status,
            status_reasons=self.status_reasons,
            storage_buckets=self.storage_buckets,
            storage_href=self.storage_href,
            storage_objects=self.storage_objects)


def get_is_image_export_job(id: Optional[_builtins.str] = None,
                            image: Optional[_builtins.str] = None,
                            image_export_job: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsImageExportJobResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['image'] = image
    __args__['imageExportJob'] = image_export_job
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsImageExportJob:getIsImageExportJob', __args__, opts=opts, typ=GetIsImageExportJobResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsImageExportJobResult(
        completed_at=pulumi.get(__ret__, 'completed_at'),
        created_at=pulumi.get(__ret__, 'created_at'),
        encrypted_data_key=pulumi.get(__ret__, 'encrypted_data_key'),
        format=pulumi.get(__ret__, 'format'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        image=pulumi.get(__ret__, 'image'),
        image_export_job=pulumi.get(__ret__, 'image_export_job'),
        name=pulumi.get(__ret__, 'name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        started_at=pulumi.get(__ret__, 'started_at'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        storage_buckets=pulumi.get(__ret__, 'storage_buckets'),
        storage_href=pulumi.get(__ret__, 'storage_href'),
        storage_objects=pulumi.get(__ret__, 'storage_objects'))
def get_is_image_export_job_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   image: Optional[pulumi.Input[_builtins.str]] = None,
                                   image_export_job: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsImageExportJobResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['image'] = image
    __args__['imageExportJob'] = image_export_job
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsImageExportJob:getIsImageExportJob', __args__, opts=opts, typ=GetIsImageExportJobResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsImageExportJobResult(
        completed_at=pulumi.get(__response__, 'completed_at'),
        created_at=pulumi.get(__response__, 'created_at'),
        encrypted_data_key=pulumi.get(__response__, 'encrypted_data_key'),
        format=pulumi.get(__response__, 'format'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        image=pulumi.get(__response__, 'image'),
        image_export_job=pulumi.get(__response__, 'image_export_job'),
        name=pulumi.get(__response__, 'name'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        started_at=pulumi.get(__response__, 'started_at'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        storage_buckets=pulumi.get(__response__, 'storage_buckets'),
        storage_href=pulumi.get(__response__, 'storage_href'),
        storage_objects=pulumi.get(__response__, 'storage_objects')))
