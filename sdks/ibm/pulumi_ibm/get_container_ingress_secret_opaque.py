# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetContainerIngressSecretOpaqueResult',
    'AwaitableGetContainerIngressSecretOpaqueResult',
    'get_container_ingress_secret_opaque',
    'get_container_ingress_secret_opaque_output',
]

@pulumi.output_type
class GetContainerIngressSecretOpaqueResult:
    """
    A collection of values returned by getContainerIngressSecretOpaque.
    """
    def __init__(__self__, cluster=None, fields=None, id=None, persistence=None, secret_name=None, secret_namespace=None, status=None, type=None, user_managed=None):
        if cluster and not isinstance(cluster, str):
            raise TypeError("Expected argument 'cluster' to be a str")
        pulumi.set(__self__, "cluster", cluster)
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if persistence and not isinstance(persistence, bool):
            raise TypeError("Expected argument 'persistence' to be a bool")
        pulumi.set(__self__, "persistence", persistence)
        if secret_name and not isinstance(secret_name, str):
            raise TypeError("Expected argument 'secret_name' to be a str")
        pulumi.set(__self__, "secret_name", secret_name)
        if secret_namespace and not isinstance(secret_namespace, str):
            raise TypeError("Expected argument 'secret_namespace' to be a str")
        pulumi.set(__self__, "secret_namespace", secret_namespace)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if user_managed and not isinstance(user_managed, bool):
            raise TypeError("Expected argument 'user_managed' to be a bool")
        pulumi.set(__self__, "user_managed", user_managed)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> _builtins.str:
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.GetContainerIngressSecretOpaqueFieldResult']:
        return pulumi.get(self, "fields")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def persistence(self) -> _builtins.bool:
        return pulumi.get(self, "persistence")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> _builtins.str:
        return pulumi.get(self, "secret_name")

    @_builtins.property
    @pulumi.getter(name="secretNamespace")
    def secret_namespace(self) -> _builtins.str:
        return pulumi.get(self, "secret_namespace")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userManaged")
    def user_managed(self) -> _builtins.bool:
        return pulumi.get(self, "user_managed")


class AwaitableGetContainerIngressSecretOpaqueResult(GetContainerIngressSecretOpaqueResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerIngressSecretOpaqueResult(
            cluster=self.cluster,
            fields=self.fields,
            id=self.id,
            persistence=self.persistence,
            secret_name=self.secret_name,
            secret_namespace=self.secret_namespace,
            status=self.status,
            type=self.type,
            user_managed=self.user_managed)


def get_container_ingress_secret_opaque(cluster: Optional[_builtins.str] = None,
                                        id: Optional[_builtins.str] = None,
                                        secret_name: Optional[_builtins.str] = None,
                                        secret_namespace: Optional[_builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerIngressSecretOpaqueResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['secretName'] = secret_name
    __args__['secretNamespace'] = secret_namespace
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerIngressSecretOpaque:getContainerIngressSecretOpaque', __args__, opts=opts, typ=GetContainerIngressSecretOpaqueResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerIngressSecretOpaqueResult(
        cluster=pulumi.get(__ret__, 'cluster'),
        fields=pulumi.get(__ret__, 'fields'),
        id=pulumi.get(__ret__, 'id'),
        persistence=pulumi.get(__ret__, 'persistence'),
        secret_name=pulumi.get(__ret__, 'secret_name'),
        secret_namespace=pulumi.get(__ret__, 'secret_namespace'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        user_managed=pulumi.get(__ret__, 'user_managed'))
def get_container_ingress_secret_opaque_output(cluster: Optional[pulumi.Input[_builtins.str]] = None,
                                               id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                                               secret_namespace: Optional[pulumi.Input[_builtins.str]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerIngressSecretOpaqueResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['secretName'] = secret_name
    __args__['secretNamespace'] = secret_namespace
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerIngressSecretOpaque:getContainerIngressSecretOpaque', __args__, opts=opts, typ=GetContainerIngressSecretOpaqueResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerIngressSecretOpaqueResult(
        cluster=pulumi.get(__response__, 'cluster'),
        fields=pulumi.get(__response__, 'fields'),
        id=pulumi.get(__response__, 'id'),
        persistence=pulumi.get(__response__, 'persistence'),
        secret_name=pulumi.get(__response__, 'secret_name'),
        secret_namespace=pulumi.get(__response__, 'secret_namespace'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        user_managed=pulumi.get(__response__, 'user_managed')))
