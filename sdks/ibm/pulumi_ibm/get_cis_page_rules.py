# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCisPageRulesResult',
    'AwaitableGetCisPageRulesResult',
    'get_cis_page_rules',
    'get_cis_page_rules_output',
]

@pulumi.output_type
class GetCisPageRulesResult:
    """
    A collection of values returned by getCisPageRules.
    """
    def __init__(__self__, cis_id=None, cis_page_rules=None, domain_id=None, id=None, timeouts=None):
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if cis_page_rules and not isinstance(cis_page_rules, list):
            raise TypeError("Expected argument 'cis_page_rules' to be a list")
        pulumi.set(__self__, "cis_page_rules", cis_page_rules)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if timeouts and not isinstance(timeouts, dict):
            raise TypeError("Expected argument 'timeouts' to be a dict")
        pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cisPageRules")
    def cis_page_rules(self) -> Sequence['outputs.GetCisPageRulesCisPageRuleResult']:
        return pulumi.get(self, "cis_page_rules")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional['outputs.GetCisPageRulesTimeoutsResult']:
        return pulumi.get(self, "timeouts")


class AwaitableGetCisPageRulesResult(GetCisPageRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisPageRulesResult(
            cis_id=self.cis_id,
            cis_page_rules=self.cis_page_rules,
            domain_id=self.domain_id,
            id=self.id,
            timeouts=self.timeouts)


def get_cis_page_rules(cis_id: Optional[_builtins.str] = None,
                       domain_id: Optional[_builtins.str] = None,
                       id: Optional[_builtins.str] = None,
                       timeouts: Optional[Union['GetCisPageRulesTimeoutsArgs', 'GetCisPageRulesTimeoutsArgsDict']] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisPageRulesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    __args__['timeouts'] = timeouts
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisPageRules:getCisPageRules', __args__, opts=opts, typ=GetCisPageRulesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisPageRulesResult(
        cis_id=pulumi.get(__ret__, 'cis_id'),
        cis_page_rules=pulumi.get(__ret__, 'cis_page_rules'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        timeouts=pulumi.get(__ret__, 'timeouts'))
def get_cis_page_rules_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                              domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                              id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              timeouts: Optional[pulumi.Input[Optional[Union['GetCisPageRulesTimeoutsArgs', 'GetCisPageRulesTimeoutsArgsDict']]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisPageRulesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    __args__['timeouts'] = timeouts
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisPageRules:getCisPageRules', __args__, opts=opts, typ=GetCisPageRulesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisPageRulesResult(
        cis_id=pulumi.get(__response__, 'cis_id'),
        cis_page_rules=pulumi.get(__response__, 'cis_page_rules'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        id=pulumi.get(__response__, 'id'),
        timeouts=pulumi.get(__response__, 'timeouts')))
