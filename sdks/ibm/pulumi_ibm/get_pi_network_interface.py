# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiNetworkInterfaceResult',
    'AwaitableGetPiNetworkInterfaceResult',
    'get_pi_network_interface',
    'get_pi_network_interface_output',
]

@pulumi.output_type
class GetPiNetworkInterfaceResult:
    """
    A collection of values returned by getPiNetworkInterface.
    """
    def __init__(__self__, crn=None, id=None, instances=None, ip_address=None, mac_address=None, name=None, network_interface_id=None, network_security_group_id=None, network_security_group_ids=None, pi_cloud_instance_id=None, pi_network_id=None, pi_network_interface_id=None, status=None, user_tags=None):
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if mac_address and not isinstance(mac_address, str):
            raise TypeError("Expected argument 'mac_address' to be a str")
        pulumi.set(__self__, "mac_address", mac_address)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_interface_id and not isinstance(network_interface_id, str):
            raise TypeError("Expected argument 'network_interface_id' to be a str")
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        if network_security_group_id and not isinstance(network_security_group_id, str):
            raise TypeError("Expected argument 'network_security_group_id' to be a str")
        pulumi.set(__self__, "network_security_group_id", network_security_group_id)
        if network_security_group_ids and not isinstance(network_security_group_ids, list):
            raise TypeError("Expected argument 'network_security_group_ids' to be a list")
        pulumi.set(__self__, "network_security_group_ids", network_security_group_ids)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_network_id and not isinstance(pi_network_id, str):
            raise TypeError("Expected argument 'pi_network_id' to be a str")
        pulumi.set(__self__, "pi_network_id", pi_network_id)
        if pi_network_interface_id and not isinstance(pi_network_interface_id, str):
            raise TypeError("Expected argument 'pi_network_interface_id' to be a str")
        pulumi.set(__self__, "pi_network_interface_id", pi_network_interface_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if user_tags and not isinstance(user_tags, list):
            raise TypeError("Expected argument 'user_tags' to be a list")
        pulumi.set(__self__, "user_tags", user_tags)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetPiNetworkInterfaceInstanceResult']:
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> _builtins.str:
        return pulumi.get(self, "network_interface_id")

    @_builtins.property
    @pulumi.getter(name="networkSecurityGroupId")
    @_utilities.deprecated("""Deprecated""")
    def network_security_group_id(self) -> _builtins.str:
        return pulumi.get(self, "network_security_group_id")

    @_builtins.property
    @pulumi.getter(name="networkSecurityGroupIds")
    def network_security_group_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "network_security_group_ids")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piNetworkId")
    def pi_network_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_network_id")

    @_builtins.property
    @pulumi.getter(name="piNetworkInterfaceId")
    def pi_network_interface_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_network_interface_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "user_tags")


class AwaitableGetPiNetworkInterfaceResult(GetPiNetworkInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiNetworkInterfaceResult(
            crn=self.crn,
            id=self.id,
            instances=self.instances,
            ip_address=self.ip_address,
            mac_address=self.mac_address,
            name=self.name,
            network_interface_id=self.network_interface_id,
            network_security_group_id=self.network_security_group_id,
            network_security_group_ids=self.network_security_group_ids,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_network_id=self.pi_network_id,
            pi_network_interface_id=self.pi_network_interface_id,
            status=self.status,
            user_tags=self.user_tags)


def get_pi_network_interface(id: Optional[_builtins.str] = None,
                             pi_cloud_instance_id: Optional[_builtins.str] = None,
                             pi_network_id: Optional[_builtins.str] = None,
                             pi_network_interface_id: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiNetworkInterfaceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piNetworkId'] = pi_network_id
    __args__['piNetworkInterfaceId'] = pi_network_interface_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiNetworkInterface:getPiNetworkInterface', __args__, opts=opts, typ=GetPiNetworkInterfaceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiNetworkInterfaceResult(
        crn=pulumi.get(__ret__, 'crn'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        mac_address=pulumi.get(__ret__, 'mac_address'),
        name=pulumi.get(__ret__, 'name'),
        network_interface_id=pulumi.get(__ret__, 'network_interface_id'),
        network_security_group_id=pulumi.get(__ret__, 'network_security_group_id'),
        network_security_group_ids=pulumi.get(__ret__, 'network_security_group_ids'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_network_id=pulumi.get(__ret__, 'pi_network_id'),
        pi_network_interface_id=pulumi.get(__ret__, 'pi_network_interface_id'),
        status=pulumi.get(__ret__, 'status'),
        user_tags=pulumi.get(__ret__, 'user_tags'))
def get_pi_network_interface_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    pi_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    pi_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiNetworkInterfaceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piNetworkId'] = pi_network_id
    __args__['piNetworkInterfaceId'] = pi_network_interface_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiNetworkInterface:getPiNetworkInterface', __args__, opts=opts, typ=GetPiNetworkInterfaceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiNetworkInterfaceResult(
        crn=pulumi.get(__response__, 'crn'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        mac_address=pulumi.get(__response__, 'mac_address'),
        name=pulumi.get(__response__, 'name'),
        network_interface_id=pulumi.get(__response__, 'network_interface_id'),
        network_security_group_id=pulumi.get(__response__, 'network_security_group_id'),
        network_security_group_ids=pulumi.get(__response__, 'network_security_group_ids'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_network_id=pulumi.get(__response__, 'pi_network_id'),
        pi_network_interface_id=pulumi.get(__response__, 'pi_network_interface_id'),
        status=pulumi.get(__response__, 'status'),
        user_tags=pulumi.get(__response__, 'user_tags')))
