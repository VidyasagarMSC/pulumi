# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SatelliteLocationArgs', 'SatelliteLocation']

@pulumi.input_type
class SatelliteLocationArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 managed_from: pulumi.Input[_builtins.str],
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 coreos_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 cos_config: Optional[pulumi.Input['SatelliteLocationCosConfigArgs']] = None,
                 cos_credentials: Optional[pulumi.Input['SatelliteLocationCosCredentialsArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 logging_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_location_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['SatelliteLocationTimeoutsArgs']] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a SatelliteLocation resource.
        :param pulumi.Input[_builtins.str] location: A unique name for the new Satellite location
        :param pulumi.Input[_builtins.str] managed_from: The IBM Cloud metro from which the Satellite location is managed
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] capabilities: The satellite capabilities attached to the location
        :param pulumi.Input[_builtins.bool] coreos_enabled: Enable Red Hat CoreOS features within the Satellite location
        :param pulumi.Input['SatelliteLocationCosConfigArgs'] cos_config: COSBucket - IBM Cloud Object Storage bucket configuration details
        :param pulumi.Input['SatelliteLocationCosCredentialsArgs'] cos_credentials: COSAuthorization - IBM Cloud Object Storage authorization keys
        :param pulumi.Input[_builtins.str] description: A description of the new Satellite location
        :param pulumi.Input[_builtins.str] logging_account_id: The account ID for IBM Log Analysis with LogDNA log forwarding
        :param pulumi.Input[_builtins.str] physical_address: An optional physical address of the new Satellite location which is deployed on premise
        :param pulumi.Input[_builtins.str] pod_subnet: Custom subnet CIDR to provide private IP addresses for pods
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] service_subnet: Custom subnet CIDR to provide private IP addresses for services
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with resource instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] zones: The names of at least three high availability zones to use for the location
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "managed_from", managed_from)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if coreos_enabled is not None:
            pulumi.set(__self__, "coreos_enabled", coreos_enabled)
        if cos_config is not None:
            pulumi.set(__self__, "cos_config", cos_config)
        if cos_credentials is not None:
            pulumi.set(__self__, "cos_credentials", cos_credentials)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if logging_account_id is not None:
            pulumi.set(__self__, "logging_account_id", logging_account_id)
        if physical_address is not None:
            pulumi.set(__self__, "physical_address", physical_address)
        if pod_subnet is not None:
            pulumi.set(__self__, "pod_subnet", pod_subnet)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if satellite_location_id is not None:
            pulumi.set(__self__, "satellite_location_id", satellite_location_id)
        if service_subnet is not None:
            pulumi.set(__self__, "service_subnet", service_subnet)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        A unique name for the new Satellite location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="managedFrom")
    def managed_from(self) -> pulumi.Input[_builtins.str]:
        """
        The IBM Cloud metro from which the Satellite location is managed
        """
        return pulumi.get(self, "managed_from")

    @managed_from.setter
    def managed_from(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "managed_from", value)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The satellite capabilities attached to the location
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "capabilities", value)

    @_builtins.property
    @pulumi.getter(name="coreosEnabled")
    def coreos_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Red Hat CoreOS features within the Satellite location
        """
        return pulumi.get(self, "coreos_enabled")

    @coreos_enabled.setter
    def coreos_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "coreos_enabled", value)

    @_builtins.property
    @pulumi.getter(name="cosConfig")
    def cos_config(self) -> Optional[pulumi.Input['SatelliteLocationCosConfigArgs']]:
        """
        COSBucket - IBM Cloud Object Storage bucket configuration details
        """
        return pulumi.get(self, "cos_config")

    @cos_config.setter
    def cos_config(self, value: Optional[pulumi.Input['SatelliteLocationCosConfigArgs']]):
        pulumi.set(self, "cos_config", value)

    @_builtins.property
    @pulumi.getter(name="cosCredentials")
    def cos_credentials(self) -> Optional[pulumi.Input['SatelliteLocationCosCredentialsArgs']]:
        """
        COSAuthorization - IBM Cloud Object Storage authorization keys
        """
        return pulumi.get(self, "cos_credentials")

    @cos_credentials.setter
    def cos_credentials(self, value: Optional[pulumi.Input['SatelliteLocationCosCredentialsArgs']]):
        pulumi.set(self, "cos_credentials", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A description of the new Satellite location
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="loggingAccountId")
    def logging_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account ID for IBM Log Analysis with LogDNA log forwarding
        """
        return pulumi.get(self, "logging_account_id")

    @logging_account_id.setter
    def logging_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logging_account_id", value)

    @_builtins.property
    @pulumi.getter(name="physicalAddress")
    def physical_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An optional physical address of the new Satellite location which is deployed on premise
        """
        return pulumi.get(self, "physical_address")

    @physical_address.setter
    def physical_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "physical_address", value)

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom subnet CIDR to provide private IP addresses for pods
        """
        return pulumi.get(self, "pod_subnet")

    @pod_subnet.setter
    def pod_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_subnet", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="satelliteLocationId")
    def satellite_location_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_location_id")

    @satellite_location_id.setter
    def satellite_location_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_location_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom subnet CIDR to provide private IP addresses for services
        """
        return pulumi.get(self, "service_subnet")

    @service_subnet.setter
    def service_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_subnet", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags associated with resource instance
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SatelliteLocationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SatelliteLocationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The names of at least three high availability zones to use for the location
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class _SatelliteLocationState:
    def __init__(__self__, *,
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 coreos_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 cos_config: Optional[pulumi.Input['SatelliteLocationCosConfigArgs']] = None,
                 cos_credentials: Optional[pulumi.Input['SatelliteLocationCosCredentialsArgs']] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 host_attached_count: Optional[pulumi.Input[_builtins.float]] = None,
                 host_available_count: Optional[pulumi.Input[_builtins.float]] = None,
                 ingress_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 ingress_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 logging_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_from: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_location_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['SatelliteLocationTimeoutsArgs']] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering SatelliteLocation resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] capabilities: The satellite capabilities attached to the location
        :param pulumi.Input[_builtins.bool] coreos_enabled: Enable Red Hat CoreOS features within the Satellite location
        :param pulumi.Input['SatelliteLocationCosConfigArgs'] cos_config: COSBucket - IBM Cloud Object Storage bucket configuration details
        :param pulumi.Input['SatelliteLocationCosCredentialsArgs'] cos_credentials: COSAuthorization - IBM Cloud Object Storage authorization keys
        :param pulumi.Input[_builtins.str] created_on: Created Date
        :param pulumi.Input[_builtins.str] crn: Location CRN
        :param pulumi.Input[_builtins.str] description: A description of the new Satellite location
        :param pulumi.Input[_builtins.float] host_attached_count: The total number of hosts that are attached to the Satellite location.
        :param pulumi.Input[_builtins.float] host_available_count: The available number of hosts that can be assigned to a cluster resource in the Satellite location.
        :param pulumi.Input[_builtins.str] location: A unique name for the new Satellite location
        :param pulumi.Input[_builtins.str] logging_account_id: The account ID for IBM Log Analysis with LogDNA log forwarding
        :param pulumi.Input[_builtins.str] managed_from: The IBM Cloud metro from which the Satellite location is managed
        :param pulumi.Input[_builtins.str] physical_address: An optional physical address of the new Satellite location which is deployed on premise
        :param pulumi.Input[_builtins.str] pod_subnet: Custom subnet CIDR to provide private IP addresses for pods
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] resource_group_name: Name of the resource group
        :param pulumi.Input[_builtins.str] service_subnet: Custom subnet CIDR to provide private IP addresses for services
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with resource instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] zones: The names of at least three high availability zones to use for the location
        """
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if coreos_enabled is not None:
            pulumi.set(__self__, "coreos_enabled", coreos_enabled)
        if cos_config is not None:
            pulumi.set(__self__, "cos_config", cos_config)
        if cos_credentials is not None:
            pulumi.set(__self__, "cos_credentials", cos_credentials)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host_attached_count is not None:
            pulumi.set(__self__, "host_attached_count", host_attached_count)
        if host_available_count is not None:
            pulumi.set(__self__, "host_available_count", host_available_count)
        if ingress_hostname is not None:
            pulumi.set(__self__, "ingress_hostname", ingress_hostname)
        if ingress_secret is not None:
            pulumi.set(__self__, "ingress_secret", ingress_secret)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if logging_account_id is not None:
            pulumi.set(__self__, "logging_account_id", logging_account_id)
        if managed_from is not None:
            pulumi.set(__self__, "managed_from", managed_from)
        if physical_address is not None:
            pulumi.set(__self__, "physical_address", physical_address)
        if pod_subnet is not None:
            pulumi.set(__self__, "pod_subnet", pod_subnet)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if satellite_location_id is not None:
            pulumi.set(__self__, "satellite_location_id", satellite_location_id)
        if service_subnet is not None:
            pulumi.set(__self__, "service_subnet", service_subnet)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The satellite capabilities attached to the location
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "capabilities", value)

    @_builtins.property
    @pulumi.getter(name="coreosEnabled")
    def coreos_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Red Hat CoreOS features within the Satellite location
        """
        return pulumi.get(self, "coreos_enabled")

    @coreos_enabled.setter
    def coreos_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "coreos_enabled", value)

    @_builtins.property
    @pulumi.getter(name="cosConfig")
    def cos_config(self) -> Optional[pulumi.Input['SatelliteLocationCosConfigArgs']]:
        """
        COSBucket - IBM Cloud Object Storage bucket configuration details
        """
        return pulumi.get(self, "cos_config")

    @cos_config.setter
    def cos_config(self, value: Optional[pulumi.Input['SatelliteLocationCosConfigArgs']]):
        pulumi.set(self, "cos_config", value)

    @_builtins.property
    @pulumi.getter(name="cosCredentials")
    def cos_credentials(self) -> Optional[pulumi.Input['SatelliteLocationCosCredentialsArgs']]:
        """
        COSAuthorization - IBM Cloud Object Storage authorization keys
        """
        return pulumi.get(self, "cos_credentials")

    @cos_credentials.setter
    def cos_credentials(self, value: Optional[pulumi.Input['SatelliteLocationCosCredentialsArgs']]):
        pulumi.set(self, "cos_credentials", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Created Date
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Location CRN
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A description of the new Satellite location
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="hostAttachedCount")
    def host_attached_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total number of hosts that are attached to the Satellite location.
        """
        return pulumi.get(self, "host_attached_count")

    @host_attached_count.setter
    def host_attached_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "host_attached_count", value)

    @_builtins.property
    @pulumi.getter(name="hostAvailableCount")
    def host_available_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The available number of hosts that can be assigned to a cluster resource in the Satellite location.
        """
        return pulumi.get(self, "host_available_count")

    @host_available_count.setter
    def host_available_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "host_available_count", value)

    @_builtins.property
    @pulumi.getter(name="ingressHostname")
    def ingress_hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ingress_hostname")

    @ingress_hostname.setter
    def ingress_hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ingress_hostname", value)

    @_builtins.property
    @pulumi.getter(name="ingressSecret")
    def ingress_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ingress_secret")

    @ingress_secret.setter
    def ingress_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ingress_secret", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique name for the new Satellite location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="loggingAccountId")
    def logging_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account ID for IBM Log Analysis with LogDNA log forwarding
        """
        return pulumi.get(self, "logging_account_id")

    @logging_account_id.setter
    def logging_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logging_account_id", value)

    @_builtins.property
    @pulumi.getter(name="managedFrom")
    def managed_from(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IBM Cloud metro from which the Satellite location is managed
        """
        return pulumi.get(self, "managed_from")

    @managed_from.setter
    def managed_from(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "managed_from", value)

    @_builtins.property
    @pulumi.getter(name="physicalAddress")
    def physical_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An optional physical address of the new Satellite location which is deployed on premise
        """
        return pulumi.get(self, "physical_address")

    @physical_address.setter
    def physical_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "physical_address", value)

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom subnet CIDR to provide private IP addresses for pods
        """
        return pulumi.get(self, "pod_subnet")

    @pod_subnet.setter
    def pod_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_subnet", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the resource group
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="satelliteLocationId")
    def satellite_location_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_location_id")

    @satellite_location_id.setter
    def satellite_location_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_location_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom subnet CIDR to provide private IP addresses for services
        """
        return pulumi.get(self, "service_subnet")

    @service_subnet.setter
    def service_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_subnet", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags associated with resource instance
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SatelliteLocationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SatelliteLocationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The names of at least three high availability zones to use for the location
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "zones", value)


@pulumi.type_token("ibm:index/satelliteLocation:SatelliteLocation")
class SatelliteLocation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 coreos_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 cos_config: Optional[pulumi.Input[Union['SatelliteLocationCosConfigArgs', 'SatelliteLocationCosConfigArgsDict']]] = None,
                 cos_credentials: Optional[pulumi.Input[Union['SatelliteLocationCosCredentialsArgs', 'SatelliteLocationCosCredentialsArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 logging_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_from: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_location_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['SatelliteLocationTimeoutsArgs', 'SatelliteLocationTimeoutsArgsDict']]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a SatelliteLocation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] capabilities: The satellite capabilities attached to the location
        :param pulumi.Input[_builtins.bool] coreos_enabled: Enable Red Hat CoreOS features within the Satellite location
        :param pulumi.Input[Union['SatelliteLocationCosConfigArgs', 'SatelliteLocationCosConfigArgsDict']] cos_config: COSBucket - IBM Cloud Object Storage bucket configuration details
        :param pulumi.Input[Union['SatelliteLocationCosCredentialsArgs', 'SatelliteLocationCosCredentialsArgsDict']] cos_credentials: COSAuthorization - IBM Cloud Object Storage authorization keys
        :param pulumi.Input[_builtins.str] description: A description of the new Satellite location
        :param pulumi.Input[_builtins.str] location: A unique name for the new Satellite location
        :param pulumi.Input[_builtins.str] logging_account_id: The account ID for IBM Log Analysis with LogDNA log forwarding
        :param pulumi.Input[_builtins.str] managed_from: The IBM Cloud metro from which the Satellite location is managed
        :param pulumi.Input[_builtins.str] physical_address: An optional physical address of the new Satellite location which is deployed on premise
        :param pulumi.Input[_builtins.str] pod_subnet: Custom subnet CIDR to provide private IP addresses for pods
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] service_subnet: Custom subnet CIDR to provide private IP addresses for services
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with resource instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] zones: The names of at least three high availability zones to use for the location
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SatelliteLocationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SatelliteLocation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SatelliteLocationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SatelliteLocationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 coreos_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 cos_config: Optional[pulumi.Input[Union['SatelliteLocationCosConfigArgs', 'SatelliteLocationCosConfigArgsDict']]] = None,
                 cos_credentials: Optional[pulumi.Input[Union['SatelliteLocationCosCredentialsArgs', 'SatelliteLocationCosCredentialsArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 logging_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_from: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_location_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['SatelliteLocationTimeoutsArgs', 'SatelliteLocationTimeoutsArgsDict']]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SatelliteLocationArgs.__new__(SatelliteLocationArgs)

            __props__.__dict__["capabilities"] = capabilities
            __props__.__dict__["coreos_enabled"] = coreos_enabled
            __props__.__dict__["cos_config"] = cos_config
            __props__.__dict__["cos_credentials"] = cos_credentials
            __props__.__dict__["description"] = description
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["logging_account_id"] = logging_account_id
            if managed_from is None and not opts.urn:
                raise TypeError("Missing required property 'managed_from'")
            __props__.__dict__["managed_from"] = managed_from
            __props__.__dict__["physical_address"] = physical_address
            __props__.__dict__["pod_subnet"] = pod_subnet
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["satellite_location_id"] = satellite_location_id
            __props__.__dict__["service_subnet"] = service_subnet
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["zones"] = zones
            __props__.__dict__["created_on"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["host_attached_count"] = None
            __props__.__dict__["host_available_count"] = None
            __props__.__dict__["ingress_hostname"] = None
            __props__.__dict__["ingress_secret"] = None
            __props__.__dict__["resource_group_name"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["ingressSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SatelliteLocation, __self__).__init__(
            'ibm:index/satelliteLocation:SatelliteLocation',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            coreos_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            cos_config: Optional[pulumi.Input[Union['SatelliteLocationCosConfigArgs', 'SatelliteLocationCosConfigArgsDict']]] = None,
            cos_credentials: Optional[pulumi.Input[Union['SatelliteLocationCosCredentialsArgs', 'SatelliteLocationCosCredentialsArgsDict']]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            host_attached_count: Optional[pulumi.Input[_builtins.float]] = None,
            host_available_count: Optional[pulumi.Input[_builtins.float]] = None,
            ingress_hostname: Optional[pulumi.Input[_builtins.str]] = None,
            ingress_secret: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            logging_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            managed_from: Optional[pulumi.Input[_builtins.str]] = None,
            physical_address: Optional[pulumi.Input[_builtins.str]] = None,
            pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            satellite_location_id: Optional[pulumi.Input[_builtins.str]] = None,
            service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['SatelliteLocationTimeoutsArgs', 'SatelliteLocationTimeoutsArgsDict']]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'SatelliteLocation':
        """
        Get an existing SatelliteLocation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] capabilities: The satellite capabilities attached to the location
        :param pulumi.Input[_builtins.bool] coreos_enabled: Enable Red Hat CoreOS features within the Satellite location
        :param pulumi.Input[Union['SatelliteLocationCosConfigArgs', 'SatelliteLocationCosConfigArgsDict']] cos_config: COSBucket - IBM Cloud Object Storage bucket configuration details
        :param pulumi.Input[Union['SatelliteLocationCosCredentialsArgs', 'SatelliteLocationCosCredentialsArgsDict']] cos_credentials: COSAuthorization - IBM Cloud Object Storage authorization keys
        :param pulumi.Input[_builtins.str] created_on: Created Date
        :param pulumi.Input[_builtins.str] crn: Location CRN
        :param pulumi.Input[_builtins.str] description: A description of the new Satellite location
        :param pulumi.Input[_builtins.float] host_attached_count: The total number of hosts that are attached to the Satellite location.
        :param pulumi.Input[_builtins.float] host_available_count: The available number of hosts that can be assigned to a cluster resource in the Satellite location.
        :param pulumi.Input[_builtins.str] location: A unique name for the new Satellite location
        :param pulumi.Input[_builtins.str] logging_account_id: The account ID for IBM Log Analysis with LogDNA log forwarding
        :param pulumi.Input[_builtins.str] managed_from: The IBM Cloud metro from which the Satellite location is managed
        :param pulumi.Input[_builtins.str] physical_address: An optional physical address of the new Satellite location which is deployed on premise
        :param pulumi.Input[_builtins.str] pod_subnet: Custom subnet CIDR to provide private IP addresses for pods
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] resource_group_name: Name of the resource group
        :param pulumi.Input[_builtins.str] service_subnet: Custom subnet CIDR to provide private IP addresses for services
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with resource instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] zones: The names of at least three high availability zones to use for the location
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SatelliteLocationState.__new__(_SatelliteLocationState)

        __props__.__dict__["capabilities"] = capabilities
        __props__.__dict__["coreos_enabled"] = coreos_enabled
        __props__.__dict__["cos_config"] = cos_config
        __props__.__dict__["cos_credentials"] = cos_credentials
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["crn"] = crn
        __props__.__dict__["description"] = description
        __props__.__dict__["host_attached_count"] = host_attached_count
        __props__.__dict__["host_available_count"] = host_available_count
        __props__.__dict__["ingress_hostname"] = ingress_hostname
        __props__.__dict__["ingress_secret"] = ingress_secret
        __props__.__dict__["location"] = location
        __props__.__dict__["logging_account_id"] = logging_account_id
        __props__.__dict__["managed_from"] = managed_from
        __props__.__dict__["physical_address"] = physical_address
        __props__.__dict__["pod_subnet"] = pod_subnet
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["satellite_location_id"] = satellite_location_id
        __props__.__dict__["service_subnet"] = service_subnet
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["zones"] = zones
        return SatelliteLocation(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The satellite capabilities attached to the location
        """
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="coreosEnabled")
    def coreos_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Enable Red Hat CoreOS features within the Satellite location
        """
        return pulumi.get(self, "coreos_enabled")

    @_builtins.property
    @pulumi.getter(name="cosConfig")
    def cos_config(self) -> pulumi.Output[Optional['outputs.SatelliteLocationCosConfig']]:
        """
        COSBucket - IBM Cloud Object Storage bucket configuration details
        """
        return pulumi.get(self, "cos_config")

    @_builtins.property
    @pulumi.getter(name="cosCredentials")
    def cos_credentials(self) -> pulumi.Output[Optional['outputs.SatelliteLocationCosCredentials']]:
        """
        COSAuthorization - IBM Cloud Object Storage authorization keys
        """
        return pulumi.get(self, "cos_credentials")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        Created Date
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        Location CRN
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A description of the new Satellite location
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="hostAttachedCount")
    def host_attached_count(self) -> pulumi.Output[_builtins.float]:
        """
        The total number of hosts that are attached to the Satellite location.
        """
        return pulumi.get(self, "host_attached_count")

    @_builtins.property
    @pulumi.getter(name="hostAvailableCount")
    def host_available_count(self) -> pulumi.Output[_builtins.float]:
        """
        The available number of hosts that can be assigned to a cluster resource in the Satellite location.
        """
        return pulumi.get(self, "host_available_count")

    @_builtins.property
    @pulumi.getter(name="ingressHostname")
    def ingress_hostname(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ingress_hostname")

    @_builtins.property
    @pulumi.getter(name="ingressSecret")
    def ingress_secret(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ingress_secret")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        A unique name for the new Satellite location
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="loggingAccountId")
    def logging_account_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The account ID for IBM Log Analysis with LogDNA log forwarding
        """
        return pulumi.get(self, "logging_account_id")

    @_builtins.property
    @pulumi.getter(name="managedFrom")
    def managed_from(self) -> pulumi.Output[_builtins.str]:
        """
        The IBM Cloud metro from which the Satellite location is managed
        """
        return pulumi.get(self, "managed_from")

    @_builtins.property
    @pulumi.getter(name="physicalAddress")
    def physical_address(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        An optional physical address of the new Satellite location which is deployed on premise
        """
        return pulumi.get(self, "physical_address")

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> pulumi.Output[_builtins.str]:
        """
        Custom subnet CIDR to provide private IP addresses for pods
        """
        return pulumi.get(self, "pod_subnet")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the resource group
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="satelliteLocationId")
    def satellite_location_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "satellite_location_id")

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> pulumi.Output[_builtins.str]:
        """
        Custom subnet CIDR to provide private IP addresses for services
        """
        return pulumi.get(self, "service_subnet")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of tags associated with resource instance
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.SatelliteLocationTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The names of at least three high availability zones to use for the location
        """
        return pulumi.get(self, "zones")

