# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ComputeMonitorArgs', 'ComputeMonitor']

@pulumi.input_type
class ComputeMonitorArgs:
    def __init__(__self__, *,
                 guest_id: pulumi.Input[_builtins.float],
                 query_type_id: pulumi.Input[_builtins.float],
                 response_action_id: pulumi.Input[_builtins.float],
                 compute_monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 notified_users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_cycles: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a ComputeMonitor resource.
        :param pulumi.Input[_builtins.float] guest_id: Guest ID
        :param pulumi.Input[_builtins.float] query_type_id: Query Type ID
        :param pulumi.Input[_builtins.float] response_action_id: Response action ID
        :param pulumi.Input[_builtins.str] ip_address: IP Address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] notified_users: List of users notified
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] wait_cycles: wait cycles count
        """
        pulumi.set(__self__, "guest_id", guest_id)
        pulumi.set(__self__, "query_type_id", query_type_id)
        pulumi.set(__self__, "response_action_id", response_action_id)
        if compute_monitor_id is not None:
            pulumi.set(__self__, "compute_monitor_id", compute_monitor_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if notified_users is not None:
            pulumi.set(__self__, "notified_users", notified_users)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if wait_cycles is not None:
            pulumi.set(__self__, "wait_cycles", wait_cycles)

    @_builtins.property
    @pulumi.getter(name="guestId")
    def guest_id(self) -> pulumi.Input[_builtins.float]:
        """
        Guest ID
        """
        return pulumi.get(self, "guest_id")

    @guest_id.setter
    def guest_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "guest_id", value)

    @_builtins.property
    @pulumi.getter(name="queryTypeId")
    def query_type_id(self) -> pulumi.Input[_builtins.float]:
        """
        Query Type ID
        """
        return pulumi.get(self, "query_type_id")

    @query_type_id.setter
    def query_type_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "query_type_id", value)

    @_builtins.property
    @pulumi.getter(name="responseActionId")
    def response_action_id(self) -> pulumi.Input[_builtins.float]:
        """
        Response action ID
        """
        return pulumi.get(self, "response_action_id")

    @response_action_id.setter
    def response_action_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "response_action_id", value)

    @_builtins.property
    @pulumi.getter(name="computeMonitorId")
    def compute_monitor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_monitor_id")

    @compute_monitor_id.setter
    def compute_monitor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_monitor_id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="notifiedUsers")
    def notified_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        List of users notified
        """
        return pulumi.get(self, "notified_users")

    @notified_users.setter
    def notified_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "notified_users", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="waitCycles")
    def wait_cycles(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        wait cycles count
        """
        return pulumi.get(self, "wait_cycles")

    @wait_cycles.setter
    def wait_cycles(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "wait_cycles", value)


@pulumi.input_type
class _ComputeMonitorState:
    def __init__(__self__, *,
                 compute_monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 guest_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 notified_users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 query_type_id: Optional[pulumi.Input[_builtins.float]] = None,
                 response_action_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_cycles: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering ComputeMonitor resources.
        :param pulumi.Input[_builtins.float] guest_id: Guest ID
        :param pulumi.Input[_builtins.str] ip_address: IP Address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] notified_users: List of users notified
        :param pulumi.Input[_builtins.float] query_type_id: Query Type ID
        :param pulumi.Input[_builtins.float] response_action_id: Response action ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] wait_cycles: wait cycles count
        """
        if compute_monitor_id is not None:
            pulumi.set(__self__, "compute_monitor_id", compute_monitor_id)
        if guest_id is not None:
            pulumi.set(__self__, "guest_id", guest_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if notified_users is not None:
            pulumi.set(__self__, "notified_users", notified_users)
        if query_type_id is not None:
            pulumi.set(__self__, "query_type_id", query_type_id)
        if response_action_id is not None:
            pulumi.set(__self__, "response_action_id", response_action_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if wait_cycles is not None:
            pulumi.set(__self__, "wait_cycles", wait_cycles)

    @_builtins.property
    @pulumi.getter(name="computeMonitorId")
    def compute_monitor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_monitor_id")

    @compute_monitor_id.setter
    def compute_monitor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_monitor_id", value)

    @_builtins.property
    @pulumi.getter(name="guestId")
    def guest_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Guest ID
        """
        return pulumi.get(self, "guest_id")

    @guest_id.setter
    def guest_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "guest_id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="notifiedUsers")
    def notified_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        List of users notified
        """
        return pulumi.get(self, "notified_users")

    @notified_users.setter
    def notified_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "notified_users", value)

    @_builtins.property
    @pulumi.getter(name="queryTypeId")
    def query_type_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Query Type ID
        """
        return pulumi.get(self, "query_type_id")

    @query_type_id.setter
    def query_type_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "query_type_id", value)

    @_builtins.property
    @pulumi.getter(name="responseActionId")
    def response_action_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Response action ID
        """
        return pulumi.get(self, "response_action_id")

    @response_action_id.setter
    def response_action_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "response_action_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="waitCycles")
    def wait_cycles(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        wait cycles count
        """
        return pulumi.get(self, "wait_cycles")

    @wait_cycles.setter
    def wait_cycles(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "wait_cycles", value)


@pulumi.type_token("ibm:index/computeMonitor:ComputeMonitor")
class ComputeMonitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 guest_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 notified_users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 query_type_id: Optional[pulumi.Input[_builtins.float]] = None,
                 response_action_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_cycles: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a ComputeMonitor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] guest_id: Guest ID
        :param pulumi.Input[_builtins.str] ip_address: IP Address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] notified_users: List of users notified
        :param pulumi.Input[_builtins.float] query_type_id: Query Type ID
        :param pulumi.Input[_builtins.float] response_action_id: Response action ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] wait_cycles: wait cycles count
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputeMonitorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComputeMonitor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComputeMonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeMonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 guest_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 notified_users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 query_type_id: Optional[pulumi.Input[_builtins.float]] = None,
                 response_action_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_cycles: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeMonitorArgs.__new__(ComputeMonitorArgs)

            __props__.__dict__["compute_monitor_id"] = compute_monitor_id
            if guest_id is None and not opts.urn:
                raise TypeError("Missing required property 'guest_id'")
            __props__.__dict__["guest_id"] = guest_id
            __props__.__dict__["ip_address"] = ip_address
            __props__.__dict__["notified_users"] = notified_users
            if query_type_id is None and not opts.urn:
                raise TypeError("Missing required property 'query_type_id'")
            __props__.__dict__["query_type_id"] = query_type_id
            if response_action_id is None and not opts.urn:
                raise TypeError("Missing required property 'response_action_id'")
            __props__.__dict__["response_action_id"] = response_action_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["wait_cycles"] = wait_cycles
        super(ComputeMonitor, __self__).__init__(
            'ibm:index/computeMonitor:ComputeMonitor',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compute_monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
            guest_id: Optional[pulumi.Input[_builtins.float]] = None,
            ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            notified_users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            query_type_id: Optional[pulumi.Input[_builtins.float]] = None,
            response_action_id: Optional[pulumi.Input[_builtins.float]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            wait_cycles: Optional[pulumi.Input[_builtins.float]] = None) -> 'ComputeMonitor':
        """
        Get an existing ComputeMonitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] guest_id: Guest ID
        :param pulumi.Input[_builtins.str] ip_address: IP Address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] notified_users: List of users notified
        :param pulumi.Input[_builtins.float] query_type_id: Query Type ID
        :param pulumi.Input[_builtins.float] response_action_id: Response action ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] wait_cycles: wait cycles count
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeMonitorState.__new__(_ComputeMonitorState)

        __props__.__dict__["compute_monitor_id"] = compute_monitor_id
        __props__.__dict__["guest_id"] = guest_id
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["notified_users"] = notified_users
        __props__.__dict__["query_type_id"] = query_type_id
        __props__.__dict__["response_action_id"] = response_action_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["wait_cycles"] = wait_cycles
        return ComputeMonitor(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="computeMonitorId")
    def compute_monitor_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "compute_monitor_id")

    @_builtins.property
    @pulumi.getter(name="guestId")
    def guest_id(self) -> pulumi.Output[_builtins.float]:
        """
        Guest ID
        """
        return pulumi.get(self, "guest_id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="notifiedUsers")
    def notified_users(self) -> pulumi.Output[Sequence[_builtins.float]]:
        """
        List of users notified
        """
        return pulumi.get(self, "notified_users")

    @_builtins.property
    @pulumi.getter(name="queryTypeId")
    def query_type_id(self) -> pulumi.Output[_builtins.float]:
        """
        Query Type ID
        """
        return pulumi.get(self, "query_type_id")

    @_builtins.property
    @pulumi.getter(name="responseActionId")
    def response_action_id(self) -> pulumi.Output[_builtins.float]:
        """
        Response action ID
        """
        return pulumi.get(self, "response_action_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="waitCycles")
    def wait_cycles(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        wait cycles count
        """
        return pulumi.get(self, "wait_cycles")

