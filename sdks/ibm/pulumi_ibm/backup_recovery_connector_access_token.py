# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['BackupRecoveryConnectorAccessTokenArgs', 'BackupRecoveryConnectorAccessToken']

@pulumi.input_type
class BackupRecoveryConnectorAccessTokenArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[_builtins.str],
                 username: pulumi.Input[_builtins.str],
                 backup_recovery_connector_access_token_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BackupRecoveryConnectorAccessToken resource.
        :param pulumi.Input[_builtins.str] password: Specifies the password of the Cohesity user account.
        :param pulumi.Input[_builtins.str] username: Specifies the login name of the Cohesity user.
        :param pulumi.Input[_builtins.str] domain: Specifies the domain the user is logging in to. For a local user the domain is LOCAL. For LDAP/AD user, the domain will
               map to a LDAP connection string. A user is uniquely identified by a combination of username and domain. LOCAL is the
               default domain.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if backup_recovery_connector_access_token_id is not None:
            pulumi.set(__self__, "backup_recovery_connector_access_token_id", backup_recovery_connector_access_token_id)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the password of the Cohesity user account.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the login name of the Cohesity user.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "username", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryConnectorAccessTokenId")
    def backup_recovery_connector_access_token_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_connector_access_token_id")

    @backup_recovery_connector_access_token_id.setter
    def backup_recovery_connector_access_token_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_connector_access_token_id", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the domain the user is logging in to. For a local user the domain is LOCAL. For LDAP/AD user, the domain will
        map to a LDAP connection string. A user is uniquely identified by a combination of username and domain. LOCAL is the
        default domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class _BackupRecoveryConnectorAccessTokenState:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_recovery_connector_access_token_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 privileges: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 token_type: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupRecoveryConnectorAccessToken resources.
        :param pulumi.Input[_builtins.str] access_token: Created access token.
        :param pulumi.Input[_builtins.str] domain: Specifies the domain the user is logging in to. For a local user the domain is LOCAL. For LDAP/AD user, the domain will
               map to a LDAP connection string. A user is uniquely identified by a combination of username and domain. LOCAL is the
               default domain.
        :param pulumi.Input[_builtins.str] password: Specifies the password of the Cohesity user account.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] privileges: Privileges for the user.
        :param pulumi.Input[_builtins.str] token_type: Access token type.
        :param pulumi.Input[_builtins.str] username: Specifies the login name of the Cohesity user.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if backup_recovery_connector_access_token_id is not None:
            pulumi.set(__self__, "backup_recovery_connector_access_token_id", backup_recovery_connector_access_token_id)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if privileges is not None:
            pulumi.set(__self__, "privileges", privileges)
        if token_type is not None:
            pulumi.set(__self__, "token_type", token_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Created access token.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_token", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryConnectorAccessTokenId")
    def backup_recovery_connector_access_token_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_connector_access_token_id")

    @backup_recovery_connector_access_token_id.setter
    def backup_recovery_connector_access_token_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_connector_access_token_id", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the domain the user is logging in to. For a local user the domain is LOCAL. For LDAP/AD user, the domain will
        map to a LDAP connection string. A user is uniquely identified by a combination of username and domain. LOCAL is the
        default domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the password of the Cohesity user account.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Privileges for the user.
        """
        return pulumi.get(self, "privileges")

    @privileges.setter
    def privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "privileges", value)

    @_builtins.property
    @pulumi.getter(name="tokenType")
    def token_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Access token type.
        """
        return pulumi.get(self, "token_type")

    @token_type.setter
    def token_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "token_type", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login name of the Cohesity user.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


@pulumi.type_token("ibm:index/backupRecoveryConnectorAccessToken:BackupRecoveryConnectorAccessToken")
class BackupRecoveryConnectorAccessToken(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_recovery_connector_access_token_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BackupRecoveryConnectorAccessToken resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] domain: Specifies the domain the user is logging in to. For a local user the domain is LOCAL. For LDAP/AD user, the domain will
               map to a LDAP connection string. A user is uniquely identified by a combination of username and domain. LOCAL is the
               default domain.
        :param pulumi.Input[_builtins.str] password: Specifies the password of the Cohesity user account.
        :param pulumi.Input[_builtins.str] username: Specifies the login name of the Cohesity user.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupRecoveryConnectorAccessTokenArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupRecoveryConnectorAccessToken resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupRecoveryConnectorAccessTokenArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupRecoveryConnectorAccessTokenArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_recovery_connector_access_token_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupRecoveryConnectorAccessTokenArgs.__new__(BackupRecoveryConnectorAccessTokenArgs)

            __props__.__dict__["backup_recovery_connector_access_token_id"] = backup_recovery_connector_access_token_id
            __props__.__dict__["domain"] = domain
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["access_token"] = None
            __props__.__dict__["privileges"] = None
            __props__.__dict__["token_type"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessToken", "password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(BackupRecoveryConnectorAccessToken, __self__).__init__(
            'ibm:index/backupRecoveryConnectorAccessToken:BackupRecoveryConnectorAccessToken',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_token: Optional[pulumi.Input[_builtins.str]] = None,
            backup_recovery_connector_access_token_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain: Optional[pulumi.Input[_builtins.str]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            privileges: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            token_type: Optional[pulumi.Input[_builtins.str]] = None,
            username: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupRecoveryConnectorAccessToken':
        """
        Get an existing BackupRecoveryConnectorAccessToken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_token: Created access token.
        :param pulumi.Input[_builtins.str] domain: Specifies the domain the user is logging in to. For a local user the domain is LOCAL. For LDAP/AD user, the domain will
               map to a LDAP connection string. A user is uniquely identified by a combination of username and domain. LOCAL is the
               default domain.
        :param pulumi.Input[_builtins.str] password: Specifies the password of the Cohesity user account.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] privileges: Privileges for the user.
        :param pulumi.Input[_builtins.str] token_type: Access token type.
        :param pulumi.Input[_builtins.str] username: Specifies the login name of the Cohesity user.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupRecoveryConnectorAccessTokenState.__new__(_BackupRecoveryConnectorAccessTokenState)

        __props__.__dict__["access_token"] = access_token
        __props__.__dict__["backup_recovery_connector_access_token_id"] = backup_recovery_connector_access_token_id
        __props__.__dict__["domain"] = domain
        __props__.__dict__["password"] = password
        __props__.__dict__["privileges"] = privileges
        __props__.__dict__["token_type"] = token_type
        __props__.__dict__["username"] = username
        return BackupRecoveryConnectorAccessToken(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Output[_builtins.str]:
        """
        Created access token.
        """
        return pulumi.get(self, "access_token")

    @_builtins.property
    @pulumi.getter(name="backupRecoveryConnectorAccessTokenId")
    def backup_recovery_connector_access_token_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "backup_recovery_connector_access_token_id")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the domain the user is logging in to. For a local user the domain is LOCAL. For LDAP/AD user, the domain will
        map to a LDAP connection string. A user is uniquely identified by a combination of username and domain. LOCAL is the
        default domain.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the password of the Cohesity user account.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def privileges(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Privileges for the user.
        """
        return pulumi.get(self, "privileges")

    @_builtins.property
    @pulumi.getter(name="tokenType")
    def token_type(self) -> pulumi.Output[_builtins.str]:
        """
        Access token type.
        """
        return pulumi.get(self, "token_type")

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the login name of the Cohesity user.
        """
        return pulumi.get(self, "username")

