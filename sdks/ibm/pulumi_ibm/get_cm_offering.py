# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCmOfferingResult',
    'AwaitableGetCmOfferingResult',
    'get_cm_offering',
    'get_cm_offering_output',
]

@pulumi.output_type
class GetCmOfferingResult:
    """
    A collection of values returned by getCmOffering.
    """
    def __init__(__self__, badges=None, catalog_id=None, catalog_name=None, created=None, crn=None, deprecate_pendings=None, disclaimer=None, features=None, hidden=None, id=None, image_pull_keys=None, keywords=None, kinds=None, label=None, label_i18n=None, long_description=None, long_description_i18n=None, media=None, metadata=None, name=None, offering_docs_url=None, offering_icon_url=None, offering_id=None, offering_identifier=None, offering_support_url=None, pc_managed=None, portal_approval_record=None, portal_ui_url=None, product_kind=None, provider_infos=None, public_original_crn=None, publish_approved=None, publish_public_crn=None, ratings=None, repo_infos=None, rev=None, share_enabled=None, share_with_access_lists=None, share_with_all=None, share_with_ibm=None, short_description=None, short_description_i18n=None, supports=None, tags=None, updated=None, url=None):
        if badges and not isinstance(badges, list):
            raise TypeError("Expected argument 'badges' to be a list")
        pulumi.set(__self__, "badges", badges)
        if catalog_id and not isinstance(catalog_id, str):
            raise TypeError("Expected argument 'catalog_id' to be a str")
        pulumi.set(__self__, "catalog_id", catalog_id)
        if catalog_name and not isinstance(catalog_name, str):
            raise TypeError("Expected argument 'catalog_name' to be a str")
        pulumi.set(__self__, "catalog_name", catalog_name)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if deprecate_pendings and not isinstance(deprecate_pendings, list):
            raise TypeError("Expected argument 'deprecate_pendings' to be a list")
        pulumi.set(__self__, "deprecate_pendings", deprecate_pendings)
        if disclaimer and not isinstance(disclaimer, str):
            raise TypeError("Expected argument 'disclaimer' to be a str")
        pulumi.set(__self__, "disclaimer", disclaimer)
        if features and not isinstance(features, list):
            raise TypeError("Expected argument 'features' to be a list")
        pulumi.set(__self__, "features", features)
        if hidden and not isinstance(hidden, bool):
            raise TypeError("Expected argument 'hidden' to be a bool")
        pulumi.set(__self__, "hidden", hidden)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_pull_keys and not isinstance(image_pull_keys, list):
            raise TypeError("Expected argument 'image_pull_keys' to be a list")
        pulumi.set(__self__, "image_pull_keys", image_pull_keys)
        if keywords and not isinstance(keywords, list):
            raise TypeError("Expected argument 'keywords' to be a list")
        pulumi.set(__self__, "keywords", keywords)
        if kinds and not isinstance(kinds, list):
            raise TypeError("Expected argument 'kinds' to be a list")
        pulumi.set(__self__, "kinds", kinds)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if label_i18n and not isinstance(label_i18n, dict):
            raise TypeError("Expected argument 'label_i18n' to be a dict")
        pulumi.set(__self__, "label_i18n", label_i18n)
        if long_description and not isinstance(long_description, str):
            raise TypeError("Expected argument 'long_description' to be a str")
        pulumi.set(__self__, "long_description", long_description)
        if long_description_i18n and not isinstance(long_description_i18n, dict):
            raise TypeError("Expected argument 'long_description_i18n' to be a dict")
        pulumi.set(__self__, "long_description_i18n", long_description_i18n)
        if media and not isinstance(media, list):
            raise TypeError("Expected argument 'media' to be a list")
        pulumi.set(__self__, "media", media)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if offering_docs_url and not isinstance(offering_docs_url, str):
            raise TypeError("Expected argument 'offering_docs_url' to be a str")
        pulumi.set(__self__, "offering_docs_url", offering_docs_url)
        if offering_icon_url and not isinstance(offering_icon_url, str):
            raise TypeError("Expected argument 'offering_icon_url' to be a str")
        pulumi.set(__self__, "offering_icon_url", offering_icon_url)
        if offering_id and not isinstance(offering_id, str):
            raise TypeError("Expected argument 'offering_id' to be a str")
        pulumi.set(__self__, "offering_id", offering_id)
        if offering_identifier and not isinstance(offering_identifier, str):
            raise TypeError("Expected argument 'offering_identifier' to be a str")
        pulumi.set(__self__, "offering_identifier", offering_identifier)
        if offering_support_url and not isinstance(offering_support_url, str):
            raise TypeError("Expected argument 'offering_support_url' to be a str")
        pulumi.set(__self__, "offering_support_url", offering_support_url)
        if pc_managed and not isinstance(pc_managed, bool):
            raise TypeError("Expected argument 'pc_managed' to be a bool")
        pulumi.set(__self__, "pc_managed", pc_managed)
        if portal_approval_record and not isinstance(portal_approval_record, str):
            raise TypeError("Expected argument 'portal_approval_record' to be a str")
        pulumi.set(__self__, "portal_approval_record", portal_approval_record)
        if portal_ui_url and not isinstance(portal_ui_url, str):
            raise TypeError("Expected argument 'portal_ui_url' to be a str")
        pulumi.set(__self__, "portal_ui_url", portal_ui_url)
        if product_kind and not isinstance(product_kind, str):
            raise TypeError("Expected argument 'product_kind' to be a str")
        pulumi.set(__self__, "product_kind", product_kind)
        if provider_infos and not isinstance(provider_infos, list):
            raise TypeError("Expected argument 'provider_infos' to be a list")
        pulumi.set(__self__, "provider_infos", provider_infos)
        if public_original_crn and not isinstance(public_original_crn, str):
            raise TypeError("Expected argument 'public_original_crn' to be a str")
        pulumi.set(__self__, "public_original_crn", public_original_crn)
        if publish_approved and not isinstance(publish_approved, bool):
            raise TypeError("Expected argument 'publish_approved' to be a bool")
        pulumi.set(__self__, "publish_approved", publish_approved)
        if publish_public_crn and not isinstance(publish_public_crn, str):
            raise TypeError("Expected argument 'publish_public_crn' to be a str")
        pulumi.set(__self__, "publish_public_crn", publish_public_crn)
        if ratings and not isinstance(ratings, list):
            raise TypeError("Expected argument 'ratings' to be a list")
        pulumi.set(__self__, "ratings", ratings)
        if repo_infos and not isinstance(repo_infos, list):
            raise TypeError("Expected argument 'repo_infos' to be a list")
        pulumi.set(__self__, "repo_infos", repo_infos)
        if rev and not isinstance(rev, str):
            raise TypeError("Expected argument 'rev' to be a str")
        pulumi.set(__self__, "rev", rev)
        if share_enabled and not isinstance(share_enabled, bool):
            raise TypeError("Expected argument 'share_enabled' to be a bool")
        pulumi.set(__self__, "share_enabled", share_enabled)
        if share_with_access_lists and not isinstance(share_with_access_lists, list):
            raise TypeError("Expected argument 'share_with_access_lists' to be a list")
        pulumi.set(__self__, "share_with_access_lists", share_with_access_lists)
        if share_with_all and not isinstance(share_with_all, bool):
            raise TypeError("Expected argument 'share_with_all' to be a bool")
        pulumi.set(__self__, "share_with_all", share_with_all)
        if share_with_ibm and not isinstance(share_with_ibm, bool):
            raise TypeError("Expected argument 'share_with_ibm' to be a bool")
        pulumi.set(__self__, "share_with_ibm", share_with_ibm)
        if short_description and not isinstance(short_description, str):
            raise TypeError("Expected argument 'short_description' to be a str")
        pulumi.set(__self__, "short_description", short_description)
        if short_description_i18n and not isinstance(short_description_i18n, dict):
            raise TypeError("Expected argument 'short_description_i18n' to be a dict")
        pulumi.set(__self__, "short_description_i18n", short_description_i18n)
        if supports and not isinstance(supports, list):
            raise TypeError("Expected argument 'supports' to be a list")
        pulumi.set(__self__, "supports", supports)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def badges(self) -> Sequence['outputs.GetCmOfferingBadgeResult']:
        return pulumi.get(self, "badges")

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> _builtins.str:
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> _builtins.str:
        return pulumi.get(self, "catalog_name")

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="deprecatePendings")
    def deprecate_pendings(self) -> Sequence['outputs.GetCmOfferingDeprecatePendingResult']:
        return pulumi.get(self, "deprecate_pendings")

    @_builtins.property
    @pulumi.getter
    def disclaimer(self) -> _builtins.str:
        return pulumi.get(self, "disclaimer")

    @_builtins.property
    @pulumi.getter
    def features(self) -> Sequence['outputs.GetCmOfferingFeatureResult']:
        return pulumi.get(self, "features")

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> _builtins.bool:
        return pulumi.get(self, "hidden")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imagePullKeys")
    def image_pull_keys(self) -> Sequence['outputs.GetCmOfferingImagePullKeyResult']:
        return pulumi.get(self, "image_pull_keys")

    @_builtins.property
    @pulumi.getter
    def keywords(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "keywords")

    @_builtins.property
    @pulumi.getter
    def kinds(self) -> Sequence['outputs.GetCmOfferingKindResult']:
        return pulumi.get(self, "kinds")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="labelI18n")
    def label_i18n(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "label_i18n")

    @_builtins.property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> _builtins.str:
        return pulumi.get(self, "long_description")

    @_builtins.property
    @pulumi.getter(name="longDescriptionI18n")
    def long_description_i18n(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "long_description_i18n")

    @_builtins.property
    @pulumi.getter
    def media(self) -> Sequence['outputs.GetCmOfferingMediaResult']:
        return pulumi.get(self, "media")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="offeringDocsUrl")
    def offering_docs_url(self) -> _builtins.str:
        return pulumi.get(self, "offering_docs_url")

    @_builtins.property
    @pulumi.getter(name="offeringIconUrl")
    def offering_icon_url(self) -> _builtins.str:
        return pulumi.get(self, "offering_icon_url")

    @_builtins.property
    @pulumi.getter(name="offeringId")
    def offering_id(self) -> _builtins.str:
        return pulumi.get(self, "offering_id")

    @_builtins.property
    @pulumi.getter(name="offeringIdentifier")
    def offering_identifier(self) -> _builtins.str:
        return pulumi.get(self, "offering_identifier")

    @_builtins.property
    @pulumi.getter(name="offeringSupportUrl")
    def offering_support_url(self) -> _builtins.str:
        return pulumi.get(self, "offering_support_url")

    @_builtins.property
    @pulumi.getter(name="pcManaged")
    def pc_managed(self) -> _builtins.bool:
        return pulumi.get(self, "pc_managed")

    @_builtins.property
    @pulumi.getter(name="portalApprovalRecord")
    def portal_approval_record(self) -> _builtins.str:
        return pulumi.get(self, "portal_approval_record")

    @_builtins.property
    @pulumi.getter(name="portalUiUrl")
    def portal_ui_url(self) -> _builtins.str:
        return pulumi.get(self, "portal_ui_url")

    @_builtins.property
    @pulumi.getter(name="productKind")
    def product_kind(self) -> _builtins.str:
        return pulumi.get(self, "product_kind")

    @_builtins.property
    @pulumi.getter(name="providerInfos")
    def provider_infos(self) -> Sequence['outputs.GetCmOfferingProviderInfoResult']:
        return pulumi.get(self, "provider_infos")

    @_builtins.property
    @pulumi.getter(name="publicOriginalCrn")
    def public_original_crn(self) -> _builtins.str:
        return pulumi.get(self, "public_original_crn")

    @_builtins.property
    @pulumi.getter(name="publishApproved")
    def publish_approved(self) -> _builtins.bool:
        return pulumi.get(self, "publish_approved")

    @_builtins.property
    @pulumi.getter(name="publishPublicCrn")
    def publish_public_crn(self) -> _builtins.str:
        return pulumi.get(self, "publish_public_crn")

    @_builtins.property
    @pulumi.getter
    def ratings(self) -> Sequence['outputs.GetCmOfferingRatingResult']:
        return pulumi.get(self, "ratings")

    @_builtins.property
    @pulumi.getter(name="repoInfos")
    def repo_infos(self) -> Sequence['outputs.GetCmOfferingRepoInfoResult']:
        return pulumi.get(self, "repo_infos")

    @_builtins.property
    @pulumi.getter
    def rev(self) -> _builtins.str:
        return pulumi.get(self, "rev")

    @_builtins.property
    @pulumi.getter(name="shareEnabled")
    def share_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "share_enabled")

    @_builtins.property
    @pulumi.getter(name="shareWithAccessLists")
    def share_with_access_lists(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "share_with_access_lists")

    @_builtins.property
    @pulumi.getter(name="shareWithAll")
    def share_with_all(self) -> _builtins.bool:
        return pulumi.get(self, "share_with_all")

    @_builtins.property
    @pulumi.getter(name="shareWithIbm")
    def share_with_ibm(self) -> _builtins.bool:
        return pulumi.get(self, "share_with_ibm")

    @_builtins.property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> _builtins.str:
        return pulumi.get(self, "short_description")

    @_builtins.property
    @pulumi.getter(name="shortDescriptionI18n")
    def short_description_i18n(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "short_description_i18n")

    @_builtins.property
    @pulumi.getter
    def supports(self) -> Sequence['outputs.GetCmOfferingSupportResult']:
        return pulumi.get(self, "supports")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> _builtins.str:
        return pulumi.get(self, "updated")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        return pulumi.get(self, "url")


class AwaitableGetCmOfferingResult(GetCmOfferingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCmOfferingResult(
            badges=self.badges,
            catalog_id=self.catalog_id,
            catalog_name=self.catalog_name,
            created=self.created,
            crn=self.crn,
            deprecate_pendings=self.deprecate_pendings,
            disclaimer=self.disclaimer,
            features=self.features,
            hidden=self.hidden,
            id=self.id,
            image_pull_keys=self.image_pull_keys,
            keywords=self.keywords,
            kinds=self.kinds,
            label=self.label,
            label_i18n=self.label_i18n,
            long_description=self.long_description,
            long_description_i18n=self.long_description_i18n,
            media=self.media,
            metadata=self.metadata,
            name=self.name,
            offering_docs_url=self.offering_docs_url,
            offering_icon_url=self.offering_icon_url,
            offering_id=self.offering_id,
            offering_identifier=self.offering_identifier,
            offering_support_url=self.offering_support_url,
            pc_managed=self.pc_managed,
            portal_approval_record=self.portal_approval_record,
            portal_ui_url=self.portal_ui_url,
            product_kind=self.product_kind,
            provider_infos=self.provider_infos,
            public_original_crn=self.public_original_crn,
            publish_approved=self.publish_approved,
            publish_public_crn=self.publish_public_crn,
            ratings=self.ratings,
            repo_infos=self.repo_infos,
            rev=self.rev,
            share_enabled=self.share_enabled,
            share_with_access_lists=self.share_with_access_lists,
            share_with_all=self.share_with_all,
            share_with_ibm=self.share_with_ibm,
            short_description=self.short_description,
            short_description_i18n=self.short_description_i18n,
            supports=self.supports,
            tags=self.tags,
            updated=self.updated,
            url=self.url)


def get_cm_offering(catalog_id: Optional[_builtins.str] = None,
                    id: Optional[_builtins.str] = None,
                    offering_id: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCmOfferingResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['catalogId'] = catalog_id
    __args__['id'] = id
    __args__['offeringId'] = offering_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCmOffering:getCmOffering', __args__, opts=opts, typ=GetCmOfferingResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCmOfferingResult(
        badges=pulumi.get(__ret__, 'badges'),
        catalog_id=pulumi.get(__ret__, 'catalog_id'),
        catalog_name=pulumi.get(__ret__, 'catalog_name'),
        created=pulumi.get(__ret__, 'created'),
        crn=pulumi.get(__ret__, 'crn'),
        deprecate_pendings=pulumi.get(__ret__, 'deprecate_pendings'),
        disclaimer=pulumi.get(__ret__, 'disclaimer'),
        features=pulumi.get(__ret__, 'features'),
        hidden=pulumi.get(__ret__, 'hidden'),
        id=pulumi.get(__ret__, 'id'),
        image_pull_keys=pulumi.get(__ret__, 'image_pull_keys'),
        keywords=pulumi.get(__ret__, 'keywords'),
        kinds=pulumi.get(__ret__, 'kinds'),
        label=pulumi.get(__ret__, 'label'),
        label_i18n=pulumi.get(__ret__, 'label_i18n'),
        long_description=pulumi.get(__ret__, 'long_description'),
        long_description_i18n=pulumi.get(__ret__, 'long_description_i18n'),
        media=pulumi.get(__ret__, 'media'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        offering_docs_url=pulumi.get(__ret__, 'offering_docs_url'),
        offering_icon_url=pulumi.get(__ret__, 'offering_icon_url'),
        offering_id=pulumi.get(__ret__, 'offering_id'),
        offering_identifier=pulumi.get(__ret__, 'offering_identifier'),
        offering_support_url=pulumi.get(__ret__, 'offering_support_url'),
        pc_managed=pulumi.get(__ret__, 'pc_managed'),
        portal_approval_record=pulumi.get(__ret__, 'portal_approval_record'),
        portal_ui_url=pulumi.get(__ret__, 'portal_ui_url'),
        product_kind=pulumi.get(__ret__, 'product_kind'),
        provider_infos=pulumi.get(__ret__, 'provider_infos'),
        public_original_crn=pulumi.get(__ret__, 'public_original_crn'),
        publish_approved=pulumi.get(__ret__, 'publish_approved'),
        publish_public_crn=pulumi.get(__ret__, 'publish_public_crn'),
        ratings=pulumi.get(__ret__, 'ratings'),
        repo_infos=pulumi.get(__ret__, 'repo_infos'),
        rev=pulumi.get(__ret__, 'rev'),
        share_enabled=pulumi.get(__ret__, 'share_enabled'),
        share_with_access_lists=pulumi.get(__ret__, 'share_with_access_lists'),
        share_with_all=pulumi.get(__ret__, 'share_with_all'),
        share_with_ibm=pulumi.get(__ret__, 'share_with_ibm'),
        short_description=pulumi.get(__ret__, 'short_description'),
        short_description_i18n=pulumi.get(__ret__, 'short_description_i18n'),
        supports=pulumi.get(__ret__, 'supports'),
        tags=pulumi.get(__ret__, 'tags'),
        updated=pulumi.get(__ret__, 'updated'),
        url=pulumi.get(__ret__, 'url'))
def get_cm_offering_output(catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                           id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCmOfferingResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['catalogId'] = catalog_id
    __args__['id'] = id
    __args__['offeringId'] = offering_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCmOffering:getCmOffering', __args__, opts=opts, typ=GetCmOfferingResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCmOfferingResult(
        badges=pulumi.get(__response__, 'badges'),
        catalog_id=pulumi.get(__response__, 'catalog_id'),
        catalog_name=pulumi.get(__response__, 'catalog_name'),
        created=pulumi.get(__response__, 'created'),
        crn=pulumi.get(__response__, 'crn'),
        deprecate_pendings=pulumi.get(__response__, 'deprecate_pendings'),
        disclaimer=pulumi.get(__response__, 'disclaimer'),
        features=pulumi.get(__response__, 'features'),
        hidden=pulumi.get(__response__, 'hidden'),
        id=pulumi.get(__response__, 'id'),
        image_pull_keys=pulumi.get(__response__, 'image_pull_keys'),
        keywords=pulumi.get(__response__, 'keywords'),
        kinds=pulumi.get(__response__, 'kinds'),
        label=pulumi.get(__response__, 'label'),
        label_i18n=pulumi.get(__response__, 'label_i18n'),
        long_description=pulumi.get(__response__, 'long_description'),
        long_description_i18n=pulumi.get(__response__, 'long_description_i18n'),
        media=pulumi.get(__response__, 'media'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        offering_docs_url=pulumi.get(__response__, 'offering_docs_url'),
        offering_icon_url=pulumi.get(__response__, 'offering_icon_url'),
        offering_id=pulumi.get(__response__, 'offering_id'),
        offering_identifier=pulumi.get(__response__, 'offering_identifier'),
        offering_support_url=pulumi.get(__response__, 'offering_support_url'),
        pc_managed=pulumi.get(__response__, 'pc_managed'),
        portal_approval_record=pulumi.get(__response__, 'portal_approval_record'),
        portal_ui_url=pulumi.get(__response__, 'portal_ui_url'),
        product_kind=pulumi.get(__response__, 'product_kind'),
        provider_infos=pulumi.get(__response__, 'provider_infos'),
        public_original_crn=pulumi.get(__response__, 'public_original_crn'),
        publish_approved=pulumi.get(__response__, 'publish_approved'),
        publish_public_crn=pulumi.get(__response__, 'publish_public_crn'),
        ratings=pulumi.get(__response__, 'ratings'),
        repo_infos=pulumi.get(__response__, 'repo_infos'),
        rev=pulumi.get(__response__, 'rev'),
        share_enabled=pulumi.get(__response__, 'share_enabled'),
        share_with_access_lists=pulumi.get(__response__, 'share_with_access_lists'),
        share_with_all=pulumi.get(__response__, 'share_with_all'),
        share_with_ibm=pulumi.get(__response__, 'share_with_ibm'),
        short_description=pulumi.get(__response__, 'short_description'),
        short_description_i18n=pulumi.get(__response__, 'short_description_i18n'),
        supports=pulumi.get(__response__, 'supports'),
        tags=pulumi.get(__response__, 'tags'),
        updated=pulumi.get(__response__, 'updated'),
        url=pulumi.get(__response__, 'url')))
