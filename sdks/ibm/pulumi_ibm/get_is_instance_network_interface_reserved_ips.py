# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsInstanceNetworkInterfaceReservedIpsResult',
    'AwaitableGetIsInstanceNetworkInterfaceReservedIpsResult',
    'get_is_instance_network_interface_reserved_ips',
    'get_is_instance_network_interface_reserved_ips_output',
]

@pulumi.output_type
class GetIsInstanceNetworkInterfaceReservedIpsResult:
    """
    A collection of values returned by getIsInstanceNetworkInterfaceReservedIps.
    """
    def __init__(__self__, id=None, instance=None, network_interface=None, reserved_ips=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance and not isinstance(instance, str):
            raise TypeError("Expected argument 'instance' to be a str")
        pulumi.set(__self__, "instance", instance)
        if network_interface and not isinstance(network_interface, str):
            raise TypeError("Expected argument 'network_interface' to be a str")
        pulumi.set(__self__, "network_interface", network_interface)
        if reserved_ips and not isinstance(reserved_ips, list):
            raise TypeError("Expected argument 'reserved_ips' to be a list")
        pulumi.set(__self__, "reserved_ips", reserved_ips)
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instance(self) -> _builtins.str:
        return pulumi.get(self, "instance")

    @_builtins.property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> _builtins.str:
        return pulumi.get(self, "network_interface")

    @_builtins.property
    @pulumi.getter(name="reservedIps")
    def reserved_ips(self) -> Sequence['outputs.GetIsInstanceNetworkInterfaceReservedIpsReservedIpResult']:
        return pulumi.get(self, "reserved_ips")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.float:
        return pulumi.get(self, "total_count")


class AwaitableGetIsInstanceNetworkInterfaceReservedIpsResult(GetIsInstanceNetworkInterfaceReservedIpsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceNetworkInterfaceReservedIpsResult(
            id=self.id,
            instance=self.instance,
            network_interface=self.network_interface,
            reserved_ips=self.reserved_ips,
            total_count=self.total_count)


def get_is_instance_network_interface_reserved_ips(id: Optional[_builtins.str] = None,
                                                   instance: Optional[_builtins.str] = None,
                                                   network_interface: Optional[_builtins.str] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceNetworkInterfaceReservedIpsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instance'] = instance
    __args__['networkInterface'] = network_interface
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceNetworkInterfaceReservedIps:getIsInstanceNetworkInterfaceReservedIps', __args__, opts=opts, typ=GetIsInstanceNetworkInterfaceReservedIpsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceNetworkInterfaceReservedIpsResult(
        id=pulumi.get(__ret__, 'id'),
        instance=pulumi.get(__ret__, 'instance'),
        network_interface=pulumi.get(__ret__, 'network_interface'),
        reserved_ips=pulumi.get(__ret__, 'reserved_ips'),
        total_count=pulumi.get(__ret__, 'total_count'))
def get_is_instance_network_interface_reserved_ips_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                          instance: Optional[pulumi.Input[_builtins.str]] = None,
                                                          network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceNetworkInterfaceReservedIpsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instance'] = instance
    __args__['networkInterface'] = network_interface
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceNetworkInterfaceReservedIps:getIsInstanceNetworkInterfaceReservedIps', __args__, opts=opts, typ=GetIsInstanceNetworkInterfaceReservedIpsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceNetworkInterfaceReservedIpsResult(
        id=pulumi.get(__response__, 'id'),
        instance=pulumi.get(__response__, 'instance'),
        network_interface=pulumi.get(__response__, 'network_interface'),
        reserved_ips=pulumi.get(__response__, 'reserved_ips'),
        total_count=pulumi.get(__response__, 'total_count')))
