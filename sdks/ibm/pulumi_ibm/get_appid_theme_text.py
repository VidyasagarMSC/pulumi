# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAppidThemeTextResult',
    'AwaitableGetAppidThemeTextResult',
    'get_appid_theme_text',
    'get_appid_theme_text_output',
]

@pulumi.output_type
class GetAppidThemeTextResult:
    """
    A collection of values returned by getAppidThemeText.
    """
    def __init__(__self__, footnote=None, id=None, tab_title=None, tenant_id=None):
        if footnote and not isinstance(footnote, str):
            raise TypeError("Expected argument 'footnote' to be a str")
        pulumi.set(__self__, "footnote", footnote)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tab_title and not isinstance(tab_title, str):
            raise TypeError("Expected argument 'tab_title' to be a str")
        pulumi.set(__self__, "tab_title", tab_title)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def footnote(self) -> _builtins.str:
        return pulumi.get(self, "footnote")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="tabTitle")
    def tab_title(self) -> _builtins.str:
        return pulumi.get(self, "tab_title")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetAppidThemeTextResult(GetAppidThemeTextResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppidThemeTextResult(
            footnote=self.footnote,
            id=self.id,
            tab_title=self.tab_title,
            tenant_id=self.tenant_id)


def get_appid_theme_text(id: Optional[_builtins.str] = None,
                         tenant_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppidThemeTextResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppidThemeText:getAppidThemeText', __args__, opts=opts, typ=GetAppidThemeTextResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppidThemeTextResult(
        footnote=pulumi.get(__ret__, 'footnote'),
        id=pulumi.get(__ret__, 'id'),
        tab_title=pulumi.get(__ret__, 'tab_title'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_appid_theme_text_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppidThemeTextResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppidThemeText:getAppidThemeText', __args__, opts=opts, typ=GetAppidThemeTextResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppidThemeTextResult(
        footnote=pulumi.get(__response__, 'footnote'),
        id=pulumi.get(__response__, 'id'),
        tab_title=pulumi.get(__response__, 'tab_title'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
