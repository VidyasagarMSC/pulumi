# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamTrustedProfileIdentitiesResult',
    'AwaitableGetIamTrustedProfileIdentitiesResult',
    'get_iam_trusted_profile_identities',
    'get_iam_trusted_profile_identities_output',
]

@pulumi.output_type
class GetIamTrustedProfileIdentitiesResult:
    """
    A collection of values returned by getIamTrustedProfileIdentities.
    """
    def __init__(__self__, entity_tag=None, id=None, identities=None, profile_id=None):
        if entity_tag and not isinstance(entity_tag, str):
            raise TypeError("Expected argument 'entity_tag' to be a str")
        pulumi.set(__self__, "entity_tag", entity_tag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identities and not isinstance(identities, list):
            raise TypeError("Expected argument 'identities' to be a list")
        pulumi.set(__self__, "identities", identities)
        if profile_id and not isinstance(profile_id, str):
            raise TypeError("Expected argument 'profile_id' to be a str")
        pulumi.set(__self__, "profile_id", profile_id)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> _builtins.str:
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identities(self) -> Sequence['outputs.GetIamTrustedProfileIdentitiesIdentityResult']:
        return pulumi.get(self, "identities")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> _builtins.str:
        return pulumi.get(self, "profile_id")


class AwaitableGetIamTrustedProfileIdentitiesResult(GetIamTrustedProfileIdentitiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamTrustedProfileIdentitiesResult(
            entity_tag=self.entity_tag,
            id=self.id,
            identities=self.identities,
            profile_id=self.profile_id)


def get_iam_trusted_profile_identities(id: Optional[_builtins.str] = None,
                                       profile_id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamTrustedProfileIdentitiesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['profileId'] = profile_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamTrustedProfileIdentities:getIamTrustedProfileIdentities', __args__, opts=opts, typ=GetIamTrustedProfileIdentitiesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamTrustedProfileIdentitiesResult(
        entity_tag=pulumi.get(__ret__, 'entity_tag'),
        id=pulumi.get(__ret__, 'id'),
        identities=pulumi.get(__ret__, 'identities'),
        profile_id=pulumi.get(__ret__, 'profile_id'))
def get_iam_trusted_profile_identities_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamTrustedProfileIdentitiesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['profileId'] = profile_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamTrustedProfileIdentities:getIamTrustedProfileIdentities', __args__, opts=opts, typ=GetIamTrustedProfileIdentitiesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamTrustedProfileIdentitiesResult(
        entity_tag=pulumi.get(__response__, 'entity_tag'),
        id=pulumi.get(__response__, 'id'),
        identities=pulumi.get(__response__, 'identities'),
        profile_id=pulumi.get(__response__, 'profile_id')))
