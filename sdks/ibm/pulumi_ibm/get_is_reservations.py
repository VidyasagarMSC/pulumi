# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsReservationsResult',
    'AwaitableGetIsReservationsResult',
    'get_is_reservations',
    'get_is_reservations_output',
]

@pulumi.output_type
class GetIsReservationsResult:
    """
    A collection of values returned by getIsReservations.
    """
    def __init__(__self__, id=None, name=None, reservations=None, resource_group=None, zone_name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if reservations and not isinstance(reservations, list):
            raise TypeError("Expected argument 'reservations' to be a list")
        pulumi.set(__self__, "reservations", reservations)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if zone_name and not isinstance(zone_name, str):
            raise TypeError("Expected argument 'zone_name' to be a str")
        pulumi.set(__self__, "zone_name", zone_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def reservations(self) -> Sequence['outputs.GetIsReservationsReservationResult']:
        return pulumi.get(self, "reservations")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "zone_name")


class AwaitableGetIsReservationsResult(GetIsReservationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsReservationsResult(
            id=self.id,
            name=self.name,
            reservations=self.reservations,
            resource_group=self.resource_group,
            zone_name=self.zone_name)


def get_is_reservations(id: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        resource_group: Optional[_builtins.str] = None,
                        zone_name: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsReservationsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    __args__['zoneName'] = zone_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsReservations:getIsReservations', __args__, opts=opts, typ=GetIsReservationsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsReservationsResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        reservations=pulumi.get(__ret__, 'reservations'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        zone_name=pulumi.get(__ret__, 'zone_name'))
def get_is_reservations_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               zone_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsReservationsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    __args__['zoneName'] = zone_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsReservations:getIsReservations', __args__, opts=opts, typ=GetIsReservationsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsReservationsResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        reservations=pulumi.get(__response__, 'reservations'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        zone_name=pulumi.get(__response__, 'zone_name')))
