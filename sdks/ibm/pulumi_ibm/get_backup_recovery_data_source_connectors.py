# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryDataSourceConnectorsResult',
    'AwaitableGetBackupRecoveryDataSourceConnectorsResult',
    'get_backup_recovery_data_source_connectors',
    'get_backup_recovery_data_source_connectors_output',
]

@pulumi.output_type
class GetBackupRecoveryDataSourceConnectorsResult:
    """
    A collection of values returned by getBackupRecoveryDataSourceConnectors.
    """
    def __init__(__self__, connection_id=None, connector_ids=None, connector_names=None, connectors=None, id=None, x_ibm_tenant_id=None):
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        pulumi.set(__self__, "connection_id", connection_id)
        if connector_ids and not isinstance(connector_ids, list):
            raise TypeError("Expected argument 'connector_ids' to be a list")
        pulumi.set(__self__, "connector_ids", connector_ids)
        if connector_names and not isinstance(connector_names, list):
            raise TypeError("Expected argument 'connector_names' to be a list")
        pulumi.set(__self__, "connector_names", connector_names)
        if connectors and not isinstance(connectors, list):
            raise TypeError("Expected argument 'connectors' to be a list")
        pulumi.set(__self__, "connectors", connectors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectorIds")
    def connector_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "connector_ids")

    @_builtins.property
    @pulumi.getter(name="connectorNames")
    def connector_names(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "connector_names")

    @_builtins.property
    @pulumi.getter
    def connectors(self) -> Sequence['outputs.GetBackupRecoveryDataSourceConnectorsConnectorResult']:
        return pulumi.get(self, "connectors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryDataSourceConnectorsResult(GetBackupRecoveryDataSourceConnectorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryDataSourceConnectorsResult(
            connection_id=self.connection_id,
            connector_ids=self.connector_ids,
            connector_names=self.connector_names,
            connectors=self.connectors,
            id=self.id,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_data_source_connectors(connection_id: Optional[_builtins.str] = None,
                                               connector_ids: Optional[Sequence[_builtins.str]] = None,
                                               connector_names: Optional[Sequence[_builtins.str]] = None,
                                               id: Optional[_builtins.str] = None,
                                               x_ibm_tenant_id: Optional[_builtins.str] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryDataSourceConnectorsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['connectorIds'] = connector_ids
    __args__['connectorNames'] = connector_names
    __args__['id'] = id
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryDataSourceConnectors:getBackupRecoveryDataSourceConnectors', __args__, opts=opts, typ=GetBackupRecoveryDataSourceConnectorsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryDataSourceConnectorsResult(
        connection_id=pulumi.get(__ret__, 'connection_id'),
        connector_ids=pulumi.get(__ret__, 'connector_ids'),
        connector_names=pulumi.get(__ret__, 'connector_names'),
        connectors=pulumi.get(__ret__, 'connectors'),
        id=pulumi.get(__ret__, 'id'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_data_source_connectors_output(connection_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      connector_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                      connector_names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                      id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryDataSourceConnectorsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['connectorIds'] = connector_ids
    __args__['connectorNames'] = connector_names
    __args__['id'] = id
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryDataSourceConnectors:getBackupRecoveryDataSourceConnectors', __args__, opts=opts, typ=GetBackupRecoveryDataSourceConnectorsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryDataSourceConnectorsResult(
        connection_id=pulumi.get(__response__, 'connection_id'),
        connector_ids=pulumi.get(__response__, 'connector_ids'),
        connector_names=pulumi.get(__response__, 'connector_names'),
        connectors=pulumi.get(__response__, 'connectors'),
        id=pulumi.get(__response__, 'id'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
