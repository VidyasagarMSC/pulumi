# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SmPublicCertificateActionValidateManualDnsArgs', 'SmPublicCertificateActionValidateManualDns']

@pulumi.input_type
class SmPublicCertificateActionValidateManualDnsArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 secret_id: pulumi.Input[_builtins.str],
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_public_certificate_action_validate_manual_dns_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['SmPublicCertificateActionValidateManualDnsTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a SmPublicCertificateActionValidateManualDns resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_id: A UUID identifier.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "secret_id", secret_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sm_public_certificate_action_validate_manual_dns_id is not None:
            pulumi.set(__self__, "sm_public_certificate_action_validate_manual_dns_id", sm_public_certificate_action_validate_manual_dns_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> pulumi.Input[_builtins.str]:
        """
        A UUID identifier.
        """
        return pulumi.get(self, "secret_id")

    @secret_id.setter
    def secret_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "secret_id", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="smPublicCertificateActionValidateManualDnsId")
    def sm_public_certificate_action_validate_manual_dns_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_public_certificate_action_validate_manual_dns_id")

    @sm_public_certificate_action_validate_manual_dns_id.setter
    def sm_public_certificate_action_validate_manual_dns_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_public_certificate_action_validate_manual_dns_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SmPublicCertificateActionValidateManualDnsTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SmPublicCertificateActionValidateManualDnsTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _SmPublicCertificateActionValidateManualDnsState:
    def __init__(__self__, *,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_public_certificate_action_validate_manual_dns_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['SmPublicCertificateActionValidateManualDnsTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering SmPublicCertificateActionValidateManualDns resources.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_id: A UUID identifier.
        """
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if sm_public_certificate_action_validate_manual_dns_id is not None:
            pulumi.set(__self__, "sm_public_certificate_action_validate_manual_dns_id", sm_public_certificate_action_validate_manual_dns_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A UUID identifier.
        """
        return pulumi.get(self, "secret_id")

    @secret_id.setter
    def secret_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_id", value)

    @_builtins.property
    @pulumi.getter(name="smPublicCertificateActionValidateManualDnsId")
    def sm_public_certificate_action_validate_manual_dns_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_public_certificate_action_validate_manual_dns_id")

    @sm_public_certificate_action_validate_manual_dns_id.setter
    def sm_public_certificate_action_validate_manual_dns_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_public_certificate_action_validate_manual_dns_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SmPublicCertificateActionValidateManualDnsTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SmPublicCertificateActionValidateManualDnsTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/smPublicCertificateActionValidateManualDns:SmPublicCertificateActionValidateManualDns")
class SmPublicCertificateActionValidateManualDns(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_public_certificate_action_validate_manual_dns_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['SmPublicCertificateActionValidateManualDnsTimeoutsArgs', 'SmPublicCertificateActionValidateManualDnsTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a SmPublicCertificateActionValidateManualDns resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_id: A UUID identifier.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SmPublicCertificateActionValidateManualDnsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SmPublicCertificateActionValidateManualDns resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SmPublicCertificateActionValidateManualDnsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SmPublicCertificateActionValidateManualDnsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_public_certificate_action_validate_manual_dns_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['SmPublicCertificateActionValidateManualDnsTimeoutsArgs', 'SmPublicCertificateActionValidateManualDnsTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SmPublicCertificateActionValidateManualDnsArgs.__new__(SmPublicCertificateActionValidateManualDnsArgs)

            __props__.__dict__["endpoint_type"] = endpoint_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            if secret_id is None and not opts.urn:
                raise TypeError("Missing required property 'secret_id'")
            __props__.__dict__["secret_id"] = secret_id
            __props__.__dict__["sm_public_certificate_action_validate_manual_dns_id"] = sm_public_certificate_action_validate_manual_dns_id
            __props__.__dict__["timeouts"] = timeouts
        super(SmPublicCertificateActionValidateManualDns, __self__).__init__(
            'ibm:index/smPublicCertificateActionValidateManualDns:SmPublicCertificateActionValidateManualDns',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            secret_id: Optional[pulumi.Input[_builtins.str]] = None,
            sm_public_certificate_action_validate_manual_dns_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['SmPublicCertificateActionValidateManualDnsTimeoutsArgs', 'SmPublicCertificateActionValidateManualDnsTimeoutsArgsDict']]] = None) -> 'SmPublicCertificateActionValidateManualDns':
        """
        Get an existing SmPublicCertificateActionValidateManualDns resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_id: A UUID identifier.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SmPublicCertificateActionValidateManualDnsState.__new__(_SmPublicCertificateActionValidateManualDnsState)

        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["secret_id"] = secret_id
        __props__.__dict__["sm_public_certificate_action_validate_manual_dns_id"] = sm_public_certificate_action_validate_manual_dns_id
        __props__.__dict__["timeouts"] = timeouts
        return SmPublicCertificateActionValidateManualDns(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> pulumi.Output[_builtins.str]:
        """
        A UUID identifier.
        """
        return pulumi.get(self, "secret_id")

    @_builtins.property
    @pulumi.getter(name="smPublicCertificateActionValidateManualDnsId")
    def sm_public_certificate_action_validate_manual_dns_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "sm_public_certificate_action_validate_manual_dns_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.SmPublicCertificateActionValidateManualDnsTimeouts']]:
        return pulumi.get(self, "timeouts")

