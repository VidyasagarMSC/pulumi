# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiSharedProcessorPoolResult',
    'AwaitableGetPiSharedProcessorPoolResult',
    'get_pi_shared_processor_pool',
    'get_pi_shared_processor_pool_output',
]

@pulumi.output_type
class GetPiSharedProcessorPoolResult:
    """
    A collection of values returned by getPiSharedProcessorPool.
    """
    def __init__(__self__, allocated_cores=None, available_cores=None, crn=None, dedicated_host_id=None, host_id=None, id=None, instances=None, name=None, pi_cloud_instance_id=None, pi_shared_processor_pool_id=None, reserved_cores=None, status=None, status_detail=None, user_tags=None):
        if allocated_cores and not isinstance(allocated_cores, float):
            raise TypeError("Expected argument 'allocated_cores' to be a float")
        pulumi.set(__self__, "allocated_cores", allocated_cores)
        if available_cores and not isinstance(available_cores, float):
            raise TypeError("Expected argument 'available_cores' to be a float")
        pulumi.set(__self__, "available_cores", available_cores)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if dedicated_host_id and not isinstance(dedicated_host_id, str):
            raise TypeError("Expected argument 'dedicated_host_id' to be a str")
        pulumi.set(__self__, "dedicated_host_id", dedicated_host_id)
        if host_id and not isinstance(host_id, float):
            raise TypeError("Expected argument 'host_id' to be a float")
        pulumi.set(__self__, "host_id", host_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_shared_processor_pool_id and not isinstance(pi_shared_processor_pool_id, str):
            raise TypeError("Expected argument 'pi_shared_processor_pool_id' to be a str")
        pulumi.set(__self__, "pi_shared_processor_pool_id", pi_shared_processor_pool_id)
        if reserved_cores and not isinstance(reserved_cores, float):
            raise TypeError("Expected argument 'reserved_cores' to be a float")
        pulumi.set(__self__, "reserved_cores", reserved_cores)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_detail and not isinstance(status_detail, str):
            raise TypeError("Expected argument 'status_detail' to be a str")
        pulumi.set(__self__, "status_detail", status_detail)
        if user_tags and not isinstance(user_tags, list):
            raise TypeError("Expected argument 'user_tags' to be a list")
        pulumi.set(__self__, "user_tags", user_tags)

    @_builtins.property
    @pulumi.getter(name="allocatedCores")
    def allocated_cores(self) -> _builtins.float:
        return pulumi.get(self, "allocated_cores")

    @_builtins.property
    @pulumi.getter(name="availableCores")
    def available_cores(self) -> _builtins.float:
        return pulumi.get(self, "available_cores")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> _builtins.str:
        return pulumi.get(self, "dedicated_host_id")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.float:
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetPiSharedProcessorPoolInstanceResult']:
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piSharedProcessorPoolId")
    def pi_shared_processor_pool_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_shared_processor_pool_id")

    @_builtins.property
    @pulumi.getter(name="reservedCores")
    def reserved_cores(self) -> _builtins.float:
        return pulumi.get(self, "reserved_cores")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDetail")
    def status_detail(self) -> _builtins.str:
        return pulumi.get(self, "status_detail")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "user_tags")


class AwaitableGetPiSharedProcessorPoolResult(GetPiSharedProcessorPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiSharedProcessorPoolResult(
            allocated_cores=self.allocated_cores,
            available_cores=self.available_cores,
            crn=self.crn,
            dedicated_host_id=self.dedicated_host_id,
            host_id=self.host_id,
            id=self.id,
            instances=self.instances,
            name=self.name,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_shared_processor_pool_id=self.pi_shared_processor_pool_id,
            reserved_cores=self.reserved_cores,
            status=self.status,
            status_detail=self.status_detail,
            user_tags=self.user_tags)


def get_pi_shared_processor_pool(id: Optional[_builtins.str] = None,
                                 pi_cloud_instance_id: Optional[_builtins.str] = None,
                                 pi_shared_processor_pool_id: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiSharedProcessorPoolResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piSharedProcessorPoolId'] = pi_shared_processor_pool_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiSharedProcessorPool:getPiSharedProcessorPool', __args__, opts=opts, typ=GetPiSharedProcessorPoolResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiSharedProcessorPoolResult(
        allocated_cores=pulumi.get(__ret__, 'allocated_cores'),
        available_cores=pulumi.get(__ret__, 'available_cores'),
        crn=pulumi.get(__ret__, 'crn'),
        dedicated_host_id=pulumi.get(__ret__, 'dedicated_host_id'),
        host_id=pulumi.get(__ret__, 'host_id'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        name=pulumi.get(__ret__, 'name'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_shared_processor_pool_id=pulumi.get(__ret__, 'pi_shared_processor_pool_id'),
        reserved_cores=pulumi.get(__ret__, 'reserved_cores'),
        status=pulumi.get(__ret__, 'status'),
        status_detail=pulumi.get(__ret__, 'status_detail'),
        user_tags=pulumi.get(__ret__, 'user_tags'))
def get_pi_shared_processor_pool_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        pi_shared_processor_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiSharedProcessorPoolResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piSharedProcessorPoolId'] = pi_shared_processor_pool_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiSharedProcessorPool:getPiSharedProcessorPool', __args__, opts=opts, typ=GetPiSharedProcessorPoolResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiSharedProcessorPoolResult(
        allocated_cores=pulumi.get(__response__, 'allocated_cores'),
        available_cores=pulumi.get(__response__, 'available_cores'),
        crn=pulumi.get(__response__, 'crn'),
        dedicated_host_id=pulumi.get(__response__, 'dedicated_host_id'),
        host_id=pulumi.get(__response__, 'host_id'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        name=pulumi.get(__response__, 'name'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_shared_processor_pool_id=pulumi.get(__response__, 'pi_shared_processor_pool_id'),
        reserved_cores=pulumi.get(__response__, 'reserved_cores'),
        status=pulumi.get(__response__, 'status'),
        status_detail=pulumi.get(__response__, 'status_detail'),
        user_tags=pulumi.get(__response__, 'user_tags')))
