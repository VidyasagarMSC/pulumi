# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTgLocationResult',
    'AwaitableGetTgLocationResult',
    'get_tg_location',
    'get_tg_location_output',
]

@pulumi.output_type
class GetTgLocationResult:
    """
    A collection of values returned by getTgLocation.
    """
    def __init__(__self__, billing_location=None, id=None, local_connection_locations=None, name=None, type=None):
        if billing_location and not isinstance(billing_location, str):
            raise TypeError("Expected argument 'billing_location' to be a str")
        pulumi.set(__self__, "billing_location", billing_location)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if local_connection_locations and not isinstance(local_connection_locations, list):
            raise TypeError("Expected argument 'local_connection_locations' to be a list")
        pulumi.set(__self__, "local_connection_locations", local_connection_locations)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="billingLocation")
    def billing_location(self) -> _builtins.str:
        return pulumi.get(self, "billing_location")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localConnectionLocations")
    def local_connection_locations(self) -> Sequence['outputs.GetTgLocationLocalConnectionLocationResult']:
        return pulumi.get(self, "local_connection_locations")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetTgLocationResult(GetTgLocationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTgLocationResult(
            billing_location=self.billing_location,
            id=self.id,
            local_connection_locations=self.local_connection_locations,
            name=self.name,
            type=self.type)


def get_tg_location(id: Optional[_builtins.str] = None,
                    name: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTgLocationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getTgLocation:getTgLocation', __args__, opts=opts, typ=GetTgLocationResult, package_ref=_utilities.get_package()).value

    return AwaitableGetTgLocationResult(
        billing_location=pulumi.get(__ret__, 'billing_location'),
        id=pulumi.get(__ret__, 'id'),
        local_connection_locations=pulumi.get(__ret__, 'local_connection_locations'),
        name=pulumi.get(__ret__, 'name'),
        type=pulumi.get(__ret__, 'type'))
def get_tg_location_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           name: Optional[pulumi.Input[_builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTgLocationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getTgLocation:getTgLocation', __args__, opts=opts, typ=GetTgLocationResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetTgLocationResult(
        billing_location=pulumi.get(__response__, 'billing_location'),
        id=pulumi.get(__response__, 'id'),
        local_connection_locations=pulumi.get(__response__, 'local_connection_locations'),
        name=pulumi.get(__response__, 'name'),
        type=pulumi.get(__response__, 'type')))
