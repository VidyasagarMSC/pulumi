# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDlPortsResult',
    'AwaitableGetDlPortsResult',
    'get_dl_ports',
    'get_dl_ports_output',
]

@pulumi.output_type
class GetDlPortsResult:
    """
    A collection of values returned by getDlPorts.
    """
    def __init__(__self__, id=None, location_name=None, ports=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location_name and not isinstance(location_name, str):
            raise TypeError("Expected argument 'location_name' to be a str")
        pulumi.set(__self__, "location_name", location_name)
        if ports and not isinstance(ports, list):
            raise TypeError("Expected argument 'ports' to be a list")
        pulumi.set(__self__, "ports", ports)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="locationName")
    def location_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "location_name")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetDlPortsPortResult']:
        return pulumi.get(self, "ports")


class AwaitableGetDlPortsResult(GetDlPortsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDlPortsResult(
            id=self.id,
            location_name=self.location_name,
            ports=self.ports)


def get_dl_ports(id: Optional[_builtins.str] = None,
                 location_name: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDlPortsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['locationName'] = location_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDlPorts:getDlPorts', __args__, opts=opts, typ=GetDlPortsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDlPortsResult(
        id=pulumi.get(__ret__, 'id'),
        location_name=pulumi.get(__ret__, 'location_name'),
        ports=pulumi.get(__ret__, 'ports'))
def get_dl_ports_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        location_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDlPortsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['locationName'] = location_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDlPorts:getDlPorts', __args__, opts=opts, typ=GetDlPortsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDlPortsResult(
        id=pulumi.get(__response__, 'id'),
        location_name=pulumi.get(__response__, 'location_name'),
        ports=pulumi.get(__response__, 'ports')))
