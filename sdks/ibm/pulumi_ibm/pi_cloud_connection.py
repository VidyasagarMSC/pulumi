# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiCloudConnectionArgs', 'PiCloudConnection']

@pulumi.input_type
class PiCloudConnectionArgs:
    def __init__(__self__, *,
                 pi_cloud_connection_name: pulumi.Input[_builtins.str],
                 pi_cloud_connection_speed: pulumi.Input[_builtins.float],
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_cloud_connection_classic_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_global_routing: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_gre_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_gre_destination_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_metered: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_networks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_connection_transit_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_vpc_crns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_connection_vpc_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input['PiCloudConnectionTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiCloudConnection resource.
        :param pulumi.Input[_builtins.str] pi_cloud_connection_name: Name of the cloud connection
        :param pulumi.Input[_builtins.float] pi_cloud_connection_speed: Speed of the cloud connection (speed in megabits per second)
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_classic_enabled: Enable classic endpoint destination
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_global_routing: Enable global routing for this cloud connection
        :param pulumi.Input[_builtins.str] pi_cloud_connection_gre_cidr: GRE network in CIDR notation
        :param pulumi.Input[_builtins.str] pi_cloud_connection_gre_destination_address: GRE destination IP address
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_metered: Enable metered for this cloud connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_cloud_connection_networks: Set of Networks to attach to this cloud connection
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_transit_enabled: Enable transit gateway for this cloud connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_cloud_connection_vpc_crns: Set of VPCs to attach to this cloud connection
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_vpc_enabled: Enable VPC for this cloud connection
        """
        pulumi.set(__self__, "pi_cloud_connection_name", pi_cloud_connection_name)
        pulumi.set(__self__, "pi_cloud_connection_speed", pi_cloud_connection_speed)
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_cloud_connection_classic_enabled is not None:
            pulumi.set(__self__, "pi_cloud_connection_classic_enabled", pi_cloud_connection_classic_enabled)
        if pi_cloud_connection_global_routing is not None:
            pulumi.set(__self__, "pi_cloud_connection_global_routing", pi_cloud_connection_global_routing)
        if pi_cloud_connection_gre_cidr is not None:
            pulumi.set(__self__, "pi_cloud_connection_gre_cidr", pi_cloud_connection_gre_cidr)
        if pi_cloud_connection_gre_destination_address is not None:
            pulumi.set(__self__, "pi_cloud_connection_gre_destination_address", pi_cloud_connection_gre_destination_address)
        if pi_cloud_connection_id is not None:
            pulumi.set(__self__, "pi_cloud_connection_id", pi_cloud_connection_id)
        if pi_cloud_connection_metered is not None:
            pulumi.set(__self__, "pi_cloud_connection_metered", pi_cloud_connection_metered)
        if pi_cloud_connection_networks is not None:
            pulumi.set(__self__, "pi_cloud_connection_networks", pi_cloud_connection_networks)
        if pi_cloud_connection_transit_enabled is not None:
            pulumi.set(__self__, "pi_cloud_connection_transit_enabled", pi_cloud_connection_transit_enabled)
        if pi_cloud_connection_vpc_crns is not None:
            pulumi.set(__self__, "pi_cloud_connection_vpc_crns", pi_cloud_connection_vpc_crns)
        if pi_cloud_connection_vpc_enabled is not None:
            pulumi.set(__self__, "pi_cloud_connection_vpc_enabled", pi_cloud_connection_vpc_enabled)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionName")
    def pi_cloud_connection_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_name")

    @pi_cloud_connection_name.setter
    def pi_cloud_connection_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_connection_name", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionSpeed")
    def pi_cloud_connection_speed(self) -> pulumi.Input[_builtins.float]:
        """
        Speed of the cloud connection (speed in megabits per second)
        """
        return pulumi.get(self, "pi_cloud_connection_speed")

    @pi_cloud_connection_speed.setter
    def pi_cloud_connection_speed(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "pi_cloud_connection_speed", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionClassicEnabled")
    def pi_cloud_connection_classic_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable classic endpoint destination
        """
        return pulumi.get(self, "pi_cloud_connection_classic_enabled")

    @pi_cloud_connection_classic_enabled.setter
    def pi_cloud_connection_classic_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_cloud_connection_classic_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionGlobalRouting")
    def pi_cloud_connection_global_routing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable global routing for this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_global_routing")

    @pi_cloud_connection_global_routing.setter
    def pi_cloud_connection_global_routing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_cloud_connection_global_routing", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionGreCidr")
    def pi_cloud_connection_gre_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        GRE network in CIDR notation
        """
        return pulumi.get(self, "pi_cloud_connection_gre_cidr")

    @pi_cloud_connection_gre_cidr.setter
    def pi_cloud_connection_gre_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_connection_gre_cidr", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionGreDestinationAddress")
    def pi_cloud_connection_gre_destination_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        GRE destination IP address
        """
        return pulumi.get(self, "pi_cloud_connection_gre_destination_address")

    @pi_cloud_connection_gre_destination_address.setter
    def pi_cloud_connection_gre_destination_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_connection_gre_destination_address", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionId")
    def pi_cloud_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_cloud_connection_id")

    @pi_cloud_connection_id.setter
    def pi_cloud_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_connection_id", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionMetered")
    def pi_cloud_connection_metered(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable metered for this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_metered")

    @pi_cloud_connection_metered.setter
    def pi_cloud_connection_metered(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_cloud_connection_metered", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionNetworks")
    def pi_cloud_connection_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Set of Networks to attach to this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_networks")

    @pi_cloud_connection_networks.setter
    def pi_cloud_connection_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_cloud_connection_networks", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionTransitEnabled")
    def pi_cloud_connection_transit_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable transit gateway for this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_transit_enabled")

    @pi_cloud_connection_transit_enabled.setter
    def pi_cloud_connection_transit_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_cloud_connection_transit_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionVpcCrns")
    def pi_cloud_connection_vpc_crns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Set of VPCs to attach to this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_vpc_crns")

    @pi_cloud_connection_vpc_crns.setter
    def pi_cloud_connection_vpc_crns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_cloud_connection_vpc_crns", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionVpcEnabled")
    def pi_cloud_connection_vpc_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable VPC for this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_vpc_enabled")

    @pi_cloud_connection_vpc_enabled.setter
    def pi_cloud_connection_vpc_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_cloud_connection_vpc_enabled", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiCloudConnectionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiCloudConnectionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiCloudConnectionState:
    def __init__(__self__, *,
                 cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_source_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_classic_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_global_routing: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_gre_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_gre_destination_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_metered: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_networks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_connection_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_cloud_connection_transit_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_vpc_crns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_connection_vpc_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiCloudConnectionTimeoutsArgs']] = None,
                 user_ip_address: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PiCloudConnection resources.
        :param pulumi.Input[_builtins.str] cloud_connection_id: Cloud connection ID
        :param pulumi.Input[_builtins.str] connection_mode: Type of service the gateway is attached to
        :param pulumi.Input[_builtins.str] gre_source_address: GRE auto-assigned source IP address
        :param pulumi.Input[_builtins.str] ibm_ip_address: IBM IP address
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_classic_enabled: Enable classic endpoint destination
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_global_routing: Enable global routing for this cloud connection
        :param pulumi.Input[_builtins.str] pi_cloud_connection_gre_cidr: GRE network in CIDR notation
        :param pulumi.Input[_builtins.str] pi_cloud_connection_gre_destination_address: GRE destination IP address
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_metered: Enable metered for this cloud connection
        :param pulumi.Input[_builtins.str] pi_cloud_connection_name: Name of the cloud connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_cloud_connection_networks: Set of Networks to attach to this cloud connection
        :param pulumi.Input[_builtins.float] pi_cloud_connection_speed: Speed of the cloud connection (speed in megabits per second)
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_transit_enabled: Enable transit gateway for this cloud connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_cloud_connection_vpc_crns: Set of VPCs to attach to this cloud connection
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_vpc_enabled: Enable VPC for this cloud connection
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] port: Port
        :param pulumi.Input[_builtins.str] status: Link status
        :param pulumi.Input[_builtins.str] user_ip_address: User IP address
        """
        if cloud_connection_id is not None:
            pulumi.set(__self__, "cloud_connection_id", cloud_connection_id)
        if connection_mode is not None:
            pulumi.set(__self__, "connection_mode", connection_mode)
        if gre_source_address is not None:
            pulumi.set(__self__, "gre_source_address", gre_source_address)
        if ibm_ip_address is not None:
            pulumi.set(__self__, "ibm_ip_address", ibm_ip_address)
        if pi_cloud_connection_classic_enabled is not None:
            pulumi.set(__self__, "pi_cloud_connection_classic_enabled", pi_cloud_connection_classic_enabled)
        if pi_cloud_connection_global_routing is not None:
            pulumi.set(__self__, "pi_cloud_connection_global_routing", pi_cloud_connection_global_routing)
        if pi_cloud_connection_gre_cidr is not None:
            pulumi.set(__self__, "pi_cloud_connection_gre_cidr", pi_cloud_connection_gre_cidr)
        if pi_cloud_connection_gre_destination_address is not None:
            pulumi.set(__self__, "pi_cloud_connection_gre_destination_address", pi_cloud_connection_gre_destination_address)
        if pi_cloud_connection_id is not None:
            pulumi.set(__self__, "pi_cloud_connection_id", pi_cloud_connection_id)
        if pi_cloud_connection_metered is not None:
            pulumi.set(__self__, "pi_cloud_connection_metered", pi_cloud_connection_metered)
        if pi_cloud_connection_name is not None:
            pulumi.set(__self__, "pi_cloud_connection_name", pi_cloud_connection_name)
        if pi_cloud_connection_networks is not None:
            pulumi.set(__self__, "pi_cloud_connection_networks", pi_cloud_connection_networks)
        if pi_cloud_connection_speed is not None:
            pulumi.set(__self__, "pi_cloud_connection_speed", pi_cloud_connection_speed)
        if pi_cloud_connection_transit_enabled is not None:
            pulumi.set(__self__, "pi_cloud_connection_transit_enabled", pi_cloud_connection_transit_enabled)
        if pi_cloud_connection_vpc_crns is not None:
            pulumi.set(__self__, "pi_cloud_connection_vpc_crns", pi_cloud_connection_vpc_crns)
        if pi_cloud_connection_vpc_enabled is not None:
            pulumi.set(__self__, "pi_cloud_connection_vpc_enabled", pi_cloud_connection_vpc_enabled)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if user_ip_address is not None:
            pulumi.set(__self__, "user_ip_address", user_ip_address)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud connection ID
        """
        return pulumi.get(self, "cloud_connection_id")

    @cloud_connection_id.setter
    def cloud_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_connection_id", value)

    @_builtins.property
    @pulumi.getter(name="connectionMode")
    def connection_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of service the gateway is attached to
        """
        return pulumi.get(self, "connection_mode")

    @connection_mode.setter
    def connection_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_mode", value)

    @_builtins.property
    @pulumi.getter(name="greSourceAddress")
    def gre_source_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        GRE auto-assigned source IP address
        """
        return pulumi.get(self, "gre_source_address")

    @gre_source_address.setter
    def gre_source_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gre_source_address", value)

    @_builtins.property
    @pulumi.getter(name="ibmIpAddress")
    def ibm_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IBM IP address
        """
        return pulumi.get(self, "ibm_ip_address")

    @ibm_ip_address.setter
    def ibm_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionClassicEnabled")
    def pi_cloud_connection_classic_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable classic endpoint destination
        """
        return pulumi.get(self, "pi_cloud_connection_classic_enabled")

    @pi_cloud_connection_classic_enabled.setter
    def pi_cloud_connection_classic_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_cloud_connection_classic_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionGlobalRouting")
    def pi_cloud_connection_global_routing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable global routing for this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_global_routing")

    @pi_cloud_connection_global_routing.setter
    def pi_cloud_connection_global_routing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_cloud_connection_global_routing", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionGreCidr")
    def pi_cloud_connection_gre_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        GRE network in CIDR notation
        """
        return pulumi.get(self, "pi_cloud_connection_gre_cidr")

    @pi_cloud_connection_gre_cidr.setter
    def pi_cloud_connection_gre_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_connection_gre_cidr", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionGreDestinationAddress")
    def pi_cloud_connection_gre_destination_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        GRE destination IP address
        """
        return pulumi.get(self, "pi_cloud_connection_gre_destination_address")

    @pi_cloud_connection_gre_destination_address.setter
    def pi_cloud_connection_gre_destination_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_connection_gre_destination_address", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionId")
    def pi_cloud_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_cloud_connection_id")

    @pi_cloud_connection_id.setter
    def pi_cloud_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_connection_id", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionMetered")
    def pi_cloud_connection_metered(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable metered for this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_metered")

    @pi_cloud_connection_metered.setter
    def pi_cloud_connection_metered(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_cloud_connection_metered", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionName")
    def pi_cloud_connection_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_name")

    @pi_cloud_connection_name.setter
    def pi_cloud_connection_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_connection_name", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionNetworks")
    def pi_cloud_connection_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Set of Networks to attach to this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_networks")

    @pi_cloud_connection_networks.setter
    def pi_cloud_connection_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_cloud_connection_networks", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionSpeed")
    def pi_cloud_connection_speed(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Speed of the cloud connection (speed in megabits per second)
        """
        return pulumi.get(self, "pi_cloud_connection_speed")

    @pi_cloud_connection_speed.setter
    def pi_cloud_connection_speed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_cloud_connection_speed", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionTransitEnabled")
    def pi_cloud_connection_transit_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable transit gateway for this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_transit_enabled")

    @pi_cloud_connection_transit_enabled.setter
    def pi_cloud_connection_transit_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_cloud_connection_transit_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionVpcCrns")
    def pi_cloud_connection_vpc_crns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Set of VPCs to attach to this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_vpc_crns")

    @pi_cloud_connection_vpc_crns.setter
    def pi_cloud_connection_vpc_crns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_cloud_connection_vpc_crns", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionVpcEnabled")
    def pi_cloud_connection_vpc_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable VPC for this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_vpc_enabled")

    @pi_cloud_connection_vpc_enabled.setter
    def pi_cloud_connection_vpc_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_cloud_connection_vpc_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Link status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiCloudConnectionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiCloudConnectionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="userIpAddress")
    def user_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User IP address
        """
        return pulumi.get(self, "user_ip_address")

    @user_ip_address.setter
    def user_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_ip_address", value)


@pulumi.type_token("ibm:index/piCloudConnection:PiCloudConnection")
class PiCloudConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_connection_classic_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_global_routing: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_gre_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_gre_destination_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_metered: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_networks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_connection_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_cloud_connection_transit_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_vpc_crns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_connection_vpc_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiCloudConnectionTimeoutsArgs', 'PiCloudConnectionTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiCloudConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_classic_enabled: Enable classic endpoint destination
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_global_routing: Enable global routing for this cloud connection
        :param pulumi.Input[_builtins.str] pi_cloud_connection_gre_cidr: GRE network in CIDR notation
        :param pulumi.Input[_builtins.str] pi_cloud_connection_gre_destination_address: GRE destination IP address
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_metered: Enable metered for this cloud connection
        :param pulumi.Input[_builtins.str] pi_cloud_connection_name: Name of the cloud connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_cloud_connection_networks: Set of Networks to attach to this cloud connection
        :param pulumi.Input[_builtins.float] pi_cloud_connection_speed: Speed of the cloud connection (speed in megabits per second)
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_transit_enabled: Enable transit gateway for this cloud connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_cloud_connection_vpc_crns: Set of VPCs to attach to this cloud connection
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_vpc_enabled: Enable VPC for this cloud connection
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiCloudConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiCloudConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiCloudConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiCloudConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_connection_classic_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_global_routing: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_gre_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_gre_destination_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_metered: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_networks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_connection_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_cloud_connection_transit_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_connection_vpc_crns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_connection_vpc_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiCloudConnectionTimeoutsArgs', 'PiCloudConnectionTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiCloudConnectionArgs.__new__(PiCloudConnectionArgs)

            __props__.__dict__["pi_cloud_connection_classic_enabled"] = pi_cloud_connection_classic_enabled
            __props__.__dict__["pi_cloud_connection_global_routing"] = pi_cloud_connection_global_routing
            __props__.__dict__["pi_cloud_connection_gre_cidr"] = pi_cloud_connection_gre_cidr
            __props__.__dict__["pi_cloud_connection_gre_destination_address"] = pi_cloud_connection_gre_destination_address
            __props__.__dict__["pi_cloud_connection_id"] = pi_cloud_connection_id
            __props__.__dict__["pi_cloud_connection_metered"] = pi_cloud_connection_metered
            if pi_cloud_connection_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_connection_name'")
            __props__.__dict__["pi_cloud_connection_name"] = pi_cloud_connection_name
            __props__.__dict__["pi_cloud_connection_networks"] = pi_cloud_connection_networks
            if pi_cloud_connection_speed is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_connection_speed'")
            __props__.__dict__["pi_cloud_connection_speed"] = pi_cloud_connection_speed
            __props__.__dict__["pi_cloud_connection_transit_enabled"] = pi_cloud_connection_transit_enabled
            __props__.__dict__["pi_cloud_connection_vpc_crns"] = pi_cloud_connection_vpc_crns
            __props__.__dict__["pi_cloud_connection_vpc_enabled"] = pi_cloud_connection_vpc_enabled
            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["cloud_connection_id"] = None
            __props__.__dict__["connection_mode"] = None
            __props__.__dict__["gre_source_address"] = None
            __props__.__dict__["ibm_ip_address"] = None
            __props__.__dict__["port"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["user_ip_address"] = None
        super(PiCloudConnection, __self__).__init__(
            'ibm:index/piCloudConnection:PiCloudConnection',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            connection_mode: Optional[pulumi.Input[_builtins.str]] = None,
            gre_source_address: Optional[pulumi.Input[_builtins.str]] = None,
            ibm_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_connection_classic_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_cloud_connection_global_routing: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_cloud_connection_gre_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_connection_gre_destination_address: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_connection_metered: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_cloud_connection_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_connection_networks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_cloud_connection_speed: Optional[pulumi.Input[_builtins.float]] = None,
            pi_cloud_connection_transit_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_cloud_connection_vpc_crns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_cloud_connection_vpc_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiCloudConnectionTimeoutsArgs', 'PiCloudConnectionTimeoutsArgsDict']]] = None,
            user_ip_address: Optional[pulumi.Input[_builtins.str]] = None) -> 'PiCloudConnection':
        """
        Get an existing PiCloudConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cloud_connection_id: Cloud connection ID
        :param pulumi.Input[_builtins.str] connection_mode: Type of service the gateway is attached to
        :param pulumi.Input[_builtins.str] gre_source_address: GRE auto-assigned source IP address
        :param pulumi.Input[_builtins.str] ibm_ip_address: IBM IP address
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_classic_enabled: Enable classic endpoint destination
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_global_routing: Enable global routing for this cloud connection
        :param pulumi.Input[_builtins.str] pi_cloud_connection_gre_cidr: GRE network in CIDR notation
        :param pulumi.Input[_builtins.str] pi_cloud_connection_gre_destination_address: GRE destination IP address
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_metered: Enable metered for this cloud connection
        :param pulumi.Input[_builtins.str] pi_cloud_connection_name: Name of the cloud connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_cloud_connection_networks: Set of Networks to attach to this cloud connection
        :param pulumi.Input[_builtins.float] pi_cloud_connection_speed: Speed of the cloud connection (speed in megabits per second)
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_transit_enabled: Enable transit gateway for this cloud connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_cloud_connection_vpc_crns: Set of VPCs to attach to this cloud connection
        :param pulumi.Input[_builtins.bool] pi_cloud_connection_vpc_enabled: Enable VPC for this cloud connection
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] port: Port
        :param pulumi.Input[_builtins.str] status: Link status
        :param pulumi.Input[_builtins.str] user_ip_address: User IP address
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiCloudConnectionState.__new__(_PiCloudConnectionState)

        __props__.__dict__["cloud_connection_id"] = cloud_connection_id
        __props__.__dict__["connection_mode"] = connection_mode
        __props__.__dict__["gre_source_address"] = gre_source_address
        __props__.__dict__["ibm_ip_address"] = ibm_ip_address
        __props__.__dict__["pi_cloud_connection_classic_enabled"] = pi_cloud_connection_classic_enabled
        __props__.__dict__["pi_cloud_connection_global_routing"] = pi_cloud_connection_global_routing
        __props__.__dict__["pi_cloud_connection_gre_cidr"] = pi_cloud_connection_gre_cidr
        __props__.__dict__["pi_cloud_connection_gre_destination_address"] = pi_cloud_connection_gre_destination_address
        __props__.__dict__["pi_cloud_connection_id"] = pi_cloud_connection_id
        __props__.__dict__["pi_cloud_connection_metered"] = pi_cloud_connection_metered
        __props__.__dict__["pi_cloud_connection_name"] = pi_cloud_connection_name
        __props__.__dict__["pi_cloud_connection_networks"] = pi_cloud_connection_networks
        __props__.__dict__["pi_cloud_connection_speed"] = pi_cloud_connection_speed
        __props__.__dict__["pi_cloud_connection_transit_enabled"] = pi_cloud_connection_transit_enabled
        __props__.__dict__["pi_cloud_connection_vpc_crns"] = pi_cloud_connection_vpc_crns
        __props__.__dict__["pi_cloud_connection_vpc_enabled"] = pi_cloud_connection_vpc_enabled
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["port"] = port
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["user_ip_address"] = user_ip_address
        return PiCloudConnection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cloudConnectionId")
    def cloud_connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        Cloud connection ID
        """
        return pulumi.get(self, "cloud_connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionMode")
    def connection_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Type of service the gateway is attached to
        """
        return pulumi.get(self, "connection_mode")

    @_builtins.property
    @pulumi.getter(name="greSourceAddress")
    def gre_source_address(self) -> pulumi.Output[_builtins.str]:
        """
        GRE auto-assigned source IP address
        """
        return pulumi.get(self, "gre_source_address")

    @_builtins.property
    @pulumi.getter(name="ibmIpAddress")
    def ibm_ip_address(self) -> pulumi.Output[_builtins.str]:
        """
        IBM IP address
        """
        return pulumi.get(self, "ibm_ip_address")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionClassicEnabled")
    def pi_cloud_connection_classic_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable classic endpoint destination
        """
        return pulumi.get(self, "pi_cloud_connection_classic_enabled")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionGlobalRouting")
    def pi_cloud_connection_global_routing(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable global routing for this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_global_routing")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionGreCidr")
    def pi_cloud_connection_gre_cidr(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        GRE network in CIDR notation
        """
        return pulumi.get(self, "pi_cloud_connection_gre_cidr")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionGreDestinationAddress")
    def pi_cloud_connection_gre_destination_address(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        GRE destination IP address
        """
        return pulumi.get(self, "pi_cloud_connection_gre_destination_address")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionId")
    def pi_cloud_connection_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_cloud_connection_id")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionMetered")
    def pi_cloud_connection_metered(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable metered for this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_metered")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionName")
    def pi_cloud_connection_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_name")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionNetworks")
    def pi_cloud_connection_networks(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Set of Networks to attach to this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_networks")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionSpeed")
    def pi_cloud_connection_speed(self) -> pulumi.Output[_builtins.float]:
        """
        Speed of the cloud connection (speed in megabits per second)
        """
        return pulumi.get(self, "pi_cloud_connection_speed")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionTransitEnabled")
    def pi_cloud_connection_transit_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable transit gateway for this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_transit_enabled")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionVpcCrns")
    def pi_cloud_connection_vpc_crns(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Set of VPCs to attach to this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_vpc_crns")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionVpcEnabled")
    def pi_cloud_connection_vpc_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable VPC for this cloud connection
        """
        return pulumi.get(self, "pi_cloud_connection_vpc_enabled")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.str]:
        """
        Port
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Link status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiCloudConnectionTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="userIpAddress")
    def user_ip_address(self) -> pulumi.Output[_builtins.str]:
        """
        User IP address
        """
        return pulumi.get(self, "user_ip_address")

