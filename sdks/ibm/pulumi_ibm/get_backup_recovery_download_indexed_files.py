# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetBackupRecoveryDownloadIndexedFilesResult',
    'AwaitableGetBackupRecoveryDownloadIndexedFilesResult',
    'get_backup_recovery_download_indexed_files',
    'get_backup_recovery_download_indexed_files_output',
]

@pulumi.output_type
class GetBackupRecoveryDownloadIndexedFilesResult:
    """
    A collection of values returned by getBackupRecoveryDownloadIndexedFiles.
    """
    def __init__(__self__, file_path=None, id=None, length=None, nvram_file=None, retry_attempt=None, snapshots_id=None, start_offset=None, x_ibm_tenant_id=None):
        if file_path and not isinstance(file_path, str):
            raise TypeError("Expected argument 'file_path' to be a str")
        pulumi.set(__self__, "file_path", file_path)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if length and not isinstance(length, float):
            raise TypeError("Expected argument 'length' to be a float")
        pulumi.set(__self__, "length", length)
        if nvram_file and not isinstance(nvram_file, bool):
            raise TypeError("Expected argument 'nvram_file' to be a bool")
        pulumi.set(__self__, "nvram_file", nvram_file)
        if retry_attempt and not isinstance(retry_attempt, float):
            raise TypeError("Expected argument 'retry_attempt' to be a float")
        pulumi.set(__self__, "retry_attempt", retry_attempt)
        if snapshots_id and not isinstance(snapshots_id, str):
            raise TypeError("Expected argument 'snapshots_id' to be a str")
        pulumi.set(__self__, "snapshots_id", snapshots_id)
        if start_offset and not isinstance(start_offset, float):
            raise TypeError("Expected argument 'start_offset' to be a float")
        pulumi.set(__self__, "start_offset", start_offset)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "file_path")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def length(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter(name="nvramFile")
    def nvram_file(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "nvram_file")

    @_builtins.property
    @pulumi.getter(name="retryAttempt")
    def retry_attempt(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "retry_attempt")

    @_builtins.property
    @pulumi.getter(name="snapshotsId")
    def snapshots_id(self) -> _builtins.str:
        return pulumi.get(self, "snapshots_id")

    @_builtins.property
    @pulumi.getter(name="startOffset")
    def start_offset(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "start_offset")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryDownloadIndexedFilesResult(GetBackupRecoveryDownloadIndexedFilesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryDownloadIndexedFilesResult(
            file_path=self.file_path,
            id=self.id,
            length=self.length,
            nvram_file=self.nvram_file,
            retry_attempt=self.retry_attempt,
            snapshots_id=self.snapshots_id,
            start_offset=self.start_offset,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_download_indexed_files(file_path: Optional[_builtins.str] = None,
                                               id: Optional[_builtins.str] = None,
                                               length: Optional[_builtins.float] = None,
                                               nvram_file: Optional[_builtins.bool] = None,
                                               retry_attempt: Optional[_builtins.float] = None,
                                               snapshots_id: Optional[_builtins.str] = None,
                                               start_offset: Optional[_builtins.float] = None,
                                               x_ibm_tenant_id: Optional[_builtins.str] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryDownloadIndexedFilesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filePath'] = file_path
    __args__['id'] = id
    __args__['length'] = length
    __args__['nvramFile'] = nvram_file
    __args__['retryAttempt'] = retry_attempt
    __args__['snapshotsId'] = snapshots_id
    __args__['startOffset'] = start_offset
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryDownloadIndexedFiles:getBackupRecoveryDownloadIndexedFiles', __args__, opts=opts, typ=GetBackupRecoveryDownloadIndexedFilesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryDownloadIndexedFilesResult(
        file_path=pulumi.get(__ret__, 'file_path'),
        id=pulumi.get(__ret__, 'id'),
        length=pulumi.get(__ret__, 'length'),
        nvram_file=pulumi.get(__ret__, 'nvram_file'),
        retry_attempt=pulumi.get(__ret__, 'retry_attempt'),
        snapshots_id=pulumi.get(__ret__, 'snapshots_id'),
        start_offset=pulumi.get(__ret__, 'start_offset'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_download_indexed_files_output(file_path: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      length: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                      nvram_file: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                      retry_attempt: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                      snapshots_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                      start_offset: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                      x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryDownloadIndexedFilesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filePath'] = file_path
    __args__['id'] = id
    __args__['length'] = length
    __args__['nvramFile'] = nvram_file
    __args__['retryAttempt'] = retry_attempt
    __args__['snapshotsId'] = snapshots_id
    __args__['startOffset'] = start_offset
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryDownloadIndexedFiles:getBackupRecoveryDownloadIndexedFiles', __args__, opts=opts, typ=GetBackupRecoveryDownloadIndexedFilesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryDownloadIndexedFilesResult(
        file_path=pulumi.get(__response__, 'file_path'),
        id=pulumi.get(__response__, 'id'),
        length=pulumi.get(__response__, 'length'),
        nvram_file=pulumi.get(__response__, 'nvram_file'),
        retry_attempt=pulumi.get(__response__, 'retry_attempt'),
        snapshots_id=pulumi.get(__response__, 'snapshots_id'),
        start_offset=pulumi.get(__response__, 'start_offset'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
