# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SccScopeArgs', 'SccScope']

@pulumi.input_type
class SccScopeArgs:
    def __init__(__self__, *,
                 environment: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 properties: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 exclusions: Optional[pulumi.Input[Sequence[pulumi.Input['SccScopeExclusionArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 scc_scope_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SccScope resource.
        :param pulumi.Input[_builtins.str] environment: The scope environment. This value details what cloud provider the scope targets.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] properties: The properties to define the depth of the scope.
        :param pulumi.Input[_builtins.str] description: The scope description.
        :param pulumi.Input[Sequence[pulumi.Input['SccScopeExclusionArgs']]] exclusions: A list of scopes/targets to exclude from a scope.
        :param pulumi.Input[_builtins.str] name: The scope name.
        """
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "properties", properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scc_scope_id is not None:
            pulumi.set(__self__, "scc_scope_id", scc_scope_id)

    @_builtins.property
    @pulumi.getter
    def environment(self) -> pulumi.Input[_builtins.str]:
        """
        The scope environment. This value details what cloud provider the scope targets.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]:
        """
        The properties to define the depth of the scope.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The scope description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def exclusions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SccScopeExclusionArgs']]]]:
        """
        A list of scopes/targets to exclude from a scope.
        """
        return pulumi.get(self, "exclusions")

    @exclusions.setter
    def exclusions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SccScopeExclusionArgs']]]]):
        pulumi.set(self, "exclusions", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The scope name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sccScopeId")
    def scc_scope_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "scc_scope_id")

    @scc_scope_id.setter
    def scc_scope_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scc_scope_id", value)


@pulumi.input_type
class _SccScopeState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 attachment_count: Optional[pulumi.Input[_builtins.float]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 exclusions: Optional[pulumi.Input[Sequence[pulumi.Input['SccScopeExclusionArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 scc_scope_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scope_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_on: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SccScope resources.
        :param pulumi.Input[_builtins.str] account_id: The ID of the account associated with the scope.
        :param pulumi.Input[_builtins.float] attachment_count: The number of attachments tied to the scope.
        :param pulumi.Input[_builtins.str] created_by: The identifier of the account or service ID who created the scope.
        :param pulumi.Input[_builtins.str] created_on: The date when the scope was created.
        :param pulumi.Input[_builtins.str] description: The scope description.
        :param pulumi.Input[_builtins.str] environment: The scope environment. This value details what cloud provider the scope targets.
        :param pulumi.Input[Sequence[pulumi.Input['SccScopeExclusionArgs']]] exclusions: A list of scopes/targets to exclude from a scope.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[_builtins.str] name: The scope name.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] properties: The properties to define the depth of the scope.
        :param pulumi.Input[_builtins.str] scope_id: The ID of the scope.
        :param pulumi.Input[_builtins.str] updated_by: The ID of the user or service ID who updated the scope.
        :param pulumi.Input[_builtins.str] updated_on: The date when the scope was updated.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if attachment_count is not None:
            pulumi.set(__self__, "attachment_count", attachment_count)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if scc_scope_id is not None:
            pulumi.set(__self__, "scc_scope_id", scc_scope_id)
        if scope_id is not None:
            pulumi.set(__self__, "scope_id", scope_id)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_on is not None:
            pulumi.set(__self__, "updated_on", updated_on)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the account associated with the scope.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="attachmentCount")
    def attachment_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of attachments tied to the scope.
        """
        return pulumi.get(self, "attachment_count")

    @attachment_count.setter
    def attachment_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "attachment_count", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier of the account or service ID who created the scope.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the scope was created.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The scope description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The scope environment. This value details what cloud provider the scope targets.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment", value)

    @_builtins.property
    @pulumi.getter
    def exclusions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SccScopeExclusionArgs']]]]:
        """
        A list of scopes/targets to exclude from a scope.
        """
        return pulumi.get(self, "exclusions")

    @exclusions.setter
    def exclusions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SccScopeExclusionArgs']]]]):
        pulumi.set(self, "exclusions", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The scope name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The properties to define the depth of the scope.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter(name="sccScopeId")
    def scc_scope_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "scc_scope_id")

    @scc_scope_id.setter
    def scc_scope_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scc_scope_id", value)

    @_builtins.property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the scope.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the user or service ID who updated the scope.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the scope was updated.
        """
        return pulumi.get(self, "updated_on")

    @updated_on.setter
    def updated_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_on", value)


@pulumi.type_token("ibm:index/sccScope:SccScope")
class SccScope(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 exclusions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccScopeExclusionArgs', 'SccScopeExclusionArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 scc_scope_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SccScope resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: The scope description.
        :param pulumi.Input[_builtins.str] environment: The scope environment. This value details what cloud provider the scope targets.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SccScopeExclusionArgs', 'SccScopeExclusionArgsDict']]]] exclusions: A list of scopes/targets to exclude from a scope.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[_builtins.str] name: The scope name.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] properties: The properties to define the depth of the scope.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SccScopeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SccScope resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SccScopeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SccScopeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 exclusions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccScopeExclusionArgs', 'SccScopeExclusionArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 scc_scope_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SccScopeArgs.__new__(SccScopeArgs)

            __props__.__dict__["description"] = description
            if environment is None and not opts.urn:
                raise TypeError("Missing required property 'environment'")
            __props__.__dict__["environment"] = environment
            __props__.__dict__["exclusions"] = exclusions
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            if properties is None and not opts.urn:
                raise TypeError("Missing required property 'properties'")
            __props__.__dict__["properties"] = properties
            __props__.__dict__["scc_scope_id"] = scc_scope_id
            __props__.__dict__["account_id"] = None
            __props__.__dict__["attachment_count"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["created_on"] = None
            __props__.__dict__["scope_id"] = None
            __props__.__dict__["updated_by"] = None
            __props__.__dict__["updated_on"] = None
        super(SccScope, __self__).__init__(
            'ibm:index/sccScope:SccScope',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            attachment_count: Optional[pulumi.Input[_builtins.float]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            environment: Optional[pulumi.Input[_builtins.str]] = None,
            exclusions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccScopeExclusionArgs', 'SccScopeExclusionArgsDict']]]]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            scc_scope_id: Optional[pulumi.Input[_builtins.str]] = None,
            scope_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            updated_on: Optional[pulumi.Input[_builtins.str]] = None) -> 'SccScope':
        """
        Get an existing SccScope resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: The ID of the account associated with the scope.
        :param pulumi.Input[_builtins.float] attachment_count: The number of attachments tied to the scope.
        :param pulumi.Input[_builtins.str] created_by: The identifier of the account or service ID who created the scope.
        :param pulumi.Input[_builtins.str] created_on: The date when the scope was created.
        :param pulumi.Input[_builtins.str] description: The scope description.
        :param pulumi.Input[_builtins.str] environment: The scope environment. This value details what cloud provider the scope targets.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SccScopeExclusionArgs', 'SccScopeExclusionArgsDict']]]] exclusions: A list of scopes/targets to exclude from a scope.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[_builtins.str] name: The scope name.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] properties: The properties to define the depth of the scope.
        :param pulumi.Input[_builtins.str] scope_id: The ID of the scope.
        :param pulumi.Input[_builtins.str] updated_by: The ID of the user or service ID who updated the scope.
        :param pulumi.Input[_builtins.str] updated_on: The date when the scope was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SccScopeState.__new__(_SccScopeState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["attachment_count"] = attachment_count
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["description"] = description
        __props__.__dict__["environment"] = environment
        __props__.__dict__["exclusions"] = exclusions
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["properties"] = properties
        __props__.__dict__["scc_scope_id"] = scc_scope_id
        __props__.__dict__["scope_id"] = scope_id
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["updated_on"] = updated_on
        return SccScope(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the account associated with the scope.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="attachmentCount")
    def attachment_count(self) -> pulumi.Output[_builtins.float]:
        """
        The number of attachments tied to the scope.
        """
        return pulumi.get(self, "attachment_count")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The identifier of the account or service ID who created the scope.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the scope was created.
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The scope description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> pulumi.Output[_builtins.str]:
        """
        The scope environment. This value details what cloud provider the scope targets.
        """
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter
    def exclusions(self) -> pulumi.Output[Optional[Sequence['outputs.SccScopeExclusion']]]:
        """
        A list of scopes/targets to exclude from a scope.
        """
        return pulumi.get(self, "exclusions")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The scope name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The properties to define the depth of the scope.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="sccScopeId")
    def scc_scope_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "scc_scope_id")

    @_builtins.property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the scope.
        """
        return pulumi.get(self, "scope_id")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the user or service ID who updated the scope.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the scope was updated.
        """
        return pulumi.get(self, "updated_on")

