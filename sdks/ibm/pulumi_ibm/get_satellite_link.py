# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSatelliteLinkResult',
    'AwaitableGetSatelliteLinkResult',
    'get_satellite_link',
    'get_satellite_link_output',
]

@pulumi.output_type
class GetSatelliteLinkResult:
    """
    A collection of values returned by getSatelliteLink.
    """
    def __init__(__self__, created_at=None, crn=None, description=None, id=None, last_change=None, location=None, performances=None, satellite_link_host=None, status=None, ws_endpoint=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_change and not isinstance(last_change, str):
            raise TypeError("Expected argument 'last_change' to be a str")
        pulumi.set(__self__, "last_change", last_change)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if performances and not isinstance(performances, list):
            raise TypeError("Expected argument 'performances' to be a list")
        pulumi.set(__self__, "performances", performances)
        if satellite_link_host and not isinstance(satellite_link_host, str):
            raise TypeError("Expected argument 'satellite_link_host' to be a str")
        pulumi.set(__self__, "satellite_link_host", satellite_link_host)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if ws_endpoint and not isinstance(ws_endpoint, str):
            raise TypeError("Expected argument 'ws_endpoint' to be a str")
        pulumi.set(__self__, "ws_endpoint", ws_endpoint)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastChange")
    def last_change(self) -> _builtins.str:
        return pulumi.get(self, "last_change")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def performances(self) -> Sequence['outputs.GetSatelliteLinkPerformanceResult']:
        return pulumi.get(self, "performances")

    @_builtins.property
    @pulumi.getter(name="satelliteLinkHost")
    def satellite_link_host(self) -> _builtins.str:
        return pulumi.get(self, "satellite_link_host")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="wsEndpoint")
    def ws_endpoint(self) -> _builtins.str:
        return pulumi.get(self, "ws_endpoint")


class AwaitableGetSatelliteLinkResult(GetSatelliteLinkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSatelliteLinkResult(
            created_at=self.created_at,
            crn=self.crn,
            description=self.description,
            id=self.id,
            last_change=self.last_change,
            location=self.location,
            performances=self.performances,
            satellite_link_host=self.satellite_link_host,
            status=self.status,
            ws_endpoint=self.ws_endpoint)


def get_satellite_link(id: Optional[_builtins.str] = None,
                       location: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSatelliteLinkResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSatelliteLink:getSatelliteLink', __args__, opts=opts, typ=GetSatelliteLinkResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSatelliteLinkResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        last_change=pulumi.get(__ret__, 'last_change'),
        location=pulumi.get(__ret__, 'location'),
        performances=pulumi.get(__ret__, 'performances'),
        satellite_link_host=pulumi.get(__ret__, 'satellite_link_host'),
        status=pulumi.get(__ret__, 'status'),
        ws_endpoint=pulumi.get(__ret__, 'ws_endpoint'))
def get_satellite_link_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              location: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSatelliteLinkResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSatelliteLink:getSatelliteLink', __args__, opts=opts, typ=GetSatelliteLinkResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSatelliteLinkResult(
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        last_change=pulumi.get(__response__, 'last_change'),
        location=pulumi.get(__response__, 'location'),
        performances=pulumi.get(__response__, 'performances'),
        satellite_link_host=pulumi.get(__response__, 'satellite_link_host'),
        status=pulumi.get(__response__, 'status'),
        ws_endpoint=pulumi.get(__response__, 'ws_endpoint')))
