# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisDnsRecordsImportArgs', 'CisDnsRecordsImport']

@pulumi.input_type
class CisDnsRecordsImportArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 file: pulumi.Input[_builtins.str],
                 cis_dns_records_import_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisDnsRecordsImport resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] file: File to import
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "file", file)
        if cis_dns_records_import_id is not None:
            pulumi.set(__self__, "cis_dns_records_import_id", cis_dns_records_import_id)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def file(self) -> pulumi.Input[_builtins.str]:
        """
        File to import
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "file", value)

    @_builtins.property
    @pulumi.getter(name="cisDnsRecordsImportId")
    def cis_dns_records_import_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_dns_records_import_id")

    @cis_dns_records_import_id.setter
    def cis_dns_records_import_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_dns_records_import_id", value)


@pulumi.input_type
class _CisDnsRecordsImportState:
    def __init__(__self__, *,
                 cis_dns_records_import_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 records_added: Optional[pulumi.Input[_builtins.float]] = None,
                 total_records_parsed: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering CisDnsRecordsImport resources.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] file: File to import
        :param pulumi.Input[_builtins.float] records_added: added records count
        :param pulumi.Input[_builtins.float] total_records_parsed: total records parsed
        """
        if cis_dns_records_import_id is not None:
            pulumi.set(__self__, "cis_dns_records_import_id", cis_dns_records_import_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if records_added is not None:
            pulumi.set(__self__, "records_added", records_added)
        if total_records_parsed is not None:
            pulumi.set(__self__, "total_records_parsed", total_records_parsed)

    @_builtins.property
    @pulumi.getter(name="cisDnsRecordsImportId")
    def cis_dns_records_import_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_dns_records_import_id")

    @cis_dns_records_import_id.setter
    def cis_dns_records_import_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_dns_records_import_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        File to import
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file", value)

    @_builtins.property
    @pulumi.getter(name="recordsAdded")
    def records_added(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        added records count
        """
        return pulumi.get(self, "records_added")

    @records_added.setter
    def records_added(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "records_added", value)

    @_builtins.property
    @pulumi.getter(name="totalRecordsParsed")
    def total_records_parsed(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        total records parsed
        """
        return pulumi.get(self, "total_records_parsed")

    @total_records_parsed.setter
    def total_records_parsed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "total_records_parsed", value)


@pulumi.type_token("ibm:index/cisDnsRecordsImport:CisDnsRecordsImport")
class CisDnsRecordsImport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_dns_records_import_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisDnsRecordsImport resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] file: File to import
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisDnsRecordsImportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisDnsRecordsImport resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisDnsRecordsImportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisDnsRecordsImportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_dns_records_import_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisDnsRecordsImportArgs.__new__(CisDnsRecordsImportArgs)

            __props__.__dict__["cis_dns_records_import_id"] = cis_dns_records_import_id
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            if file is None and not opts.urn:
                raise TypeError("Missing required property 'file'")
            __props__.__dict__["file"] = file
            __props__.__dict__["records_added"] = None
            __props__.__dict__["total_records_parsed"] = None
        super(CisDnsRecordsImport, __self__).__init__(
            'ibm:index/cisDnsRecordsImport:CisDnsRecordsImport',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cis_dns_records_import_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            file: Optional[pulumi.Input[_builtins.str]] = None,
            records_added: Optional[pulumi.Input[_builtins.float]] = None,
            total_records_parsed: Optional[pulumi.Input[_builtins.float]] = None) -> 'CisDnsRecordsImport':
        """
        Get an existing CisDnsRecordsImport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] file: File to import
        :param pulumi.Input[_builtins.float] records_added: added records count
        :param pulumi.Input[_builtins.float] total_records_parsed: total records parsed
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisDnsRecordsImportState.__new__(_CisDnsRecordsImportState)

        __props__.__dict__["cis_dns_records_import_id"] = cis_dns_records_import_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["file"] = file
        __props__.__dict__["records_added"] = records_added
        __props__.__dict__["total_records_parsed"] = total_records_parsed
        return CisDnsRecordsImport(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cisDnsRecordsImportId")
    def cis_dns_records_import_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_dns_records_import_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def file(self) -> pulumi.Output[_builtins.str]:
        """
        File to import
        """
        return pulumi.get(self, "file")

    @_builtins.property
    @pulumi.getter(name="recordsAdded")
    def records_added(self) -> pulumi.Output[_builtins.float]:
        """
        added records count
        """
        return pulumi.get(self, "records_added")

    @_builtins.property
    @pulumi.getter(name="totalRecordsParsed")
    def total_records_parsed(self) -> pulumi.Output[_builtins.float]:
        """
        total records parsed
        """
        return pulumi.get(self, "total_records_parsed")

