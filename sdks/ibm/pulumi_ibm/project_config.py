# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProjectConfigInitArgs', 'ProjectConfig']

@pulumi.input_type
class ProjectConfigInitArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input['ProjectConfigDefinitionArgs'],
                 project_id: pulumi.Input[_builtins.str],
                 approved_versions: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigApprovedVersionArgs']]]] = None,
                 deployed_versions: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigDeployedVersionArgs']]]] = None,
                 ibm_project_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 member_ofs: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigMemberOfArgs']]]] = None,
                 schematics: Optional[pulumi.Input['ProjectConfigSchematicsArgs']] = None):
        """
        The set of arguments for constructing a ProjectConfig resource.
        :param pulumi.Input[_builtins.str] project_id: The unique project ID.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectConfigApprovedVersionArgs']]] approved_versions: A summary of a project configuration version.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectConfigDeployedVersionArgs']]] deployed_versions: A summary of a project configuration version.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectConfigMemberOfArgs']]] member_ofs: The stack config parent of which this configuration is a member of.
        :param pulumi.Input['ProjectConfigSchematicsArgs'] schematics: A Schematics workspace that is associated to a project configuration, with scripts.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "project_id", project_id)
        if approved_versions is not None:
            pulumi.set(__self__, "approved_versions", approved_versions)
        if deployed_versions is not None:
            pulumi.set(__self__, "deployed_versions", deployed_versions)
        if ibm_project_config_id is not None:
            pulumi.set(__self__, "ibm_project_config_id", ibm_project_config_id)
        if member_ofs is not None:
            pulumi.set(__self__, "member_ofs", member_ofs)
        if schematics is not None:
            pulumi.set(__self__, "schematics", schematics)

    @_builtins.property
    @pulumi.getter
    def definition(self) -> pulumi.Input['ProjectConfigDefinitionArgs']:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input['ProjectConfigDefinitionArgs']):
        pulumi.set(self, "definition", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="approvedVersions")
    def approved_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigApprovedVersionArgs']]]]:
        """
        A summary of a project configuration version.
        """
        return pulumi.get(self, "approved_versions")

    @approved_versions.setter
    def approved_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigApprovedVersionArgs']]]]):
        pulumi.set(self, "approved_versions", value)

    @_builtins.property
    @pulumi.getter(name="deployedVersions")
    def deployed_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigDeployedVersionArgs']]]]:
        """
        A summary of a project configuration version.
        """
        return pulumi.get(self, "deployed_versions")

    @deployed_versions.setter
    def deployed_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigDeployedVersionArgs']]]]):
        pulumi.set(self, "deployed_versions", value)

    @_builtins.property
    @pulumi.getter(name="ibmProjectConfigId")
    def ibm_project_config_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ibm_project_config_id")

    @ibm_project_config_id.setter
    def ibm_project_config_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_project_config_id", value)

    @_builtins.property
    @pulumi.getter(name="memberOfs")
    def member_ofs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigMemberOfArgs']]]]:
        """
        The stack config parent of which this configuration is a member of.
        """
        return pulumi.get(self, "member_ofs")

    @member_ofs.setter
    def member_ofs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigMemberOfArgs']]]]):
        pulumi.set(self, "member_ofs", value)

    @_builtins.property
    @pulumi.getter
    def schematics(self) -> Optional[pulumi.Input['ProjectConfigSchematicsArgs']]:
        """
        A Schematics workspace that is associated to a project configuration, with scripts.
        """
        return pulumi.get(self, "schematics")

    @schematics.setter
    def schematics(self, value: Optional[pulumi.Input['ProjectConfigSchematicsArgs']]):
        pulumi.set(self, "schematics", value)


@pulumi.input_type
class _ProjectConfigState:
    def __init__(__self__, *,
                 approved_versions: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigApprovedVersionArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 definition: Optional[pulumi.Input['ProjectConfigDefinitionArgs']] = None,
                 deployed_versions: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigDeployedVersionArgs']]]] = None,
                 deployment_model: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_project_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_draft: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_saved_at: Optional[pulumi.Input[_builtins.str]] = None,
                 member_ofs: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigMemberOfArgs']]]] = None,
                 modified_at: Optional[pulumi.Input[_builtins.str]] = None,
                 needs_attention_states: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigNeedsAttentionStateArgs']]]] = None,
                 outputs: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigOutputArgs']]]] = None,
                 project_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigProjectArgs']]]] = None,
                 schematics: Optional[pulumi.Input['ProjectConfigSchematicsArgs']] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 state_code: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 update_available: Optional[pulumi.Input[_builtins.bool]] = None,
                 version: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering ProjectConfig resources.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectConfigApprovedVersionArgs']]] approved_versions: A summary of a project configuration version.
        :param pulumi.Input[_builtins.str] created_at: A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
               as specified by RFC 3339.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectConfigDeployedVersionArgs']]] deployed_versions: A summary of a project configuration version.
        :param pulumi.Input[_builtins.str] deployment_model: The configuration type.
        :param pulumi.Input[_builtins.str] href: A URL.
        :param pulumi.Input[_builtins.bool] is_draft: The flag that indicates whether the version of the configuration is draft, or active.
        :param pulumi.Input[_builtins.str] last_saved_at: A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
               as specified by RFC 3339.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectConfigMemberOfArgs']]] member_ofs: The stack config parent of which this configuration is a member of.
        :param pulumi.Input[_builtins.str] modified_at: A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
               as specified by RFC 3339.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectConfigNeedsAttentionStateArgs']]] needs_attention_states: The needs attention state of a configuration.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectConfigOutputArgs']]] outputs: The outputs of a Schematics template property.
        :param pulumi.Input[_builtins.str] project_config_id: The ID of the configuration. If this parameter is empty, an ID is automatically created for the configuration.
        :param pulumi.Input[_builtins.str] project_id: The unique project ID.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectConfigProjectArgs']]] projects: The project that is referenced by this resource.
        :param pulumi.Input['ProjectConfigSchematicsArgs'] schematics: A Schematics workspace that is associated to a project configuration, with scripts.
        :param pulumi.Input[_builtins.str] state: The state of the configuration.
        :param pulumi.Input[_builtins.str] state_code: Computed state code clarifying the prerequisites for validation for the configuration.
        :param pulumi.Input[_builtins.str] template_id: The stack definition identifier.
        :param pulumi.Input[_builtins.bool] update_available: The flag that indicates whether a configuration update is available.
        :param pulumi.Input[_builtins.float] version: The version of the configuration.
        """
        if approved_versions is not None:
            pulumi.set(__self__, "approved_versions", approved_versions)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)
        if deployed_versions is not None:
            pulumi.set(__self__, "deployed_versions", deployed_versions)
        if deployment_model is not None:
            pulumi.set(__self__, "deployment_model", deployment_model)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if ibm_project_config_id is not None:
            pulumi.set(__self__, "ibm_project_config_id", ibm_project_config_id)
        if is_draft is not None:
            pulumi.set(__self__, "is_draft", is_draft)
        if last_saved_at is not None:
            pulumi.set(__self__, "last_saved_at", last_saved_at)
        if member_ofs is not None:
            pulumi.set(__self__, "member_ofs", member_ofs)
        if modified_at is not None:
            pulumi.set(__self__, "modified_at", modified_at)
        if needs_attention_states is not None:
            pulumi.set(__self__, "needs_attention_states", needs_attention_states)
        if outputs is not None:
            pulumi.set(__self__, "outputs", outputs)
        if project_config_id is not None:
            pulumi.set(__self__, "project_config_id", project_config_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)
        if schematics is not None:
            pulumi.set(__self__, "schematics", schematics)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_code is not None:
            pulumi.set(__self__, "state_code", state_code)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if update_available is not None:
            pulumi.set(__self__, "update_available", update_available)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="approvedVersions")
    def approved_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigApprovedVersionArgs']]]]:
        """
        A summary of a project configuration version.
        """
        return pulumi.get(self, "approved_versions")

    @approved_versions.setter
    def approved_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigApprovedVersionArgs']]]]):
        pulumi.set(self, "approved_versions", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
        as specified by RFC 3339.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input['ProjectConfigDefinitionArgs']]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input['ProjectConfigDefinitionArgs']]):
        pulumi.set(self, "definition", value)

    @_builtins.property
    @pulumi.getter(name="deployedVersions")
    def deployed_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigDeployedVersionArgs']]]]:
        """
        A summary of a project configuration version.
        """
        return pulumi.get(self, "deployed_versions")

    @deployed_versions.setter
    def deployed_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigDeployedVersionArgs']]]]):
        pulumi.set(self, "deployed_versions", value)

    @_builtins.property
    @pulumi.getter(name="deploymentModel")
    def deployment_model(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The configuration type.
        """
        return pulumi.get(self, "deployment_model")

    @deployment_model.setter
    def deployment_model(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deployment_model", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A URL.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="ibmProjectConfigId")
    def ibm_project_config_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ibm_project_config_id")

    @ibm_project_config_id.setter
    def ibm_project_config_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_project_config_id", value)

    @_builtins.property
    @pulumi.getter(name="isDraft")
    def is_draft(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The flag that indicates whether the version of the configuration is draft, or active.
        """
        return pulumi.get(self, "is_draft")

    @is_draft.setter
    def is_draft(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_draft", value)

    @_builtins.property
    @pulumi.getter(name="lastSavedAt")
    def last_saved_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
        as specified by RFC 3339.
        """
        return pulumi.get(self, "last_saved_at")

    @last_saved_at.setter
    def last_saved_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_saved_at", value)

    @_builtins.property
    @pulumi.getter(name="memberOfs")
    def member_ofs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigMemberOfArgs']]]]:
        """
        The stack config parent of which this configuration is a member of.
        """
        return pulumi.get(self, "member_ofs")

    @member_ofs.setter
    def member_ofs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigMemberOfArgs']]]]):
        pulumi.set(self, "member_ofs", value)

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
        as specified by RFC 3339.
        """
        return pulumi.get(self, "modified_at")

    @modified_at.setter
    def modified_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_at", value)

    @_builtins.property
    @pulumi.getter(name="needsAttentionStates")
    def needs_attention_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigNeedsAttentionStateArgs']]]]:
        """
        The needs attention state of a configuration.
        """
        return pulumi.get(self, "needs_attention_states")

    @needs_attention_states.setter
    def needs_attention_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigNeedsAttentionStateArgs']]]]):
        pulumi.set(self, "needs_attention_states", value)

    @_builtins.property
    @pulumi.getter
    def outputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigOutputArgs']]]]:
        """
        The outputs of a Schematics template property.
        """
        return pulumi.get(self, "outputs")

    @outputs.setter
    def outputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigOutputArgs']]]]):
        pulumi.set(self, "outputs", value)

    @_builtins.property
    @pulumi.getter(name="projectConfigId")
    def project_config_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the configuration. If this parameter is empty, an ID is automatically created for the configuration.
        """
        return pulumi.get(self, "project_config_id")

    @project_config_id.setter
    def project_config_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_config_id", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def projects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigProjectArgs']]]]:
        """
        The project that is referenced by this resource.
        """
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigProjectArgs']]]]):
        pulumi.set(self, "projects", value)

    @_builtins.property
    @pulumi.getter
    def schematics(self) -> Optional[pulumi.Input['ProjectConfigSchematicsArgs']]:
        """
        A Schematics workspace that is associated to a project configuration, with scripts.
        """
        return pulumi.get(self, "schematics")

    @schematics.setter
    def schematics(self, value: Optional[pulumi.Input['ProjectConfigSchematicsArgs']]):
        pulumi.set(self, "schematics", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the configuration.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter(name="stateCode")
    def state_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Computed state code clarifying the prerequisites for validation for the configuration.
        """
        return pulumi.get(self, "state_code")

    @state_code.setter
    def state_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state_code", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The stack definition identifier.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter(name="updateAvailable")
    def update_available(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The flag that indicates whether a configuration update is available.
        """
        return pulumi.get(self, "update_available")

    @update_available.setter
    def update_available(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "update_available", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The version of the configuration.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/projectConfig:ProjectConfig")
class ProjectConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approved_versions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigApprovedVersionArgs', 'ProjectConfigApprovedVersionArgsDict']]]]] = None,
                 definition: Optional[pulumi.Input[Union['ProjectConfigDefinitionArgs', 'ProjectConfigDefinitionArgsDict']]] = None,
                 deployed_versions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigDeployedVersionArgs', 'ProjectConfigDeployedVersionArgsDict']]]]] = None,
                 ibm_project_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 member_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigMemberOfArgs', 'ProjectConfigMemberOfArgsDict']]]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schematics: Optional[pulumi.Input[Union['ProjectConfigSchematicsArgs', 'ProjectConfigSchematicsArgsDict']]] = None,
                 __props__=None):
        """
        Create a ProjectConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigApprovedVersionArgs', 'ProjectConfigApprovedVersionArgsDict']]]] approved_versions: A summary of a project configuration version.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigDeployedVersionArgs', 'ProjectConfigDeployedVersionArgsDict']]]] deployed_versions: A summary of a project configuration version.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigMemberOfArgs', 'ProjectConfigMemberOfArgsDict']]]] member_ofs: The stack config parent of which this configuration is a member of.
        :param pulumi.Input[_builtins.str] project_id: The unique project ID.
        :param pulumi.Input[Union['ProjectConfigSchematicsArgs', 'ProjectConfigSchematicsArgsDict']] schematics: A Schematics workspace that is associated to a project configuration, with scripts.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectConfigInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ProjectConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProjectConfigInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectConfigInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approved_versions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigApprovedVersionArgs', 'ProjectConfigApprovedVersionArgsDict']]]]] = None,
                 definition: Optional[pulumi.Input[Union['ProjectConfigDefinitionArgs', 'ProjectConfigDefinitionArgsDict']]] = None,
                 deployed_versions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigDeployedVersionArgs', 'ProjectConfigDeployedVersionArgsDict']]]]] = None,
                 ibm_project_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 member_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigMemberOfArgs', 'ProjectConfigMemberOfArgsDict']]]]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schematics: Optional[pulumi.Input[Union['ProjectConfigSchematicsArgs', 'ProjectConfigSchematicsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectConfigInitArgs.__new__(ProjectConfigInitArgs)

            __props__.__dict__["approved_versions"] = approved_versions
            if definition is None and not opts.urn:
                raise TypeError("Missing required property 'definition'")
            __props__.__dict__["definition"] = definition
            __props__.__dict__["deployed_versions"] = deployed_versions
            __props__.__dict__["ibm_project_config_id"] = ibm_project_config_id
            __props__.__dict__["member_ofs"] = member_ofs
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["schematics"] = schematics
            __props__.__dict__["created_at"] = None
            __props__.__dict__["deployment_model"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["is_draft"] = None
            __props__.__dict__["last_saved_at"] = None
            __props__.__dict__["modified_at"] = None
            __props__.__dict__["needs_attention_states"] = None
            __props__.__dict__["outputs"] = None
            __props__.__dict__["project_config_id"] = None
            __props__.__dict__["projects"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["state_code"] = None
            __props__.__dict__["template_id"] = None
            __props__.__dict__["update_available"] = None
            __props__.__dict__["version"] = None
        super(ProjectConfig, __self__).__init__(
            'ibm:index/projectConfig:ProjectConfig',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            approved_versions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigApprovedVersionArgs', 'ProjectConfigApprovedVersionArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            definition: Optional[pulumi.Input[Union['ProjectConfigDefinitionArgs', 'ProjectConfigDefinitionArgsDict']]] = None,
            deployed_versions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigDeployedVersionArgs', 'ProjectConfigDeployedVersionArgsDict']]]]] = None,
            deployment_model: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            ibm_project_config_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_draft: Optional[pulumi.Input[_builtins.bool]] = None,
            last_saved_at: Optional[pulumi.Input[_builtins.str]] = None,
            member_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigMemberOfArgs', 'ProjectConfigMemberOfArgsDict']]]]] = None,
            modified_at: Optional[pulumi.Input[_builtins.str]] = None,
            needs_attention_states: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigNeedsAttentionStateArgs', 'ProjectConfigNeedsAttentionStateArgsDict']]]]] = None,
            outputs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigOutputArgs', 'ProjectConfigOutputArgsDict']]]]] = None,
            project_config_id: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            projects: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigProjectArgs', 'ProjectConfigProjectArgsDict']]]]] = None,
            schematics: Optional[pulumi.Input[Union['ProjectConfigSchematicsArgs', 'ProjectConfigSchematicsArgsDict']]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            state_code: Optional[pulumi.Input[_builtins.str]] = None,
            template_id: Optional[pulumi.Input[_builtins.str]] = None,
            update_available: Optional[pulumi.Input[_builtins.bool]] = None,
            version: Optional[pulumi.Input[_builtins.float]] = None) -> 'ProjectConfig':
        """
        Get an existing ProjectConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigApprovedVersionArgs', 'ProjectConfigApprovedVersionArgsDict']]]] approved_versions: A summary of a project configuration version.
        :param pulumi.Input[_builtins.str] created_at: A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
               as specified by RFC 3339.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigDeployedVersionArgs', 'ProjectConfigDeployedVersionArgsDict']]]] deployed_versions: A summary of a project configuration version.
        :param pulumi.Input[_builtins.str] deployment_model: The configuration type.
        :param pulumi.Input[_builtins.str] href: A URL.
        :param pulumi.Input[_builtins.bool] is_draft: The flag that indicates whether the version of the configuration is draft, or active.
        :param pulumi.Input[_builtins.str] last_saved_at: A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
               as specified by RFC 3339.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigMemberOfArgs', 'ProjectConfigMemberOfArgsDict']]]] member_ofs: The stack config parent of which this configuration is a member of.
        :param pulumi.Input[_builtins.str] modified_at: A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
               as specified by RFC 3339.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigNeedsAttentionStateArgs', 'ProjectConfigNeedsAttentionStateArgsDict']]]] needs_attention_states: The needs attention state of a configuration.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigOutputArgs', 'ProjectConfigOutputArgsDict']]]] outputs: The outputs of a Schematics template property.
        :param pulumi.Input[_builtins.str] project_config_id: The ID of the configuration. If this parameter is empty, an ID is automatically created for the configuration.
        :param pulumi.Input[_builtins.str] project_id: The unique project ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigProjectArgs', 'ProjectConfigProjectArgsDict']]]] projects: The project that is referenced by this resource.
        :param pulumi.Input[Union['ProjectConfigSchematicsArgs', 'ProjectConfigSchematicsArgsDict']] schematics: A Schematics workspace that is associated to a project configuration, with scripts.
        :param pulumi.Input[_builtins.str] state: The state of the configuration.
        :param pulumi.Input[_builtins.str] state_code: Computed state code clarifying the prerequisites for validation for the configuration.
        :param pulumi.Input[_builtins.str] template_id: The stack definition identifier.
        :param pulumi.Input[_builtins.bool] update_available: The flag that indicates whether a configuration update is available.
        :param pulumi.Input[_builtins.float] version: The version of the configuration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectConfigState.__new__(_ProjectConfigState)

        __props__.__dict__["approved_versions"] = approved_versions
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["definition"] = definition
        __props__.__dict__["deployed_versions"] = deployed_versions
        __props__.__dict__["deployment_model"] = deployment_model
        __props__.__dict__["href"] = href
        __props__.__dict__["ibm_project_config_id"] = ibm_project_config_id
        __props__.__dict__["is_draft"] = is_draft
        __props__.__dict__["last_saved_at"] = last_saved_at
        __props__.__dict__["member_ofs"] = member_ofs
        __props__.__dict__["modified_at"] = modified_at
        __props__.__dict__["needs_attention_states"] = needs_attention_states
        __props__.__dict__["outputs"] = outputs
        __props__.__dict__["project_config_id"] = project_config_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["projects"] = projects
        __props__.__dict__["schematics"] = schematics
        __props__.__dict__["state"] = state
        __props__.__dict__["state_code"] = state_code
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["update_available"] = update_available
        __props__.__dict__["version"] = version
        return ProjectConfig(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="approvedVersions")
    def approved_versions(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectConfigApprovedVersion']]]:
        """
        A summary of a project configuration version.
        """
        return pulumi.get(self, "approved_versions")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
        as specified by RFC 3339.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def definition(self) -> pulumi.Output['outputs.ProjectConfigDefinition']:
        return pulumi.get(self, "definition")

    @_builtins.property
    @pulumi.getter(name="deployedVersions")
    def deployed_versions(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectConfigDeployedVersion']]]:
        """
        A summary of a project configuration version.
        """
        return pulumi.get(self, "deployed_versions")

    @_builtins.property
    @pulumi.getter(name="deploymentModel")
    def deployment_model(self) -> pulumi.Output[_builtins.str]:
        """
        The configuration type.
        """
        return pulumi.get(self, "deployment_model")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        A URL.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="ibmProjectConfigId")
    def ibm_project_config_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ibm_project_config_id")

    @_builtins.property
    @pulumi.getter(name="isDraft")
    def is_draft(self) -> pulumi.Output[_builtins.bool]:
        """
        The flag that indicates whether the version of the configuration is draft, or active.
        """
        return pulumi.get(self, "is_draft")

    @_builtins.property
    @pulumi.getter(name="lastSavedAt")
    def last_saved_at(self) -> pulumi.Output[_builtins.str]:
        """
        A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
        as specified by RFC 3339.
        """
        return pulumi.get(self, "last_saved_at")

    @_builtins.property
    @pulumi.getter(name="memberOfs")
    def member_ofs(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectConfigMemberOf']]]:
        """
        The stack config parent of which this configuration is a member of.
        """
        return pulumi.get(self, "member_ofs")

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> pulumi.Output[_builtins.str]:
        """
        A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
        as specified by RFC 3339.
        """
        return pulumi.get(self, "modified_at")

    @_builtins.property
    @pulumi.getter(name="needsAttentionStates")
    def needs_attention_states(self) -> pulumi.Output[Sequence['outputs.ProjectConfigNeedsAttentionState']]:
        """
        The needs attention state of a configuration.
        """
        return pulumi.get(self, "needs_attention_states")

    @_builtins.property
    @pulumi.getter
    def outputs(self) -> pulumi.Output[Sequence['outputs.ProjectConfigOutput']]:
        """
        The outputs of a Schematics template property.
        """
        return pulumi.get(self, "outputs")

    @_builtins.property
    @pulumi.getter(name="projectConfigId")
    def project_config_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the configuration. If this parameter is empty, an ID is automatically created for the configuration.
        """
        return pulumi.get(self, "project_config_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def projects(self) -> pulumi.Output[Sequence['outputs.ProjectConfigProject']]:
        """
        The project that is referenced by this resource.
        """
        return pulumi.get(self, "projects")

    @_builtins.property
    @pulumi.getter
    def schematics(self) -> pulumi.Output[Optional['outputs.ProjectConfigSchematics']]:
        """
        A Schematics workspace that is associated to a project configuration, with scripts.
        """
        return pulumi.get(self, "schematics")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The state of the configuration.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateCode")
    def state_code(self) -> pulumi.Output[_builtins.str]:
        """
        Computed state code clarifying the prerequisites for validation for the configuration.
        """
        return pulumi.get(self, "state_code")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[_builtins.str]:
        """
        The stack definition identifier.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="updateAvailable")
    def update_available(self) -> pulumi.Output[_builtins.bool]:
        """
        The flag that indicates whether a configuration update is available.
        """
        return pulumi.get(self, "update_available")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.float]:
        """
        The version of the configuration.
        """
        return pulumi.get(self, "version")

