# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsLbPoolMemberResult',
    'AwaitableGetIsLbPoolMemberResult',
    'get_is_lb_pool_member',
    'get_is_lb_pool_member_output',
]

@pulumi.output_type
class GetIsLbPoolMemberResult:
    """
    A collection of values returned by getIsLbPoolMember.
    """
    def __init__(__self__, created_at=None, health=None, href=None, id=None, lb=None, member=None, pool=None, port=None, provisioning_status=None, targets=None, weight=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if health and not isinstance(health, str):
            raise TypeError("Expected argument 'health' to be a str")
        pulumi.set(__self__, "health", health)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lb and not isinstance(lb, str):
            raise TypeError("Expected argument 'lb' to be a str")
        pulumi.set(__self__, "lb", lb)
        if member and not isinstance(member, str):
            raise TypeError("Expected argument 'member' to be a str")
        pulumi.set(__self__, "member", member)
        if pool and not isinstance(pool, str):
            raise TypeError("Expected argument 'pool' to be a str")
        pulumi.set(__self__, "pool", pool)
        if port and not isinstance(port, float):
            raise TypeError("Expected argument 'port' to be a float")
        pulumi.set(__self__, "port", port)
        if provisioning_status and not isinstance(provisioning_status, str):
            raise TypeError("Expected argument 'provisioning_status' to be a str")
        pulumi.set(__self__, "provisioning_status", provisioning_status)
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        pulumi.set(__self__, "targets", targets)
        if weight and not isinstance(weight, float):
            raise TypeError("Expected argument 'weight' to be a float")
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def health(self) -> _builtins.str:
        return pulumi.get(self, "health")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lb(self) -> _builtins.str:
        return pulumi.get(self, "lb")

    @_builtins.property
    @pulumi.getter
    def member(self) -> _builtins.str:
        return pulumi.get(self, "member")

    @_builtins.property
    @pulumi.getter
    def pool(self) -> _builtins.str:
        return pulumi.get(self, "pool")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> _builtins.str:
        return pulumi.get(self, "provisioning_status")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetIsLbPoolMemberTargetResult']:
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.float:
        return pulumi.get(self, "weight")


class AwaitableGetIsLbPoolMemberResult(GetIsLbPoolMemberResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsLbPoolMemberResult(
            created_at=self.created_at,
            health=self.health,
            href=self.href,
            id=self.id,
            lb=self.lb,
            member=self.member,
            pool=self.pool,
            port=self.port,
            provisioning_status=self.provisioning_status,
            targets=self.targets,
            weight=self.weight)


def get_is_lb_pool_member(id: Optional[_builtins.str] = None,
                          lb: Optional[_builtins.str] = None,
                          member: Optional[_builtins.str] = None,
                          pool: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsLbPoolMemberResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    __args__['member'] = member
    __args__['pool'] = pool
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsLbPoolMember:getIsLbPoolMember', __args__, opts=opts, typ=GetIsLbPoolMemberResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsLbPoolMemberResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        health=pulumi.get(__ret__, 'health'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        lb=pulumi.get(__ret__, 'lb'),
        member=pulumi.get(__ret__, 'member'),
        pool=pulumi.get(__ret__, 'pool'),
        port=pulumi.get(__ret__, 'port'),
        provisioning_status=pulumi.get(__ret__, 'provisioning_status'),
        targets=pulumi.get(__ret__, 'targets'),
        weight=pulumi.get(__ret__, 'weight'))
def get_is_lb_pool_member_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                                 member: Optional[pulumi.Input[_builtins.str]] = None,
                                 pool: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsLbPoolMemberResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    __args__['member'] = member
    __args__['pool'] = pool
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsLbPoolMember:getIsLbPoolMember', __args__, opts=opts, typ=GetIsLbPoolMemberResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsLbPoolMemberResult(
        created_at=pulumi.get(__response__, 'created_at'),
        health=pulumi.get(__response__, 'health'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        lb=pulumi.get(__response__, 'lb'),
        member=pulumi.get(__response__, 'member'),
        pool=pulumi.get(__response__, 'pool'),
        port=pulumi.get(__response__, 'port'),
        provisioning_status=pulumi.get(__response__, 'provisioning_status'),
        targets=pulumi.get(__response__, 'targets'),
        weight=pulumi.get(__response__, 'weight')))
