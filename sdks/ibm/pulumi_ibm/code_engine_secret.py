# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CodeEngineSecretArgs', 'CodeEngineSecret']

@pulumi.input_type
class CodeEngineSecretArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 code_engine_secret_id: Optional[pulumi.Input[_builtins.str]] = None,
                 data: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_access: Optional[pulumi.Input['CodeEngineSecretServiceAccessArgs']] = None,
                 service_operator: Optional[pulumi.Input['CodeEngineSecretServiceOperatorArgs']] = None):
        """
        The set of arguments for constructing a CodeEngineSecret resource.
        :param pulumi.Input[_builtins.str] format: Specify the format of the secret.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] data: Data container that allows to specify config parameters and their values as a key-value map. Each key field must consist
               of alphanumeric characters, `-`, `_` or `.` and must not exceed a max length of 253 characters. Each value field can
               consists of any character and must not exceed a max length of 1048576 characters.
        :param pulumi.Input[_builtins.str] name: The name of the secret.
        :param pulumi.Input['CodeEngineSecretServiceAccessArgs'] service_access: Properties for Service Access Secrets.
        :param pulumi.Input['CodeEngineSecretServiceOperatorArgs'] service_operator: Properties for the IBM Cloud Operator Secret.
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "project_id", project_id)
        if code_engine_secret_id is not None:
            pulumi.set(__self__, "code_engine_secret_id", code_engine_secret_id)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_access is not None:
            pulumi.set(__self__, "service_access", service_access)
        if service_operator is not None:
            pulumi.set(__self__, "service_operator", service_operator)

    @_builtins.property
    @pulumi.getter
    def format(self) -> pulumi.Input[_builtins.str]:
        """
        Specify the format of the secret.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "format", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineSecretId")
    def code_engine_secret_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_secret_id")

    @code_engine_secret_id.setter
    def code_engine_secret_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_secret_id", value)

    @_builtins.property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Data container that allows to specify config parameters and their values as a key-value map. Each key field must consist
        of alphanumeric characters, `-`, `_` or `.` and must not exceed a max length of 253 characters. Each value field can
        consists of any character and must not exceed a max length of 1048576 characters.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "data", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccess")
    def service_access(self) -> Optional[pulumi.Input['CodeEngineSecretServiceAccessArgs']]:
        """
        Properties for Service Access Secrets.
        """
        return pulumi.get(self, "service_access")

    @service_access.setter
    def service_access(self, value: Optional[pulumi.Input['CodeEngineSecretServiceAccessArgs']]):
        pulumi.set(self, "service_access", value)

    @_builtins.property
    @pulumi.getter(name="serviceOperator")
    def service_operator(self) -> Optional[pulumi.Input['CodeEngineSecretServiceOperatorArgs']]:
        """
        Properties for the IBM Cloud Operator Secret.
        """
        return pulumi.get(self, "service_operator")

    @service_operator.setter
    def service_operator(self, value: Optional[pulumi.Input['CodeEngineSecretServiceOperatorArgs']]):
        pulumi.set(self, "service_operator", value)


@pulumi.input_type
class _CodeEngineSecretState:
    def __init__(__self__, *,
                 code_engine_secret_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 data: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_access: Optional[pulumi.Input['CodeEngineSecretServiceAccessArgs']] = None,
                 service_operator: Optional[pulumi.Input['CodeEngineSecretServiceOperatorArgs']] = None):
        """
        Input properties used for looking up and filtering CodeEngineSecret resources.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the resource was created.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] data: Data container that allows to specify config parameters and their values as a key-value map. Each key field must consist
               of alphanumeric characters, `-`, `_` or `.` and must not exceed a max length of 253 characters. Each value field can
               consists of any character and must not exceed a max length of 1048576 characters.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the secret instance, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] format: Specify the format of the secret.
        :param pulumi.Input[_builtins.str] href: When you provision a new secret, a URL is created identifying the location of the instance.
        :param pulumi.Input[_builtins.str] name: The name of the secret.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] region: The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
               'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        :param pulumi.Input[_builtins.str] resource_type: The type of the secret.
        :param pulumi.Input[_builtins.str] secret_id: The identifier of the resource.
        :param pulumi.Input['CodeEngineSecretServiceAccessArgs'] service_access: Properties for Service Access Secrets.
        :param pulumi.Input['CodeEngineSecretServiceOperatorArgs'] service_operator: Properties for the IBM Cloud Operator Secret.
        """
        if code_engine_secret_id is not None:
            pulumi.set(__self__, "code_engine_secret_id", code_engine_secret_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if service_access is not None:
            pulumi.set(__self__, "service_access", service_access)
        if service_operator is not None:
            pulumi.set(__self__, "service_operator", service_operator)

    @_builtins.property
    @pulumi.getter(name="codeEngineSecretId")
    def code_engine_secret_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_secret_id")

    @code_engine_secret_id.setter
    def code_engine_secret_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_secret_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Data container that allows to specify config parameters and their values as a key-value map. Each key field must consist
        of alphanumeric characters, `-`, `_` or `.` and must not exceed a max length of 253 characters. Each value field can
        consists of any character and must not exceed a max length of 1048576 characters.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "data", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the secret instance, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the format of the secret.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When you provision a new secret, a URL is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
        'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the secret.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "secret_id")

    @secret_id.setter
    def secret_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccess")
    def service_access(self) -> Optional[pulumi.Input['CodeEngineSecretServiceAccessArgs']]:
        """
        Properties for Service Access Secrets.
        """
        return pulumi.get(self, "service_access")

    @service_access.setter
    def service_access(self, value: Optional[pulumi.Input['CodeEngineSecretServiceAccessArgs']]):
        pulumi.set(self, "service_access", value)

    @_builtins.property
    @pulumi.getter(name="serviceOperator")
    def service_operator(self) -> Optional[pulumi.Input['CodeEngineSecretServiceOperatorArgs']]:
        """
        Properties for the IBM Cloud Operator Secret.
        """
        return pulumi.get(self, "service_operator")

    @service_operator.setter
    def service_operator(self, value: Optional[pulumi.Input['CodeEngineSecretServiceOperatorArgs']]):
        pulumi.set(self, "service_operator", value)


@pulumi.type_token("ibm:index/codeEngineSecret:CodeEngineSecret")
class CodeEngineSecret(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_engine_secret_id: Optional[pulumi.Input[_builtins.str]] = None,
                 data: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_access: Optional[pulumi.Input[Union['CodeEngineSecretServiceAccessArgs', 'CodeEngineSecretServiceAccessArgsDict']]] = None,
                 service_operator: Optional[pulumi.Input[Union['CodeEngineSecretServiceOperatorArgs', 'CodeEngineSecretServiceOperatorArgsDict']]] = None,
                 __props__=None):
        """
        Create a CodeEngineSecret resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] data: Data container that allows to specify config parameters and their values as a key-value map. Each key field must consist
               of alphanumeric characters, `-`, `_` or `.` and must not exceed a max length of 253 characters. Each value field can
               consists of any character and must not exceed a max length of 1048576 characters.
        :param pulumi.Input[_builtins.str] format: Specify the format of the secret.
        :param pulumi.Input[_builtins.str] name: The name of the secret.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[Union['CodeEngineSecretServiceAccessArgs', 'CodeEngineSecretServiceAccessArgsDict']] service_access: Properties for Service Access Secrets.
        :param pulumi.Input[Union['CodeEngineSecretServiceOperatorArgs', 'CodeEngineSecretServiceOperatorArgsDict']] service_operator: Properties for the IBM Cloud Operator Secret.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CodeEngineSecretArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CodeEngineSecret resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CodeEngineSecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CodeEngineSecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_engine_secret_id: Optional[pulumi.Input[_builtins.str]] = None,
                 data: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_access: Optional[pulumi.Input[Union['CodeEngineSecretServiceAccessArgs', 'CodeEngineSecretServiceAccessArgsDict']]] = None,
                 service_operator: Optional[pulumi.Input[Union['CodeEngineSecretServiceOperatorArgs', 'CodeEngineSecretServiceOperatorArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CodeEngineSecretArgs.__new__(CodeEngineSecretArgs)

            __props__.__dict__["code_engine_secret_id"] = code_engine_secret_id
            __props__.__dict__["data"] = data
            if format is None and not opts.urn:
                raise TypeError("Missing required property 'format'")
            __props__.__dict__["format"] = format
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["service_access"] = service_access
            __props__.__dict__["service_operator"] = service_operator
            __props__.__dict__["created_at"] = None
            __props__.__dict__["entity_tag"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["region"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["secret_id"] = None
        super(CodeEngineSecret, __self__).__init__(
            'ibm:index/codeEngineSecret:CodeEngineSecret',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            code_engine_secret_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            data: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            format: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            secret_id: Optional[pulumi.Input[_builtins.str]] = None,
            service_access: Optional[pulumi.Input[Union['CodeEngineSecretServiceAccessArgs', 'CodeEngineSecretServiceAccessArgsDict']]] = None,
            service_operator: Optional[pulumi.Input[Union['CodeEngineSecretServiceOperatorArgs', 'CodeEngineSecretServiceOperatorArgsDict']]] = None) -> 'CodeEngineSecret':
        """
        Get an existing CodeEngineSecret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the resource was created.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] data: Data container that allows to specify config parameters and their values as a key-value map. Each key field must consist
               of alphanumeric characters, `-`, `_` or `.` and must not exceed a max length of 253 characters. Each value field can
               consists of any character and must not exceed a max length of 1048576 characters.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the secret instance, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] format: Specify the format of the secret.
        :param pulumi.Input[_builtins.str] href: When you provision a new secret, a URL is created identifying the location of the instance.
        :param pulumi.Input[_builtins.str] name: The name of the secret.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] region: The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
               'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        :param pulumi.Input[_builtins.str] resource_type: The type of the secret.
        :param pulumi.Input[_builtins.str] secret_id: The identifier of the resource.
        :param pulumi.Input[Union['CodeEngineSecretServiceAccessArgs', 'CodeEngineSecretServiceAccessArgsDict']] service_access: Properties for Service Access Secrets.
        :param pulumi.Input[Union['CodeEngineSecretServiceOperatorArgs', 'CodeEngineSecretServiceOperatorArgsDict']] service_operator: Properties for the IBM Cloud Operator Secret.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CodeEngineSecretState.__new__(_CodeEngineSecretState)

        __props__.__dict__["code_engine_secret_id"] = code_engine_secret_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["data"] = data
        __props__.__dict__["entity_tag"] = entity_tag
        __props__.__dict__["etag"] = etag
        __props__.__dict__["format"] = format
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["secret_id"] = secret_id
        __props__.__dict__["service_access"] = service_access
        __props__.__dict__["service_operator"] = service_operator
        return CodeEngineSecret(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="codeEngineSecretId")
    def code_engine_secret_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "code_engine_secret_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def data(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Data container that allows to specify config parameters and their values as a key-value map. Each key field must consist
        of alphanumeric characters, `-`, `_` or `.` and must not exceed a max length of 253 characters. Each value field can
        consists of any character and must not exceed a max length of 1048576 characters.
        """
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> pulumi.Output[_builtins.str]:
        """
        The version of the secret instance, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def format(self) -> pulumi.Output[_builtins.str]:
        """
        Specify the format of the secret.
        """
        return pulumi.get(self, "format")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        When you provision a new secret, a URL is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the secret.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
        'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the secret.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> pulumi.Output[_builtins.str]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "secret_id")

    @_builtins.property
    @pulumi.getter(name="serviceAccess")
    def service_access(self) -> pulumi.Output[Optional['outputs.CodeEngineSecretServiceAccess']]:
        """
        Properties for Service Access Secrets.
        """
        return pulumi.get(self, "service_access")

    @_builtins.property
    @pulumi.getter(name="serviceOperator")
    def service_operator(self) -> pulumi.Output[Optional['outputs.CodeEngineSecretServiceOperator']]:
        """
        Properties for the IBM Cloud Operator Secret.
        """
        return pulumi.get(self, "service_operator")

