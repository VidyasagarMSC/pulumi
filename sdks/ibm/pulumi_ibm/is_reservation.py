# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsReservationArgs', 'IsReservation']

@pulumi.input_type
class IsReservationArgs:
    def __init__(__self__, *,
                 capacity: pulumi.Input['IsReservationCapacityArgs'],
                 committed_use: pulumi.Input['IsReservationCommittedUseArgs'],
                 profile: pulumi.Input['IsReservationProfileArgs'],
                 zone: pulumi.Input[_builtins.str],
                 affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input['IsReservationResourceGroupArgs']] = None):
        """
        The set of arguments for constructing a IsReservation resource.
        :param pulumi.Input['IsReservationCapacityArgs'] capacity: The capacity reservation configuration to use
        :param pulumi.Input['IsReservationCommittedUseArgs'] committed_use: The committed use configuration to use for this reservation
        :param pulumi.Input['IsReservationProfileArgs'] profile: The profile to use for this reservation.
        :param pulumi.Input[_builtins.str] zone: The globally unique name for this zone.
        :param pulumi.Input[_builtins.str] affinity_policy: The affinity policy to use for this reservation
        :param pulumi.Input[_builtins.str] name: Reservation name
        :param pulumi.Input['IsReservationResourceGroupArgs'] resource_group: The committed use configuration to use for this reservation
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "committed_use", committed_use)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "zone", zone)
        if affinity_policy is not None:
            pulumi.set(__self__, "affinity_policy", affinity_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Input['IsReservationCapacityArgs']:
        """
        The capacity reservation configuration to use
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input['IsReservationCapacityArgs']):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter(name="committedUse")
    def committed_use(self) -> pulumi.Input['IsReservationCommittedUseArgs']:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "committed_use")

    @committed_use.setter
    def committed_use(self, value: pulumi.Input['IsReservationCommittedUseArgs']):
        pulumi.set(self, "committed_use", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Input['IsReservationProfileArgs']:
        """
        The profile to use for this reservation.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: pulumi.Input['IsReservationProfileArgs']):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        The globally unique name for this zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter(name="affinityPolicy")
    def affinity_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The affinity policy to use for this reservation
        """
        return pulumi.get(self, "affinity_policy")

    @affinity_policy.setter
    def affinity_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "affinity_policy", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reservation name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input['IsReservationResourceGroupArgs']]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input['IsReservationResourceGroupArgs']]):
        pulumi.set(self, "resource_group", value)


@pulumi.input_type
class _IsReservationState:
    def __init__(__self__, *,
                 affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 capacity: Optional[pulumi.Input['IsReservationCapacityArgs']] = None,
                 committed_use: Optional[pulumi.Input['IsReservationCommittedUseArgs']] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input['IsReservationProfileArgs']] = None,
                 resource_group: Optional[pulumi.Input['IsReservationResourceGroupArgs']] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationStatusReasonArgs']]]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsReservation resources.
        :param pulumi.Input[_builtins.str] affinity_policy: The affinity policy to use for this reservation
        :param pulumi.Input['IsReservationCapacityArgs'] capacity: The capacity reservation configuration to use
        :param pulumi.Input['IsReservationCommittedUseArgs'] committed_use: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] created_at: The date and time that the reservation was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this reservation.
        :param pulumi.Input[_builtins.str] href: The URL for this reservation.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of this reservation.
        :param pulumi.Input[_builtins.str] name: Reservation name
        :param pulumi.Input['IsReservationProfileArgs'] profile: The profile to use for this reservation.
        :param pulumi.Input['IsReservationResourceGroupArgs'] resource_group: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] status: The status of the reservation.
        :param pulumi.Input[Sequence[pulumi.Input['IsReservationStatusReasonArgs']]] status_reasons: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] zone: The globally unique name for this zone.
        """
        if affinity_policy is not None:
            pulumi.set(__self__, "affinity_policy", affinity_policy)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if committed_use is not None:
            pulumi.set(__self__, "committed_use", committed_use)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="affinityPolicy")
    def affinity_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The affinity policy to use for this reservation
        """
        return pulumi.get(self, "affinity_policy")

    @affinity_policy.setter
    def affinity_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "affinity_policy", value)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input['IsReservationCapacityArgs']]:
        """
        The capacity reservation configuration to use
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input['IsReservationCapacityArgs']]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter(name="committedUse")
    def committed_use(self) -> Optional[pulumi.Input['IsReservationCommittedUseArgs']]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "committed_use")

    @committed_use.setter
    def committed_use(self, value: Optional[pulumi.Input['IsReservationCommittedUseArgs']]):
        pulumi.set(self, "committed_use", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the reservation was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this reservation.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this reservation.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of this reservation.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reservation name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input['IsReservationProfileArgs']]:
        """
        The profile to use for this reservation.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input['IsReservationProfileArgs']]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input['IsReservationResourceGroupArgs']]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input['IsReservationResourceGroupArgs']]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the reservation.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationStatusReasonArgs']]]]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique name for this zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isReservation:IsReservation")
class IsReservation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 capacity: Optional[pulumi.Input[Union['IsReservationCapacityArgs', 'IsReservationCapacityArgsDict']]] = None,
                 committed_use: Optional[pulumi.Input[Union['IsReservationCommittedUseArgs', 'IsReservationCommittedUseArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[Union['IsReservationProfileArgs', 'IsReservationProfileArgsDict']]] = None,
                 resource_group: Optional[pulumi.Input[Union['IsReservationResourceGroupArgs', 'IsReservationResourceGroupArgsDict']]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsReservation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] affinity_policy: The affinity policy to use for this reservation
        :param pulumi.Input[Union['IsReservationCapacityArgs', 'IsReservationCapacityArgsDict']] capacity: The capacity reservation configuration to use
        :param pulumi.Input[Union['IsReservationCommittedUseArgs', 'IsReservationCommittedUseArgsDict']] committed_use: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] name: Reservation name
        :param pulumi.Input[Union['IsReservationProfileArgs', 'IsReservationProfileArgsDict']] profile: The profile to use for this reservation.
        :param pulumi.Input[Union['IsReservationResourceGroupArgs', 'IsReservationResourceGroupArgsDict']] resource_group: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] zone: The globally unique name for this zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsReservationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsReservation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsReservationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsReservationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 capacity: Optional[pulumi.Input[Union['IsReservationCapacityArgs', 'IsReservationCapacityArgsDict']]] = None,
                 committed_use: Optional[pulumi.Input[Union['IsReservationCommittedUseArgs', 'IsReservationCommittedUseArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[Union['IsReservationProfileArgs', 'IsReservationProfileArgsDict']]] = None,
                 resource_group: Optional[pulumi.Input[Union['IsReservationResourceGroupArgs', 'IsReservationResourceGroupArgsDict']]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsReservationArgs.__new__(IsReservationArgs)

            __props__.__dict__["affinity_policy"] = affinity_policy
            if capacity is None and not opts.urn:
                raise TypeError("Missing required property 'capacity'")
            __props__.__dict__["capacity"] = capacity
            if committed_use is None and not opts.urn:
                raise TypeError("Missing required property 'committed_use'")
            __props__.__dict__["committed_use"] = committed_use
            __props__.__dict__["name"] = name
            if profile is None and not opts.urn:
                raise TypeError("Missing required property 'profile'")
            __props__.__dict__["profile"] = profile
            __props__.__dict__["resource_group"] = resource_group
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
        super(IsReservation, __self__).__init__(
            'ibm:index/isReservation:IsReservation',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
            capacity: Optional[pulumi.Input[Union['IsReservationCapacityArgs', 'IsReservationCapacityArgsDict']]] = None,
            committed_use: Optional[pulumi.Input[Union['IsReservationCommittedUseArgs', 'IsReservationCommittedUseArgsDict']]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            profile: Optional[pulumi.Input[Union['IsReservationProfileArgs', 'IsReservationProfileArgsDict']]] = None,
            resource_group: Optional[pulumi.Input[Union['IsReservationResourceGroupArgs', 'IsReservationResourceGroupArgsDict']]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsReservationStatusReasonArgs', 'IsReservationStatusReasonArgsDict']]]]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsReservation':
        """
        Get an existing IsReservation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] affinity_policy: The affinity policy to use for this reservation
        :param pulumi.Input[Union['IsReservationCapacityArgs', 'IsReservationCapacityArgsDict']] capacity: The capacity reservation configuration to use
        :param pulumi.Input[Union['IsReservationCommittedUseArgs', 'IsReservationCommittedUseArgsDict']] committed_use: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] created_at: The date and time that the reservation was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this reservation.
        :param pulumi.Input[_builtins.str] href: The URL for this reservation.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of this reservation.
        :param pulumi.Input[_builtins.str] name: Reservation name
        :param pulumi.Input[Union['IsReservationProfileArgs', 'IsReservationProfileArgsDict']] profile: The profile to use for this reservation.
        :param pulumi.Input[Union['IsReservationResourceGroupArgs', 'IsReservationResourceGroupArgsDict']] resource_group: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] status: The status of the reservation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsReservationStatusReasonArgs', 'IsReservationStatusReasonArgsDict']]]] status_reasons: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] zone: The globally unique name for this zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsReservationState.__new__(_IsReservationState)

        __props__.__dict__["affinity_policy"] = affinity_policy
        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["committed_use"] = committed_use
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["href"] = href
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["profile"] = profile
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["zone"] = zone
        return IsReservation(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="affinityPolicy")
    def affinity_policy(self) -> pulumi.Output[_builtins.str]:
        """
        The affinity policy to use for this reservation
        """
        return pulumi.get(self, "affinity_policy")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Output['outputs.IsReservationCapacity']:
        """
        The capacity reservation configuration to use
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter(name="committedUse")
    def committed_use(self) -> pulumi.Output['outputs.IsReservationCommittedUse']:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "committed_use")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the reservation was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this reservation.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this reservation.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of this reservation.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Reservation name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Output['outputs.IsReservationProfile']:
        """
        The profile to use for this reservation.
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[Optional['outputs.IsReservationResourceGroup']]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the reservation.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.IsReservationStatusReason']]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique name for this zone.
        """
        return pulumi.get(self, "zone")

