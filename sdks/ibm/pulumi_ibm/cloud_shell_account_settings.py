# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CloudShellAccountSettingsArgs', 'CloudShellAccountSettings']

@pulumi.input_type
class CloudShellAccountSettingsArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[_builtins.str],
                 default_enable_new_features: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_enable_new_regions: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsFeatureArgs']]]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsRegionArgs']]]] = None,
                 rev: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CloudShellAccountSettings resource.
        :param pulumi.Input[_builtins.str] account_id: The account ID in which the account settings belong to.
        :param pulumi.Input[_builtins.bool] default_enable_new_features: You can choose which Cloud Shell features are available in the account and whether any new features are enabled as they
               become available. The feature settings apply only to the enabled Cloud Shell locations.
        :param pulumi.Input[_builtins.bool] default_enable_new_regions: Set whether Cloud Shell is enabled in a specific location for the account. The location determines where user and
               session data are stored. By default, users are routed to the nearest available location.
        :param pulumi.Input[_builtins.bool] enabled: When enabled, Cloud Shell is available to all users in the account.
        :param pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsFeatureArgs']]] features: List of Cloud Shell features.
        :param pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsRegionArgs']]] regions: List of Cloud Shell region settings.
        :param pulumi.Input[_builtins.str] rev: Unique revision number for the settings object.
        """
        pulumi.set(__self__, "account_id", account_id)
        if default_enable_new_features is not None:
            pulumi.set(__self__, "default_enable_new_features", default_enable_new_features)
        if default_enable_new_regions is not None:
            pulumi.set(__self__, "default_enable_new_regions", default_enable_new_regions)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if rev is not None:
            pulumi.set(__self__, "rev", rev)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[_builtins.str]:
        """
        The account ID in which the account settings belong to.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="defaultEnableNewFeatures")
    def default_enable_new_features(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        You can choose which Cloud Shell features are available in the account and whether any new features are enabled as they
        become available. The feature settings apply only to the enabled Cloud Shell locations.
        """
        return pulumi.get(self, "default_enable_new_features")

    @default_enable_new_features.setter
    def default_enable_new_features(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_enable_new_features", value)

    @_builtins.property
    @pulumi.getter(name="defaultEnableNewRegions")
    def default_enable_new_regions(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set whether Cloud Shell is enabled in a specific location for the account. The location determines where user and
        session data are stored. By default, users are routed to the nearest available location.
        """
        return pulumi.get(self, "default_enable_new_regions")

    @default_enable_new_regions.setter
    def default_enable_new_regions(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_enable_new_regions", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        When enabled, Cloud Shell is available to all users in the account.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsFeatureArgs']]]]:
        """
        List of Cloud Shell features.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsFeatureArgs']]]]):
        pulumi.set(self, "features", value)

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsRegionArgs']]]]:
        """
        List of Cloud Shell region settings.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsRegionArgs']]]]):
        pulumi.set(self, "regions", value)

    @_builtins.property
    @pulumi.getter
    def rev(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique revision number for the settings object.
        """
        return pulumi.get(self, "rev")

    @rev.setter
    def rev(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rev", value)


@pulumi.input_type
class _CloudShellAccountSettingsState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.float]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 default_enable_new_features: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_enable_new_regions: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsFeatureArgs']]]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsRegionArgs']]]] = None,
                 rev: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.float]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CloudShellAccountSettings resources.
        :param pulumi.Input[_builtins.str] account_id: The account ID in which the account settings belong to.
        :param pulumi.Input[_builtins.float] created_at: Creation timestamp in Unix epoch time.
        :param pulumi.Input[_builtins.str] created_by: IAM ID of creator.
        :param pulumi.Input[_builtins.bool] default_enable_new_features: You can choose which Cloud Shell features are available in the account and whether any new features are enabled as they
               become available. The feature settings apply only to the enabled Cloud Shell locations.
        :param pulumi.Input[_builtins.bool] default_enable_new_regions: Set whether Cloud Shell is enabled in a specific location for the account. The location determines where user and
               session data are stored. By default, users are routed to the nearest available location.
        :param pulumi.Input[_builtins.bool] enabled: When enabled, Cloud Shell is available to all users in the account.
        :param pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsFeatureArgs']]] features: List of Cloud Shell features.
        :param pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsRegionArgs']]] regions: List of Cloud Shell region settings.
        :param pulumi.Input[_builtins.str] rev: Unique revision number for the settings object.
        :param pulumi.Input[_builtins.str] type: Type of api response object.
        :param pulumi.Input[_builtins.float] updated_at: Timestamp of last update in Unix epoch time.
        :param pulumi.Input[_builtins.str] updated_by: IAM ID of last updater.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if default_enable_new_features is not None:
            pulumi.set(__self__, "default_enable_new_features", default_enable_new_features)
        if default_enable_new_regions is not None:
            pulumi.set(__self__, "default_enable_new_regions", default_enable_new_regions)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if rev is not None:
            pulumi.set(__self__, "rev", rev)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account ID in which the account settings belong to.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Creation timestamp in Unix epoch time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IAM ID of creator.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="defaultEnableNewFeatures")
    def default_enable_new_features(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        You can choose which Cloud Shell features are available in the account and whether any new features are enabled as they
        become available. The feature settings apply only to the enabled Cloud Shell locations.
        """
        return pulumi.get(self, "default_enable_new_features")

    @default_enable_new_features.setter
    def default_enable_new_features(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_enable_new_features", value)

    @_builtins.property
    @pulumi.getter(name="defaultEnableNewRegions")
    def default_enable_new_regions(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set whether Cloud Shell is enabled in a specific location for the account. The location determines where user and
        session data are stored. By default, users are routed to the nearest available location.
        """
        return pulumi.get(self, "default_enable_new_regions")

    @default_enable_new_regions.setter
    def default_enable_new_regions(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_enable_new_regions", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        When enabled, Cloud Shell is available to all users in the account.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsFeatureArgs']]]]:
        """
        List of Cloud Shell features.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsFeatureArgs']]]]):
        pulumi.set(self, "features", value)

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsRegionArgs']]]]:
        """
        List of Cloud Shell region settings.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudShellAccountSettingsRegionArgs']]]]):
        pulumi.set(self, "regions", value)

    @_builtins.property
    @pulumi.getter
    def rev(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique revision number for the settings object.
        """
        return pulumi.get(self, "rev")

    @rev.setter
    def rev(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rev", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of api response object.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timestamp of last update in Unix epoch time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IAM ID of last updater.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)


@pulumi.type_token("ibm:index/cloudShellAccountSettings:CloudShellAccountSettings")
class CloudShellAccountSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_enable_new_features: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_enable_new_regions: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudShellAccountSettingsFeatureArgs', 'CloudShellAccountSettingsFeatureArgsDict']]]]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudShellAccountSettingsRegionArgs', 'CloudShellAccountSettingsRegionArgsDict']]]]] = None,
                 rev: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CloudShellAccountSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: The account ID in which the account settings belong to.
        :param pulumi.Input[_builtins.bool] default_enable_new_features: You can choose which Cloud Shell features are available in the account and whether any new features are enabled as they
               become available. The feature settings apply only to the enabled Cloud Shell locations.
        :param pulumi.Input[_builtins.bool] default_enable_new_regions: Set whether Cloud Shell is enabled in a specific location for the account. The location determines where user and
               session data are stored. By default, users are routed to the nearest available location.
        :param pulumi.Input[_builtins.bool] enabled: When enabled, Cloud Shell is available to all users in the account.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CloudShellAccountSettingsFeatureArgs', 'CloudShellAccountSettingsFeatureArgsDict']]]] features: List of Cloud Shell features.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CloudShellAccountSettingsRegionArgs', 'CloudShellAccountSettingsRegionArgsDict']]]] regions: List of Cloud Shell region settings.
        :param pulumi.Input[_builtins.str] rev: Unique revision number for the settings object.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudShellAccountSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CloudShellAccountSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CloudShellAccountSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudShellAccountSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_enable_new_features: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_enable_new_regions: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudShellAccountSettingsFeatureArgs', 'CloudShellAccountSettingsFeatureArgsDict']]]]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudShellAccountSettingsRegionArgs', 'CloudShellAccountSettingsRegionArgsDict']]]]] = None,
                 rev: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudShellAccountSettingsArgs.__new__(CloudShellAccountSettingsArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["default_enable_new_features"] = default_enable_new_features
            __props__.__dict__["default_enable_new_regions"] = default_enable_new_regions
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["features"] = features
            __props__.__dict__["regions"] = regions
            __props__.__dict__["rev"] = rev
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        super(CloudShellAccountSettings, __self__).__init__(
            'ibm:index/cloudShellAccountSettings:CloudShellAccountSettings',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.float]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            default_enable_new_features: Optional[pulumi.Input[_builtins.bool]] = None,
            default_enable_new_regions: Optional[pulumi.Input[_builtins.bool]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            features: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudShellAccountSettingsFeatureArgs', 'CloudShellAccountSettingsFeatureArgsDict']]]]] = None,
            regions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudShellAccountSettingsRegionArgs', 'CloudShellAccountSettingsRegionArgsDict']]]]] = None,
            rev: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.float]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None) -> 'CloudShellAccountSettings':
        """
        Get an existing CloudShellAccountSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: The account ID in which the account settings belong to.
        :param pulumi.Input[_builtins.float] created_at: Creation timestamp in Unix epoch time.
        :param pulumi.Input[_builtins.str] created_by: IAM ID of creator.
        :param pulumi.Input[_builtins.bool] default_enable_new_features: You can choose which Cloud Shell features are available in the account and whether any new features are enabled as they
               become available. The feature settings apply only to the enabled Cloud Shell locations.
        :param pulumi.Input[_builtins.bool] default_enable_new_regions: Set whether Cloud Shell is enabled in a specific location for the account. The location determines where user and
               session data are stored. By default, users are routed to the nearest available location.
        :param pulumi.Input[_builtins.bool] enabled: When enabled, Cloud Shell is available to all users in the account.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CloudShellAccountSettingsFeatureArgs', 'CloudShellAccountSettingsFeatureArgsDict']]]] features: List of Cloud Shell features.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CloudShellAccountSettingsRegionArgs', 'CloudShellAccountSettingsRegionArgsDict']]]] regions: List of Cloud Shell region settings.
        :param pulumi.Input[_builtins.str] rev: Unique revision number for the settings object.
        :param pulumi.Input[_builtins.str] type: Type of api response object.
        :param pulumi.Input[_builtins.float] updated_at: Timestamp of last update in Unix epoch time.
        :param pulumi.Input[_builtins.str] updated_by: IAM ID of last updater.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudShellAccountSettingsState.__new__(_CloudShellAccountSettingsState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["default_enable_new_features"] = default_enable_new_features
        __props__.__dict__["default_enable_new_regions"] = default_enable_new_regions
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["features"] = features
        __props__.__dict__["regions"] = regions
        __props__.__dict__["rev"] = rev
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        return CloudShellAccountSettings(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The account ID in which the account settings belong to.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.float]:
        """
        Creation timestamp in Unix epoch time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        IAM ID of creator.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="defaultEnableNewFeatures")
    def default_enable_new_features(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        You can choose which Cloud Shell features are available in the account and whether any new features are enabled as they
        become available. The feature settings apply only to the enabled Cloud Shell locations.
        """
        return pulumi.get(self, "default_enable_new_features")

    @_builtins.property
    @pulumi.getter(name="defaultEnableNewRegions")
    def default_enable_new_regions(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set whether Cloud Shell is enabled in a specific location for the account. The location determines where user and
        session data are stored. By default, users are routed to the nearest available location.
        """
        return pulumi.get(self, "default_enable_new_regions")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        When enabled, Cloud Shell is available to all users in the account.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def features(self) -> pulumi.Output[Optional[Sequence['outputs.CloudShellAccountSettingsFeature']]]:
        """
        List of Cloud Shell features.
        """
        return pulumi.get(self, "features")

    @_builtins.property
    @pulumi.getter
    def regions(self) -> pulumi.Output[Optional[Sequence['outputs.CloudShellAccountSettingsRegion']]]:
        """
        List of Cloud Shell region settings.
        """
        return pulumi.get(self, "regions")

    @_builtins.property
    @pulumi.getter
    def rev(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Unique revision number for the settings object.
        """
        return pulumi.get(self, "rev")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of api response object.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.float]:
        """
        Timestamp of last update in Unix epoch time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        IAM ID of last updater.
        """
        return pulumi.get(self, "updated_by")

