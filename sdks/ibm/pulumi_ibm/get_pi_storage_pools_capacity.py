# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiStoragePoolsCapacityResult',
    'AwaitableGetPiStoragePoolsCapacityResult',
    'get_pi_storage_pools_capacity',
    'get_pi_storage_pools_capacity_output',
]

@pulumi.output_type
class GetPiStoragePoolsCapacityResult:
    """
    A collection of values returned by getPiStoragePoolsCapacity.
    """
    def __init__(__self__, id=None, max_storage_allocation=None, pi_cloud_instance_id=None, storage_pools_capacities=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_storage_allocation and not isinstance(max_storage_allocation, dict):
            raise TypeError("Expected argument 'max_storage_allocation' to be a dict")
        pulumi.set(__self__, "max_storage_allocation", max_storage_allocation)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if storage_pools_capacities and not isinstance(storage_pools_capacities, list):
            raise TypeError("Expected argument 'storage_pools_capacities' to be a list")
        pulumi.set(__self__, "storage_pools_capacities", storage_pools_capacities)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxStorageAllocation")
    def max_storage_allocation(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "max_storage_allocation")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="storagePoolsCapacities")
    def storage_pools_capacities(self) -> Sequence['outputs.GetPiStoragePoolsCapacityStoragePoolsCapacityResult']:
        return pulumi.get(self, "storage_pools_capacities")


class AwaitableGetPiStoragePoolsCapacityResult(GetPiStoragePoolsCapacityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiStoragePoolsCapacityResult(
            id=self.id,
            max_storage_allocation=self.max_storage_allocation,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            storage_pools_capacities=self.storage_pools_capacities)


def get_pi_storage_pools_capacity(id: Optional[_builtins.str] = None,
                                  pi_cloud_instance_id: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiStoragePoolsCapacityResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiStoragePoolsCapacity:getPiStoragePoolsCapacity', __args__, opts=opts, typ=GetPiStoragePoolsCapacityResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiStoragePoolsCapacityResult(
        id=pulumi.get(__ret__, 'id'),
        max_storage_allocation=pulumi.get(__ret__, 'max_storage_allocation'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        storage_pools_capacities=pulumi.get(__ret__, 'storage_pools_capacities'))
def get_pi_storage_pools_capacity_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiStoragePoolsCapacityResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiStoragePoolsCapacity:getPiStoragePoolsCapacity', __args__, opts=opts, typ=GetPiStoragePoolsCapacityResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiStoragePoolsCapacityResult(
        id=pulumi.get(__response__, 'id'),
        max_storage_allocation=pulumi.get(__response__, 'max_storage_allocation'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        storage_pools_capacities=pulumi.get(__response__, 'storage_pools_capacities')))
