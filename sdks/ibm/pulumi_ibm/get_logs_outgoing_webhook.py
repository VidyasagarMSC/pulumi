# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLogsOutgoingWebhookResult',
    'AwaitableGetLogsOutgoingWebhookResult',
    'get_logs_outgoing_webhook',
    'get_logs_outgoing_webhook_output',
]

@pulumi.output_type
class GetLogsOutgoingWebhookResult:
    """
    A collection of values returned by getLogsOutgoingWebhook.
    """
    def __init__(__self__, created_at=None, endpoint_type=None, external_id=None, ibm_event_notifications=None, id=None, instance_id=None, logs_outgoing_webhook_id=None, name=None, region=None, type=None, updated_at=None, url=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if external_id and not isinstance(external_id, float):
            raise TypeError("Expected argument 'external_id' to be a float")
        pulumi.set(__self__, "external_id", external_id)
        if ibm_event_notifications and not isinstance(ibm_event_notifications, list):
            raise TypeError("Expected argument 'ibm_event_notifications' to be a list")
        pulumi.set(__self__, "ibm_event_notifications", ibm_event_notifications)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if logs_outgoing_webhook_id and not isinstance(logs_outgoing_webhook_id, str):
            raise TypeError("Expected argument 'logs_outgoing_webhook_id' to be a str")
        pulumi.set(__self__, "logs_outgoing_webhook_id", logs_outgoing_webhook_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="externalId")
    def external_id(self) -> _builtins.float:
        return pulumi.get(self, "external_id")

    @_builtins.property
    @pulumi.getter(name="ibmEventNotifications")
    def ibm_event_notifications(self) -> Sequence['outputs.GetLogsOutgoingWebhookIbmEventNotificationResult']:
        return pulumi.get(self, "ibm_event_notifications")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="logsOutgoingWebhookId")
    def logs_outgoing_webhook_id(self) -> _builtins.str:
        return pulumi.get(self, "logs_outgoing_webhook_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        return pulumi.get(self, "url")


class AwaitableGetLogsOutgoingWebhookResult(GetLogsOutgoingWebhookResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogsOutgoingWebhookResult(
            created_at=self.created_at,
            endpoint_type=self.endpoint_type,
            external_id=self.external_id,
            ibm_event_notifications=self.ibm_event_notifications,
            id=self.id,
            instance_id=self.instance_id,
            logs_outgoing_webhook_id=self.logs_outgoing_webhook_id,
            name=self.name,
            region=self.region,
            type=self.type,
            updated_at=self.updated_at,
            url=self.url)


def get_logs_outgoing_webhook(endpoint_type: Optional[_builtins.str] = None,
                              id: Optional[_builtins.str] = None,
                              instance_id: Optional[_builtins.str] = None,
                              logs_outgoing_webhook_id: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogsOutgoingWebhookResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['logsOutgoingWebhookId'] = logs_outgoing_webhook_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getLogsOutgoingWebhook:getLogsOutgoingWebhook', __args__, opts=opts, typ=GetLogsOutgoingWebhookResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLogsOutgoingWebhookResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        external_id=pulumi.get(__ret__, 'external_id'),
        ibm_event_notifications=pulumi.get(__ret__, 'ibm_event_notifications'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        logs_outgoing_webhook_id=pulumi.get(__ret__, 'logs_outgoing_webhook_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        url=pulumi.get(__ret__, 'url'))
def get_logs_outgoing_webhook_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     logs_outgoing_webhook_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogsOutgoingWebhookResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['logsOutgoingWebhookId'] = logs_outgoing_webhook_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getLogsOutgoingWebhook:getLogsOutgoingWebhook', __args__, opts=opts, typ=GetLogsOutgoingWebhookResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLogsOutgoingWebhookResult(
        created_at=pulumi.get(__response__, 'created_at'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        external_id=pulumi.get(__response__, 'external_id'),
        ibm_event_notifications=pulumi.get(__response__, 'ibm_event_notifications'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        logs_outgoing_webhook_id=pulumi.get(__response__, 'logs_outgoing_webhook_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        url=pulumi.get(__response__, 'url')))
