# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsVirtualNetworkInterfaceArgs', 'IsVirtualNetworkInterface']

@pulumi.input_type
class IsVirtualNetworkInterfaceArgs:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_infrastructure_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceIpArgs']]]] = None,
                 is_virtual_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input['IsVirtualNetworkInterfacePrimaryIpArgs']] = None,
                 protocol_state_filtering_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsVirtualNetworkInterfaceTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsVirtualNetworkInterface resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: Access management tags for the vni instance
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this interface. If `false`, source IP spoofing is prevented on this
               interface. If `true`, source IP spoofing is allowed on this interface.
        :param pulumi.Input[_builtins.bool] auto_delete: Indicates whether this virtual network interface will be automatically deleted when`target` is deleted.
        :param pulumi.Input[_builtins.bool] enable_infrastructure_nat: If `true`:- The VPC infrastructure performs any needed NAT operations.- `floating_ips` must not have more than one
               floating IP.If `false`:- Packets are passed unchanged to/from the network interface, allowing the workload to perform
               any needed NAT operations.- `allow_ip_spoofing` must be `false`.- If the virtual network interface is attached: - The
               target `resource_type` must be `bare_metal_server_network_attachment`. - The target `interface_type` must not be
               `hipersocket`.
        :param pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceIpArgs']]] ips: The reserved IPs bound to this virtual network interface.May be empty when `lifecycle_state` is `pending`.
        :param pulumi.Input[_builtins.str] name: The name for this virtual network interface. The name is unique across all virtual network interfaces in the VPC.
        :param pulumi.Input['IsVirtualNetworkInterfacePrimaryIpArgs'] primary_ip: The reserved IP for this virtual network interface.
        :param pulumi.Input[_builtins.str] protocol_state_filtering_mode: The protocol state filtering mode used for this virtual network interface.
        :param pulumi.Input[_builtins.str] resource_group: The resource group id for this virtual network interface.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: The security groups for this virtual network interface.
        :param pulumi.Input[_builtins.str] subnet: The associated subnet id.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: UserTags for the vni instance
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if allow_ip_spoofing is not None:
            pulumi.set(__self__, "allow_ip_spoofing", allow_ip_spoofing)
        if auto_delete is not None:
            pulumi.set(__self__, "auto_delete", auto_delete)
        if enable_infrastructure_nat is not None:
            pulumi.set(__self__, "enable_infrastructure_nat", enable_infrastructure_nat)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if is_virtual_network_interface_id is not None:
            pulumi.set(__self__, "is_virtual_network_interface_id", is_virtual_network_interface_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if protocol_state_filtering_mode is not None:
            pulumi.set(__self__, "protocol_state_filtering_mode", protocol_state_filtering_mode)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Access management tags for the vni instance
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether source IP spoofing is allowed on this interface. If `false`, source IP spoofing is prevented on this
        interface. If `true`, source IP spoofing is allowed on this interface.
        """
        return pulumi.get(self, "allow_ip_spoofing")

    @allow_ip_spoofing.setter
    def allow_ip_spoofing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_ip_spoofing", value)

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether this virtual network interface will be automatically deleted when`target` is deleted.
        """
        return pulumi.get(self, "auto_delete")

    @auto_delete.setter
    def auto_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_delete", value)

    @_builtins.property
    @pulumi.getter(name="enableInfrastructureNat")
    def enable_infrastructure_nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If `true`:- The VPC infrastructure performs any needed NAT operations.- `floating_ips` must not have more than one
        floating IP.If `false`:- Packets are passed unchanged to/from the network interface, allowing the workload to perform
        any needed NAT operations.- `allow_ip_spoofing` must be `false`.- If the virtual network interface is attached: - The
        target `resource_type` must be `bare_metal_server_network_attachment`. - The target `interface_type` must not be
        `hipersocket`.
        """
        return pulumi.get(self, "enable_infrastructure_nat")

    @enable_infrastructure_nat.setter
    def enable_infrastructure_nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_infrastructure_nat", value)

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceIpArgs']]]]:
        """
        The reserved IPs bound to this virtual network interface.May be empty when `lifecycle_state` is `pending`.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceIpArgs']]]]):
        pulumi.set(self, "ips", value)

    @_builtins.property
    @pulumi.getter(name="isVirtualNetworkInterfaceId")
    def is_virtual_network_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_virtual_network_interface_id")

    @is_virtual_network_interface_id.setter
    def is_virtual_network_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_virtual_network_interface_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this virtual network interface. The name is unique across all virtual network interfaces in the VPC.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input['IsVirtualNetworkInterfacePrimaryIpArgs']]:
        """
        The reserved IP for this virtual network interface.
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input['IsVirtualNetworkInterfacePrimaryIpArgs']]):
        pulumi.set(self, "primary_ip", value)

    @_builtins.property
    @pulumi.getter(name="protocolStateFilteringMode")
    def protocol_state_filtering_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The protocol state filtering mode used for this virtual network interface.
        """
        return pulumi.get(self, "protocol_state_filtering_mode")

    @protocol_state_filtering_mode.setter
    def protocol_state_filtering_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_state_filtering_mode", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group id for this virtual network interface.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The security groups for this virtual network interface.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The associated subnet id.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        UserTags for the vni instance
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVirtualNetworkInterfaceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVirtualNetworkInterfaceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsVirtualNetworkInterfaceState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_infrastructure_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceIpArgs']]]] = None,
                 is_virtual_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input['IsVirtualNetworkInterfacePrimaryIpArgs']] = None,
                 protocol_state_filtering_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceTargetArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['IsVirtualNetworkInterfaceTimeoutsArgs']] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceVpcArgs']]]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsVirtualNetworkInterface resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: Access management tags for the vni instance
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this interface. If `false`, source IP spoofing is prevented on this
               interface. If `true`, source IP spoofing is allowed on this interface.
        :param pulumi.Input[_builtins.bool] auto_delete: Indicates whether this virtual network interface will be automatically deleted when`target` is deleted.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the virtual network interface was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this virtual network interface.
        :param pulumi.Input[_builtins.bool] enable_infrastructure_nat: If `true`:- The VPC infrastructure performs any needed NAT operations.- `floating_ips` must not have more than one
               floating IP.If `false`:- Packets are passed unchanged to/from the network interface, allowing the workload to perform
               any needed NAT operations.- `allow_ip_spoofing` must be `false`.- If the virtual network interface is attached: - The
               target `resource_type` must be `bare_metal_server_network_attachment`. - The target `interface_type` must not be
               `hipersocket`.
        :param pulumi.Input[_builtins.str] href: The URL for this virtual network interface.
        :param pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceIpArgs']]] ips: The reserved IPs bound to this virtual network interface.May be empty when `lifecycle_state` is `pending`.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the virtual network interface.
        :param pulumi.Input[_builtins.str] mac_address: The MAC address of the interface. Absent when the interface is not attached to a target.
        :param pulumi.Input[_builtins.str] name: The name for this virtual network interface. The name is unique across all virtual network interfaces in the VPC.
        :param pulumi.Input['IsVirtualNetworkInterfacePrimaryIpArgs'] primary_ip: The reserved IP for this virtual network interface.
        :param pulumi.Input[_builtins.str] protocol_state_filtering_mode: The protocol state filtering mode used for this virtual network interface.
        :param pulumi.Input[_builtins.str] resource_group: The resource group id for this virtual network interface.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: The security groups for this virtual network interface.
        :param pulumi.Input[_builtins.str] subnet: The associated subnet id.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: UserTags for the vni instance
        :param pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceTargetArgs']]] targets: The target of this virtual network interface.If absent, this virtual network interface is not attached to a target.
        :param pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceVpcArgs']]] vpcs: The VPC this virtual network interface resides in.
        :param pulumi.Input[_builtins.str] zone: The zone name this virtual network interface resides in.
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if allow_ip_spoofing is not None:
            pulumi.set(__self__, "allow_ip_spoofing", allow_ip_spoofing)
        if auto_delete is not None:
            pulumi.set(__self__, "auto_delete", auto_delete)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if enable_infrastructure_nat is not None:
            pulumi.set(__self__, "enable_infrastructure_nat", enable_infrastructure_nat)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if is_virtual_network_interface_id is not None:
            pulumi.set(__self__, "is_virtual_network_interface_id", is_virtual_network_interface_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if protocol_state_filtering_mode is not None:
            pulumi.set(__self__, "protocol_state_filtering_mode", protocol_state_filtering_mode)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpcs is not None:
            pulumi.set(__self__, "vpcs", vpcs)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Access management tags for the vni instance
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether source IP spoofing is allowed on this interface. If `false`, source IP spoofing is prevented on this
        interface. If `true`, source IP spoofing is allowed on this interface.
        """
        return pulumi.get(self, "allow_ip_spoofing")

    @allow_ip_spoofing.setter
    def allow_ip_spoofing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_ip_spoofing", value)

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether this virtual network interface will be automatically deleted when`target` is deleted.
        """
        return pulumi.get(self, "auto_delete")

    @auto_delete.setter
    def auto_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_delete", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the virtual network interface was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this virtual network interface.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="enableInfrastructureNat")
    def enable_infrastructure_nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If `true`:- The VPC infrastructure performs any needed NAT operations.- `floating_ips` must not have more than one
        floating IP.If `false`:- Packets are passed unchanged to/from the network interface, allowing the workload to perform
        any needed NAT operations.- `allow_ip_spoofing` must be `false`.- If the virtual network interface is attached: - The
        target `resource_type` must be `bare_metal_server_network_attachment`. - The target `interface_type` must not be
        `hipersocket`.
        """
        return pulumi.get(self, "enable_infrastructure_nat")

    @enable_infrastructure_nat.setter
    def enable_infrastructure_nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_infrastructure_nat", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this virtual network interface.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceIpArgs']]]]:
        """
        The reserved IPs bound to this virtual network interface.May be empty when `lifecycle_state` is `pending`.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceIpArgs']]]]):
        pulumi.set(self, "ips", value)

    @_builtins.property
    @pulumi.getter(name="isVirtualNetworkInterfaceId")
    def is_virtual_network_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_virtual_network_interface_id")

    @is_virtual_network_interface_id.setter
    def is_virtual_network_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_virtual_network_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the virtual network interface.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MAC address of the interface. Absent when the interface is not attached to a target.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this virtual network interface. The name is unique across all virtual network interfaces in the VPC.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input['IsVirtualNetworkInterfacePrimaryIpArgs']]:
        """
        The reserved IP for this virtual network interface.
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input['IsVirtualNetworkInterfacePrimaryIpArgs']]):
        pulumi.set(self, "primary_ip", value)

    @_builtins.property
    @pulumi.getter(name="protocolStateFilteringMode")
    def protocol_state_filtering_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The protocol state filtering mode used for this virtual network interface.
        """
        return pulumi.get(self, "protocol_state_filtering_mode")

    @protocol_state_filtering_mode.setter
    def protocol_state_filtering_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_state_filtering_mode", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group id for this virtual network interface.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The security groups for this virtual network interface.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The associated subnet id.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        UserTags for the vni instance
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceTargetArgs']]]]:
        """
        The target of this virtual network interface.If absent, this virtual network interface is not attached to a target.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceTargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVirtualNetworkInterfaceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVirtualNetworkInterfaceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceVpcArgs']]]]:
        """
        The VPC this virtual network interface resides in.
        """
        return pulumi.get(self, "vpcs")

    @vpcs.setter
    def vpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceVpcArgs']]]]):
        pulumi.set(self, "vpcs", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The zone name this virtual network interface resides in.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isVirtualNetworkInterface:IsVirtualNetworkInterface")
class IsVirtualNetworkInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_infrastructure_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualNetworkInterfaceIpArgs', 'IsVirtualNetworkInterfaceIpArgsDict']]]]] = None,
                 is_virtual_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input[Union['IsVirtualNetworkInterfacePrimaryIpArgs', 'IsVirtualNetworkInterfacePrimaryIpArgsDict']]] = None,
                 protocol_state_filtering_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVirtualNetworkInterfaceTimeoutsArgs', 'IsVirtualNetworkInterfaceTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsVirtualNetworkInterface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: Access management tags for the vni instance
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this interface. If `false`, source IP spoofing is prevented on this
               interface. If `true`, source IP spoofing is allowed on this interface.
        :param pulumi.Input[_builtins.bool] auto_delete: Indicates whether this virtual network interface will be automatically deleted when`target` is deleted.
        :param pulumi.Input[_builtins.bool] enable_infrastructure_nat: If `true`:- The VPC infrastructure performs any needed NAT operations.- `floating_ips` must not have more than one
               floating IP.If `false`:- Packets are passed unchanged to/from the network interface, allowing the workload to perform
               any needed NAT operations.- `allow_ip_spoofing` must be `false`.- If the virtual network interface is attached: - The
               target `resource_type` must be `bare_metal_server_network_attachment`. - The target `interface_type` must not be
               `hipersocket`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualNetworkInterfaceIpArgs', 'IsVirtualNetworkInterfaceIpArgsDict']]]] ips: The reserved IPs bound to this virtual network interface.May be empty when `lifecycle_state` is `pending`.
        :param pulumi.Input[_builtins.str] name: The name for this virtual network interface. The name is unique across all virtual network interfaces in the VPC.
        :param pulumi.Input[Union['IsVirtualNetworkInterfacePrimaryIpArgs', 'IsVirtualNetworkInterfacePrimaryIpArgsDict']] primary_ip: The reserved IP for this virtual network interface.
        :param pulumi.Input[_builtins.str] protocol_state_filtering_mode: The protocol state filtering mode used for this virtual network interface.
        :param pulumi.Input[_builtins.str] resource_group: The resource group id for this virtual network interface.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: The security groups for this virtual network interface.
        :param pulumi.Input[_builtins.str] subnet: The associated subnet id.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: UserTags for the vni instance
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IsVirtualNetworkInterfaceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVirtualNetworkInterface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVirtualNetworkInterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVirtualNetworkInterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_infrastructure_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualNetworkInterfaceIpArgs', 'IsVirtualNetworkInterfaceIpArgsDict']]]]] = None,
                 is_virtual_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input[Union['IsVirtualNetworkInterfacePrimaryIpArgs', 'IsVirtualNetworkInterfacePrimaryIpArgsDict']]] = None,
                 protocol_state_filtering_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVirtualNetworkInterfaceTimeoutsArgs', 'IsVirtualNetworkInterfaceTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVirtualNetworkInterfaceArgs.__new__(IsVirtualNetworkInterfaceArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["allow_ip_spoofing"] = allow_ip_spoofing
            __props__.__dict__["auto_delete"] = auto_delete
            __props__.__dict__["enable_infrastructure_nat"] = enable_infrastructure_nat
            __props__.__dict__["ips"] = ips
            __props__.__dict__["is_virtual_network_interface_id"] = is_virtual_network_interface_id
            __props__.__dict__["name"] = name
            __props__.__dict__["primary_ip"] = primary_ip
            __props__.__dict__["protocol_state_filtering_mode"] = protocol_state_filtering_mode
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["subnet"] = subnet
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["mac_address"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["targets"] = None
            __props__.__dict__["vpcs"] = None
            __props__.__dict__["zone"] = None
        super(IsVirtualNetworkInterface, __self__).__init__(
            'ibm:index/isVirtualNetworkInterface:IsVirtualNetworkInterface',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
            auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            enable_infrastructure_nat: Optional[pulumi.Input[_builtins.bool]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualNetworkInterfaceIpArgs', 'IsVirtualNetworkInterfaceIpArgsDict']]]]] = None,
            is_virtual_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            mac_address: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            primary_ip: Optional[pulumi.Input[Union['IsVirtualNetworkInterfacePrimaryIpArgs', 'IsVirtualNetworkInterfacePrimaryIpArgsDict']]] = None,
            protocol_state_filtering_mode: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            subnet: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualNetworkInterfaceTargetArgs', 'IsVirtualNetworkInterfaceTargetArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsVirtualNetworkInterfaceTimeoutsArgs', 'IsVirtualNetworkInterfaceTimeoutsArgsDict']]] = None,
            vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualNetworkInterfaceVpcArgs', 'IsVirtualNetworkInterfaceVpcArgsDict']]]]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsVirtualNetworkInterface':
        """
        Get an existing IsVirtualNetworkInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: Access management tags for the vni instance
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this interface. If `false`, source IP spoofing is prevented on this
               interface. If `true`, source IP spoofing is allowed on this interface.
        :param pulumi.Input[_builtins.bool] auto_delete: Indicates whether this virtual network interface will be automatically deleted when`target` is deleted.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the virtual network interface was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this virtual network interface.
        :param pulumi.Input[_builtins.bool] enable_infrastructure_nat: If `true`:- The VPC infrastructure performs any needed NAT operations.- `floating_ips` must not have more than one
               floating IP.If `false`:- Packets are passed unchanged to/from the network interface, allowing the workload to perform
               any needed NAT operations.- `allow_ip_spoofing` must be `false`.- If the virtual network interface is attached: - The
               target `resource_type` must be `bare_metal_server_network_attachment`. - The target `interface_type` must not be
               `hipersocket`.
        :param pulumi.Input[_builtins.str] href: The URL for this virtual network interface.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualNetworkInterfaceIpArgs', 'IsVirtualNetworkInterfaceIpArgsDict']]]] ips: The reserved IPs bound to this virtual network interface.May be empty when `lifecycle_state` is `pending`.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the virtual network interface.
        :param pulumi.Input[_builtins.str] mac_address: The MAC address of the interface. Absent when the interface is not attached to a target.
        :param pulumi.Input[_builtins.str] name: The name for this virtual network interface. The name is unique across all virtual network interfaces in the VPC.
        :param pulumi.Input[Union['IsVirtualNetworkInterfacePrimaryIpArgs', 'IsVirtualNetworkInterfacePrimaryIpArgsDict']] primary_ip: The reserved IP for this virtual network interface.
        :param pulumi.Input[_builtins.str] protocol_state_filtering_mode: The protocol state filtering mode used for this virtual network interface.
        :param pulumi.Input[_builtins.str] resource_group: The resource group id for this virtual network interface.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: The security groups for this virtual network interface.
        :param pulumi.Input[_builtins.str] subnet: The associated subnet id.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: UserTags for the vni instance
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualNetworkInterfaceTargetArgs', 'IsVirtualNetworkInterfaceTargetArgsDict']]]] targets: The target of this virtual network interface.If absent, this virtual network interface is not attached to a target.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualNetworkInterfaceVpcArgs', 'IsVirtualNetworkInterfaceVpcArgsDict']]]] vpcs: The VPC this virtual network interface resides in.
        :param pulumi.Input[_builtins.str] zone: The zone name this virtual network interface resides in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVirtualNetworkInterfaceState.__new__(_IsVirtualNetworkInterfaceState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["allow_ip_spoofing"] = allow_ip_spoofing
        __props__.__dict__["auto_delete"] = auto_delete
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["enable_infrastructure_nat"] = enable_infrastructure_nat
        __props__.__dict__["href"] = href
        __props__.__dict__["ips"] = ips
        __props__.__dict__["is_virtual_network_interface_id"] = is_virtual_network_interface_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["name"] = name
        __props__.__dict__["primary_ip"] = primary_ip
        __props__.__dict__["protocol_state_filtering_mode"] = protocol_state_filtering_mode
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["tags"] = tags
        __props__.__dict__["targets"] = targets
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpcs"] = vpcs
        __props__.__dict__["zone"] = zone
        return IsVirtualNetworkInterface(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Access management tags for the vni instance
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether source IP spoofing is allowed on this interface. If `false`, source IP spoofing is prevented on this
        interface. If `true`, source IP spoofing is allowed on this interface.
        """
        return pulumi.get(self, "allow_ip_spoofing")

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether this virtual network interface will be automatically deleted when`target` is deleted.
        """
        return pulumi.get(self, "auto_delete")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the virtual network interface was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this virtual network interface.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="enableInfrastructureNat")
    def enable_infrastructure_nat(self) -> pulumi.Output[_builtins.bool]:
        """
        If `true`:- The VPC infrastructure performs any needed NAT operations.- `floating_ips` must not have more than one
        floating IP.If `false`:- Packets are passed unchanged to/from the network interface, allowing the workload to perform
        any needed NAT operations.- `allow_ip_spoofing` must be `false`.- If the virtual network interface is attached: - The
        target `resource_type` must be `bare_metal_server_network_attachment`. - The target `interface_type` must not be
        `hipersocket`.
        """
        return pulumi.get(self, "enable_infrastructure_nat")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this virtual network interface.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> pulumi.Output[Optional[Sequence['outputs.IsVirtualNetworkInterfaceIp']]]:
        """
        The reserved IPs bound to this virtual network interface.May be empty when `lifecycle_state` is `pending`.
        """
        return pulumi.get(self, "ips")

    @_builtins.property
    @pulumi.getter(name="isVirtualNetworkInterfaceId")
    def is_virtual_network_interface_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_virtual_network_interface_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the virtual network interface.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[_builtins.str]:
        """
        The MAC address of the interface. Absent when the interface is not attached to a target.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for this virtual network interface. The name is unique across all virtual network interfaces in the VPC.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> pulumi.Output[Optional['outputs.IsVirtualNetworkInterfacePrimaryIp']]:
        """
        The reserved IP for this virtual network interface.
        """
        return pulumi.get(self, "primary_ip")

    @_builtins.property
    @pulumi.getter(name="protocolStateFilteringMode")
    def protocol_state_filtering_mode(self) -> pulumi.Output[_builtins.str]:
        """
        The protocol state filtering mode used for this virtual network interface.
        """
        return pulumi.get(self, "protocol_state_filtering_mode")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group id for this virtual network interface.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The security groups for this virtual network interface.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The associated subnet id.
        """
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        UserTags for the vni instance
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Sequence['outputs.IsVirtualNetworkInterfaceTarget']]:
        """
        The target of this virtual network interface.If absent, this virtual network interface is not attached to a target.
        """
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsVirtualNetworkInterfaceTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> pulumi.Output[Sequence['outputs.IsVirtualNetworkInterfaceVpc']]:
        """
        The VPC this virtual network interface resides in.
        """
        return pulumi.get(self, "vpcs")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        The zone name this virtual network interface resides in.
        """
        return pulumi.get(self, "zone")

