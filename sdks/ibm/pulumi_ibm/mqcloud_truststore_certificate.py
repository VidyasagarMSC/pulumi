# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['MqcloudTruststoreCertificateArgs', 'MqcloudTruststoreCertificate']

@pulumi.input_type
class MqcloudTruststoreCertificateArgs:
    def __init__(__self__, *,
                 certificate_file: pulumi.Input[_builtins.str],
                 label: pulumi.Input[_builtins.str],
                 queue_manager_id: pulumi.Input[_builtins.str],
                 service_instance_guid: pulumi.Input[_builtins.str],
                 mqcloud_truststore_certificate_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MqcloudTruststoreCertificate resource.
        :param pulumi.Input[_builtins.str] certificate_file: The filename and path of the certificate to be uploaded.
        :param pulumi.Input[_builtins.str] label: The label to use for the certificate to be uploaded.
        :param pulumi.Input[_builtins.str] queue_manager_id: The id of the queue manager to retrieve its full details.
        :param pulumi.Input[_builtins.str] service_instance_guid: The GUID that uniquely identifies the MQaaS service instance.
        """
        pulumi.set(__self__, "certificate_file", certificate_file)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "queue_manager_id", queue_manager_id)
        pulumi.set(__self__, "service_instance_guid", service_instance_guid)
        if mqcloud_truststore_certificate_id is not None:
            pulumi.set(__self__, "mqcloud_truststore_certificate_id", mqcloud_truststore_certificate_id)

    @_builtins.property
    @pulumi.getter(name="certificateFile")
    def certificate_file(self) -> pulumi.Input[_builtins.str]:
        """
        The filename and path of the certificate to be uploaded.
        """
        return pulumi.get(self, "certificate_file")

    @certificate_file.setter
    def certificate_file(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "certificate_file", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Input[_builtins.str]:
        """
        The label to use for the certificate to be uploaded.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="queueManagerId")
    def queue_manager_id(self) -> pulumi.Input[_builtins.str]:
        """
        The id of the queue manager to retrieve its full details.
        """
        return pulumi.get(self, "queue_manager_id")

    @queue_manager_id.setter
    def queue_manager_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "queue_manager_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID that uniquely identifies the MQaaS service instance.
        """
        return pulumi.get(self, "service_instance_guid")

    @service_instance_guid.setter
    def service_instance_guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_instance_guid", value)

    @_builtins.property
    @pulumi.getter(name="mqcloudTruststoreCertificateId")
    def mqcloud_truststore_certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "mqcloud_truststore_certificate_id")

    @mqcloud_truststore_certificate_id.setter
    def mqcloud_truststore_certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mqcloud_truststore_certificate_id", value)


@pulumi.input_type
class _MqcloudTruststoreCertificateState:
    def __init__(__self__, *,
                 certificate_file: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expiry: Optional[pulumi.Input[_builtins.str]] = None,
                 fingerprint_sha256: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 issued: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer_cn: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer_dn: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 mqcloud_truststore_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_cn: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_dn: Optional[pulumi.Input[_builtins.str]] = None,
                 trusted: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering MqcloudTruststoreCertificate resources.
        :param pulumi.Input[_builtins.str] certificate_file: The filename and path of the certificate to be uploaded.
        :param pulumi.Input[_builtins.str] certificate_id: Id of the certificate.
        :param pulumi.Input[_builtins.str] certificate_type: The type of certificate.
        :param pulumi.Input[_builtins.str] expiry: Expiry date for the certificate.
        :param pulumi.Input[_builtins.str] fingerprint_sha256: Fingerprint SHA256.
        :param pulumi.Input[_builtins.str] href: The URL for this trust store certificate.
        :param pulumi.Input[_builtins.str] issued: The Date the certificate was issued.
        :param pulumi.Input[_builtins.str] issuer_cn: Issuer's Common Name.
        :param pulumi.Input[_builtins.str] issuer_dn: Issuer's Distinguished Name.
        :param pulumi.Input[_builtins.str] label: The label to use for the certificate to be uploaded.
        :param pulumi.Input[_builtins.str] queue_manager_id: The id of the queue manager to retrieve its full details.
        :param pulumi.Input[_builtins.str] service_instance_guid: The GUID that uniquely identifies the MQaaS service instance.
        :param pulumi.Input[_builtins.str] subject_cn: Subject's Common Name.
        :param pulumi.Input[_builtins.str] subject_dn: Subject's Distinguished Name.
        :param pulumi.Input[_builtins.bool] trusted: Indicates whether a certificate is trusted.
        """
        if certificate_file is not None:
            pulumi.set(__self__, "certificate_file", certificate_file)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_type is not None:
            pulumi.set(__self__, "certificate_type", certificate_type)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if fingerprint_sha256 is not None:
            pulumi.set(__self__, "fingerprint_sha256", fingerprint_sha256)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if issued is not None:
            pulumi.set(__self__, "issued", issued)
        if issuer_cn is not None:
            pulumi.set(__self__, "issuer_cn", issuer_cn)
        if issuer_dn is not None:
            pulumi.set(__self__, "issuer_dn", issuer_dn)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if mqcloud_truststore_certificate_id is not None:
            pulumi.set(__self__, "mqcloud_truststore_certificate_id", mqcloud_truststore_certificate_id)
        if queue_manager_id is not None:
            pulumi.set(__self__, "queue_manager_id", queue_manager_id)
        if service_instance_guid is not None:
            pulumi.set(__self__, "service_instance_guid", service_instance_guid)
        if subject_cn is not None:
            pulumi.set(__self__, "subject_cn", subject_cn)
        if subject_dn is not None:
            pulumi.set(__self__, "subject_dn", subject_dn)
        if trusted is not None:
            pulumi.set(__self__, "trusted", trusted)

    @_builtins.property
    @pulumi.getter(name="certificateFile")
    def certificate_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The filename and path of the certificate to be uploaded.
        """
        return pulumi.get(self, "certificate_file")

    @certificate_file.setter
    def certificate_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_file", value)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Id of the certificate.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of certificate.
        """
        return pulumi.get(self, "certificate_type")

    @certificate_type.setter
    def certificate_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_type", value)

    @_builtins.property
    @pulumi.getter
    def expiry(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Expiry date for the certificate.
        """
        return pulumi.get(self, "expiry")

    @expiry.setter
    def expiry(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expiry", value)

    @_builtins.property
    @pulumi.getter(name="fingerprintSha256")
    def fingerprint_sha256(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Fingerprint SHA256.
        """
        return pulumi.get(self, "fingerprint_sha256")

    @fingerprint_sha256.setter
    def fingerprint_sha256(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fingerprint_sha256", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this trust store certificate.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def issued(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Date the certificate was issued.
        """
        return pulumi.get(self, "issued")

    @issued.setter
    def issued(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issued", value)

    @_builtins.property
    @pulumi.getter(name="issuerCn")
    def issuer_cn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Issuer's Common Name.
        """
        return pulumi.get(self, "issuer_cn")

    @issuer_cn.setter
    def issuer_cn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer_cn", value)

    @_builtins.property
    @pulumi.getter(name="issuerDn")
    def issuer_dn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Issuer's Distinguished Name.
        """
        return pulumi.get(self, "issuer_dn")

    @issuer_dn.setter
    def issuer_dn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer_dn", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The label to use for the certificate to be uploaded.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="mqcloudTruststoreCertificateId")
    def mqcloud_truststore_certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "mqcloud_truststore_certificate_id")

    @mqcloud_truststore_certificate_id.setter
    def mqcloud_truststore_certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mqcloud_truststore_certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="queueManagerId")
    def queue_manager_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of the queue manager to retrieve its full details.
        """
        return pulumi.get(self, "queue_manager_id")

    @queue_manager_id.setter
    def queue_manager_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue_manager_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID that uniquely identifies the MQaaS service instance.
        """
        return pulumi.get(self, "service_instance_guid")

    @service_instance_guid.setter
    def service_instance_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_instance_guid", value)

    @_builtins.property
    @pulumi.getter(name="subjectCn")
    def subject_cn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subject's Common Name.
        """
        return pulumi.get(self, "subject_cn")

    @subject_cn.setter
    def subject_cn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subject_cn", value)

    @_builtins.property
    @pulumi.getter(name="subjectDn")
    def subject_dn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subject's Distinguished Name.
        """
        return pulumi.get(self, "subject_dn")

    @subject_dn.setter
    def subject_dn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subject_dn", value)

    @_builtins.property
    @pulumi.getter
    def trusted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether a certificate is trusted.
        """
        return pulumi.get(self, "trusted")

    @trusted.setter
    def trusted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "trusted", value)


@pulumi.type_token("ibm:index/mqcloudTruststoreCertificate:MqcloudTruststoreCertificate")
class MqcloudTruststoreCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_file: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 mqcloud_truststore_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a MqcloudTruststoreCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate_file: The filename and path of the certificate to be uploaded.
        :param pulumi.Input[_builtins.str] label: The label to use for the certificate to be uploaded.
        :param pulumi.Input[_builtins.str] queue_manager_id: The id of the queue manager to retrieve its full details.
        :param pulumi.Input[_builtins.str] service_instance_guid: The GUID that uniquely identifies the MQaaS service instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MqcloudTruststoreCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MqcloudTruststoreCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MqcloudTruststoreCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MqcloudTruststoreCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_file: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 mqcloud_truststore_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MqcloudTruststoreCertificateArgs.__new__(MqcloudTruststoreCertificateArgs)

            if certificate_file is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_file'")
            __props__.__dict__["certificate_file"] = certificate_file
            if label is None and not opts.urn:
                raise TypeError("Missing required property 'label'")
            __props__.__dict__["label"] = label
            __props__.__dict__["mqcloud_truststore_certificate_id"] = mqcloud_truststore_certificate_id
            if queue_manager_id is None and not opts.urn:
                raise TypeError("Missing required property 'queue_manager_id'")
            __props__.__dict__["queue_manager_id"] = queue_manager_id
            if service_instance_guid is None and not opts.urn:
                raise TypeError("Missing required property 'service_instance_guid'")
            __props__.__dict__["service_instance_guid"] = service_instance_guid
            __props__.__dict__["certificate_id"] = None
            __props__.__dict__["certificate_type"] = None
            __props__.__dict__["expiry"] = None
            __props__.__dict__["fingerprint_sha256"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["issued"] = None
            __props__.__dict__["issuer_cn"] = None
            __props__.__dict__["issuer_dn"] = None
            __props__.__dict__["subject_cn"] = None
            __props__.__dict__["subject_dn"] = None
            __props__.__dict__["trusted"] = None
        super(MqcloudTruststoreCertificate, __self__).__init__(
            'ibm:index/mqcloudTruststoreCertificate:MqcloudTruststoreCertificate',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_file: Optional[pulumi.Input[_builtins.str]] = None,
            certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
            certificate_type: Optional[pulumi.Input[_builtins.str]] = None,
            expiry: Optional[pulumi.Input[_builtins.str]] = None,
            fingerprint_sha256: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            issued: Optional[pulumi.Input[_builtins.str]] = None,
            issuer_cn: Optional[pulumi.Input[_builtins.str]] = None,
            issuer_dn: Optional[pulumi.Input[_builtins.str]] = None,
            label: Optional[pulumi.Input[_builtins.str]] = None,
            mqcloud_truststore_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
            queue_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
            service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
            subject_cn: Optional[pulumi.Input[_builtins.str]] = None,
            subject_dn: Optional[pulumi.Input[_builtins.str]] = None,
            trusted: Optional[pulumi.Input[_builtins.bool]] = None) -> 'MqcloudTruststoreCertificate':
        """
        Get an existing MqcloudTruststoreCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate_file: The filename and path of the certificate to be uploaded.
        :param pulumi.Input[_builtins.str] certificate_id: Id of the certificate.
        :param pulumi.Input[_builtins.str] certificate_type: The type of certificate.
        :param pulumi.Input[_builtins.str] expiry: Expiry date for the certificate.
        :param pulumi.Input[_builtins.str] fingerprint_sha256: Fingerprint SHA256.
        :param pulumi.Input[_builtins.str] href: The URL for this trust store certificate.
        :param pulumi.Input[_builtins.str] issued: The Date the certificate was issued.
        :param pulumi.Input[_builtins.str] issuer_cn: Issuer's Common Name.
        :param pulumi.Input[_builtins.str] issuer_dn: Issuer's Distinguished Name.
        :param pulumi.Input[_builtins.str] label: The label to use for the certificate to be uploaded.
        :param pulumi.Input[_builtins.str] queue_manager_id: The id of the queue manager to retrieve its full details.
        :param pulumi.Input[_builtins.str] service_instance_guid: The GUID that uniquely identifies the MQaaS service instance.
        :param pulumi.Input[_builtins.str] subject_cn: Subject's Common Name.
        :param pulumi.Input[_builtins.str] subject_dn: Subject's Distinguished Name.
        :param pulumi.Input[_builtins.bool] trusted: Indicates whether a certificate is trusted.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MqcloudTruststoreCertificateState.__new__(_MqcloudTruststoreCertificateState)

        __props__.__dict__["certificate_file"] = certificate_file
        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["certificate_type"] = certificate_type
        __props__.__dict__["expiry"] = expiry
        __props__.__dict__["fingerprint_sha256"] = fingerprint_sha256
        __props__.__dict__["href"] = href
        __props__.__dict__["issued"] = issued
        __props__.__dict__["issuer_cn"] = issuer_cn
        __props__.__dict__["issuer_dn"] = issuer_dn
        __props__.__dict__["label"] = label
        __props__.__dict__["mqcloud_truststore_certificate_id"] = mqcloud_truststore_certificate_id
        __props__.__dict__["queue_manager_id"] = queue_manager_id
        __props__.__dict__["service_instance_guid"] = service_instance_guid
        __props__.__dict__["subject_cn"] = subject_cn
        __props__.__dict__["subject_dn"] = subject_dn
        __props__.__dict__["trusted"] = trusted
        return MqcloudTruststoreCertificate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="certificateFile")
    def certificate_file(self) -> pulumi.Output[_builtins.str]:
        """
        The filename and path of the certificate to be uploaded.
        """
        return pulumi.get(self, "certificate_file")

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[_builtins.str]:
        """
        Id of the certificate.
        """
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of certificate.
        """
        return pulumi.get(self, "certificate_type")

    @_builtins.property
    @pulumi.getter
    def expiry(self) -> pulumi.Output[_builtins.str]:
        """
        Expiry date for the certificate.
        """
        return pulumi.get(self, "expiry")

    @_builtins.property
    @pulumi.getter(name="fingerprintSha256")
    def fingerprint_sha256(self) -> pulumi.Output[_builtins.str]:
        """
        Fingerprint SHA256.
        """
        return pulumi.get(self, "fingerprint_sha256")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this trust store certificate.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def issued(self) -> pulumi.Output[_builtins.str]:
        """
        The Date the certificate was issued.
        """
        return pulumi.get(self, "issued")

    @_builtins.property
    @pulumi.getter(name="issuerCn")
    def issuer_cn(self) -> pulumi.Output[_builtins.str]:
        """
        Issuer's Common Name.
        """
        return pulumi.get(self, "issuer_cn")

    @_builtins.property
    @pulumi.getter(name="issuerDn")
    def issuer_dn(self) -> pulumi.Output[_builtins.str]:
        """
        Issuer's Distinguished Name.
        """
        return pulumi.get(self, "issuer_dn")

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Output[_builtins.str]:
        """
        The label to use for the certificate to be uploaded.
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="mqcloudTruststoreCertificateId")
    def mqcloud_truststore_certificate_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "mqcloud_truststore_certificate_id")

    @_builtins.property
    @pulumi.getter(name="queueManagerId")
    def queue_manager_id(self) -> pulumi.Output[_builtins.str]:
        """
        The id of the queue manager to retrieve its full details.
        """
        return pulumi.get(self, "queue_manager_id")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID that uniquely identifies the MQaaS service instance.
        """
        return pulumi.get(self, "service_instance_guid")

    @_builtins.property
    @pulumi.getter(name="subjectCn")
    def subject_cn(self) -> pulumi.Output[_builtins.str]:
        """
        Subject's Common Name.
        """
        return pulumi.get(self, "subject_cn")

    @_builtins.property
    @pulumi.getter(name="subjectDn")
    def subject_dn(self) -> pulumi.Output[_builtins.str]:
        """
        Subject's Distinguished Name.
        """
        return pulumi.get(self, "subject_dn")

    @_builtins.property
    @pulumi.getter
    def trusted(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether a certificate is trusted.
        """
        return pulumi.get(self, "trusted")

