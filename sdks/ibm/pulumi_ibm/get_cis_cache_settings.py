# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCisCacheSettingsResult',
    'AwaitableGetCisCacheSettingsResult',
    'get_cis_cache_settings',
    'get_cis_cache_settings_output',
]

@pulumi.output_type
class GetCisCacheSettingsResult:
    """
    A collection of values returned by getCisCacheSettings.
    """
    def __init__(__self__, browser_expirations=None, caching_levels=None, cis_id=None, development_modes=None, domain_id=None, id=None, query_string_sorts=None, serve_stale_contents=None):
        if browser_expirations and not isinstance(browser_expirations, list):
            raise TypeError("Expected argument 'browser_expirations' to be a list")
        pulumi.set(__self__, "browser_expirations", browser_expirations)
        if caching_levels and not isinstance(caching_levels, list):
            raise TypeError("Expected argument 'caching_levels' to be a list")
        pulumi.set(__self__, "caching_levels", caching_levels)
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if development_modes and not isinstance(development_modes, list):
            raise TypeError("Expected argument 'development_modes' to be a list")
        pulumi.set(__self__, "development_modes", development_modes)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if query_string_sorts and not isinstance(query_string_sorts, list):
            raise TypeError("Expected argument 'query_string_sorts' to be a list")
        pulumi.set(__self__, "query_string_sorts", query_string_sorts)
        if serve_stale_contents and not isinstance(serve_stale_contents, list):
            raise TypeError("Expected argument 'serve_stale_contents' to be a list")
        pulumi.set(__self__, "serve_stale_contents", serve_stale_contents)

    @_builtins.property
    @pulumi.getter(name="browserExpirations")
    def browser_expirations(self) -> Sequence['outputs.GetCisCacheSettingsBrowserExpirationResult']:
        return pulumi.get(self, "browser_expirations")

    @_builtins.property
    @pulumi.getter(name="cachingLevels")
    def caching_levels(self) -> Sequence['outputs.GetCisCacheSettingsCachingLevelResult']:
        return pulumi.get(self, "caching_levels")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="developmentModes")
    def development_modes(self) -> Sequence['outputs.GetCisCacheSettingsDevelopmentModeResult']:
        return pulumi.get(self, "development_modes")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="queryStringSorts")
    def query_string_sorts(self) -> Sequence['outputs.GetCisCacheSettingsQueryStringSortResult']:
        return pulumi.get(self, "query_string_sorts")

    @_builtins.property
    @pulumi.getter(name="serveStaleContents")
    def serve_stale_contents(self) -> Sequence['outputs.GetCisCacheSettingsServeStaleContentResult']:
        return pulumi.get(self, "serve_stale_contents")


class AwaitableGetCisCacheSettingsResult(GetCisCacheSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisCacheSettingsResult(
            browser_expirations=self.browser_expirations,
            caching_levels=self.caching_levels,
            cis_id=self.cis_id,
            development_modes=self.development_modes,
            domain_id=self.domain_id,
            id=self.id,
            query_string_sorts=self.query_string_sorts,
            serve_stale_contents=self.serve_stale_contents)


def get_cis_cache_settings(cis_id: Optional[_builtins.str] = None,
                           domain_id: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisCacheSettingsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisCacheSettings:getCisCacheSettings', __args__, opts=opts, typ=GetCisCacheSettingsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisCacheSettingsResult(
        browser_expirations=pulumi.get(__ret__, 'browser_expirations'),
        caching_levels=pulumi.get(__ret__, 'caching_levels'),
        cis_id=pulumi.get(__ret__, 'cis_id'),
        development_modes=pulumi.get(__ret__, 'development_modes'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        query_string_sorts=pulumi.get(__ret__, 'query_string_sorts'),
        serve_stale_contents=pulumi.get(__ret__, 'serve_stale_contents'))
def get_cis_cache_settings_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisCacheSettingsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisCacheSettings:getCisCacheSettings', __args__, opts=opts, typ=GetCisCacheSettingsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisCacheSettingsResult(
        browser_expirations=pulumi.get(__response__, 'browser_expirations'),
        caching_levels=pulumi.get(__response__, 'caching_levels'),
        cis_id=pulumi.get(__response__, 'cis_id'),
        development_modes=pulumi.get(__response__, 'development_modes'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        id=pulumi.get(__response__, 'id'),
        query_string_sorts=pulumi.get(__response__, 'query_string_sorts'),
        serve_stale_contents=pulumi.get(__response__, 'serve_stale_contents')))
