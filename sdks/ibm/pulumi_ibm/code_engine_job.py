# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CodeEngineJobArgs', 'CodeEngineJob']

@pulumi.input_type
class CodeEngineJobArgs:
    def __init__(__self__, *,
                 image_reference: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 code_engine_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 run_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_as_user: Optional[pulumi.Input[_builtins.float]] = None,
                 run_commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunEnvVariableArgs']]]] = None,
                 run_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 run_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 run_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunVolumeMountArgs']]]] = None,
                 scale_array_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_ephemeral_storage_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_max_execution_time: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_retry_limit: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a CodeEngineJob resource.
        :param pulumi.Input[_builtins.str] image_reference: The name of the image that is used for this job. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
               `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
               is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
               property `image_secret`.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] image_secret: The name of the image registry access secret. The image registry access secret is used to authenticate with a private
               registry when you download the container image. If the image reference points to a registry that requires
               authentication, the job / job runs will be created but submitted job runs will fail, until this property is provided,
               too. This property must not be set on a job run, which references a job template.
        :param pulumi.Input[_builtins.str] name: The name of the job.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_arguments: Set arguments for the job that are passed to start job run containers. If not specified an empty string array will be
               applied and the arguments specified by the container image, will be used to start the container.
        :param pulumi.Input[_builtins.float] run_as_user: The user ID (UID) to run the job.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_commands: Set commands for the job that are passed to start job run containers. If not specified an empty string array will be
               applied and the command specified by the container image, will be used to start the container.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunEnvVariableArgs']]] run_env_variables: References to config maps, secrets or literal values, which are exposed as environment variables in the job run.
        :param pulumi.Input[_builtins.str] run_mode: The mode for runs of the job. Valid values are `task` and `daemon`. In `task` mode, the `max_execution_time` and
               `retry_limit` properties apply. In `daemon` mode, since there is no timeout and failed instances are restarted
               indefinitely, the `max_execution_time` and `retry_limit` properties are not allowed.
        :param pulumi.Input[_builtins.str] run_service_account: The name of the service account. For built-in service accounts, you can use the shortened names `manager`, `none`,
               `reader`, and `writer`. This property must not be set on a job run, which references a job template.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunVolumeMountArgs']]] run_volume_mounts: Optional mounts of config maps or secrets.
        :param pulumi.Input[_builtins.str] scale_array_spec: Define a custom set of array indices as a comma-separated list containing single values and hyphen-separated ranges,
               such as 5,12-14,23,27. Each instance gets its array index value from the environment variable JOB_INDEX. The number of
               unique array indices that you specify with this parameter determines the number of job instances to run.
        :param pulumi.Input[_builtins.str] scale_cpu_limit: Optional amount of CPU set for the instance of the job. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        :param pulumi.Input[_builtins.str] scale_ephemeral_storage_limit: Optional amount of ephemeral storage to set for the instance of the job. The amount specified as ephemeral storage, must
               not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
               (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
               measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_max_execution_time: The maximum execution time in seconds for runs of the job. This property can only be specified if `run_mode` is `task`.
        :param pulumi.Input[_builtins.str] scale_memory_limit: Optional amount of memory set for the instance of the job. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
               Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
               [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_retry_limit: The number of times to rerun an instance of the job before the job is marked as failed. This property can only be
               specified if `run_mode` is `task`.
        """
        pulumi.set(__self__, "image_reference", image_reference)
        pulumi.set(__self__, "project_id", project_id)
        if code_engine_job_id is not None:
            pulumi.set(__self__, "code_engine_job_id", code_engine_job_id)
        if image_secret is not None:
            pulumi.set(__self__, "image_secret", image_secret)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if run_arguments is not None:
            pulumi.set(__self__, "run_arguments", run_arguments)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if run_commands is not None:
            pulumi.set(__self__, "run_commands", run_commands)
        if run_env_variables is not None:
            pulumi.set(__self__, "run_env_variables", run_env_variables)
        if run_mode is not None:
            pulumi.set(__self__, "run_mode", run_mode)
        if run_service_account is not None:
            pulumi.set(__self__, "run_service_account", run_service_account)
        if run_volume_mounts is not None:
            pulumi.set(__self__, "run_volume_mounts", run_volume_mounts)
        if scale_array_spec is not None:
            pulumi.set(__self__, "scale_array_spec", scale_array_spec)
        if scale_cpu_limit is not None:
            pulumi.set(__self__, "scale_cpu_limit", scale_cpu_limit)
        if scale_ephemeral_storage_limit is not None:
            pulumi.set(__self__, "scale_ephemeral_storage_limit", scale_ephemeral_storage_limit)
        if scale_max_execution_time is not None:
            pulumi.set(__self__, "scale_max_execution_time", scale_max_execution_time)
        if scale_memory_limit is not None:
            pulumi.set(__self__, "scale_memory_limit", scale_memory_limit)
        if scale_retry_limit is not None:
            pulumi.set(__self__, "scale_retry_limit", scale_retry_limit)

    @_builtins.property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the image that is used for this job. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
        `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
        is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
        property `image_secret`.
        """
        return pulumi.get(self, "image_reference")

    @image_reference.setter
    def image_reference(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_reference", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineJobId")
    def code_engine_job_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_job_id")

    @code_engine_job_id.setter
    def code_engine_job_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_job_id", value)

    @_builtins.property
    @pulumi.getter(name="imageSecret")
    def image_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the image registry access secret. The image registry access secret is used to authenticate with a private
        registry when you download the container image. If the image reference points to a registry that requires
        authentication, the job / job runs will be created but submitted job runs will fail, until this property is provided,
        too. This property must not be set on a job run, which references a job template.
        """
        return pulumi.get(self, "image_secret")

    @image_secret.setter
    def image_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_secret", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the job.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="runArguments")
    def run_arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Set arguments for the job that are passed to start job run containers. If not specified an empty string array will be
        applied and the arguments specified by the container image, will be used to start the container.
        """
        return pulumi.get(self, "run_arguments")

    @run_arguments.setter
    def run_arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "run_arguments", value)

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The user ID (UID) to run the job.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "run_as_user", value)

    @_builtins.property
    @pulumi.getter(name="runCommands")
    def run_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Set commands for the job that are passed to start job run containers. If not specified an empty string array will be
        applied and the command specified by the container image, will be used to start the container.
        """
        return pulumi.get(self, "run_commands")

    @run_commands.setter
    def run_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "run_commands", value)

    @_builtins.property
    @pulumi.getter(name="runEnvVariables")
    def run_env_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunEnvVariableArgs']]]]:
        """
        References to config maps, secrets or literal values, which are exposed as environment variables in the job run.
        """
        return pulumi.get(self, "run_env_variables")

    @run_env_variables.setter
    def run_env_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunEnvVariableArgs']]]]):
        pulumi.set(self, "run_env_variables", value)

    @_builtins.property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The mode for runs of the job. Valid values are `task` and `daemon`. In `task` mode, the `max_execution_time` and
        `retry_limit` properties apply. In `daemon` mode, since there is no timeout and failed instances are restarted
        indefinitely, the `max_execution_time` and `retry_limit` properties are not allowed.
        """
        return pulumi.get(self, "run_mode")

    @run_mode.setter
    def run_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_mode", value)

    @_builtins.property
    @pulumi.getter(name="runServiceAccount")
    def run_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the service account. For built-in service accounts, you can use the shortened names `manager`, `none`,
        `reader`, and `writer`. This property must not be set on a job run, which references a job template.
        """
        return pulumi.get(self, "run_service_account")

    @run_service_account.setter
    def run_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_service_account", value)

    @_builtins.property
    @pulumi.getter(name="runVolumeMounts")
    def run_volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunVolumeMountArgs']]]]:
        """
        Optional mounts of config maps or secrets.
        """
        return pulumi.get(self, "run_volume_mounts")

    @run_volume_mounts.setter
    def run_volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunVolumeMountArgs']]]]):
        pulumi.set(self, "run_volume_mounts", value)

    @_builtins.property
    @pulumi.getter(name="scaleArraySpec")
    def scale_array_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Define a custom set of array indices as a comma-separated list containing single values and hyphen-separated ranges,
        such as 5,12-14,23,27. Each instance gets its array index value from the environment variable JOB_INDEX. The number of
        unique array indices that you specify with this parameter determines the number of job instances to run.
        """
        return pulumi.get(self, "scale_array_spec")

    @scale_array_spec.setter
    def scale_array_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_array_spec", value)

    @_builtins.property
    @pulumi.getter(name="scaleCpuLimit")
    def scale_cpu_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of CPU set for the instance of the job. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        """
        return pulumi.get(self, "scale_cpu_limit")

    @scale_cpu_limit.setter
    def scale_cpu_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_cpu_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleEphemeralStorageLimit")
    def scale_ephemeral_storage_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of ephemeral storage to set for the instance of the job. The amount specified as ephemeral storage, must
        not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
        (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
        measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_ephemeral_storage_limit")

    @scale_ephemeral_storage_limit.setter
    def scale_ephemeral_storage_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_ephemeral_storage_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleMaxExecutionTime")
    def scale_max_execution_time(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum execution time in seconds for runs of the job. This property can only be specified if `run_mode` is `task`.
        """
        return pulumi.get(self, "scale_max_execution_time")

    @scale_max_execution_time.setter
    def scale_max_execution_time(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_max_execution_time", value)

    @_builtins.property
    @pulumi.getter(name="scaleMemoryLimit")
    def scale_memory_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of memory set for the instance of the job. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
        Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
        [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_memory_limit")

    @scale_memory_limit.setter
    def scale_memory_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_memory_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleRetryLimit")
    def scale_retry_limit(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of times to rerun an instance of the job before the job is marked as failed. This property can only be
        specified if `run_mode` is `task`.
        """
        return pulumi.get(self, "scale_retry_limit")

    @scale_retry_limit.setter
    def scale_retry_limit(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_retry_limit", value)


@pulumi.input_type
class _CodeEngineJobState:
    def __init__(__self__, *,
                 build: Optional[pulumi.Input[_builtins.str]] = None,
                 build_run: Optional[pulumi.Input[_builtins.str]] = None,
                 code_engine_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 computed_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobComputedEnvVariableArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 image_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 image_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 run_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_as_user: Optional[pulumi.Input[_builtins.float]] = None,
                 run_commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunEnvVariableArgs']]]] = None,
                 run_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 run_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 run_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunVolumeMountArgs']]]] = None,
                 scale_array_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_ephemeral_storage_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_max_execution_time: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_retry_limit: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering CodeEngineJob resources.
        :param pulumi.Input[_builtins.str] build: Reference to a build that is associated with the job.
        :param pulumi.Input[_builtins.str] build_run: Reference to a build run that is associated with the job.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineJobComputedEnvVariableArgs']]] computed_env_variables: References to config maps, secrets or literal values, which are defined and set by Code Engine and are exposed as
               environment variables in the job run.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the resource was created.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the job instance, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] href: When you provision a new job, a URL is created identifying the location of the instance.
        :param pulumi.Input[_builtins.str] image_reference: The name of the image that is used for this job. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
               `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
               is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
               property `image_secret`.
        :param pulumi.Input[_builtins.str] image_secret: The name of the image registry access secret. The image registry access secret is used to authenticate with a private
               registry when you download the container image. If the image reference points to a registry that requires
               authentication, the job / job runs will be created but submitted job runs will fail, until this property is provided,
               too. This property must not be set on a job run, which references a job template.
        :param pulumi.Input[_builtins.str] job_id: The identifier of the resource.
        :param pulumi.Input[_builtins.str] name: The name of the job.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] region: The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
               'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        :param pulumi.Input[_builtins.str] resource_type: The type of the job.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_arguments: Set arguments for the job that are passed to start job run containers. If not specified an empty string array will be
               applied and the arguments specified by the container image, will be used to start the container.
        :param pulumi.Input[_builtins.float] run_as_user: The user ID (UID) to run the job.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_commands: Set commands for the job that are passed to start job run containers. If not specified an empty string array will be
               applied and the command specified by the container image, will be used to start the container.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunEnvVariableArgs']]] run_env_variables: References to config maps, secrets or literal values, which are exposed as environment variables in the job run.
        :param pulumi.Input[_builtins.str] run_mode: The mode for runs of the job. Valid values are `task` and `daemon`. In `task` mode, the `max_execution_time` and
               `retry_limit` properties apply. In `daemon` mode, since there is no timeout and failed instances are restarted
               indefinitely, the `max_execution_time` and `retry_limit` properties are not allowed.
        :param pulumi.Input[_builtins.str] run_service_account: The name of the service account. For built-in service accounts, you can use the shortened names `manager`, `none`,
               `reader`, and `writer`. This property must not be set on a job run, which references a job template.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunVolumeMountArgs']]] run_volume_mounts: Optional mounts of config maps or secrets.
        :param pulumi.Input[_builtins.str] scale_array_spec: Define a custom set of array indices as a comma-separated list containing single values and hyphen-separated ranges,
               such as 5,12-14,23,27. Each instance gets its array index value from the environment variable JOB_INDEX. The number of
               unique array indices that you specify with this parameter determines the number of job instances to run.
        :param pulumi.Input[_builtins.str] scale_cpu_limit: Optional amount of CPU set for the instance of the job. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        :param pulumi.Input[_builtins.str] scale_ephemeral_storage_limit: Optional amount of ephemeral storage to set for the instance of the job. The amount specified as ephemeral storage, must
               not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
               (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
               measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_max_execution_time: The maximum execution time in seconds for runs of the job. This property can only be specified if `run_mode` is `task`.
        :param pulumi.Input[_builtins.str] scale_memory_limit: Optional amount of memory set for the instance of the job. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
               Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
               [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_retry_limit: The number of times to rerun an instance of the job before the job is marked as failed. This property can only be
               specified if `run_mode` is `task`.
        """
        if build is not None:
            pulumi.set(__self__, "build", build)
        if build_run is not None:
            pulumi.set(__self__, "build_run", build_run)
        if code_engine_job_id is not None:
            pulumi.set(__self__, "code_engine_job_id", code_engine_job_id)
        if computed_env_variables is not None:
            pulumi.set(__self__, "computed_env_variables", computed_env_variables)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if image_reference is not None:
            pulumi.set(__self__, "image_reference", image_reference)
        if image_secret is not None:
            pulumi.set(__self__, "image_secret", image_secret)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if run_arguments is not None:
            pulumi.set(__self__, "run_arguments", run_arguments)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if run_commands is not None:
            pulumi.set(__self__, "run_commands", run_commands)
        if run_env_variables is not None:
            pulumi.set(__self__, "run_env_variables", run_env_variables)
        if run_mode is not None:
            pulumi.set(__self__, "run_mode", run_mode)
        if run_service_account is not None:
            pulumi.set(__self__, "run_service_account", run_service_account)
        if run_volume_mounts is not None:
            pulumi.set(__self__, "run_volume_mounts", run_volume_mounts)
        if scale_array_spec is not None:
            pulumi.set(__self__, "scale_array_spec", scale_array_spec)
        if scale_cpu_limit is not None:
            pulumi.set(__self__, "scale_cpu_limit", scale_cpu_limit)
        if scale_ephemeral_storage_limit is not None:
            pulumi.set(__self__, "scale_ephemeral_storage_limit", scale_ephemeral_storage_limit)
        if scale_max_execution_time is not None:
            pulumi.set(__self__, "scale_max_execution_time", scale_max_execution_time)
        if scale_memory_limit is not None:
            pulumi.set(__self__, "scale_memory_limit", scale_memory_limit)
        if scale_retry_limit is not None:
            pulumi.set(__self__, "scale_retry_limit", scale_retry_limit)

    @_builtins.property
    @pulumi.getter
    def build(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reference to a build that is associated with the job.
        """
        return pulumi.get(self, "build")

    @build.setter
    def build(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build", value)

    @_builtins.property
    @pulumi.getter(name="buildRun")
    def build_run(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reference to a build run that is associated with the job.
        """
        return pulumi.get(self, "build_run")

    @build_run.setter
    def build_run(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build_run", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineJobId")
    def code_engine_job_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_job_id")

    @code_engine_job_id.setter
    def code_engine_job_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_job_id", value)

    @_builtins.property
    @pulumi.getter(name="computedEnvVariables")
    def computed_env_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobComputedEnvVariableArgs']]]]:
        """
        References to config maps, secrets or literal values, which are defined and set by Code Engine and are exposed as
        environment variables in the job run.
        """
        return pulumi.get(self, "computed_env_variables")

    @computed_env_variables.setter
    def computed_env_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobComputedEnvVariableArgs']]]]):
        pulumi.set(self, "computed_env_variables", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the job instance, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When you provision a new job, a URL is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the image that is used for this job. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
        `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
        is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
        property `image_secret`.
        """
        return pulumi.get(self, "image_reference")

    @image_reference.setter
    def image_reference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_reference", value)

    @_builtins.property
    @pulumi.getter(name="imageSecret")
    def image_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the image registry access secret. The image registry access secret is used to authenticate with a private
        registry when you download the container image. If the image reference points to a registry that requires
        authentication, the job / job runs will be created but submitted job runs will fail, until this property is provided,
        too. This property must not be set on a job run, which references a job template.
        """
        return pulumi.get(self, "image_secret")

    @image_secret.setter
    def image_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_secret", value)

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the job.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
        'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the job.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="runArguments")
    def run_arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Set arguments for the job that are passed to start job run containers. If not specified an empty string array will be
        applied and the arguments specified by the container image, will be used to start the container.
        """
        return pulumi.get(self, "run_arguments")

    @run_arguments.setter
    def run_arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "run_arguments", value)

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The user ID (UID) to run the job.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "run_as_user", value)

    @_builtins.property
    @pulumi.getter(name="runCommands")
    def run_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Set commands for the job that are passed to start job run containers. If not specified an empty string array will be
        applied and the command specified by the container image, will be used to start the container.
        """
        return pulumi.get(self, "run_commands")

    @run_commands.setter
    def run_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "run_commands", value)

    @_builtins.property
    @pulumi.getter(name="runEnvVariables")
    def run_env_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunEnvVariableArgs']]]]:
        """
        References to config maps, secrets or literal values, which are exposed as environment variables in the job run.
        """
        return pulumi.get(self, "run_env_variables")

    @run_env_variables.setter
    def run_env_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunEnvVariableArgs']]]]):
        pulumi.set(self, "run_env_variables", value)

    @_builtins.property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The mode for runs of the job. Valid values are `task` and `daemon`. In `task` mode, the `max_execution_time` and
        `retry_limit` properties apply. In `daemon` mode, since there is no timeout and failed instances are restarted
        indefinitely, the `max_execution_time` and `retry_limit` properties are not allowed.
        """
        return pulumi.get(self, "run_mode")

    @run_mode.setter
    def run_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_mode", value)

    @_builtins.property
    @pulumi.getter(name="runServiceAccount")
    def run_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the service account. For built-in service accounts, you can use the shortened names `manager`, `none`,
        `reader`, and `writer`. This property must not be set on a job run, which references a job template.
        """
        return pulumi.get(self, "run_service_account")

    @run_service_account.setter
    def run_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_service_account", value)

    @_builtins.property
    @pulumi.getter(name="runVolumeMounts")
    def run_volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunVolumeMountArgs']]]]:
        """
        Optional mounts of config maps or secrets.
        """
        return pulumi.get(self, "run_volume_mounts")

    @run_volume_mounts.setter
    def run_volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineJobRunVolumeMountArgs']]]]):
        pulumi.set(self, "run_volume_mounts", value)

    @_builtins.property
    @pulumi.getter(name="scaleArraySpec")
    def scale_array_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Define a custom set of array indices as a comma-separated list containing single values and hyphen-separated ranges,
        such as 5,12-14,23,27. Each instance gets its array index value from the environment variable JOB_INDEX. The number of
        unique array indices that you specify with this parameter determines the number of job instances to run.
        """
        return pulumi.get(self, "scale_array_spec")

    @scale_array_spec.setter
    def scale_array_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_array_spec", value)

    @_builtins.property
    @pulumi.getter(name="scaleCpuLimit")
    def scale_cpu_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of CPU set for the instance of the job. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        """
        return pulumi.get(self, "scale_cpu_limit")

    @scale_cpu_limit.setter
    def scale_cpu_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_cpu_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleEphemeralStorageLimit")
    def scale_ephemeral_storage_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of ephemeral storage to set for the instance of the job. The amount specified as ephemeral storage, must
        not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
        (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
        measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_ephemeral_storage_limit")

    @scale_ephemeral_storage_limit.setter
    def scale_ephemeral_storage_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_ephemeral_storage_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleMaxExecutionTime")
    def scale_max_execution_time(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum execution time in seconds for runs of the job. This property can only be specified if `run_mode` is `task`.
        """
        return pulumi.get(self, "scale_max_execution_time")

    @scale_max_execution_time.setter
    def scale_max_execution_time(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_max_execution_time", value)

    @_builtins.property
    @pulumi.getter(name="scaleMemoryLimit")
    def scale_memory_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of memory set for the instance of the job. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
        Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
        [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_memory_limit")

    @scale_memory_limit.setter
    def scale_memory_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_memory_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleRetryLimit")
    def scale_retry_limit(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of times to rerun an instance of the job before the job is marked as failed. This property can only be
        specified if `run_mode` is `task`.
        """
        return pulumi.get(self, "scale_retry_limit")

    @scale_retry_limit.setter
    def scale_retry_limit(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_retry_limit", value)


@pulumi.type_token("ibm:index/codeEngineJob:CodeEngineJob")
class CodeEngineJob(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_engine_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 image_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 run_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_as_user: Optional[pulumi.Input[_builtins.float]] = None,
                 run_commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineJobRunEnvVariableArgs', 'CodeEngineJobRunEnvVariableArgsDict']]]]] = None,
                 run_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 run_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 run_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineJobRunVolumeMountArgs', 'CodeEngineJobRunVolumeMountArgsDict']]]]] = None,
                 scale_array_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_ephemeral_storage_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_max_execution_time: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_retry_limit: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a CodeEngineJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] image_reference: The name of the image that is used for this job. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
               `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
               is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
               property `image_secret`.
        :param pulumi.Input[_builtins.str] image_secret: The name of the image registry access secret. The image registry access secret is used to authenticate with a private
               registry when you download the container image. If the image reference points to a registry that requires
               authentication, the job / job runs will be created but submitted job runs will fail, until this property is provided,
               too. This property must not be set on a job run, which references a job template.
        :param pulumi.Input[_builtins.str] name: The name of the job.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_arguments: Set arguments for the job that are passed to start job run containers. If not specified an empty string array will be
               applied and the arguments specified by the container image, will be used to start the container.
        :param pulumi.Input[_builtins.float] run_as_user: The user ID (UID) to run the job.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_commands: Set commands for the job that are passed to start job run containers. If not specified an empty string array will be
               applied and the command specified by the container image, will be used to start the container.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineJobRunEnvVariableArgs', 'CodeEngineJobRunEnvVariableArgsDict']]]] run_env_variables: References to config maps, secrets or literal values, which are exposed as environment variables in the job run.
        :param pulumi.Input[_builtins.str] run_mode: The mode for runs of the job. Valid values are `task` and `daemon`. In `task` mode, the `max_execution_time` and
               `retry_limit` properties apply. In `daemon` mode, since there is no timeout and failed instances are restarted
               indefinitely, the `max_execution_time` and `retry_limit` properties are not allowed.
        :param pulumi.Input[_builtins.str] run_service_account: The name of the service account. For built-in service accounts, you can use the shortened names `manager`, `none`,
               `reader`, and `writer`. This property must not be set on a job run, which references a job template.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineJobRunVolumeMountArgs', 'CodeEngineJobRunVolumeMountArgsDict']]]] run_volume_mounts: Optional mounts of config maps or secrets.
        :param pulumi.Input[_builtins.str] scale_array_spec: Define a custom set of array indices as a comma-separated list containing single values and hyphen-separated ranges,
               such as 5,12-14,23,27. Each instance gets its array index value from the environment variable JOB_INDEX. The number of
               unique array indices that you specify with this parameter determines the number of job instances to run.
        :param pulumi.Input[_builtins.str] scale_cpu_limit: Optional amount of CPU set for the instance of the job. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        :param pulumi.Input[_builtins.str] scale_ephemeral_storage_limit: Optional amount of ephemeral storage to set for the instance of the job. The amount specified as ephemeral storage, must
               not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
               (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
               measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_max_execution_time: The maximum execution time in seconds for runs of the job. This property can only be specified if `run_mode` is `task`.
        :param pulumi.Input[_builtins.str] scale_memory_limit: Optional amount of memory set for the instance of the job. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
               Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
               [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_retry_limit: The number of times to rerun an instance of the job before the job is marked as failed. This property can only be
               specified if `run_mode` is `task`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CodeEngineJobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CodeEngineJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CodeEngineJobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CodeEngineJobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_engine_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 image_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 run_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_as_user: Optional[pulumi.Input[_builtins.float]] = None,
                 run_commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineJobRunEnvVariableArgs', 'CodeEngineJobRunEnvVariableArgsDict']]]]] = None,
                 run_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 run_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 run_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineJobRunVolumeMountArgs', 'CodeEngineJobRunVolumeMountArgsDict']]]]] = None,
                 scale_array_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_ephemeral_storage_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_max_execution_time: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_retry_limit: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CodeEngineJobArgs.__new__(CodeEngineJobArgs)

            __props__.__dict__["code_engine_job_id"] = code_engine_job_id
            if image_reference is None and not opts.urn:
                raise TypeError("Missing required property 'image_reference'")
            __props__.__dict__["image_reference"] = image_reference
            __props__.__dict__["image_secret"] = image_secret
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["run_arguments"] = run_arguments
            __props__.__dict__["run_as_user"] = run_as_user
            __props__.__dict__["run_commands"] = run_commands
            __props__.__dict__["run_env_variables"] = run_env_variables
            __props__.__dict__["run_mode"] = run_mode
            __props__.__dict__["run_service_account"] = run_service_account
            __props__.__dict__["run_volume_mounts"] = run_volume_mounts
            __props__.__dict__["scale_array_spec"] = scale_array_spec
            __props__.__dict__["scale_cpu_limit"] = scale_cpu_limit
            __props__.__dict__["scale_ephemeral_storage_limit"] = scale_ephemeral_storage_limit
            __props__.__dict__["scale_max_execution_time"] = scale_max_execution_time
            __props__.__dict__["scale_memory_limit"] = scale_memory_limit
            __props__.__dict__["scale_retry_limit"] = scale_retry_limit
            __props__.__dict__["build"] = None
            __props__.__dict__["build_run"] = None
            __props__.__dict__["computed_env_variables"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["entity_tag"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["job_id"] = None
            __props__.__dict__["region"] = None
            __props__.__dict__["resource_type"] = None
        super(CodeEngineJob, __self__).__init__(
            'ibm:index/codeEngineJob:CodeEngineJob',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            build: Optional[pulumi.Input[_builtins.str]] = None,
            build_run: Optional[pulumi.Input[_builtins.str]] = None,
            code_engine_job_id: Optional[pulumi.Input[_builtins.str]] = None,
            computed_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineJobComputedEnvVariableArgs', 'CodeEngineJobComputedEnvVariableArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            image_reference: Optional[pulumi.Input[_builtins.str]] = None,
            image_secret: Optional[pulumi.Input[_builtins.str]] = None,
            job_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            run_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            run_as_user: Optional[pulumi.Input[_builtins.float]] = None,
            run_commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineJobRunEnvVariableArgs', 'CodeEngineJobRunEnvVariableArgsDict']]]]] = None,
            run_mode: Optional[pulumi.Input[_builtins.str]] = None,
            run_service_account: Optional[pulumi.Input[_builtins.str]] = None,
            run_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineJobRunVolumeMountArgs', 'CodeEngineJobRunVolumeMountArgsDict']]]]] = None,
            scale_array_spec: Optional[pulumi.Input[_builtins.str]] = None,
            scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
            scale_ephemeral_storage_limit: Optional[pulumi.Input[_builtins.str]] = None,
            scale_max_execution_time: Optional[pulumi.Input[_builtins.float]] = None,
            scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
            scale_retry_limit: Optional[pulumi.Input[_builtins.float]] = None) -> 'CodeEngineJob':
        """
        Get an existing CodeEngineJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] build: Reference to a build that is associated with the job.
        :param pulumi.Input[_builtins.str] build_run: Reference to a build run that is associated with the job.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineJobComputedEnvVariableArgs', 'CodeEngineJobComputedEnvVariableArgsDict']]]] computed_env_variables: References to config maps, secrets or literal values, which are defined and set by Code Engine and are exposed as
               environment variables in the job run.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the resource was created.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the job instance, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] href: When you provision a new job, a URL is created identifying the location of the instance.
        :param pulumi.Input[_builtins.str] image_reference: The name of the image that is used for this job. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
               `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
               is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
               property `image_secret`.
        :param pulumi.Input[_builtins.str] image_secret: The name of the image registry access secret. The image registry access secret is used to authenticate with a private
               registry when you download the container image. If the image reference points to a registry that requires
               authentication, the job / job runs will be created but submitted job runs will fail, until this property is provided,
               too. This property must not be set on a job run, which references a job template.
        :param pulumi.Input[_builtins.str] job_id: The identifier of the resource.
        :param pulumi.Input[_builtins.str] name: The name of the job.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] region: The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
               'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        :param pulumi.Input[_builtins.str] resource_type: The type of the job.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_arguments: Set arguments for the job that are passed to start job run containers. If not specified an empty string array will be
               applied and the arguments specified by the container image, will be used to start the container.
        :param pulumi.Input[_builtins.float] run_as_user: The user ID (UID) to run the job.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_commands: Set commands for the job that are passed to start job run containers. If not specified an empty string array will be
               applied and the command specified by the container image, will be used to start the container.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineJobRunEnvVariableArgs', 'CodeEngineJobRunEnvVariableArgsDict']]]] run_env_variables: References to config maps, secrets or literal values, which are exposed as environment variables in the job run.
        :param pulumi.Input[_builtins.str] run_mode: The mode for runs of the job. Valid values are `task` and `daemon`. In `task` mode, the `max_execution_time` and
               `retry_limit` properties apply. In `daemon` mode, since there is no timeout and failed instances are restarted
               indefinitely, the `max_execution_time` and `retry_limit` properties are not allowed.
        :param pulumi.Input[_builtins.str] run_service_account: The name of the service account. For built-in service accounts, you can use the shortened names `manager`, `none`,
               `reader`, and `writer`. This property must not be set on a job run, which references a job template.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineJobRunVolumeMountArgs', 'CodeEngineJobRunVolumeMountArgsDict']]]] run_volume_mounts: Optional mounts of config maps or secrets.
        :param pulumi.Input[_builtins.str] scale_array_spec: Define a custom set of array indices as a comma-separated list containing single values and hyphen-separated ranges,
               such as 5,12-14,23,27. Each instance gets its array index value from the environment variable JOB_INDEX. The number of
               unique array indices that you specify with this parameter determines the number of job instances to run.
        :param pulumi.Input[_builtins.str] scale_cpu_limit: Optional amount of CPU set for the instance of the job. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        :param pulumi.Input[_builtins.str] scale_ephemeral_storage_limit: Optional amount of ephemeral storage to set for the instance of the job. The amount specified as ephemeral storage, must
               not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
               (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
               measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_max_execution_time: The maximum execution time in seconds for runs of the job. This property can only be specified if `run_mode` is `task`.
        :param pulumi.Input[_builtins.str] scale_memory_limit: Optional amount of memory set for the instance of the job. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
               Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
               [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_retry_limit: The number of times to rerun an instance of the job before the job is marked as failed. This property can only be
               specified if `run_mode` is `task`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CodeEngineJobState.__new__(_CodeEngineJobState)

        __props__.__dict__["build"] = build
        __props__.__dict__["build_run"] = build_run
        __props__.__dict__["code_engine_job_id"] = code_engine_job_id
        __props__.__dict__["computed_env_variables"] = computed_env_variables
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["entity_tag"] = entity_tag
        __props__.__dict__["etag"] = etag
        __props__.__dict__["href"] = href
        __props__.__dict__["image_reference"] = image_reference
        __props__.__dict__["image_secret"] = image_secret
        __props__.__dict__["job_id"] = job_id
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["run_arguments"] = run_arguments
        __props__.__dict__["run_as_user"] = run_as_user
        __props__.__dict__["run_commands"] = run_commands
        __props__.__dict__["run_env_variables"] = run_env_variables
        __props__.__dict__["run_mode"] = run_mode
        __props__.__dict__["run_service_account"] = run_service_account
        __props__.__dict__["run_volume_mounts"] = run_volume_mounts
        __props__.__dict__["scale_array_spec"] = scale_array_spec
        __props__.__dict__["scale_cpu_limit"] = scale_cpu_limit
        __props__.__dict__["scale_ephemeral_storage_limit"] = scale_ephemeral_storage_limit
        __props__.__dict__["scale_max_execution_time"] = scale_max_execution_time
        __props__.__dict__["scale_memory_limit"] = scale_memory_limit
        __props__.__dict__["scale_retry_limit"] = scale_retry_limit
        return CodeEngineJob(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def build(self) -> pulumi.Output[_builtins.str]:
        """
        Reference to a build that is associated with the job.
        """
        return pulumi.get(self, "build")

    @_builtins.property
    @pulumi.getter(name="buildRun")
    def build_run(self) -> pulumi.Output[_builtins.str]:
        """
        Reference to a build run that is associated with the job.
        """
        return pulumi.get(self, "build_run")

    @_builtins.property
    @pulumi.getter(name="codeEngineJobId")
    def code_engine_job_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "code_engine_job_id")

    @_builtins.property
    @pulumi.getter(name="computedEnvVariables")
    def computed_env_variables(self) -> pulumi.Output[Sequence['outputs.CodeEngineJobComputedEnvVariable']]:
        """
        References to config maps, secrets or literal values, which are defined and set by Code Engine and are exposed as
        environment variables in the job run.
        """
        return pulumi.get(self, "computed_env_variables")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> pulumi.Output[_builtins.str]:
        """
        The version of the job instance, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        When you provision a new job, a URL is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the image that is used for this job. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
        `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
        is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
        property `image_secret`.
        """
        return pulumi.get(self, "image_reference")

    @_builtins.property
    @pulumi.getter(name="imageSecret")
    def image_secret(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the image registry access secret. The image registry access secret is used to authenticate with a private
        registry when you download the container image. If the image reference points to a registry that requires
        authentication, the job / job runs will be created but submitted job runs will fail, until this property is provided,
        too. This property must not be set on a job run, which references a job template.
        """
        return pulumi.get(self, "image_secret")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Output[_builtins.str]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the job.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
        'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the job.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="runArguments")
    def run_arguments(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Set arguments for the job that are passed to start job run containers. If not specified an empty string array will be
        applied and the arguments specified by the container image, will be used to start the container.
        """
        return pulumi.get(self, "run_arguments")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The user ID (UID) to run the job.
        """
        return pulumi.get(self, "run_as_user")

    @_builtins.property
    @pulumi.getter(name="runCommands")
    def run_commands(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Set commands for the job that are passed to start job run containers. If not specified an empty string array will be
        applied and the command specified by the container image, will be used to start the container.
        """
        return pulumi.get(self, "run_commands")

    @_builtins.property
    @pulumi.getter(name="runEnvVariables")
    def run_env_variables(self) -> pulumi.Output[Optional[Sequence['outputs.CodeEngineJobRunEnvVariable']]]:
        """
        References to config maps, secrets or literal values, which are exposed as environment variables in the job run.
        """
        return pulumi.get(self, "run_env_variables")

    @_builtins.property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The mode for runs of the job. Valid values are `task` and `daemon`. In `task` mode, the `max_execution_time` and
        `retry_limit` properties apply. In `daemon` mode, since there is no timeout and failed instances are restarted
        indefinitely, the `max_execution_time` and `retry_limit` properties are not allowed.
        """
        return pulumi.get(self, "run_mode")

    @_builtins.property
    @pulumi.getter(name="runServiceAccount")
    def run_service_account(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the service account. For built-in service accounts, you can use the shortened names `manager`, `none`,
        `reader`, and `writer`. This property must not be set on a job run, which references a job template.
        """
        return pulumi.get(self, "run_service_account")

    @_builtins.property
    @pulumi.getter(name="runVolumeMounts")
    def run_volume_mounts(self) -> pulumi.Output[Optional[Sequence['outputs.CodeEngineJobRunVolumeMount']]]:
        """
        Optional mounts of config maps or secrets.
        """
        return pulumi.get(self, "run_volume_mounts")

    @_builtins.property
    @pulumi.getter(name="scaleArraySpec")
    def scale_array_spec(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Define a custom set of array indices as a comma-separated list containing single values and hyphen-separated ranges,
        such as 5,12-14,23,27. Each instance gets its array index value from the environment variable JOB_INDEX. The number of
        unique array indices that you specify with this parameter determines the number of job instances to run.
        """
        return pulumi.get(self, "scale_array_spec")

    @_builtins.property
    @pulumi.getter(name="scaleCpuLimit")
    def scale_cpu_limit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional amount of CPU set for the instance of the job. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        """
        return pulumi.get(self, "scale_cpu_limit")

    @_builtins.property
    @pulumi.getter(name="scaleEphemeralStorageLimit")
    def scale_ephemeral_storage_limit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional amount of ephemeral storage to set for the instance of the job. The amount specified as ephemeral storage, must
        not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
        (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
        measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_ephemeral_storage_limit")

    @_builtins.property
    @pulumi.getter(name="scaleMaxExecutionTime")
    def scale_max_execution_time(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The maximum execution time in seconds for runs of the job. This property can only be specified if `run_mode` is `task`.
        """
        return pulumi.get(self, "scale_max_execution_time")

    @_builtins.property
    @pulumi.getter(name="scaleMemoryLimit")
    def scale_memory_limit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional amount of memory set for the instance of the job. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
        Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
        [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_memory_limit")

    @_builtins.property
    @pulumi.getter(name="scaleRetryLimit")
    def scale_retry_limit(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The number of times to rerun an instance of the job before the job is marked as failed. This property can only be
        specified if `run_mode` is `task`.
        """
        return pulumi.get(self, "scale_retry_limit")

