# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiVolumeGroupStorageDetailsResult',
    'AwaitableGetPiVolumeGroupStorageDetailsResult',
    'get_pi_volume_group_storage_details',
    'get_pi_volume_group_storage_details_output',
]

@pulumi.output_type
class GetPiVolumeGroupStorageDetailsResult:
    """
    A collection of values returned by getPiVolumeGroupStorageDetails.
    """
    def __init__(__self__, consistency_group_name=None, cycle_period_seconds=None, cycling_mode=None, id=None, number_of_volumes=None, pi_cloud_instance_id=None, pi_volume_group_id=None, primary_role=None, remote_copy_relationship_names=None, replication_type=None, state=None, synchronized=None):
        if consistency_group_name and not isinstance(consistency_group_name, str):
            raise TypeError("Expected argument 'consistency_group_name' to be a str")
        pulumi.set(__self__, "consistency_group_name", consistency_group_name)
        if cycle_period_seconds and not isinstance(cycle_period_seconds, float):
            raise TypeError("Expected argument 'cycle_period_seconds' to be a float")
        pulumi.set(__self__, "cycle_period_seconds", cycle_period_seconds)
        if cycling_mode and not isinstance(cycling_mode, str):
            raise TypeError("Expected argument 'cycling_mode' to be a str")
        pulumi.set(__self__, "cycling_mode", cycling_mode)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if number_of_volumes and not isinstance(number_of_volumes, float):
            raise TypeError("Expected argument 'number_of_volumes' to be a float")
        pulumi.set(__self__, "number_of_volumes", number_of_volumes)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_volume_group_id and not isinstance(pi_volume_group_id, str):
            raise TypeError("Expected argument 'pi_volume_group_id' to be a str")
        pulumi.set(__self__, "pi_volume_group_id", pi_volume_group_id)
        if primary_role and not isinstance(primary_role, str):
            raise TypeError("Expected argument 'primary_role' to be a str")
        pulumi.set(__self__, "primary_role", primary_role)
        if remote_copy_relationship_names and not isinstance(remote_copy_relationship_names, list):
            raise TypeError("Expected argument 'remote_copy_relationship_names' to be a list")
        pulumi.set(__self__, "remote_copy_relationship_names", remote_copy_relationship_names)
        if replication_type and not isinstance(replication_type, str):
            raise TypeError("Expected argument 'replication_type' to be a str")
        pulumi.set(__self__, "replication_type", replication_type)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if synchronized and not isinstance(synchronized, str):
            raise TypeError("Expected argument 'synchronized' to be a str")
        pulumi.set(__self__, "synchronized", synchronized)

    @_builtins.property
    @pulumi.getter(name="consistencyGroupName")
    def consistency_group_name(self) -> _builtins.str:
        return pulumi.get(self, "consistency_group_name")

    @_builtins.property
    @pulumi.getter(name="cyclePeriodSeconds")
    def cycle_period_seconds(self) -> _builtins.float:
        return pulumi.get(self, "cycle_period_seconds")

    @_builtins.property
    @pulumi.getter(name="cyclingMode")
    def cycling_mode(self) -> _builtins.str:
        return pulumi.get(self, "cycling_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="numberOfVolumes")
    def number_of_volumes(self) -> _builtins.float:
        return pulumi.get(self, "number_of_volumes")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piVolumeGroupId")
    def pi_volume_group_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_volume_group_id")

    @_builtins.property
    @pulumi.getter(name="primaryRole")
    def primary_role(self) -> _builtins.str:
        return pulumi.get(self, "primary_role")

    @_builtins.property
    @pulumi.getter(name="remoteCopyRelationshipNames")
    def remote_copy_relationship_names(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "remote_copy_relationship_names")

    @_builtins.property
    @pulumi.getter(name="replicationType")
    def replication_type(self) -> _builtins.str:
        return pulumi.get(self, "replication_type")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def synchronized(self) -> _builtins.str:
        return pulumi.get(self, "synchronized")


class AwaitableGetPiVolumeGroupStorageDetailsResult(GetPiVolumeGroupStorageDetailsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiVolumeGroupStorageDetailsResult(
            consistency_group_name=self.consistency_group_name,
            cycle_period_seconds=self.cycle_period_seconds,
            cycling_mode=self.cycling_mode,
            id=self.id,
            number_of_volumes=self.number_of_volumes,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_volume_group_id=self.pi_volume_group_id,
            primary_role=self.primary_role,
            remote_copy_relationship_names=self.remote_copy_relationship_names,
            replication_type=self.replication_type,
            state=self.state,
            synchronized=self.synchronized)


def get_pi_volume_group_storage_details(id: Optional[_builtins.str] = None,
                                        pi_cloud_instance_id: Optional[_builtins.str] = None,
                                        pi_volume_group_id: Optional[_builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiVolumeGroupStorageDetailsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piVolumeGroupId'] = pi_volume_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiVolumeGroupStorageDetails:getPiVolumeGroupStorageDetails', __args__, opts=opts, typ=GetPiVolumeGroupStorageDetailsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiVolumeGroupStorageDetailsResult(
        consistency_group_name=pulumi.get(__ret__, 'consistency_group_name'),
        cycle_period_seconds=pulumi.get(__ret__, 'cycle_period_seconds'),
        cycling_mode=pulumi.get(__ret__, 'cycling_mode'),
        id=pulumi.get(__ret__, 'id'),
        number_of_volumes=pulumi.get(__ret__, 'number_of_volumes'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_volume_group_id=pulumi.get(__ret__, 'pi_volume_group_id'),
        primary_role=pulumi.get(__ret__, 'primary_role'),
        remote_copy_relationship_names=pulumi.get(__ret__, 'remote_copy_relationship_names'),
        replication_type=pulumi.get(__ret__, 'replication_type'),
        state=pulumi.get(__ret__, 'state'),
        synchronized=pulumi.get(__ret__, 'synchronized'))
def get_pi_volume_group_storage_details_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                               pi_volume_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiVolumeGroupStorageDetailsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piVolumeGroupId'] = pi_volume_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiVolumeGroupStorageDetails:getPiVolumeGroupStorageDetails', __args__, opts=opts, typ=GetPiVolumeGroupStorageDetailsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiVolumeGroupStorageDetailsResult(
        consistency_group_name=pulumi.get(__response__, 'consistency_group_name'),
        cycle_period_seconds=pulumi.get(__response__, 'cycle_period_seconds'),
        cycling_mode=pulumi.get(__response__, 'cycling_mode'),
        id=pulumi.get(__response__, 'id'),
        number_of_volumes=pulumi.get(__response__, 'number_of_volumes'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_volume_group_id=pulumi.get(__response__, 'pi_volume_group_id'),
        primary_role=pulumi.get(__response__, 'primary_role'),
        remote_copy_relationship_names=pulumi.get(__response__, 'remote_copy_relationship_names'),
        replication_type=pulumi.get(__response__, 'replication_type'),
        state=pulumi.get(__response__, 'state'),
        synchronized=pulumi.get(__response__, 'synchronized')))
