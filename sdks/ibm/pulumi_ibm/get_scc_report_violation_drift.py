# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccReportViolationDriftResult',
    'AwaitableGetSccReportViolationDriftResult',
    'get_scc_report_violation_drift',
    'get_scc_report_violation_drift_output',
]

@pulumi.output_type
class GetSccReportViolationDriftResult:
    """
    A collection of values returned by getSccReportViolationDrift.
    """
    def __init__(__self__, data_points=None, home_account_id=None, id=None, instance_id=None, report_id=None, scan_time_duration=None):
        if data_points and not isinstance(data_points, list):
            raise TypeError("Expected argument 'data_points' to be a list")
        pulumi.set(__self__, "data_points", data_points)
        if home_account_id and not isinstance(home_account_id, str):
            raise TypeError("Expected argument 'home_account_id' to be a str")
        pulumi.set(__self__, "home_account_id", home_account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if report_id and not isinstance(report_id, str):
            raise TypeError("Expected argument 'report_id' to be a str")
        pulumi.set(__self__, "report_id", report_id)
        if scan_time_duration and not isinstance(scan_time_duration, float):
            raise TypeError("Expected argument 'scan_time_duration' to be a float")
        pulumi.set(__self__, "scan_time_duration", scan_time_duration)

    @_builtins.property
    @pulumi.getter(name="dataPoints")
    def data_points(self) -> Sequence['outputs.GetSccReportViolationDriftDataPointResult']:
        return pulumi.get(self, "data_points")

    @_builtins.property
    @pulumi.getter(name="homeAccountId")
    def home_account_id(self) -> _builtins.str:
        return pulumi.get(self, "home_account_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="reportId")
    def report_id(self) -> _builtins.str:
        return pulumi.get(self, "report_id")

    @_builtins.property
    @pulumi.getter(name="scanTimeDuration")
    def scan_time_duration(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "scan_time_duration")


class AwaitableGetSccReportViolationDriftResult(GetSccReportViolationDriftResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccReportViolationDriftResult(
            data_points=self.data_points,
            home_account_id=self.home_account_id,
            id=self.id,
            instance_id=self.instance_id,
            report_id=self.report_id,
            scan_time_duration=self.scan_time_duration)


def get_scc_report_violation_drift(id: Optional[_builtins.str] = None,
                                   instance_id: Optional[_builtins.str] = None,
                                   report_id: Optional[_builtins.str] = None,
                                   scan_time_duration: Optional[_builtins.float] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccReportViolationDriftResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    __args__['scanTimeDuration'] = scan_time_duration
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccReportViolationDrift:getSccReportViolationDrift', __args__, opts=opts, typ=GetSccReportViolationDriftResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccReportViolationDriftResult(
        data_points=pulumi.get(__ret__, 'data_points'),
        home_account_id=pulumi.get(__ret__, 'home_account_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        report_id=pulumi.get(__ret__, 'report_id'),
        scan_time_duration=pulumi.get(__ret__, 'scan_time_duration'))
def get_scc_report_violation_drift_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          report_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          scan_time_duration: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccReportViolationDriftResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    __args__['scanTimeDuration'] = scan_time_duration
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccReportViolationDrift:getSccReportViolationDrift', __args__, opts=opts, typ=GetSccReportViolationDriftResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccReportViolationDriftResult(
        data_points=pulumi.get(__response__, 'data_points'),
        home_account_id=pulumi.get(__response__, 'home_account_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        report_id=pulumi.get(__response__, 'report_id'),
        scan_time_duration=pulumi.get(__response__, 'scan_time_duration')))
