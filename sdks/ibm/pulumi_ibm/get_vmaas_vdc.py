# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetVmaasVdcResult',
    'AwaitableGetVmaasVdcResult',
    'get_vmaas_vdc',
    'get_vmaas_vdc_output',
]

@pulumi.output_type
class GetVmaasVdcResult:
    """
    A collection of values returned by getVmaasVdc.
    """
    def __init__(__self__, accept_language=None, cpu=None, crn=None, deleted_at=None, director_sites=None, edges=None, fast_provisioning_enabled=None, ha=None, href=None, id=None, name=None, ordered_at=None, org_href=None, org_name=None, provisioned_at=None, ram=None, rhel_byol=None, status=None, status_reasons=None, type=None, vmaas_vdc_id=None, windows_byol=None):
        if accept_language and not isinstance(accept_language, str):
            raise TypeError("Expected argument 'accept_language' to be a str")
        pulumi.set(__self__, "accept_language", accept_language)
        if cpu and not isinstance(cpu, float):
            raise TypeError("Expected argument 'cpu' to be a float")
        pulumi.set(__self__, "cpu", cpu)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if deleted_at and not isinstance(deleted_at, str):
            raise TypeError("Expected argument 'deleted_at' to be a str")
        pulumi.set(__self__, "deleted_at", deleted_at)
        if director_sites and not isinstance(director_sites, list):
            raise TypeError("Expected argument 'director_sites' to be a list")
        pulumi.set(__self__, "director_sites", director_sites)
        if edges and not isinstance(edges, list):
            raise TypeError("Expected argument 'edges' to be a list")
        pulumi.set(__self__, "edges", edges)
        if fast_provisioning_enabled and not isinstance(fast_provisioning_enabled, bool):
            raise TypeError("Expected argument 'fast_provisioning_enabled' to be a bool")
        pulumi.set(__self__, "fast_provisioning_enabled", fast_provisioning_enabled)
        if ha and not isinstance(ha, str):
            raise TypeError("Expected argument 'ha' to be a str")
        pulumi.set(__self__, "ha", ha)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ordered_at and not isinstance(ordered_at, str):
            raise TypeError("Expected argument 'ordered_at' to be a str")
        pulumi.set(__self__, "ordered_at", ordered_at)
        if org_href and not isinstance(org_href, str):
            raise TypeError("Expected argument 'org_href' to be a str")
        pulumi.set(__self__, "org_href", org_href)
        if org_name and not isinstance(org_name, str):
            raise TypeError("Expected argument 'org_name' to be a str")
        pulumi.set(__self__, "org_name", org_name)
        if provisioned_at and not isinstance(provisioned_at, str):
            raise TypeError("Expected argument 'provisioned_at' to be a str")
        pulumi.set(__self__, "provisioned_at", provisioned_at)
        if ram and not isinstance(ram, float):
            raise TypeError("Expected argument 'ram' to be a float")
        pulumi.set(__self__, "ram", ram)
        if rhel_byol and not isinstance(rhel_byol, bool):
            raise TypeError("Expected argument 'rhel_byol' to be a bool")
        pulumi.set(__self__, "rhel_byol", rhel_byol)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vmaas_vdc_id and not isinstance(vmaas_vdc_id, str):
            raise TypeError("Expected argument 'vmaas_vdc_id' to be a str")
        pulumi.set(__self__, "vmaas_vdc_id", vmaas_vdc_id)
        if windows_byol and not isinstance(windows_byol, bool):
            raise TypeError("Expected argument 'windows_byol' to be a bool")
        pulumi.set(__self__, "windows_byol", windows_byol)

    @_builtins.property
    @pulumi.getter(name="acceptLanguage")
    def accept_language(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "accept_language")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.float:
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> _builtins.str:
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="directorSites")
    def director_sites(self) -> Sequence['outputs.GetVmaasVdcDirectorSiteResult']:
        return pulumi.get(self, "director_sites")

    @_builtins.property
    @pulumi.getter
    def edges(self) -> Sequence['outputs.GetVmaasVdcEdgeResult']:
        return pulumi.get(self, "edges")

    @_builtins.property
    @pulumi.getter(name="fastProvisioningEnabled")
    def fast_provisioning_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "fast_provisioning_enabled")

    @_builtins.property
    @pulumi.getter
    def ha(self) -> _builtins.str:
        return pulumi.get(self, "ha")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orderedAt")
    def ordered_at(self) -> _builtins.str:
        return pulumi.get(self, "ordered_at")

    @_builtins.property
    @pulumi.getter(name="orgHref")
    def org_href(self) -> _builtins.str:
        return pulumi.get(self, "org_href")

    @_builtins.property
    @pulumi.getter(name="orgName")
    def org_name(self) -> _builtins.str:
        return pulumi.get(self, "org_name")

    @_builtins.property
    @pulumi.getter(name="provisionedAt")
    def provisioned_at(self) -> _builtins.str:
        return pulumi.get(self, "provisioned_at")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> _builtins.float:
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter(name="rhelByol")
    def rhel_byol(self) -> _builtins.bool:
        return pulumi.get(self, "rhel_byol")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Sequence['outputs.GetVmaasVdcStatusReasonResult']:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vmaasVdcId")
    def vmaas_vdc_id(self) -> _builtins.str:
        return pulumi.get(self, "vmaas_vdc_id")

    @_builtins.property
    @pulumi.getter(name="windowsByol")
    def windows_byol(self) -> _builtins.bool:
        return pulumi.get(self, "windows_byol")


class AwaitableGetVmaasVdcResult(GetVmaasVdcResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmaasVdcResult(
            accept_language=self.accept_language,
            cpu=self.cpu,
            crn=self.crn,
            deleted_at=self.deleted_at,
            director_sites=self.director_sites,
            edges=self.edges,
            fast_provisioning_enabled=self.fast_provisioning_enabled,
            ha=self.ha,
            href=self.href,
            id=self.id,
            name=self.name,
            ordered_at=self.ordered_at,
            org_href=self.org_href,
            org_name=self.org_name,
            provisioned_at=self.provisioned_at,
            ram=self.ram,
            rhel_byol=self.rhel_byol,
            status=self.status,
            status_reasons=self.status_reasons,
            type=self.type,
            vmaas_vdc_id=self.vmaas_vdc_id,
            windows_byol=self.windows_byol)


def get_vmaas_vdc(accept_language: Optional[_builtins.str] = None,
                  id: Optional[_builtins.str] = None,
                  vmaas_vdc_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmaasVdcResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['acceptLanguage'] = accept_language
    __args__['id'] = id
    __args__['vmaasVdcId'] = vmaas_vdc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getVmaasVdc:getVmaasVdc', __args__, opts=opts, typ=GetVmaasVdcResult, package_ref=_utilities.get_package()).value

    return AwaitableGetVmaasVdcResult(
        accept_language=pulumi.get(__ret__, 'accept_language'),
        cpu=pulumi.get(__ret__, 'cpu'),
        crn=pulumi.get(__ret__, 'crn'),
        deleted_at=pulumi.get(__ret__, 'deleted_at'),
        director_sites=pulumi.get(__ret__, 'director_sites'),
        edges=pulumi.get(__ret__, 'edges'),
        fast_provisioning_enabled=pulumi.get(__ret__, 'fast_provisioning_enabled'),
        ha=pulumi.get(__ret__, 'ha'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        ordered_at=pulumi.get(__ret__, 'ordered_at'),
        org_href=pulumi.get(__ret__, 'org_href'),
        org_name=pulumi.get(__ret__, 'org_name'),
        provisioned_at=pulumi.get(__ret__, 'provisioned_at'),
        ram=pulumi.get(__ret__, 'ram'),
        rhel_byol=pulumi.get(__ret__, 'rhel_byol'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        type=pulumi.get(__ret__, 'type'),
        vmaas_vdc_id=pulumi.get(__ret__, 'vmaas_vdc_id'),
        windows_byol=pulumi.get(__ret__, 'windows_byol'))
def get_vmaas_vdc_output(accept_language: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         vmaas_vdc_id: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVmaasVdcResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['acceptLanguage'] = accept_language
    __args__['id'] = id
    __args__['vmaasVdcId'] = vmaas_vdc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getVmaasVdc:getVmaasVdc', __args__, opts=opts, typ=GetVmaasVdcResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetVmaasVdcResult(
        accept_language=pulumi.get(__response__, 'accept_language'),
        cpu=pulumi.get(__response__, 'cpu'),
        crn=pulumi.get(__response__, 'crn'),
        deleted_at=pulumi.get(__response__, 'deleted_at'),
        director_sites=pulumi.get(__response__, 'director_sites'),
        edges=pulumi.get(__response__, 'edges'),
        fast_provisioning_enabled=pulumi.get(__response__, 'fast_provisioning_enabled'),
        ha=pulumi.get(__response__, 'ha'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        ordered_at=pulumi.get(__response__, 'ordered_at'),
        org_href=pulumi.get(__response__, 'org_href'),
        org_name=pulumi.get(__response__, 'org_name'),
        provisioned_at=pulumi.get(__response__, 'provisioned_at'),
        ram=pulumi.get(__response__, 'ram'),
        rhel_byol=pulumi.get(__response__, 'rhel_byol'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        type=pulumi.get(__response__, 'type'),
        vmaas_vdc_id=pulumi.get(__response__, 'vmaas_vdc_id'),
        windows_byol=pulumi.get(__response__, 'windows_byol')))
