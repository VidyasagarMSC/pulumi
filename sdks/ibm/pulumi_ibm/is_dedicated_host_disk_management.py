# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsDedicatedHostDiskManagementArgs', 'IsDedicatedHostDiskManagement']

@pulumi.input_type
class IsDedicatedHostDiskManagementArgs:
    def __init__(__self__, *,
                 dedicated_host: pulumi.Input[_builtins.str],
                 disks: pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostDiskManagementDiskArgs']]],
                 is_dedicated_host_disk_management_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsDedicatedHostDiskManagement resource.
        :param pulumi.Input[_builtins.str] dedicated_host: ID of the dedicated host for which disks has to be managed
        :param pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostDiskManagementDiskArgs']]] disks: Disk information that has to be updated.
        """
        pulumi.set(__self__, "dedicated_host", dedicated_host)
        pulumi.set(__self__, "disks", disks)
        if is_dedicated_host_disk_management_id is not None:
            pulumi.set(__self__, "is_dedicated_host_disk_management_id", is_dedicated_host_disk_management_id)

    @_builtins.property
    @pulumi.getter(name="dedicatedHost")
    def dedicated_host(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the dedicated host for which disks has to be managed
        """
        return pulumi.get(self, "dedicated_host")

    @dedicated_host.setter
    def dedicated_host(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dedicated_host", value)

    @_builtins.property
    @pulumi.getter
    def disks(self) -> pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostDiskManagementDiskArgs']]]:
        """
        Disk information that has to be updated.
        """
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostDiskManagementDiskArgs']]]):
        pulumi.set(self, "disks", value)

    @_builtins.property
    @pulumi.getter(name="isDedicatedHostDiskManagementId")
    def is_dedicated_host_disk_management_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_dedicated_host_disk_management_id")

    @is_dedicated_host_disk_management_id.setter
    def is_dedicated_host_disk_management_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_dedicated_host_disk_management_id", value)


@pulumi.input_type
class _IsDedicatedHostDiskManagementState:
    def __init__(__self__, *,
                 dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostDiskManagementDiskArgs']]]] = None,
                 is_dedicated_host_disk_management_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsDedicatedHostDiskManagement resources.
        :param pulumi.Input[_builtins.str] dedicated_host: ID of the dedicated host for which disks has to be managed
        :param pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostDiskManagementDiskArgs']]] disks: Disk information that has to be updated.
        """
        if dedicated_host is not None:
            pulumi.set(__self__, "dedicated_host", dedicated_host)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if is_dedicated_host_disk_management_id is not None:
            pulumi.set(__self__, "is_dedicated_host_disk_management_id", is_dedicated_host_disk_management_id)

    @_builtins.property
    @pulumi.getter(name="dedicatedHost")
    def dedicated_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the dedicated host for which disks has to be managed
        """
        return pulumi.get(self, "dedicated_host")

    @dedicated_host.setter
    def dedicated_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_host", value)

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostDiskManagementDiskArgs']]]]:
        """
        Disk information that has to be updated.
        """
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostDiskManagementDiskArgs']]]]):
        pulumi.set(self, "disks", value)

    @_builtins.property
    @pulumi.getter(name="isDedicatedHostDiskManagementId")
    def is_dedicated_host_disk_management_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_dedicated_host_disk_management_id")

    @is_dedicated_host_disk_management_id.setter
    def is_dedicated_host_disk_management_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_dedicated_host_disk_management_id", value)


@pulumi.type_token("ibm:index/isDedicatedHostDiskManagement:IsDedicatedHostDiskManagement")
class IsDedicatedHostDiskManagement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostDiskManagementDiskArgs', 'IsDedicatedHostDiskManagementDiskArgsDict']]]]] = None,
                 is_dedicated_host_disk_management_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsDedicatedHostDiskManagement resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] dedicated_host: ID of the dedicated host for which disks has to be managed
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostDiskManagementDiskArgs', 'IsDedicatedHostDiskManagementDiskArgsDict']]]] disks: Disk information that has to be updated.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsDedicatedHostDiskManagementArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsDedicatedHostDiskManagement resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsDedicatedHostDiskManagementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsDedicatedHostDiskManagementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostDiskManagementDiskArgs', 'IsDedicatedHostDiskManagementDiskArgsDict']]]]] = None,
                 is_dedicated_host_disk_management_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsDedicatedHostDiskManagementArgs.__new__(IsDedicatedHostDiskManagementArgs)

            if dedicated_host is None and not opts.urn:
                raise TypeError("Missing required property 'dedicated_host'")
            __props__.__dict__["dedicated_host"] = dedicated_host
            if disks is None and not opts.urn:
                raise TypeError("Missing required property 'disks'")
            __props__.__dict__["disks"] = disks
            __props__.__dict__["is_dedicated_host_disk_management_id"] = is_dedicated_host_disk_management_id
        super(IsDedicatedHostDiskManagement, __self__).__init__(
            'ibm:index/isDedicatedHostDiskManagement:IsDedicatedHostDiskManagement',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
            disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostDiskManagementDiskArgs', 'IsDedicatedHostDiskManagementDiskArgsDict']]]]] = None,
            is_dedicated_host_disk_management_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsDedicatedHostDiskManagement':
        """
        Get an existing IsDedicatedHostDiskManagement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] dedicated_host: ID of the dedicated host for which disks has to be managed
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostDiskManagementDiskArgs', 'IsDedicatedHostDiskManagementDiskArgsDict']]]] disks: Disk information that has to be updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsDedicatedHostDiskManagementState.__new__(_IsDedicatedHostDiskManagementState)

        __props__.__dict__["dedicated_host"] = dedicated_host
        __props__.__dict__["disks"] = disks
        __props__.__dict__["is_dedicated_host_disk_management_id"] = is_dedicated_host_disk_management_id
        return IsDedicatedHostDiskManagement(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dedicatedHost")
    def dedicated_host(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the dedicated host for which disks has to be managed
        """
        return pulumi.get(self, "dedicated_host")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> pulumi.Output[Sequence['outputs.IsDedicatedHostDiskManagementDisk']]:
        """
        Disk information that has to be updated.
        """
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter(name="isDedicatedHostDiskManagementId")
    def is_dedicated_host_disk_management_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_dedicated_host_disk_management_id")

