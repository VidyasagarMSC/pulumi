# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiCloudConnectionResult',
    'AwaitableGetPiCloudConnectionResult',
    'get_pi_cloud_connection',
    'get_pi_cloud_connection_output',
]

@pulumi.output_type
class GetPiCloudConnectionResult:
    """
    A collection of values returned by getPiCloudConnection.
    """
    def __init__(__self__, classic_enabled=None, connection_mode=None, global_routing=None, gre_destination_address=None, gre_source_address=None, ibm_ip_address=None, id=None, metered=None, networks=None, pi_cloud_connection_name=None, pi_cloud_instance_id=None, port=None, speed=None, status=None, user_ip_address=None, vpc_crns=None, vpc_enabled=None):
        if classic_enabled and not isinstance(classic_enabled, bool):
            raise TypeError("Expected argument 'classic_enabled' to be a bool")
        pulumi.set(__self__, "classic_enabled", classic_enabled)
        if connection_mode and not isinstance(connection_mode, str):
            raise TypeError("Expected argument 'connection_mode' to be a str")
        pulumi.set(__self__, "connection_mode", connection_mode)
        if global_routing and not isinstance(global_routing, bool):
            raise TypeError("Expected argument 'global_routing' to be a bool")
        pulumi.set(__self__, "global_routing", global_routing)
        if gre_destination_address and not isinstance(gre_destination_address, str):
            raise TypeError("Expected argument 'gre_destination_address' to be a str")
        pulumi.set(__self__, "gre_destination_address", gre_destination_address)
        if gre_source_address and not isinstance(gre_source_address, str):
            raise TypeError("Expected argument 'gre_source_address' to be a str")
        pulumi.set(__self__, "gre_source_address", gre_source_address)
        if ibm_ip_address and not isinstance(ibm_ip_address, str):
            raise TypeError("Expected argument 'ibm_ip_address' to be a str")
        pulumi.set(__self__, "ibm_ip_address", ibm_ip_address)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metered and not isinstance(metered, bool):
            raise TypeError("Expected argument 'metered' to be a bool")
        pulumi.set(__self__, "metered", metered)
        if networks and not isinstance(networks, list):
            raise TypeError("Expected argument 'networks' to be a list")
        pulumi.set(__self__, "networks", networks)
        if pi_cloud_connection_name and not isinstance(pi_cloud_connection_name, str):
            raise TypeError("Expected argument 'pi_cloud_connection_name' to be a str")
        pulumi.set(__self__, "pi_cloud_connection_name", pi_cloud_connection_name)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if port and not isinstance(port, str):
            raise TypeError("Expected argument 'port' to be a str")
        pulumi.set(__self__, "port", port)
        if speed and not isinstance(speed, float):
            raise TypeError("Expected argument 'speed' to be a float")
        pulumi.set(__self__, "speed", speed)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if user_ip_address and not isinstance(user_ip_address, str):
            raise TypeError("Expected argument 'user_ip_address' to be a str")
        pulumi.set(__self__, "user_ip_address", user_ip_address)
        if vpc_crns and not isinstance(vpc_crns, list):
            raise TypeError("Expected argument 'vpc_crns' to be a list")
        pulumi.set(__self__, "vpc_crns", vpc_crns)
        if vpc_enabled and not isinstance(vpc_enabled, bool):
            raise TypeError("Expected argument 'vpc_enabled' to be a bool")
        pulumi.set(__self__, "vpc_enabled", vpc_enabled)

    @_builtins.property
    @pulumi.getter(name="classicEnabled")
    def classic_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "classic_enabled")

    @_builtins.property
    @pulumi.getter(name="connectionMode")
    def connection_mode(self) -> _builtins.str:
        return pulumi.get(self, "connection_mode")

    @_builtins.property
    @pulumi.getter(name="globalRouting")
    def global_routing(self) -> _builtins.bool:
        return pulumi.get(self, "global_routing")

    @_builtins.property
    @pulumi.getter(name="greDestinationAddress")
    def gre_destination_address(self) -> _builtins.str:
        return pulumi.get(self, "gre_destination_address")

    @_builtins.property
    @pulumi.getter(name="greSourceAddress")
    def gre_source_address(self) -> _builtins.str:
        return pulumi.get(self, "gre_source_address")

    @_builtins.property
    @pulumi.getter(name="ibmIpAddress")
    def ibm_ip_address(self) -> _builtins.str:
        return pulumi.get(self, "ibm_ip_address")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def metered(self) -> _builtins.bool:
        return pulumi.get(self, "metered")

    @_builtins.property
    @pulumi.getter
    def networks(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "networks")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionName")
    def pi_cloud_connection_name(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_connection_name")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def speed(self) -> _builtins.float:
        return pulumi.get(self, "speed")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="userIpAddress")
    def user_ip_address(self) -> _builtins.str:
        return pulumi.get(self, "user_ip_address")

    @_builtins.property
    @pulumi.getter(name="vpcCrns")
    def vpc_crns(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "vpc_crns")

    @_builtins.property
    @pulumi.getter(name="vpcEnabled")
    def vpc_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "vpc_enabled")


class AwaitableGetPiCloudConnectionResult(GetPiCloudConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiCloudConnectionResult(
            classic_enabled=self.classic_enabled,
            connection_mode=self.connection_mode,
            global_routing=self.global_routing,
            gre_destination_address=self.gre_destination_address,
            gre_source_address=self.gre_source_address,
            ibm_ip_address=self.ibm_ip_address,
            id=self.id,
            metered=self.metered,
            networks=self.networks,
            pi_cloud_connection_name=self.pi_cloud_connection_name,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            port=self.port,
            speed=self.speed,
            status=self.status,
            user_ip_address=self.user_ip_address,
            vpc_crns=self.vpc_crns,
            vpc_enabled=self.vpc_enabled)


def get_pi_cloud_connection(id: Optional[_builtins.str] = None,
                            pi_cloud_connection_name: Optional[_builtins.str] = None,
                            pi_cloud_instance_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiCloudConnectionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudConnectionName'] = pi_cloud_connection_name
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiCloudConnection:getPiCloudConnection', __args__, opts=opts, typ=GetPiCloudConnectionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiCloudConnectionResult(
        classic_enabled=pulumi.get(__ret__, 'classic_enabled'),
        connection_mode=pulumi.get(__ret__, 'connection_mode'),
        global_routing=pulumi.get(__ret__, 'global_routing'),
        gre_destination_address=pulumi.get(__ret__, 'gre_destination_address'),
        gre_source_address=pulumi.get(__ret__, 'gre_source_address'),
        ibm_ip_address=pulumi.get(__ret__, 'ibm_ip_address'),
        id=pulumi.get(__ret__, 'id'),
        metered=pulumi.get(__ret__, 'metered'),
        networks=pulumi.get(__ret__, 'networks'),
        pi_cloud_connection_name=pulumi.get(__ret__, 'pi_cloud_connection_name'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        port=pulumi.get(__ret__, 'port'),
        speed=pulumi.get(__ret__, 'speed'),
        status=pulumi.get(__ret__, 'status'),
        user_ip_address=pulumi.get(__ret__, 'user_ip_address'),
        vpc_crns=pulumi.get(__ret__, 'vpc_crns'),
        vpc_enabled=pulumi.get(__ret__, 'vpc_enabled'))
def get_pi_cloud_connection_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   pi_cloud_connection_name: Optional[pulumi.Input[_builtins.str]] = None,
                                   pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiCloudConnectionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudConnectionName'] = pi_cloud_connection_name
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiCloudConnection:getPiCloudConnection', __args__, opts=opts, typ=GetPiCloudConnectionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiCloudConnectionResult(
        classic_enabled=pulumi.get(__response__, 'classic_enabled'),
        connection_mode=pulumi.get(__response__, 'connection_mode'),
        global_routing=pulumi.get(__response__, 'global_routing'),
        gre_destination_address=pulumi.get(__response__, 'gre_destination_address'),
        gre_source_address=pulumi.get(__response__, 'gre_source_address'),
        ibm_ip_address=pulumi.get(__response__, 'ibm_ip_address'),
        id=pulumi.get(__response__, 'id'),
        metered=pulumi.get(__response__, 'metered'),
        networks=pulumi.get(__response__, 'networks'),
        pi_cloud_connection_name=pulumi.get(__response__, 'pi_cloud_connection_name'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        port=pulumi.get(__response__, 'port'),
        speed=pulumi.get(__response__, 'speed'),
        status=pulumi.get(__response__, 'status'),
        user_ip_address=pulumi.get(__response__, 'user_ip_address'),
        vpc_crns=pulumi.get(__response__, 'vpc_crns'),
        vpc_enabled=pulumi.get(__response__, 'vpc_enabled')))
