# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSchematicsJobResult',
    'AwaitableGetSchematicsJobResult',
    'get_schematics_job',
    'get_schematics_job_output',
]

@pulumi.output_type
class GetSchematicsJobResult:
    """
    A collection of values returned by getSchematicsJob.
    """
    def __init__(__self__, bastions=None, command_name=None, command_object=None, command_object_id=None, command_options=None, command_parameter=None, datas=None, description=None, duration=None, end_at=None, id=None, job_env_settings=None, job_id=None, job_inputs=None, location=None, log_store_url=None, log_summaries=None, name=None, resource_group=None, results_url=None, start_at=None, state_store_url=None, statuses=None, submitted_at=None, submitted_by=None, tags=None, updated_at=None):
        if bastions and not isinstance(bastions, list):
            raise TypeError("Expected argument 'bastions' to be a list")
        pulumi.set(__self__, "bastions", bastions)
        if command_name and not isinstance(command_name, str):
            raise TypeError("Expected argument 'command_name' to be a str")
        pulumi.set(__self__, "command_name", command_name)
        if command_object and not isinstance(command_object, str):
            raise TypeError("Expected argument 'command_object' to be a str")
        pulumi.set(__self__, "command_object", command_object)
        if command_object_id and not isinstance(command_object_id, str):
            raise TypeError("Expected argument 'command_object_id' to be a str")
        pulumi.set(__self__, "command_object_id", command_object_id)
        if command_options and not isinstance(command_options, list):
            raise TypeError("Expected argument 'command_options' to be a list")
        pulumi.set(__self__, "command_options", command_options)
        if command_parameter and not isinstance(command_parameter, str):
            raise TypeError("Expected argument 'command_parameter' to be a str")
        pulumi.set(__self__, "command_parameter", command_parameter)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if duration and not isinstance(duration, str):
            raise TypeError("Expected argument 'duration' to be a str")
        pulumi.set(__self__, "duration", duration)
        if end_at and not isinstance(end_at, str):
            raise TypeError("Expected argument 'end_at' to be a str")
        pulumi.set(__self__, "end_at", end_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_env_settings and not isinstance(job_env_settings, list):
            raise TypeError("Expected argument 'job_env_settings' to be a list")
        pulumi.set(__self__, "job_env_settings", job_env_settings)
        if job_id and not isinstance(job_id, str):
            raise TypeError("Expected argument 'job_id' to be a str")
        pulumi.set(__self__, "job_id", job_id)
        if job_inputs and not isinstance(job_inputs, list):
            raise TypeError("Expected argument 'job_inputs' to be a list")
        pulumi.set(__self__, "job_inputs", job_inputs)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if log_store_url and not isinstance(log_store_url, str):
            raise TypeError("Expected argument 'log_store_url' to be a str")
        pulumi.set(__self__, "log_store_url", log_store_url)
        if log_summaries and not isinstance(log_summaries, list):
            raise TypeError("Expected argument 'log_summaries' to be a list")
        pulumi.set(__self__, "log_summaries", log_summaries)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if results_url and not isinstance(results_url, str):
            raise TypeError("Expected argument 'results_url' to be a str")
        pulumi.set(__self__, "results_url", results_url)
        if start_at and not isinstance(start_at, str):
            raise TypeError("Expected argument 'start_at' to be a str")
        pulumi.set(__self__, "start_at", start_at)
        if state_store_url and not isinstance(state_store_url, str):
            raise TypeError("Expected argument 'state_store_url' to be a str")
        pulumi.set(__self__, "state_store_url", state_store_url)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if submitted_at and not isinstance(submitted_at, str):
            raise TypeError("Expected argument 'submitted_at' to be a str")
        pulumi.set(__self__, "submitted_at", submitted_at)
        if submitted_by and not isinstance(submitted_by, str):
            raise TypeError("Expected argument 'submitted_by' to be a str")
        pulumi.set(__self__, "submitted_by", submitted_by)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def bastions(self) -> Sequence['outputs.GetSchematicsJobBastionResult']:
        return pulumi.get(self, "bastions")

    @_builtins.property
    @pulumi.getter(name="commandName")
    def command_name(self) -> _builtins.str:
        return pulumi.get(self, "command_name")

    @_builtins.property
    @pulumi.getter(name="commandObject")
    def command_object(self) -> _builtins.str:
        return pulumi.get(self, "command_object")

    @_builtins.property
    @pulumi.getter(name="commandObjectId")
    def command_object_id(self) -> _builtins.str:
        return pulumi.get(self, "command_object_id")

    @_builtins.property
    @pulumi.getter(name="commandOptions")
    def command_options(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "command_options")

    @_builtins.property
    @pulumi.getter(name="commandParameter")
    def command_parameter(self) -> _builtins.str:
        return pulumi.get(self, "command_parameter")

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetSchematicsJobDataResult']:
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.str:
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter(name="endAt")
    def end_at(self) -> _builtins.str:
        return pulumi.get(self, "end_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="jobEnvSettings")
    def job_env_settings(self) -> Sequence['outputs.GetSchematicsJobJobEnvSettingResult']:
        return pulumi.get(self, "job_env_settings")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobInputs")
    def job_inputs(self) -> Sequence['outputs.GetSchematicsJobJobInputResult']:
        return pulumi.get(self, "job_inputs")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="logStoreUrl")
    def log_store_url(self) -> _builtins.str:
        return pulumi.get(self, "log_store_url")

    @_builtins.property
    @pulumi.getter(name="logSummaries")
    def log_summaries(self) -> Sequence['outputs.GetSchematicsJobLogSummaryResult']:
        return pulumi.get(self, "log_summaries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resultsUrl")
    def results_url(self) -> _builtins.str:
        return pulumi.get(self, "results_url")

    @_builtins.property
    @pulumi.getter(name="startAt")
    def start_at(self) -> _builtins.str:
        return pulumi.get(self, "start_at")

    @_builtins.property
    @pulumi.getter(name="stateStoreUrl")
    def state_store_url(self) -> _builtins.str:
        return pulumi.get(self, "state_store_url")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetSchematicsJobStatusResult']:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="submittedAt")
    def submitted_at(self) -> _builtins.str:
        return pulumi.get(self, "submitted_at")

    @_builtins.property
    @pulumi.getter(name="submittedBy")
    def submitted_by(self) -> _builtins.str:
        return pulumi.get(self, "submitted_by")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetSchematicsJobResult(GetSchematicsJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchematicsJobResult(
            bastions=self.bastions,
            command_name=self.command_name,
            command_object=self.command_object,
            command_object_id=self.command_object_id,
            command_options=self.command_options,
            command_parameter=self.command_parameter,
            datas=self.datas,
            description=self.description,
            duration=self.duration,
            end_at=self.end_at,
            id=self.id,
            job_env_settings=self.job_env_settings,
            job_id=self.job_id,
            job_inputs=self.job_inputs,
            location=self.location,
            log_store_url=self.log_store_url,
            log_summaries=self.log_summaries,
            name=self.name,
            resource_group=self.resource_group,
            results_url=self.results_url,
            start_at=self.start_at,
            state_store_url=self.state_store_url,
            statuses=self.statuses,
            submitted_at=self.submitted_at,
            submitted_by=self.submitted_by,
            tags=self.tags,
            updated_at=self.updated_at)


def get_schematics_job(job_id: Optional[_builtins.str] = None,
                       location: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchematicsJobResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['jobId'] = job_id
    __args__['location'] = location
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSchematicsJob:getSchematicsJob', __args__, opts=opts, typ=GetSchematicsJobResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSchematicsJobResult(
        bastions=pulumi.get(__ret__, 'bastions'),
        command_name=pulumi.get(__ret__, 'command_name'),
        command_object=pulumi.get(__ret__, 'command_object'),
        command_object_id=pulumi.get(__ret__, 'command_object_id'),
        command_options=pulumi.get(__ret__, 'command_options'),
        command_parameter=pulumi.get(__ret__, 'command_parameter'),
        datas=pulumi.get(__ret__, 'datas'),
        description=pulumi.get(__ret__, 'description'),
        duration=pulumi.get(__ret__, 'duration'),
        end_at=pulumi.get(__ret__, 'end_at'),
        id=pulumi.get(__ret__, 'id'),
        job_env_settings=pulumi.get(__ret__, 'job_env_settings'),
        job_id=pulumi.get(__ret__, 'job_id'),
        job_inputs=pulumi.get(__ret__, 'job_inputs'),
        location=pulumi.get(__ret__, 'location'),
        log_store_url=pulumi.get(__ret__, 'log_store_url'),
        log_summaries=pulumi.get(__ret__, 'log_summaries'),
        name=pulumi.get(__ret__, 'name'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        results_url=pulumi.get(__ret__, 'results_url'),
        start_at=pulumi.get(__ret__, 'start_at'),
        state_store_url=pulumi.get(__ret__, 'state_store_url'),
        statuses=pulumi.get(__ret__, 'statuses'),
        submitted_at=pulumi.get(__ret__, 'submitted_at'),
        submitted_by=pulumi.get(__ret__, 'submitted_by'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_schematics_job_output(job_id: Optional[pulumi.Input[_builtins.str]] = None,
                              location: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSchematicsJobResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['jobId'] = job_id
    __args__['location'] = location
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSchematicsJob:getSchematicsJob', __args__, opts=opts, typ=GetSchematicsJobResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSchematicsJobResult(
        bastions=pulumi.get(__response__, 'bastions'),
        command_name=pulumi.get(__response__, 'command_name'),
        command_object=pulumi.get(__response__, 'command_object'),
        command_object_id=pulumi.get(__response__, 'command_object_id'),
        command_options=pulumi.get(__response__, 'command_options'),
        command_parameter=pulumi.get(__response__, 'command_parameter'),
        datas=pulumi.get(__response__, 'datas'),
        description=pulumi.get(__response__, 'description'),
        duration=pulumi.get(__response__, 'duration'),
        end_at=pulumi.get(__response__, 'end_at'),
        id=pulumi.get(__response__, 'id'),
        job_env_settings=pulumi.get(__response__, 'job_env_settings'),
        job_id=pulumi.get(__response__, 'job_id'),
        job_inputs=pulumi.get(__response__, 'job_inputs'),
        location=pulumi.get(__response__, 'location'),
        log_store_url=pulumi.get(__response__, 'log_store_url'),
        log_summaries=pulumi.get(__response__, 'log_summaries'),
        name=pulumi.get(__response__, 'name'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        results_url=pulumi.get(__response__, 'results_url'),
        start_at=pulumi.get(__response__, 'start_at'),
        state_store_url=pulumi.get(__response__, 'state_store_url'),
        statuses=pulumi.get(__response__, 'statuses'),
        submitted_at=pulumi.get(__response__, 'submitted_at'),
        submitted_by=pulumi.get(__response__, 'submitted_by'),
        tags=pulumi.get(__response__, 'tags'),
        updated_at=pulumi.get(__response__, 'updated_at')))
