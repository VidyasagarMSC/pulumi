# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SccRuleArgs', 'SccRule']

@pulumi.input_type
class SccRuleArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 required_config: pulumi.Input['SccRuleRequiredConfigArgs'],
                 target: pulumi.Input['SccRuleTargetArgs'],
                 enforcement_actions: Optional[pulumi.Input['SccRuleEnforcementActionsArgs']] = None,
                 import_: Optional[pulumi.Input['SccRuleImportArgs']] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 scc_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['SccRuleTimeoutsArgs']] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SccRule resource.
        :param pulumi.Input[_builtins.str] description: The details of a rule's response.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input['SccRuleRequiredConfigArgs'] required_config: The required configurations.
        :param pulumi.Input['SccRuleTargetArgs'] target: The rule target.
        :param pulumi.Input['SccRuleEnforcementActionsArgs'] enforcement_actions: The actions that the service must run on your behalf when a request to create or modify the target resource does not
               comply with your conditions.
        :param pulumi.Input['SccRuleImportArgs'] import_: The collection of import parameters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] labels: The list of labels.
        :param pulumi.Input[_builtins.str] name: A human-readable alias to assign to your rule.
        :param pulumi.Input[_builtins.str] version: The version number of a rule.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "required_config", required_config)
        pulumi.set(__self__, "target", target)
        if enforcement_actions is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""enforcement_actions is deprecated: Deprecated""")
        if enforcement_actions is not None:
            pulumi.set(__self__, "enforcement_actions", enforcement_actions)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""name is deprecated: Deprecated""")
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scc_rule_id is not None:
            pulumi.set(__self__, "scc_rule_id", scc_rule_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        The details of a rule's response.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="requiredConfig")
    def required_config(self) -> pulumi.Input['SccRuleRequiredConfigArgs']:
        """
        The required configurations.
        """
        return pulumi.get(self, "required_config")

    @required_config.setter
    def required_config(self, value: pulumi.Input['SccRuleRequiredConfigArgs']):
        pulumi.set(self, "required_config", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Input['SccRuleTargetArgs']:
        """
        The rule target.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['SccRuleTargetArgs']):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter(name="enforcementActions")
    @_utilities.deprecated("""Deprecated""")
    def enforcement_actions(self) -> Optional[pulumi.Input['SccRuleEnforcementActionsArgs']]:
        """
        The actions that the service must run on your behalf when a request to create or modify the target resource does not
        comply with your conditions.
        """
        return pulumi.get(self, "enforcement_actions")

    @enforcement_actions.setter
    def enforcement_actions(self, value: Optional[pulumi.Input['SccRuleEnforcementActionsArgs']]):
        pulumi.set(self, "enforcement_actions", value)

    @_builtins.property
    @pulumi.getter(name="import")
    def import_(self) -> Optional[pulumi.Input['SccRuleImportArgs']]:
        """
        The collection of import parameters.
        """
        return pulumi.get(self, "import_")

    @import_.setter
    def import_(self, value: Optional[pulumi.Input['SccRuleImportArgs']]):
        pulumi.set(self, "import_", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable alias to assign to your rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sccRuleId")
    def scc_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "scc_rule_id")

    @scc_rule_id.setter
    def scc_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scc_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SccRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SccRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version number of a rule.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _SccRuleState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 creation_date: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enforcement_actions: Optional[pulumi.Input['SccRuleEnforcementActionsArgs']] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 import_: Optional[pulumi.Input['SccRuleImportArgs']] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 modification_date: Optional[pulumi.Input[_builtins.str]] = None,
                 modified_by: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 required_config: Optional[pulumi.Input['SccRuleRequiredConfigArgs']] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 scc_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input['SccRuleTargetArgs']] = None,
                 timeouts: Optional[pulumi.Input['SccRuleTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_on: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SccRule resources.
        :param pulumi.Input[_builtins.str] account_id: The account ID.
        :param pulumi.Input[_builtins.str] created_by: The user who created the rule.
        :param pulumi.Input[_builtins.str] created_on: The date when the rule was created.
        :param pulumi.Input[_builtins.str] creation_date: The date the resource was created.
        :param pulumi.Input[_builtins.str] description: The details of a rule's response.
        :param pulumi.Input['SccRuleEnforcementActionsArgs'] enforcement_actions: The actions that the service must run on your behalf when a request to create or modify the target resource does not
               comply with your conditions.
        :param pulumi.Input[_builtins.str] etag: The etag of the rule.
        :param pulumi.Input['SccRuleImportArgs'] import_: The collection of import parameters.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] labels: The list of labels.
        :param pulumi.Input[_builtins.str] modification_date: The date the resource was last modified.
        :param pulumi.Input[_builtins.str] modified_by: The unique identifier for the user or application that last modified the resource.
        :param pulumi.Input[_builtins.str] name: A human-readable alias to assign to your rule.
        :param pulumi.Input['SccRuleRequiredConfigArgs'] required_config: The required configurations.
        :param pulumi.Input[_builtins.str] rule_id: The rule ID.
        :param pulumi.Input[_builtins.str] rule_type: The type of rule. Rules that you create are `user_defined`.
        :param pulumi.Input['SccRuleTargetArgs'] target: The rule target.
        :param pulumi.Input[_builtins.str] type: The rule type (allowable values are `user_defined` or `system_defined`).
        :param pulumi.Input[_builtins.str] updated_by: The user who modified the rule.
        :param pulumi.Input[_builtins.str] updated_on: The date when the rule was modified.
        :param pulumi.Input[_builtins.str] version: The version number of a rule.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if creation_date is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""creation_date is deprecated: Deprecated""")
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enforcement_actions is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""enforcement_actions is deprecated: Deprecated""")
        if enforcement_actions is not None:
            pulumi.set(__self__, "enforcement_actions", enforcement_actions)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if modification_date is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""modification_date is deprecated: Deprecated""")
        if modification_date is not None:
            pulumi.set(__self__, "modification_date", modification_date)
        if modified_by is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""modified_by is deprecated: Deprecated""")
        if modified_by is not None:
            pulumi.set(__self__, "modified_by", modified_by)
        if name is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""name is deprecated: Deprecated""")
        if name is not None:
            pulumi.set(__self__, "name", name)
        if required_config is not None:
            pulumi.set(__self__, "required_config", required_config)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if rule_type is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""rule_type is deprecated: Deprecated""")
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if scc_rule_id is not None:
            pulumi.set(__self__, "scc_rule_id", scc_rule_id)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_on is not None:
            pulumi.set(__self__, "updated_on", updated_on)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user who created the rule.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the rule was created.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    @_utilities.deprecated("""Deprecated""")
    def creation_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date the resource was created.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_date", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The details of a rule's response.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enforcementActions")
    @_utilities.deprecated("""Deprecated""")
    def enforcement_actions(self) -> Optional[pulumi.Input['SccRuleEnforcementActionsArgs']]:
        """
        The actions that the service must run on your behalf when a request to create or modify the target resource does not
        comply with your conditions.
        """
        return pulumi.get(self, "enforcement_actions")

    @enforcement_actions.setter
    def enforcement_actions(self, value: Optional[pulumi.Input['SccRuleEnforcementActionsArgs']]):
        pulumi.set(self, "enforcement_actions", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The etag of the rule.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter(name="import")
    def import_(self) -> Optional[pulumi.Input['SccRuleImportArgs']]:
        """
        The collection of import parameters.
        """
        return pulumi.get(self, "import_")

    @import_.setter
    def import_(self, value: Optional[pulumi.Input['SccRuleImportArgs']]):
        pulumi.set(self, "import_", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="modificationDate")
    @_utilities.deprecated("""Deprecated""")
    def modification_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date the resource was last modified.
        """
        return pulumi.get(self, "modification_date")

    @modification_date.setter
    def modification_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modification_date", value)

    @_builtins.property
    @pulumi.getter(name="modifiedBy")
    @_utilities.deprecated("""Deprecated""")
    def modified_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for the user or application that last modified the resource.
        """
        return pulumi.get(self, "modified_by")

    @modified_by.setter
    def modified_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_by", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable alias to assign to your rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="requiredConfig")
    def required_config(self) -> Optional[pulumi.Input['SccRuleRequiredConfigArgs']]:
        """
        The required configurations.
        """
        return pulumi.get(self, "required_config")

    @required_config.setter
    def required_config(self, value: Optional[pulumi.Input['SccRuleRequiredConfigArgs']]):
        pulumi.set(self, "required_config", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The rule ID.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_id", value)

    @_builtins.property
    @pulumi.getter(name="ruleType")
    @_utilities.deprecated("""Deprecated""")
    def rule_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of rule. Rules that you create are `user_defined`.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_type", value)

    @_builtins.property
    @pulumi.getter(name="sccRuleId")
    def scc_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "scc_rule_id")

    @scc_rule_id.setter
    def scc_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scc_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['SccRuleTargetArgs']]:
        """
        The rule target.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['SccRuleTargetArgs']]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SccRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SccRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The rule type (allowable values are `user_defined` or `system_defined`).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user who modified the rule.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the rule was modified.
        """
        return pulumi.get(self, "updated_on")

    @updated_on.setter
    def updated_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_on", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version number of a rule.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/sccRule:SccRule")
class SccRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enforcement_actions: Optional[pulumi.Input[Union['SccRuleEnforcementActionsArgs', 'SccRuleEnforcementActionsArgsDict']]] = None,
                 import_: Optional[pulumi.Input[Union['SccRuleImportArgs', 'SccRuleImportArgsDict']]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 required_config: Optional[pulumi.Input[Union['SccRuleRequiredConfigArgs', 'SccRuleRequiredConfigArgsDict']]] = None,
                 scc_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[Union['SccRuleTargetArgs', 'SccRuleTargetArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['SccRuleTimeoutsArgs', 'SccRuleTimeoutsArgsDict']]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SccRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: The details of a rule's response.
        :param pulumi.Input[Union['SccRuleEnforcementActionsArgs', 'SccRuleEnforcementActionsArgsDict']] enforcement_actions: The actions that the service must run on your behalf when a request to create or modify the target resource does not
               comply with your conditions.
        :param pulumi.Input[Union['SccRuleImportArgs', 'SccRuleImportArgsDict']] import_: The collection of import parameters.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] labels: The list of labels.
        :param pulumi.Input[_builtins.str] name: A human-readable alias to assign to your rule.
        :param pulumi.Input[Union['SccRuleRequiredConfigArgs', 'SccRuleRequiredConfigArgsDict']] required_config: The required configurations.
        :param pulumi.Input[Union['SccRuleTargetArgs', 'SccRuleTargetArgsDict']] target: The rule target.
        :param pulumi.Input[_builtins.str] version: The version number of a rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SccRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SccRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SccRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SccRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enforcement_actions: Optional[pulumi.Input[Union['SccRuleEnforcementActionsArgs', 'SccRuleEnforcementActionsArgsDict']]] = None,
                 import_: Optional[pulumi.Input[Union['SccRuleImportArgs', 'SccRuleImportArgsDict']]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 required_config: Optional[pulumi.Input[Union['SccRuleRequiredConfigArgs', 'SccRuleRequiredConfigArgsDict']]] = None,
                 scc_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[Union['SccRuleTargetArgs', 'SccRuleTargetArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['SccRuleTimeoutsArgs', 'SccRuleTimeoutsArgsDict']]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SccRuleArgs.__new__(SccRuleArgs)

            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["enforcement_actions"] = enforcement_actions
            __props__.__dict__["import_"] = import_
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            if required_config is None and not opts.urn:
                raise TypeError("Missing required property 'required_config'")
            __props__.__dict__["required_config"] = required_config
            __props__.__dict__["scc_rule_id"] = scc_rule_id
            if target is None and not opts.urn:
                raise TypeError("Missing required property 'target'")
            __props__.__dict__["target"] = target
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["version"] = version
            __props__.__dict__["account_id"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["created_on"] = None
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["modification_date"] = None
            __props__.__dict__["modified_by"] = None
            __props__.__dict__["rule_id"] = None
            __props__.__dict__["rule_type"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["updated_by"] = None
            __props__.__dict__["updated_on"] = None
        super(SccRule, __self__).__init__(
            'ibm:index/sccRule:SccRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            creation_date: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enforcement_actions: Optional[pulumi.Input[Union['SccRuleEnforcementActionsArgs', 'SccRuleEnforcementActionsArgsDict']]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            import_: Optional[pulumi.Input[Union['SccRuleImportArgs', 'SccRuleImportArgsDict']]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            modification_date: Optional[pulumi.Input[_builtins.str]] = None,
            modified_by: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            required_config: Optional[pulumi.Input[Union['SccRuleRequiredConfigArgs', 'SccRuleRequiredConfigArgsDict']]] = None,
            rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            rule_type: Optional[pulumi.Input[_builtins.str]] = None,
            scc_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            target: Optional[pulumi.Input[Union['SccRuleTargetArgs', 'SccRuleTargetArgsDict']]] = None,
            timeouts: Optional[pulumi.Input[Union['SccRuleTimeoutsArgs', 'SccRuleTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            updated_on: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'SccRule':
        """
        Get an existing SccRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: The account ID.
        :param pulumi.Input[_builtins.str] created_by: The user who created the rule.
        :param pulumi.Input[_builtins.str] created_on: The date when the rule was created.
        :param pulumi.Input[_builtins.str] creation_date: The date the resource was created.
        :param pulumi.Input[_builtins.str] description: The details of a rule's response.
        :param pulumi.Input[Union['SccRuleEnforcementActionsArgs', 'SccRuleEnforcementActionsArgsDict']] enforcement_actions: The actions that the service must run on your behalf when a request to create or modify the target resource does not
               comply with your conditions.
        :param pulumi.Input[_builtins.str] etag: The etag of the rule.
        :param pulumi.Input[Union['SccRuleImportArgs', 'SccRuleImportArgsDict']] import_: The collection of import parameters.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] labels: The list of labels.
        :param pulumi.Input[_builtins.str] modification_date: The date the resource was last modified.
        :param pulumi.Input[_builtins.str] modified_by: The unique identifier for the user or application that last modified the resource.
        :param pulumi.Input[_builtins.str] name: A human-readable alias to assign to your rule.
        :param pulumi.Input[Union['SccRuleRequiredConfigArgs', 'SccRuleRequiredConfigArgsDict']] required_config: The required configurations.
        :param pulumi.Input[_builtins.str] rule_id: The rule ID.
        :param pulumi.Input[_builtins.str] rule_type: The type of rule. Rules that you create are `user_defined`.
        :param pulumi.Input[Union['SccRuleTargetArgs', 'SccRuleTargetArgsDict']] target: The rule target.
        :param pulumi.Input[_builtins.str] type: The rule type (allowable values are `user_defined` or `system_defined`).
        :param pulumi.Input[_builtins.str] updated_by: The user who modified the rule.
        :param pulumi.Input[_builtins.str] updated_on: The date when the rule was modified.
        :param pulumi.Input[_builtins.str] version: The version number of a rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SccRuleState.__new__(_SccRuleState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["description"] = description
        __props__.__dict__["enforcement_actions"] = enforcement_actions
        __props__.__dict__["etag"] = etag
        __props__.__dict__["import_"] = import_
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["labels"] = labels
        __props__.__dict__["modification_date"] = modification_date
        __props__.__dict__["modified_by"] = modified_by
        __props__.__dict__["name"] = name
        __props__.__dict__["required_config"] = required_config
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["rule_type"] = rule_type
        __props__.__dict__["scc_rule_id"] = scc_rule_id
        __props__.__dict__["target"] = target
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["updated_on"] = updated_on
        __props__.__dict__["version"] = version
        return SccRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The account ID.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The user who created the rule.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the rule was created.
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    @_utilities.deprecated("""Deprecated""")
    def creation_date(self) -> pulumi.Output[_builtins.str]:
        """
        The date the resource was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        The details of a rule's response.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enforcementActions")
    @_utilities.deprecated("""Deprecated""")
    def enforcement_actions(self) -> pulumi.Output[Optional['outputs.SccRuleEnforcementActions']]:
        """
        The actions that the service must run on your behalf when a request to create or modify the target resource does not
        comply with your conditions.
        """
        return pulumi.get(self, "enforcement_actions")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        """
        The etag of the rule.
        """
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter(name="import")
    def import_(self) -> pulumi.Output[Optional['outputs.SccRuleImport']]:
        """
        The collection of import parameters.
        """
        return pulumi.get(self, "import_")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The list of labels.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="modificationDate")
    @_utilities.deprecated("""Deprecated""")
    def modification_date(self) -> pulumi.Output[_builtins.str]:
        """
        The date the resource was last modified.
        """
        return pulumi.get(self, "modification_date")

    @_builtins.property
    @pulumi.getter(name="modifiedBy")
    @_utilities.deprecated("""Deprecated""")
    def modified_by(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for the user or application that last modified the resource.
        """
        return pulumi.get(self, "modified_by")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A human-readable alias to assign to your rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="requiredConfig")
    def required_config(self) -> pulumi.Output['outputs.SccRuleRequiredConfig']:
        """
        The required configurations.
        """
        return pulumi.get(self, "required_config")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[_builtins.str]:
        """
        The rule ID.
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter(name="ruleType")
    @_utilities.deprecated("""Deprecated""")
    def rule_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of rule. Rules that you create are `user_defined`.
        """
        return pulumi.get(self, "rule_type")

    @_builtins.property
    @pulumi.getter(name="sccRuleId")
    def scc_rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "scc_rule_id")

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Output['outputs.SccRuleTarget']:
        """
        The rule target.
        """
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.SccRuleTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The rule type (allowable values are `user_defined` or `system_defined`).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The user who modified the rule.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the rule was modified.
        """
        return pulumi.get(self, "updated_on")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The version number of a rule.
        """
        return pulumi.get(self, "version")

