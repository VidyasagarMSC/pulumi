# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSatelliteStorageAssignmentResult',
    'AwaitableGetSatelliteStorageAssignmentResult',
    'get_satellite_storage_assignment',
    'get_satellite_storage_assignment_output',
]

@pulumi.output_type
class GetSatelliteStorageAssignmentResult:
    """
    A collection of values returned by getSatelliteStorageAssignment.
    """
    def __init__(__self__, assignment_name=None, assignment_type=None, cluster=None, config=None, config_uuid=None, config_version=None, config_version_uuid=None, created=None, groups=None, id=None, is_assignment_upgrade_available=None, owner=None, rollout_error_count=None, rollout_success_count=None, sat_cluster=None, svc_cluster=None, uuid=None):
        if assignment_name and not isinstance(assignment_name, str):
            raise TypeError("Expected argument 'assignment_name' to be a str")
        pulumi.set(__self__, "assignment_name", assignment_name)
        if assignment_type and not isinstance(assignment_type, str):
            raise TypeError("Expected argument 'assignment_type' to be a str")
        pulumi.set(__self__, "assignment_type", assignment_type)
        if cluster and not isinstance(cluster, str):
            raise TypeError("Expected argument 'cluster' to be a str")
        pulumi.set(__self__, "cluster", cluster)
        if config and not isinstance(config, str):
            raise TypeError("Expected argument 'config' to be a str")
        pulumi.set(__self__, "config", config)
        if config_uuid and not isinstance(config_uuid, str):
            raise TypeError("Expected argument 'config_uuid' to be a str")
        pulumi.set(__self__, "config_uuid", config_uuid)
        if config_version and not isinstance(config_version, str):
            raise TypeError("Expected argument 'config_version' to be a str")
        pulumi.set(__self__, "config_version", config_version)
        if config_version_uuid and not isinstance(config_version_uuid, str):
            raise TypeError("Expected argument 'config_version_uuid' to be a str")
        pulumi.set(__self__, "config_version_uuid", config_version_uuid)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_assignment_upgrade_available and not isinstance(is_assignment_upgrade_available, bool):
            raise TypeError("Expected argument 'is_assignment_upgrade_available' to be a bool")
        pulumi.set(__self__, "is_assignment_upgrade_available", is_assignment_upgrade_available)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if rollout_error_count and not isinstance(rollout_error_count, float):
            raise TypeError("Expected argument 'rollout_error_count' to be a float")
        pulumi.set(__self__, "rollout_error_count", rollout_error_count)
        if rollout_success_count and not isinstance(rollout_success_count, float):
            raise TypeError("Expected argument 'rollout_success_count' to be a float")
        pulumi.set(__self__, "rollout_success_count", rollout_success_count)
        if sat_cluster and not isinstance(sat_cluster, str):
            raise TypeError("Expected argument 'sat_cluster' to be a str")
        pulumi.set(__self__, "sat_cluster", sat_cluster)
        if svc_cluster and not isinstance(svc_cluster, str):
            raise TypeError("Expected argument 'svc_cluster' to be a str")
        pulumi.set(__self__, "svc_cluster", svc_cluster)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="assignmentName")
    def assignment_name(self) -> _builtins.str:
        return pulumi.get(self, "assignment_name")

    @_builtins.property
    @pulumi.getter(name="assignmentType")
    def assignment_type(self) -> _builtins.str:
        return pulumi.get(self, "assignment_type")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> _builtins.str:
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter
    def config(self) -> _builtins.str:
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="configUuid")
    def config_uuid(self) -> _builtins.str:
        return pulumi.get(self, "config_uuid")

    @_builtins.property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> _builtins.str:
        return pulumi.get(self, "config_version")

    @_builtins.property
    @pulumi.getter(name="configVersionUuid")
    def config_version_uuid(self) -> _builtins.str:
        return pulumi.get(self, "config_version_uuid")

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isAssignmentUpgradeAvailable")
    def is_assignment_upgrade_available(self) -> _builtins.bool:
        return pulumi.get(self, "is_assignment_upgrade_available")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="rolloutErrorCount")
    def rollout_error_count(self) -> _builtins.float:
        return pulumi.get(self, "rollout_error_count")

    @_builtins.property
    @pulumi.getter(name="rolloutSuccessCount")
    def rollout_success_count(self) -> _builtins.float:
        return pulumi.get(self, "rollout_success_count")

    @_builtins.property
    @pulumi.getter(name="satCluster")
    def sat_cluster(self) -> _builtins.str:
        return pulumi.get(self, "sat_cluster")

    @_builtins.property
    @pulumi.getter(name="svcCluster")
    def svc_cluster(self) -> _builtins.str:
        return pulumi.get(self, "svc_cluster")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> _builtins.str:
        return pulumi.get(self, "uuid")


class AwaitableGetSatelliteStorageAssignmentResult(GetSatelliteStorageAssignmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSatelliteStorageAssignmentResult(
            assignment_name=self.assignment_name,
            assignment_type=self.assignment_type,
            cluster=self.cluster,
            config=self.config,
            config_uuid=self.config_uuid,
            config_version=self.config_version,
            config_version_uuid=self.config_version_uuid,
            created=self.created,
            groups=self.groups,
            id=self.id,
            is_assignment_upgrade_available=self.is_assignment_upgrade_available,
            owner=self.owner,
            rollout_error_count=self.rollout_error_count,
            rollout_success_count=self.rollout_success_count,
            sat_cluster=self.sat_cluster,
            svc_cluster=self.svc_cluster,
            uuid=self.uuid)


def get_satellite_storage_assignment(id: Optional[_builtins.str] = None,
                                     uuid: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSatelliteStorageAssignmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSatelliteStorageAssignment:getSatelliteStorageAssignment', __args__, opts=opts, typ=GetSatelliteStorageAssignmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSatelliteStorageAssignmentResult(
        assignment_name=pulumi.get(__ret__, 'assignment_name'),
        assignment_type=pulumi.get(__ret__, 'assignment_type'),
        cluster=pulumi.get(__ret__, 'cluster'),
        config=pulumi.get(__ret__, 'config'),
        config_uuid=pulumi.get(__ret__, 'config_uuid'),
        config_version=pulumi.get(__ret__, 'config_version'),
        config_version_uuid=pulumi.get(__ret__, 'config_version_uuid'),
        created=pulumi.get(__ret__, 'created'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        is_assignment_upgrade_available=pulumi.get(__ret__, 'is_assignment_upgrade_available'),
        owner=pulumi.get(__ret__, 'owner'),
        rollout_error_count=pulumi.get(__ret__, 'rollout_error_count'),
        rollout_success_count=pulumi.get(__ret__, 'rollout_success_count'),
        sat_cluster=pulumi.get(__ret__, 'sat_cluster'),
        svc_cluster=pulumi.get(__ret__, 'svc_cluster'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_satellite_storage_assignment_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            uuid: Optional[pulumi.Input[_builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSatelliteStorageAssignmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSatelliteStorageAssignment:getSatelliteStorageAssignment', __args__, opts=opts, typ=GetSatelliteStorageAssignmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSatelliteStorageAssignmentResult(
        assignment_name=pulumi.get(__response__, 'assignment_name'),
        assignment_type=pulumi.get(__response__, 'assignment_type'),
        cluster=pulumi.get(__response__, 'cluster'),
        config=pulumi.get(__response__, 'config'),
        config_uuid=pulumi.get(__response__, 'config_uuid'),
        config_version=pulumi.get(__response__, 'config_version'),
        config_version_uuid=pulumi.get(__response__, 'config_version_uuid'),
        created=pulumi.get(__response__, 'created'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        is_assignment_upgrade_available=pulumi.get(__response__, 'is_assignment_upgrade_available'),
        owner=pulumi.get(__response__, 'owner'),
        rollout_error_count=pulumi.get(__response__, 'rollout_error_count'),
        rollout_success_count=pulumi.get(__response__, 'rollout_success_count'),
        sat_cluster=pulumi.get(__response__, 'sat_cluster'),
        svc_cluster=pulumi.get(__response__, 'svc_cluster'),
        uuid=pulumi.get(__response__, 'uuid')))
