# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetEnMetricsResult',
    'AwaitableGetEnMetricsResult',
    'get_en_metrics',
    'get_en_metrics_output',
]

@pulumi.output_type
class GetEnMetricsResult:
    """
    A collection of values returned by getEnMetrics.
    """
    def __init__(__self__, destination_id=None, destination_type=None, email_to=None, gte=None, id=None, instance_id=None, lte=None, metrics=None, notification_id=None, source_id=None, subject=None):
        if destination_id and not isinstance(destination_id, str):
            raise TypeError("Expected argument 'destination_id' to be a str")
        pulumi.set(__self__, "destination_id", destination_id)
        if destination_type and not isinstance(destination_type, str):
            raise TypeError("Expected argument 'destination_type' to be a str")
        pulumi.set(__self__, "destination_type", destination_type)
        if email_to and not isinstance(email_to, str):
            raise TypeError("Expected argument 'email_to' to be a str")
        pulumi.set(__self__, "email_to", email_to)
        if gte and not isinstance(gte, str):
            raise TypeError("Expected argument 'gte' to be a str")
        pulumi.set(__self__, "gte", gte)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if lte and not isinstance(lte, str):
            raise TypeError("Expected argument 'lte' to be a str")
        pulumi.set(__self__, "lte", lte)
        if metrics and not isinstance(metrics, list):
            raise TypeError("Expected argument 'metrics' to be a list")
        pulumi.set(__self__, "metrics", metrics)
        if notification_id and not isinstance(notification_id, str):
            raise TypeError("Expected argument 'notification_id' to be a str")
        pulumi.set(__self__, "notification_id", notification_id)
        if source_id and not isinstance(source_id, str):
            raise TypeError("Expected argument 'source_id' to be a str")
        pulumi.set(__self__, "source_id", source_id)
        if subject and not isinstance(subject, str):
            raise TypeError("Expected argument 'subject' to be a str")
        pulumi.set(__self__, "subject", subject)

    @_builtins.property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination_id")

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> _builtins.str:
        return pulumi.get(self, "destination_type")

    @_builtins.property
    @pulumi.getter(name="emailTo")
    def email_to(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "email_to")

    @_builtins.property
    @pulumi.getter
    def gte(self) -> _builtins.str:
        return pulumi.get(self, "gte")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def lte(self) -> _builtins.str:
        return pulumi.get(self, "lte")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetEnMetricsMetricResult']:
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter(name="notificationId")
    def notification_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "notification_id")

    @_builtins.property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_id")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "subject")


class AwaitableGetEnMetricsResult(GetEnMetricsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnMetricsResult(
            destination_id=self.destination_id,
            destination_type=self.destination_type,
            email_to=self.email_to,
            gte=self.gte,
            id=self.id,
            instance_id=self.instance_id,
            lte=self.lte,
            metrics=self.metrics,
            notification_id=self.notification_id,
            source_id=self.source_id,
            subject=self.subject)


def get_en_metrics(destination_id: Optional[_builtins.str] = None,
                   destination_type: Optional[_builtins.str] = None,
                   email_to: Optional[_builtins.str] = None,
                   gte: Optional[_builtins.str] = None,
                   id: Optional[_builtins.str] = None,
                   instance_id: Optional[_builtins.str] = None,
                   lte: Optional[_builtins.str] = None,
                   notification_id: Optional[_builtins.str] = None,
                   source_id: Optional[_builtins.str] = None,
                   subject: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnMetricsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['destinationId'] = destination_id
    __args__['destinationType'] = destination_type
    __args__['emailTo'] = email_to
    __args__['gte'] = gte
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['lte'] = lte
    __args__['notificationId'] = notification_id
    __args__['sourceId'] = source_id
    __args__['subject'] = subject
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEnMetrics:getEnMetrics', __args__, opts=opts, typ=GetEnMetricsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEnMetricsResult(
        destination_id=pulumi.get(__ret__, 'destination_id'),
        destination_type=pulumi.get(__ret__, 'destination_type'),
        email_to=pulumi.get(__ret__, 'email_to'),
        gte=pulumi.get(__ret__, 'gte'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        lte=pulumi.get(__ret__, 'lte'),
        metrics=pulumi.get(__ret__, 'metrics'),
        notification_id=pulumi.get(__ret__, 'notification_id'),
        source_id=pulumi.get(__ret__, 'source_id'),
        subject=pulumi.get(__ret__, 'subject'))
def get_en_metrics_output(destination_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                          email_to: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          gte: Optional[pulumi.Input[_builtins.str]] = None,
                          id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                          lte: Optional[pulumi.Input[_builtins.str]] = None,
                          notification_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          source_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          subject: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnMetricsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['destinationId'] = destination_id
    __args__['destinationType'] = destination_type
    __args__['emailTo'] = email_to
    __args__['gte'] = gte
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['lte'] = lte
    __args__['notificationId'] = notification_id
    __args__['sourceId'] = source_id
    __args__['subject'] = subject
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEnMetrics:getEnMetrics', __args__, opts=opts, typ=GetEnMetricsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEnMetricsResult(
        destination_id=pulumi.get(__response__, 'destination_id'),
        destination_type=pulumi.get(__response__, 'destination_type'),
        email_to=pulumi.get(__response__, 'email_to'),
        gte=pulumi.get(__response__, 'gte'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        lte=pulumi.get(__response__, 'lte'),
        metrics=pulumi.get(__response__, 'metrics'),
        notification_id=pulumi.get(__response__, 'notification_id'),
        source_id=pulumi.get(__response__, 'source_id'),
        subject=pulumi.get(__response__, 'subject')))
