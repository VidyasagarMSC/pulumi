# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TgConnectionActionArgs', 'TgConnectionAction']

@pulumi.input_type
class TgConnectionActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 connection_id: pulumi.Input[_builtins.str],
                 gateway: pulumi.Input[_builtins.str],
                 tg_connection_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['TgConnectionActionTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a TgConnectionAction resource.
        :param pulumi.Input[_builtins.str] action: The Transit Gateway Connection cross account action
        :param pulumi.Input[_builtins.str] connection_id: The Transit Gateway Connection identifier
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "gateway", gateway)
        if tg_connection_action_id is not None:
            pulumi.set(__self__, "tg_connection_action_id", tg_connection_action_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        The Transit Gateway Connection cross account action
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[_builtins.str]:
        """
        The Transit Gateway Connection identifier
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[_builtins.str]:
        """
        The Transit Gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="tgConnectionActionId")
    def tg_connection_action_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tg_connection_action_id")

    @tg_connection_action_id.setter
    def tg_connection_action_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tg_connection_action_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['TgConnectionActionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['TgConnectionActionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _TgConnectionActionState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 tg_connection_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['TgConnectionActionTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering TgConnectionAction resources.
        :param pulumi.Input[_builtins.str] action: The Transit Gateway Connection cross account action
        :param pulumi.Input[_builtins.str] connection_id: The Transit Gateway Connection identifier
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if tg_connection_action_id is not None:
            pulumi.set(__self__, "tg_connection_action_id", tg_connection_action_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Transit Gateway Connection cross account action
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Transit Gateway Connection identifier
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Transit Gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="tgConnectionActionId")
    def tg_connection_action_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tg_connection_action_id")

    @tg_connection_action_id.setter
    def tg_connection_action_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tg_connection_action_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['TgConnectionActionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['TgConnectionActionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/tgConnectionAction:TgConnectionAction")
class TgConnectionAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 tg_connection_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['TgConnectionActionTimeoutsArgs', 'TgConnectionActionTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a TgConnectionAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: The Transit Gateway Connection cross account action
        :param pulumi.Input[_builtins.str] connection_id: The Transit Gateway Connection identifier
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TgConnectionActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TgConnectionAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TgConnectionActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TgConnectionActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 tg_connection_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['TgConnectionActionTimeoutsArgs', 'TgConnectionActionTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TgConnectionActionArgs.__new__(TgConnectionActionArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            if connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'connection_id'")
            __props__.__dict__["connection_id"] = connection_id
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["tg_connection_action_id"] = tg_connection_action_id
            __props__.__dict__["timeouts"] = timeouts
        super(TgConnectionAction, __self__).__init__(
            'ibm:index/tgConnectionAction:TgConnectionAction',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            gateway: Optional[pulumi.Input[_builtins.str]] = None,
            tg_connection_action_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['TgConnectionActionTimeoutsArgs', 'TgConnectionActionTimeoutsArgsDict']]] = None) -> 'TgConnectionAction':
        """
        Get an existing TgConnectionAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: The Transit Gateway Connection cross account action
        :param pulumi.Input[_builtins.str] connection_id: The Transit Gateway Connection identifier
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TgConnectionActionState.__new__(_TgConnectionActionState)

        __props__.__dict__["action"] = action
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["tg_connection_action_id"] = tg_connection_action_id
        __props__.__dict__["timeouts"] = timeouts
        return TgConnectionAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        The Transit Gateway Connection cross account action
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Transit Gateway Connection identifier
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[_builtins.str]:
        """
        The Transit Gateway identifier
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="tgConnectionActionId")
    def tg_connection_action_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tg_connection_action_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.TgConnectionActionTimeouts']]:
        return pulumi.get(self, "timeouts")

