# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiNetworkPortAttachArgs', 'PiNetworkPortAttach']

@pulumi.input_type
class PiNetworkPortAttachArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_instance_id: pulumi.Input[_builtins.str],
                 pi_network_name: pulumi.Input[_builtins.str],
                 pi_network_port_attach_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_port_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_port_ipaddress: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['PiNetworkPortAttachTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiNetworkPortAttach resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_id: Instance id to attach the network port to.
        :param pulumi.Input[_builtins.str] pi_network_name: The network ID or name.
        :param pulumi.Input[_builtins.str] pi_network_port_description: The description for the Network Port.
        :param pulumi.Input[_builtins.str] pi_network_port_ipaddress: The requested ip address of this port
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_instance_id", pi_instance_id)
        pulumi.set(__self__, "pi_network_name", pi_network_name)
        if pi_network_port_attach_id is not None:
            pulumi.set(__self__, "pi_network_port_attach_id", pi_network_port_attach_id)
        if pi_network_port_description is not None:
            pulumi.set(__self__, "pi_network_port_description", pi_network_port_description)
        if pi_network_port_ipaddress is not None:
            pulumi.set(__self__, "pi_network_port_ipaddress", pi_network_port_ipaddress)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Instance id to attach the network port to.
        """
        return pulumi.get(self, "pi_instance_id")

    @pi_instance_id.setter
    def pi_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkName")
    def pi_network_name(self) -> pulumi.Input[_builtins.str]:
        """
        The network ID or name.
        """
        return pulumi.get(self, "pi_network_name")

    @pi_network_name.setter
    def pi_network_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_network_name", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkPortAttachId")
    def pi_network_port_attach_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_network_port_attach_id")

    @pi_network_port_attach_id.setter
    def pi_network_port_attach_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_port_attach_id", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkPortDescription")
    def pi_network_port_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description for the Network Port.
        """
        return pulumi.get(self, "pi_network_port_description")

    @pi_network_port_description.setter
    def pi_network_port_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_port_description", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkPortIpaddress")
    def pi_network_port_ipaddress(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The requested ip address of this port
        """
        return pulumi.get(self, "pi_network_port_ipaddress")

    @pi_network_port_ipaddress.setter
    def pi_network_port_ipaddress(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_port_ipaddress", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiNetworkPortAttachTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiNetworkPortAttachTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiNetworkPortAttachState:
    def __init__(__self__, *,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 macaddress: Optional[pulumi.Input[_builtins.str]] = None,
                 network_port_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_port_attach_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_port_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_port_ipaddress: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiNetworkPortAttachTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiNetworkPortAttach resources.
        :param pulumi.Input[_builtins.str] mac_address: The MAC address of the port.
        :param pulumi.Input[_builtins.str] macaddress: The MAC address of the instance.
        :param pulumi.Input[_builtins.str] network_port_id: The ID of the port.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_id: Instance id to attach the network port to.
        :param pulumi.Input[_builtins.str] pi_network_name: The network ID or name.
        :param pulumi.Input[_builtins.str] pi_network_port_description: The description for the Network Port.
        :param pulumi.Input[_builtins.str] pi_network_port_ipaddress: The requested ip address of this port
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.str] public_ip: The public IP associated with the port.
        :param pulumi.Input[_builtins.str] status: The status of the port.
        """
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if macaddress is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""macaddress is deprecated: Deprecated""")
        if macaddress is not None:
            pulumi.set(__self__, "macaddress", macaddress)
        if network_port_id is not None:
            pulumi.set(__self__, "network_port_id", network_port_id)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_instance_id is not None:
            pulumi.set(__self__, "pi_instance_id", pi_instance_id)
        if pi_network_name is not None:
            pulumi.set(__self__, "pi_network_name", pi_network_name)
        if pi_network_port_attach_id is not None:
            pulumi.set(__self__, "pi_network_port_attach_id", pi_network_port_attach_id)
        if pi_network_port_description is not None:
            pulumi.set(__self__, "pi_network_port_description", pi_network_port_description)
        if pi_network_port_ipaddress is not None:
            pulumi.set(__self__, "pi_network_port_ipaddress", pi_network_port_ipaddress)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MAC address of the port.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def macaddress(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MAC address of the instance.
        """
        return pulumi.get(self, "macaddress")

    @macaddress.setter
    def macaddress(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "macaddress", value)

    @_builtins.property
    @pulumi.getter(name="networkPortId")
    def network_port_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the port.
        """
        return pulumi.get(self, "network_port_id")

    @network_port_id.setter
    def network_port_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_port_id", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance id to attach the network port to.
        """
        return pulumi.get(self, "pi_instance_id")

    @pi_instance_id.setter
    def pi_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkName")
    def pi_network_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network ID or name.
        """
        return pulumi.get(self, "pi_network_name")

    @pi_network_name.setter
    def pi_network_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_name", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkPortAttachId")
    def pi_network_port_attach_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_network_port_attach_id")

    @pi_network_port_attach_id.setter
    def pi_network_port_attach_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_port_attach_id", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkPortDescription")
    def pi_network_port_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description for the Network Port.
        """
        return pulumi.get(self, "pi_network_port_description")

    @pi_network_port_description.setter
    def pi_network_port_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_port_description", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkPortIpaddress")
    def pi_network_port_ipaddress(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The requested ip address of this port
        """
        return pulumi.get(self, "pi_network_port_ipaddress")

    @pi_network_port_ipaddress.setter
    def pi_network_port_ipaddress(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_port_ipaddress", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP associated with the port.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the port.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiNetworkPortAttachTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiNetworkPortAttachTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piNetworkPortAttach:PiNetworkPortAttach")
class PiNetworkPortAttach(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_port_attach_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_port_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_port_ipaddress: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiNetworkPortAttachTimeoutsArgs', 'PiNetworkPortAttachTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiNetworkPortAttach resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_id: Instance id to attach the network port to.
        :param pulumi.Input[_builtins.str] pi_network_name: The network ID or name.
        :param pulumi.Input[_builtins.str] pi_network_port_description: The description for the Network Port.
        :param pulumi.Input[_builtins.str] pi_network_port_ipaddress: The requested ip address of this port
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiNetworkPortAttachArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiNetworkPortAttach resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiNetworkPortAttachArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiNetworkPortAttachArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_port_attach_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_port_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_port_ipaddress: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiNetworkPortAttachTimeoutsArgs', 'PiNetworkPortAttachTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiNetworkPortAttachArgs.__new__(PiNetworkPortAttachArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            if pi_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_instance_id'")
            __props__.__dict__["pi_instance_id"] = pi_instance_id
            if pi_network_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_network_name'")
            __props__.__dict__["pi_network_name"] = pi_network_name
            __props__.__dict__["pi_network_port_attach_id"] = pi_network_port_attach_id
            __props__.__dict__["pi_network_port_description"] = pi_network_port_description
            __props__.__dict__["pi_network_port_ipaddress"] = pi_network_port_ipaddress
            __props__.__dict__["pi_user_tags"] = pi_user_tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["mac_address"] = None
            __props__.__dict__["macaddress"] = None
            __props__.__dict__["network_port_id"] = None
            __props__.__dict__["public_ip"] = None
            __props__.__dict__["status"] = None
        super(PiNetworkPortAttach, __self__).__init__(
            'ibm:index/piNetworkPortAttach:PiNetworkPortAttach',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            mac_address: Optional[pulumi.Input[_builtins.str]] = None,
            macaddress: Optional[pulumi.Input[_builtins.str]] = None,
            network_port_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_network_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_network_port_attach_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_network_port_description: Optional[pulumi.Input[_builtins.str]] = None,
            pi_network_port_ipaddress: Optional[pulumi.Input[_builtins.str]] = None,
            pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            public_ip: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiNetworkPortAttachTimeoutsArgs', 'PiNetworkPortAttachTimeoutsArgsDict']]] = None) -> 'PiNetworkPortAttach':
        """
        Get an existing PiNetworkPortAttach resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] mac_address: The MAC address of the port.
        :param pulumi.Input[_builtins.str] macaddress: The MAC address of the instance.
        :param pulumi.Input[_builtins.str] network_port_id: The ID of the port.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_id: Instance id to attach the network port to.
        :param pulumi.Input[_builtins.str] pi_network_name: The network ID or name.
        :param pulumi.Input[_builtins.str] pi_network_port_description: The description for the Network Port.
        :param pulumi.Input[_builtins.str] pi_network_port_ipaddress: The requested ip address of this port
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.str] public_ip: The public IP associated with the port.
        :param pulumi.Input[_builtins.str] status: The status of the port.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiNetworkPortAttachState.__new__(_PiNetworkPortAttachState)

        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["macaddress"] = macaddress
        __props__.__dict__["network_port_id"] = network_port_id
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_instance_id"] = pi_instance_id
        __props__.__dict__["pi_network_name"] = pi_network_name
        __props__.__dict__["pi_network_port_attach_id"] = pi_network_port_attach_id
        __props__.__dict__["pi_network_port_description"] = pi_network_port_description
        __props__.__dict__["pi_network_port_ipaddress"] = pi_network_port_ipaddress
        __props__.__dict__["pi_user_tags"] = pi_user_tags
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        return PiNetworkPortAttach(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[_builtins.str]:
        """
        The MAC address of the port.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def macaddress(self) -> pulumi.Output[_builtins.str]:
        """
        The MAC address of the instance.
        """
        return pulumi.get(self, "macaddress")

    @_builtins.property
    @pulumi.getter(name="networkPortId")
    def network_port_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the port.
        """
        return pulumi.get(self, "network_port_id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Instance id to attach the network port to.
        """
        return pulumi.get(self, "pi_instance_id")

    @_builtins.property
    @pulumi.getter(name="piNetworkName")
    def pi_network_name(self) -> pulumi.Output[_builtins.str]:
        """
        The network ID or name.
        """
        return pulumi.get(self, "pi_network_name")

    @_builtins.property
    @pulumi.getter(name="piNetworkPortAttachId")
    def pi_network_port_attach_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_network_port_attach_id")

    @_builtins.property
    @pulumi.getter(name="piNetworkPortDescription")
    def pi_network_port_description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description for the Network Port.
        """
        return pulumi.get(self, "pi_network_port_description")

    @_builtins.property
    @pulumi.getter(name="piNetworkPortIpaddress")
    def pi_network_port_ipaddress(self) -> pulumi.Output[_builtins.str]:
        """
        The requested ip address of this port
        """
        return pulumi.get(self, "pi_network_port_ipaddress")

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[_builtins.str]:
        """
        The public IP associated with the port.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the port.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiNetworkPortAttachTimeouts']]:
        return pulumi.get(self, "timeouts")

