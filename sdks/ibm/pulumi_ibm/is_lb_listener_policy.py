# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsLbListenerPolicyArgs', 'IsLbListenerPolicy']

@pulumi.input_type
class IsLbListenerPolicyArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 lb: pulumi.Input[_builtins.str],
                 listener: pulumi.Input[_builtins.str],
                 priority: pulumi.Input[_builtins.float],
                 is_lb_listener_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['IsLbListenerPolicyRuleArgs']]]] = None,
                 target: Optional[pulumi.Input['IsLbListenerPolicyTargetArgs']] = None,
                 target_http_status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 target_https_redirect_listener: Optional[pulumi.Input[_builtins.str]] = None,
                 target_https_redirect_status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 target_https_redirect_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_url: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsLbListenerPolicyTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsLbListenerPolicy resource.
        :param pulumi.Input[_builtins.str] action: Policy Action
        :param pulumi.Input[_builtins.str] lb: Load Balancer Listener Policy
        :param pulumi.Input[_builtins.str] listener: Listener ID
        :param pulumi.Input[_builtins.float] priority: Listener Policy Priority
        :param pulumi.Input[_builtins.str] name: Policy name
        :param pulumi.Input[Sequence[pulumi.Input['IsLbListenerPolicyRuleArgs']]] rules: Policy Rules
        :param pulumi.Input['IsLbListenerPolicyTargetArgs'] target: - If `action` is `forward`, the response is a `LoadBalancerPoolReference`- If `action` is `redirect`, the response is a
               `LoadBalancerListenerPolicyRedirectURL`- If `action` is `https_redirect`, the response is a
               `LoadBalancerListenerHTTPSRedirect`.
        :param pulumi.Input[_builtins.float] target_http_status_code: Listener Policy target HTTPS Status code.
        :param pulumi.Input[_builtins.str] target_https_redirect_listener: ID of the listener that will be set as http redirect target
        :param pulumi.Input[_builtins.float] target_https_redirect_status_code: The HTTP status code to be returned in the redirect response
        :param pulumi.Input[_builtins.str] target_https_redirect_uri: Target URI where traffic will be redirected
        :param pulumi.Input[_builtins.str] target_id: Listener Policy Target ID
        :param pulumi.Input[_builtins.str] target_url: Policy Target URL
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "lb", lb)
        pulumi.set(__self__, "listener", listener)
        pulumi.set(__self__, "priority", priority)
        if is_lb_listener_policy_id is not None:
            pulumi.set(__self__, "is_lb_listener_policy_id", is_lb_listener_policy_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if target_http_status_code is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""target_http_status_code is deprecated: Deprecated""")
        if target_http_status_code is not None:
            pulumi.set(__self__, "target_http_status_code", target_http_status_code)
        if target_https_redirect_listener is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""target_https_redirect_listener is deprecated: Deprecated""")
        if target_https_redirect_listener is not None:
            pulumi.set(__self__, "target_https_redirect_listener", target_https_redirect_listener)
        if target_https_redirect_status_code is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""target_https_redirect_status_code is deprecated: Deprecated""")
        if target_https_redirect_status_code is not None:
            pulumi.set(__self__, "target_https_redirect_status_code", target_https_redirect_status_code)
        if target_https_redirect_uri is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""target_https_redirect_uri is deprecated: Deprecated""")
        if target_https_redirect_uri is not None:
            pulumi.set(__self__, "target_https_redirect_uri", target_https_redirect_uri)
        if target_id is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""target_id is deprecated: Deprecated""")
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_url is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""target_url is deprecated: Deprecated""")
        if target_url is not None:
            pulumi.set(__self__, "target_url", target_url)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Policy Action
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def lb(self) -> pulumi.Input[_builtins.str]:
        """
        Load Balancer Listener Policy
        """
        return pulumi.get(self, "lb")

    @lb.setter
    def lb(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "lb", value)

    @_builtins.property
    @pulumi.getter
    def listener(self) -> pulumi.Input[_builtins.str]:
        """
        Listener ID
        """
        return pulumi.get(self, "listener")

    @listener.setter
    def listener(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "listener", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Input[_builtins.float]:
        """
        Listener Policy Priority
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="isLbListenerPolicyId")
    def is_lb_listener_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_lb_listener_policy_id")

    @is_lb_listener_policy_id.setter
    def is_lb_listener_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_lb_listener_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsLbListenerPolicyRuleArgs']]]]:
        """
        Policy Rules
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsLbListenerPolicyRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['IsLbListenerPolicyTargetArgs']]:
        """
        - If `action` is `forward`, the response is a `LoadBalancerPoolReference`- If `action` is `redirect`, the response is a
        `LoadBalancerListenerPolicyRedirectURL`- If `action` is `https_redirect`, the response is a
        `LoadBalancerListenerHTTPSRedirect`.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['IsLbListenerPolicyTargetArgs']]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter(name="targetHttpStatusCode")
    @_utilities.deprecated("""Deprecated""")
    def target_http_status_code(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Listener Policy target HTTPS Status code.
        """
        return pulumi.get(self, "target_http_status_code")

    @target_http_status_code.setter
    def target_http_status_code(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "target_http_status_code", value)

    @_builtins.property
    @pulumi.getter(name="targetHttpsRedirectListener")
    @_utilities.deprecated("""Deprecated""")
    def target_https_redirect_listener(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the listener that will be set as http redirect target
        """
        return pulumi.get(self, "target_https_redirect_listener")

    @target_https_redirect_listener.setter
    def target_https_redirect_listener(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_https_redirect_listener", value)

    @_builtins.property
    @pulumi.getter(name="targetHttpsRedirectStatusCode")
    @_utilities.deprecated("""Deprecated""")
    def target_https_redirect_status_code(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The HTTP status code to be returned in the redirect response
        """
        return pulumi.get(self, "target_https_redirect_status_code")

    @target_https_redirect_status_code.setter
    def target_https_redirect_status_code(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "target_https_redirect_status_code", value)

    @_builtins.property
    @pulumi.getter(name="targetHttpsRedirectUri")
    @_utilities.deprecated("""Deprecated""")
    def target_https_redirect_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Target URI where traffic will be redirected
        """
        return pulumi.get(self, "target_https_redirect_uri")

    @target_https_redirect_uri.setter
    def target_https_redirect_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_https_redirect_uri", value)

    @_builtins.property
    @pulumi.getter(name="targetId")
    @_utilities.deprecated("""Deprecated""")
    def target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Listener Policy Target ID
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_id", value)

    @_builtins.property
    @pulumi.getter(name="targetUrl")
    @_utilities.deprecated("""Deprecated""")
    def target_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy Target URL
        """
        return pulumi.get(self, "target_url")

    @target_url.setter
    def target_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_url", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsLbListenerPolicyTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsLbListenerPolicyTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsLbListenerPolicyState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 is_lb_listener_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                 listener: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 provisioning_status: Optional[pulumi.Input[_builtins.str]] = None,
                 related_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['IsLbListenerPolicyRuleArgs']]]] = None,
                 target: Optional[pulumi.Input['IsLbListenerPolicyTargetArgs']] = None,
                 target_http_status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 target_https_redirect_listener: Optional[pulumi.Input[_builtins.str]] = None,
                 target_https_redirect_status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 target_https_redirect_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_url: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsLbListenerPolicyTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering IsLbListenerPolicy resources.
        :param pulumi.Input[_builtins.str] action: Policy Action
        :param pulumi.Input[_builtins.str] lb: Load Balancer Listener Policy
        :param pulumi.Input[_builtins.str] listener: Listener ID
        :param pulumi.Input[_builtins.str] name: Policy name
        :param pulumi.Input[_builtins.str] policy_id: Listener Policy ID
        :param pulumi.Input[_builtins.float] priority: Listener Policy Priority
        :param pulumi.Input[_builtins.str] provisioning_status: Listner Policy status
        :param pulumi.Input[_builtins.str] related_crn: The crn of the LB resource
        :param pulumi.Input[Sequence[pulumi.Input['IsLbListenerPolicyRuleArgs']]] rules: Policy Rules
        :param pulumi.Input['IsLbListenerPolicyTargetArgs'] target: - If `action` is `forward`, the response is a `LoadBalancerPoolReference`- If `action` is `redirect`, the response is a
               `LoadBalancerListenerPolicyRedirectURL`- If `action` is `https_redirect`, the response is a
               `LoadBalancerListenerHTTPSRedirect`.
        :param pulumi.Input[_builtins.float] target_http_status_code: Listener Policy target HTTPS Status code.
        :param pulumi.Input[_builtins.str] target_https_redirect_listener: ID of the listener that will be set as http redirect target
        :param pulumi.Input[_builtins.float] target_https_redirect_status_code: The HTTP status code to be returned in the redirect response
        :param pulumi.Input[_builtins.str] target_https_redirect_uri: Target URI where traffic will be redirected
        :param pulumi.Input[_builtins.str] target_id: Listener Policy Target ID
        :param pulumi.Input[_builtins.str] target_url: Policy Target URL
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if is_lb_listener_policy_id is not None:
            pulumi.set(__self__, "is_lb_listener_policy_id", is_lb_listener_policy_id)
        if lb is not None:
            pulumi.set(__self__, "lb", lb)
        if listener is not None:
            pulumi.set(__self__, "listener", listener)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)
        if related_crn is not None:
            pulumi.set(__self__, "related_crn", related_crn)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if target_http_status_code is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""target_http_status_code is deprecated: Deprecated""")
        if target_http_status_code is not None:
            pulumi.set(__self__, "target_http_status_code", target_http_status_code)
        if target_https_redirect_listener is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""target_https_redirect_listener is deprecated: Deprecated""")
        if target_https_redirect_listener is not None:
            pulumi.set(__self__, "target_https_redirect_listener", target_https_redirect_listener)
        if target_https_redirect_status_code is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""target_https_redirect_status_code is deprecated: Deprecated""")
        if target_https_redirect_status_code is not None:
            pulumi.set(__self__, "target_https_redirect_status_code", target_https_redirect_status_code)
        if target_https_redirect_uri is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""target_https_redirect_uri is deprecated: Deprecated""")
        if target_https_redirect_uri is not None:
            pulumi.set(__self__, "target_https_redirect_uri", target_https_redirect_uri)
        if target_id is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""target_id is deprecated: Deprecated""")
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_url is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""target_url is deprecated: Deprecated""")
        if target_url is not None:
            pulumi.set(__self__, "target_url", target_url)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy Action
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="isLbListenerPolicyId")
    def is_lb_listener_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_lb_listener_policy_id")

    @is_lb_listener_policy_id.setter
    def is_lb_listener_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_lb_listener_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def lb(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer Listener Policy
        """
        return pulumi.get(self, "lb")

    @lb.setter
    def lb(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb", value)

    @_builtins.property
    @pulumi.getter
    def listener(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Listener ID
        """
        return pulumi.get(self, "listener")

    @listener.setter
    def listener(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "listener", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Listener Policy ID
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Listener Policy Priority
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Listner Policy status
        """
        return pulumi.get(self, "provisioning_status")

    @provisioning_status.setter
    def provisioning_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "provisioning_status", value)

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the LB resource
        """
        return pulumi.get(self, "related_crn")

    @related_crn.setter
    def related_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_crn", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsLbListenerPolicyRuleArgs']]]]:
        """
        Policy Rules
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsLbListenerPolicyRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['IsLbListenerPolicyTargetArgs']]:
        """
        - If `action` is `forward`, the response is a `LoadBalancerPoolReference`- If `action` is `redirect`, the response is a
        `LoadBalancerListenerPolicyRedirectURL`- If `action` is `https_redirect`, the response is a
        `LoadBalancerListenerHTTPSRedirect`.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['IsLbListenerPolicyTargetArgs']]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter(name="targetHttpStatusCode")
    @_utilities.deprecated("""Deprecated""")
    def target_http_status_code(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Listener Policy target HTTPS Status code.
        """
        return pulumi.get(self, "target_http_status_code")

    @target_http_status_code.setter
    def target_http_status_code(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "target_http_status_code", value)

    @_builtins.property
    @pulumi.getter(name="targetHttpsRedirectListener")
    @_utilities.deprecated("""Deprecated""")
    def target_https_redirect_listener(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the listener that will be set as http redirect target
        """
        return pulumi.get(self, "target_https_redirect_listener")

    @target_https_redirect_listener.setter
    def target_https_redirect_listener(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_https_redirect_listener", value)

    @_builtins.property
    @pulumi.getter(name="targetHttpsRedirectStatusCode")
    @_utilities.deprecated("""Deprecated""")
    def target_https_redirect_status_code(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The HTTP status code to be returned in the redirect response
        """
        return pulumi.get(self, "target_https_redirect_status_code")

    @target_https_redirect_status_code.setter
    def target_https_redirect_status_code(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "target_https_redirect_status_code", value)

    @_builtins.property
    @pulumi.getter(name="targetHttpsRedirectUri")
    @_utilities.deprecated("""Deprecated""")
    def target_https_redirect_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Target URI where traffic will be redirected
        """
        return pulumi.get(self, "target_https_redirect_uri")

    @target_https_redirect_uri.setter
    def target_https_redirect_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_https_redirect_uri", value)

    @_builtins.property
    @pulumi.getter(name="targetId")
    @_utilities.deprecated("""Deprecated""")
    def target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Listener Policy Target ID
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_id", value)

    @_builtins.property
    @pulumi.getter(name="targetUrl")
    @_utilities.deprecated("""Deprecated""")
    def target_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy Target URL
        """
        return pulumi.get(self, "target_url")

    @target_url.setter
    def target_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_url", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsLbListenerPolicyTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsLbListenerPolicyTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/isLbListenerPolicy:IsLbListenerPolicy")
class IsLbListenerPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 is_lb_listener_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                 listener: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsLbListenerPolicyRuleArgs', 'IsLbListenerPolicyRuleArgsDict']]]]] = None,
                 target: Optional[pulumi.Input[Union['IsLbListenerPolicyTargetArgs', 'IsLbListenerPolicyTargetArgsDict']]] = None,
                 target_http_status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 target_https_redirect_listener: Optional[pulumi.Input[_builtins.str]] = None,
                 target_https_redirect_status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 target_https_redirect_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_url: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsLbListenerPolicyTimeoutsArgs', 'IsLbListenerPolicyTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsLbListenerPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Policy Action
        :param pulumi.Input[_builtins.str] lb: Load Balancer Listener Policy
        :param pulumi.Input[_builtins.str] listener: Listener ID
        :param pulumi.Input[_builtins.str] name: Policy name
        :param pulumi.Input[_builtins.float] priority: Listener Policy Priority
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsLbListenerPolicyRuleArgs', 'IsLbListenerPolicyRuleArgsDict']]]] rules: Policy Rules
        :param pulumi.Input[Union['IsLbListenerPolicyTargetArgs', 'IsLbListenerPolicyTargetArgsDict']] target: - If `action` is `forward`, the response is a `LoadBalancerPoolReference`- If `action` is `redirect`, the response is a
               `LoadBalancerListenerPolicyRedirectURL`- If `action` is `https_redirect`, the response is a
               `LoadBalancerListenerHTTPSRedirect`.
        :param pulumi.Input[_builtins.float] target_http_status_code: Listener Policy target HTTPS Status code.
        :param pulumi.Input[_builtins.str] target_https_redirect_listener: ID of the listener that will be set as http redirect target
        :param pulumi.Input[_builtins.float] target_https_redirect_status_code: The HTTP status code to be returned in the redirect response
        :param pulumi.Input[_builtins.str] target_https_redirect_uri: Target URI where traffic will be redirected
        :param pulumi.Input[_builtins.str] target_id: Listener Policy Target ID
        :param pulumi.Input[_builtins.str] target_url: Policy Target URL
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsLbListenerPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsLbListenerPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsLbListenerPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsLbListenerPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 is_lb_listener_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                 listener: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsLbListenerPolicyRuleArgs', 'IsLbListenerPolicyRuleArgsDict']]]]] = None,
                 target: Optional[pulumi.Input[Union['IsLbListenerPolicyTargetArgs', 'IsLbListenerPolicyTargetArgsDict']]] = None,
                 target_http_status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 target_https_redirect_listener: Optional[pulumi.Input[_builtins.str]] = None,
                 target_https_redirect_status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 target_https_redirect_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_url: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsLbListenerPolicyTimeoutsArgs', 'IsLbListenerPolicyTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsLbListenerPolicyArgs.__new__(IsLbListenerPolicyArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["is_lb_listener_policy_id"] = is_lb_listener_policy_id
            if lb is None and not opts.urn:
                raise TypeError("Missing required property 'lb'")
            __props__.__dict__["lb"] = lb
            if listener is None and not opts.urn:
                raise TypeError("Missing required property 'listener'")
            __props__.__dict__["listener"] = listener
            __props__.__dict__["name"] = name
            if priority is None and not opts.urn:
                raise TypeError("Missing required property 'priority'")
            __props__.__dict__["priority"] = priority
            __props__.__dict__["rules"] = rules
            __props__.__dict__["target"] = target
            __props__.__dict__["target_http_status_code"] = target_http_status_code
            __props__.__dict__["target_https_redirect_listener"] = target_https_redirect_listener
            __props__.__dict__["target_https_redirect_status_code"] = target_https_redirect_status_code
            __props__.__dict__["target_https_redirect_uri"] = target_https_redirect_uri
            __props__.__dict__["target_id"] = target_id
            __props__.__dict__["target_url"] = target_url
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["policy_id"] = None
            __props__.__dict__["provisioning_status"] = None
            __props__.__dict__["related_crn"] = None
        super(IsLbListenerPolicy, __self__).__init__(
            'ibm:index/isLbListenerPolicy:IsLbListenerPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            is_lb_listener_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            lb: Optional[pulumi.Input[_builtins.str]] = None,
            listener: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            priority: Optional[pulumi.Input[_builtins.float]] = None,
            provisioning_status: Optional[pulumi.Input[_builtins.str]] = None,
            related_crn: Optional[pulumi.Input[_builtins.str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsLbListenerPolicyRuleArgs', 'IsLbListenerPolicyRuleArgsDict']]]]] = None,
            target: Optional[pulumi.Input[Union['IsLbListenerPolicyTargetArgs', 'IsLbListenerPolicyTargetArgsDict']]] = None,
            target_http_status_code: Optional[pulumi.Input[_builtins.float]] = None,
            target_https_redirect_listener: Optional[pulumi.Input[_builtins.str]] = None,
            target_https_redirect_status_code: Optional[pulumi.Input[_builtins.float]] = None,
            target_https_redirect_uri: Optional[pulumi.Input[_builtins.str]] = None,
            target_id: Optional[pulumi.Input[_builtins.str]] = None,
            target_url: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsLbListenerPolicyTimeoutsArgs', 'IsLbListenerPolicyTimeoutsArgsDict']]] = None) -> 'IsLbListenerPolicy':
        """
        Get an existing IsLbListenerPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Policy Action
        :param pulumi.Input[_builtins.str] lb: Load Balancer Listener Policy
        :param pulumi.Input[_builtins.str] listener: Listener ID
        :param pulumi.Input[_builtins.str] name: Policy name
        :param pulumi.Input[_builtins.str] policy_id: Listener Policy ID
        :param pulumi.Input[_builtins.float] priority: Listener Policy Priority
        :param pulumi.Input[_builtins.str] provisioning_status: Listner Policy status
        :param pulumi.Input[_builtins.str] related_crn: The crn of the LB resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsLbListenerPolicyRuleArgs', 'IsLbListenerPolicyRuleArgsDict']]]] rules: Policy Rules
        :param pulumi.Input[Union['IsLbListenerPolicyTargetArgs', 'IsLbListenerPolicyTargetArgsDict']] target: - If `action` is `forward`, the response is a `LoadBalancerPoolReference`- If `action` is `redirect`, the response is a
               `LoadBalancerListenerPolicyRedirectURL`- If `action` is `https_redirect`, the response is a
               `LoadBalancerListenerHTTPSRedirect`.
        :param pulumi.Input[_builtins.float] target_http_status_code: Listener Policy target HTTPS Status code.
        :param pulumi.Input[_builtins.str] target_https_redirect_listener: ID of the listener that will be set as http redirect target
        :param pulumi.Input[_builtins.float] target_https_redirect_status_code: The HTTP status code to be returned in the redirect response
        :param pulumi.Input[_builtins.str] target_https_redirect_uri: Target URI where traffic will be redirected
        :param pulumi.Input[_builtins.str] target_id: Listener Policy Target ID
        :param pulumi.Input[_builtins.str] target_url: Policy Target URL
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsLbListenerPolicyState.__new__(_IsLbListenerPolicyState)

        __props__.__dict__["action"] = action
        __props__.__dict__["is_lb_listener_policy_id"] = is_lb_listener_policy_id
        __props__.__dict__["lb"] = lb
        __props__.__dict__["listener"] = listener
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["priority"] = priority
        __props__.__dict__["provisioning_status"] = provisioning_status
        __props__.__dict__["related_crn"] = related_crn
        __props__.__dict__["rules"] = rules
        __props__.__dict__["target"] = target
        __props__.__dict__["target_http_status_code"] = target_http_status_code
        __props__.__dict__["target_https_redirect_listener"] = target_https_redirect_listener
        __props__.__dict__["target_https_redirect_status_code"] = target_https_redirect_status_code
        __props__.__dict__["target_https_redirect_uri"] = target_https_redirect_uri
        __props__.__dict__["target_id"] = target_id
        __props__.__dict__["target_url"] = target_url
        __props__.__dict__["timeouts"] = timeouts
        return IsLbListenerPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Policy Action
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="isLbListenerPolicyId")
    def is_lb_listener_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_lb_listener_policy_id")

    @_builtins.property
    @pulumi.getter
    def lb(self) -> pulumi.Output[_builtins.str]:
        """
        Load Balancer Listener Policy
        """
        return pulumi.get(self, "lb")

    @_builtins.property
    @pulumi.getter
    def listener(self) -> pulumi.Output[_builtins.str]:
        """
        Listener ID
        """
        return pulumi.get(self, "listener")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Policy name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Listener Policy ID
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Output[_builtins.float]:
        """
        Listener Policy Priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> pulumi.Output[_builtins.str]:
        """
        Listner Policy status
        """
        return pulumi.get(self, "provisioning_status")

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the LB resource
        """
        return pulumi.get(self, "related_crn")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[Sequence['outputs.IsLbListenerPolicyRule']]]:
        """
        Policy Rules
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Output[Optional['outputs.IsLbListenerPolicyTarget']]:
        """
        - If `action` is `forward`, the response is a `LoadBalancerPoolReference`- If `action` is `redirect`, the response is a
        `LoadBalancerListenerPolicyRedirectURL`- If `action` is `https_redirect`, the response is a
        `LoadBalancerListenerHTTPSRedirect`.
        """
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter(name="targetHttpStatusCode")
    @_utilities.deprecated("""Deprecated""")
    def target_http_status_code(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Listener Policy target HTTPS Status code.
        """
        return pulumi.get(self, "target_http_status_code")

    @_builtins.property
    @pulumi.getter(name="targetHttpsRedirectListener")
    @_utilities.deprecated("""Deprecated""")
    def target_https_redirect_listener(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the listener that will be set as http redirect target
        """
        return pulumi.get(self, "target_https_redirect_listener")

    @_builtins.property
    @pulumi.getter(name="targetHttpsRedirectStatusCode")
    @_utilities.deprecated("""Deprecated""")
    def target_https_redirect_status_code(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The HTTP status code to be returned in the redirect response
        """
        return pulumi.get(self, "target_https_redirect_status_code")

    @_builtins.property
    @pulumi.getter(name="targetHttpsRedirectUri")
    @_utilities.deprecated("""Deprecated""")
    def target_https_redirect_uri(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Target URI where traffic will be redirected
        """
        return pulumi.get(self, "target_https_redirect_uri")

    @_builtins.property
    @pulumi.getter(name="targetId")
    @_utilities.deprecated("""Deprecated""")
    def target_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Listener Policy Target ID
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetUrl")
    @_utilities.deprecated("""Deprecated""")
    def target_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Policy Target URL
        """
        return pulumi.get(self, "target_url")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsLbListenerPolicyTimeouts']]:
        return pulumi.get(self, "timeouts")

