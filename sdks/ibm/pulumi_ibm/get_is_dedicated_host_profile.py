# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsDedicatedHostProfileResult',
    'AwaitableGetIsDedicatedHostProfileResult',
    'get_is_dedicated_host_profile',
    'get_is_dedicated_host_profile_output',
]

@pulumi.output_type
class GetIsDedicatedHostProfileResult:
    """
    A collection of values returned by getIsDedicatedHostProfile.
    """
    def __init__(__self__, class_=None, disks=None, family=None, href=None, id=None, memories=None, name=None, socket_counts=None, status=None, supported_instance_profiles=None, vcpu_architectures=None, vcpu_counts=None, vcpu_manufacturers=None):
        if class_ and not isinstance(class_, str):
            raise TypeError("Expected argument 'class_' to be a str")
        pulumi.set(__self__, "class_", class_)
        if disks and not isinstance(disks, list):
            raise TypeError("Expected argument 'disks' to be a list")
        pulumi.set(__self__, "disks", disks)
        if family and not isinstance(family, str):
            raise TypeError("Expected argument 'family' to be a str")
        pulumi.set(__self__, "family", family)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if memories and not isinstance(memories, list):
            raise TypeError("Expected argument 'memories' to be a list")
        pulumi.set(__self__, "memories", memories)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if socket_counts and not isinstance(socket_counts, list):
            raise TypeError("Expected argument 'socket_counts' to be a list")
        pulumi.set(__self__, "socket_counts", socket_counts)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if supported_instance_profiles and not isinstance(supported_instance_profiles, list):
            raise TypeError("Expected argument 'supported_instance_profiles' to be a list")
        pulumi.set(__self__, "supported_instance_profiles", supported_instance_profiles)
        if vcpu_architectures and not isinstance(vcpu_architectures, list):
            raise TypeError("Expected argument 'vcpu_architectures' to be a list")
        pulumi.set(__self__, "vcpu_architectures", vcpu_architectures)
        if vcpu_counts and not isinstance(vcpu_counts, list):
            raise TypeError("Expected argument 'vcpu_counts' to be a list")
        pulumi.set(__self__, "vcpu_counts", vcpu_counts)
        if vcpu_manufacturers and not isinstance(vcpu_manufacturers, list):
            raise TypeError("Expected argument 'vcpu_manufacturers' to be a list")
        pulumi.set(__self__, "vcpu_manufacturers", vcpu_manufacturers)

    @_builtins.property
    @pulumi.getter(name="class")
    def class_(self) -> _builtins.str:
        return pulumi.get(self, "class_")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetIsDedicatedHostProfileDiskResult']:
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter
    def family(self) -> _builtins.str:
        return pulumi.get(self, "family")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memories(self) -> Sequence['outputs.GetIsDedicatedHostProfileMemoryResult']:
        return pulumi.get(self, "memories")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="socketCounts")
    def socket_counts(self) -> Sequence['outputs.GetIsDedicatedHostProfileSocketCountResult']:
        return pulumi.get(self, "socket_counts")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportedInstanceProfiles")
    def supported_instance_profiles(self) -> Sequence['outputs.GetIsDedicatedHostProfileSupportedInstanceProfileResult']:
        return pulumi.get(self, "supported_instance_profiles")

    @_builtins.property
    @pulumi.getter(name="vcpuArchitectures")
    def vcpu_architectures(self) -> Sequence['outputs.GetIsDedicatedHostProfileVcpuArchitectureResult']:
        return pulumi.get(self, "vcpu_architectures")

    @_builtins.property
    @pulumi.getter(name="vcpuCounts")
    def vcpu_counts(self) -> Sequence['outputs.GetIsDedicatedHostProfileVcpuCountResult']:
        return pulumi.get(self, "vcpu_counts")

    @_builtins.property
    @pulumi.getter(name="vcpuManufacturers")
    def vcpu_manufacturers(self) -> Sequence['outputs.GetIsDedicatedHostProfileVcpuManufacturerResult']:
        return pulumi.get(self, "vcpu_manufacturers")


class AwaitableGetIsDedicatedHostProfileResult(GetIsDedicatedHostProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsDedicatedHostProfileResult(
            class_=self.class_,
            disks=self.disks,
            family=self.family,
            href=self.href,
            id=self.id,
            memories=self.memories,
            name=self.name,
            socket_counts=self.socket_counts,
            status=self.status,
            supported_instance_profiles=self.supported_instance_profiles,
            vcpu_architectures=self.vcpu_architectures,
            vcpu_counts=self.vcpu_counts,
            vcpu_manufacturers=self.vcpu_manufacturers)


def get_is_dedicated_host_profile(id: Optional[_builtins.str] = None,
                                  name: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsDedicatedHostProfileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsDedicatedHostProfile:getIsDedicatedHostProfile', __args__, opts=opts, typ=GetIsDedicatedHostProfileResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsDedicatedHostProfileResult(
        class_=pulumi.get(__ret__, 'class_'),
        disks=pulumi.get(__ret__, 'disks'),
        family=pulumi.get(__ret__, 'family'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        memories=pulumi.get(__ret__, 'memories'),
        name=pulumi.get(__ret__, 'name'),
        socket_counts=pulumi.get(__ret__, 'socket_counts'),
        status=pulumi.get(__ret__, 'status'),
        supported_instance_profiles=pulumi.get(__ret__, 'supported_instance_profiles'),
        vcpu_architectures=pulumi.get(__ret__, 'vcpu_architectures'),
        vcpu_counts=pulumi.get(__ret__, 'vcpu_counts'),
        vcpu_manufacturers=pulumi.get(__ret__, 'vcpu_manufacturers'))
def get_is_dedicated_host_profile_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsDedicatedHostProfileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsDedicatedHostProfile:getIsDedicatedHostProfile', __args__, opts=opts, typ=GetIsDedicatedHostProfileResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsDedicatedHostProfileResult(
        class_=pulumi.get(__response__, 'class_'),
        disks=pulumi.get(__response__, 'disks'),
        family=pulumi.get(__response__, 'family'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        memories=pulumi.get(__response__, 'memories'),
        name=pulumi.get(__response__, 'name'),
        socket_counts=pulumi.get(__response__, 'socket_counts'),
        status=pulumi.get(__response__, 'status'),
        supported_instance_profiles=pulumi.get(__response__, 'supported_instance_profiles'),
        vcpu_architectures=pulumi.get(__response__, 'vcpu_architectures'),
        vcpu_counts=pulumi.get(__response__, 'vcpu_counts'),
        vcpu_manufacturers=pulumi.get(__response__, 'vcpu_manufacturers')))
