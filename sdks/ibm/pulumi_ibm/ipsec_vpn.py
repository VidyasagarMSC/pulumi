# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IpsecVpnArgs', 'IpsecVpn']

@pulumi.input_type
class IpsecVpnArgs:
    def __init__(__self__, *,
                 datacenter: pulumi.Input[_builtins.str],
                 address_translation: Optional[pulumi.Input['IpsecVpnAddressTranslationArgs']] = None,
                 customer_peer_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipsec_vpn_id: Optional[pulumi.Input[_builtins.str]] = None,
                 phase_one: Optional[pulumi.Input['IpsecVpnPhaseOneArgs']] = None,
                 phase_two: Optional[pulumi.Input['IpsecVpnPhaseTwoArgs']] = None,
                 preshared_key: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_subnet: Optional[pulumi.Input['IpsecVpnRemoteSubnetArgs']] = None,
                 remote_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 service_subnet_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a IpsecVpn resource.
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.str] customer_peer_ip: Customer Peer IP Address
        :param pulumi.Input[_builtins.float] internal_subnet_id: Internal subnet ID value
        :param pulumi.Input[_builtins.str] preshared_key: Preshared Key data
        :param pulumi.Input[_builtins.float] remote_subnet_id: Remote subnet ID value
        :param pulumi.Input[_builtins.float] service_subnet_id: Service subnet ID value
        """
        pulumi.set(__self__, "datacenter", datacenter)
        if address_translation is not None:
            pulumi.set(__self__, "address_translation", address_translation)
        if customer_peer_ip is not None:
            pulumi.set(__self__, "customer_peer_ip", customer_peer_ip)
        if internal_subnet_id is not None:
            pulumi.set(__self__, "internal_subnet_id", internal_subnet_id)
        if ipsec_vpn_id is not None:
            pulumi.set(__self__, "ipsec_vpn_id", ipsec_vpn_id)
        if phase_one is not None:
            pulumi.set(__self__, "phase_one", phase_one)
        if phase_two is not None:
            pulumi.set(__self__, "phase_two", phase_two)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if remote_subnet is not None:
            pulumi.set(__self__, "remote_subnet", remote_subnet)
        if remote_subnet_id is not None:
            pulumi.set(__self__, "remote_subnet_id", remote_subnet_id)
        if service_subnet_id is not None:
            pulumi.set(__self__, "service_subnet_id", service_subnet_id)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[_builtins.str]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="addressTranslation")
    def address_translation(self) -> Optional[pulumi.Input['IpsecVpnAddressTranslationArgs']]:
        return pulumi.get(self, "address_translation")

    @address_translation.setter
    def address_translation(self, value: Optional[pulumi.Input['IpsecVpnAddressTranslationArgs']]):
        pulumi.set(self, "address_translation", value)

    @_builtins.property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Customer Peer IP Address
        """
        return pulumi.get(self, "customer_peer_ip")

    @customer_peer_ip.setter
    def customer_peer_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "customer_peer_ip", value)

    @_builtins.property
    @pulumi.getter(name="internalSubnetId")
    def internal_subnet_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Internal subnet ID value
        """
        return pulumi.get(self, "internal_subnet_id")

    @internal_subnet_id.setter
    def internal_subnet_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "internal_subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="ipsecVpnId")
    def ipsec_vpn_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipsec_vpn_id")

    @ipsec_vpn_id.setter
    def ipsec_vpn_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsec_vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="phaseOne")
    def phase_one(self) -> Optional[pulumi.Input['IpsecVpnPhaseOneArgs']]:
        return pulumi.get(self, "phase_one")

    @phase_one.setter
    def phase_one(self, value: Optional[pulumi.Input['IpsecVpnPhaseOneArgs']]):
        pulumi.set(self, "phase_one", value)

    @_builtins.property
    @pulumi.getter(name="phaseTwo")
    def phase_two(self) -> Optional[pulumi.Input['IpsecVpnPhaseTwoArgs']]:
        return pulumi.get(self, "phase_two")

    @phase_two.setter
    def phase_two(self, value: Optional[pulumi.Input['IpsecVpnPhaseTwoArgs']]):
        pulumi.set(self, "phase_two", value)

    @_builtins.property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Preshared Key data
        """
        return pulumi.get(self, "preshared_key")

    @preshared_key.setter
    def preshared_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preshared_key", value)

    @_builtins.property
    @pulumi.getter(name="remoteSubnet")
    def remote_subnet(self) -> Optional[pulumi.Input['IpsecVpnRemoteSubnetArgs']]:
        return pulumi.get(self, "remote_subnet")

    @remote_subnet.setter
    def remote_subnet(self, value: Optional[pulumi.Input['IpsecVpnRemoteSubnetArgs']]):
        pulumi.set(self, "remote_subnet", value)

    @_builtins.property
    @pulumi.getter(name="remoteSubnetId")
    def remote_subnet_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Remote subnet ID value
        """
        return pulumi.get(self, "remote_subnet_id")

    @remote_subnet_id.setter
    def remote_subnet_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "remote_subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceSubnetId")
    def service_subnet_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Service subnet ID value
        """
        return pulumi.get(self, "service_subnet_id")

    @service_subnet_id.setter
    def service_subnet_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "service_subnet_id", value)


@pulumi.input_type
class _IpsecVpnState:
    def __init__(__self__, *,
                 address_translation: Optional[pulumi.Input['IpsecVpnAddressTranslationArgs']] = None,
                 customer_peer_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_peer_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipsec_vpn_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 phase_one: Optional[pulumi.Input['IpsecVpnPhaseOneArgs']] = None,
                 phase_two: Optional[pulumi.Input['IpsecVpnPhaseTwoArgs']] = None,
                 preshared_key: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_subnet: Optional[pulumi.Input['IpsecVpnRemoteSubnetArgs']] = None,
                 remote_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 service_subnet_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering IpsecVpn resources.
        :param pulumi.Input[_builtins.str] customer_peer_ip: Customer Peer IP Address
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.float] internal_subnet_id: Internal subnet ID value
        :param pulumi.Input[_builtins.str] preshared_key: Preshared Key data
        :param pulumi.Input[_builtins.float] remote_subnet_id: Remote subnet ID value
        :param pulumi.Input[_builtins.float] service_subnet_id: Service subnet ID value
        """
        if address_translation is not None:
            pulumi.set(__self__, "address_translation", address_translation)
        if customer_peer_ip is not None:
            pulumi.set(__self__, "customer_peer_ip", customer_peer_ip)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if internal_peer_ip_address is not None:
            pulumi.set(__self__, "internal_peer_ip_address", internal_peer_ip_address)
        if internal_subnet_id is not None:
            pulumi.set(__self__, "internal_subnet_id", internal_subnet_id)
        if ipsec_vpn_id is not None:
            pulumi.set(__self__, "ipsec_vpn_id", ipsec_vpn_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phase_one is not None:
            pulumi.set(__self__, "phase_one", phase_one)
        if phase_two is not None:
            pulumi.set(__self__, "phase_two", phase_two)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if remote_subnet is not None:
            pulumi.set(__self__, "remote_subnet", remote_subnet)
        if remote_subnet_id is not None:
            pulumi.set(__self__, "remote_subnet_id", remote_subnet_id)
        if service_subnet_id is not None:
            pulumi.set(__self__, "service_subnet_id", service_subnet_id)

    @_builtins.property
    @pulumi.getter(name="addressTranslation")
    def address_translation(self) -> Optional[pulumi.Input['IpsecVpnAddressTranslationArgs']]:
        return pulumi.get(self, "address_translation")

    @address_translation.setter
    def address_translation(self, value: Optional[pulumi.Input['IpsecVpnAddressTranslationArgs']]):
        pulumi.set(self, "address_translation", value)

    @_builtins.property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Customer Peer IP Address
        """
        return pulumi.get(self, "customer_peer_ip")

    @customer_peer_ip.setter
    def customer_peer_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "customer_peer_ip", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="internalPeerIpAddress")
    def internal_peer_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "internal_peer_ip_address")

    @internal_peer_ip_address.setter
    def internal_peer_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "internal_peer_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="internalSubnetId")
    def internal_subnet_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Internal subnet ID value
        """
        return pulumi.get(self, "internal_subnet_id")

    @internal_subnet_id.setter
    def internal_subnet_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "internal_subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="ipsecVpnId")
    def ipsec_vpn_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipsec_vpn_id")

    @ipsec_vpn_id.setter
    def ipsec_vpn_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsec_vpn_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="phaseOne")
    def phase_one(self) -> Optional[pulumi.Input['IpsecVpnPhaseOneArgs']]:
        return pulumi.get(self, "phase_one")

    @phase_one.setter
    def phase_one(self, value: Optional[pulumi.Input['IpsecVpnPhaseOneArgs']]):
        pulumi.set(self, "phase_one", value)

    @_builtins.property
    @pulumi.getter(name="phaseTwo")
    def phase_two(self) -> Optional[pulumi.Input['IpsecVpnPhaseTwoArgs']]:
        return pulumi.get(self, "phase_two")

    @phase_two.setter
    def phase_two(self, value: Optional[pulumi.Input['IpsecVpnPhaseTwoArgs']]):
        pulumi.set(self, "phase_two", value)

    @_builtins.property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Preshared Key data
        """
        return pulumi.get(self, "preshared_key")

    @preshared_key.setter
    def preshared_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preshared_key", value)

    @_builtins.property
    @pulumi.getter(name="remoteSubnet")
    def remote_subnet(self) -> Optional[pulumi.Input['IpsecVpnRemoteSubnetArgs']]:
        return pulumi.get(self, "remote_subnet")

    @remote_subnet.setter
    def remote_subnet(self, value: Optional[pulumi.Input['IpsecVpnRemoteSubnetArgs']]):
        pulumi.set(self, "remote_subnet", value)

    @_builtins.property
    @pulumi.getter(name="remoteSubnetId")
    def remote_subnet_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Remote subnet ID value
        """
        return pulumi.get(self, "remote_subnet_id")

    @remote_subnet_id.setter
    def remote_subnet_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "remote_subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceSubnetId")
    def service_subnet_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Service subnet ID value
        """
        return pulumi.get(self, "service_subnet_id")

    @service_subnet_id.setter
    def service_subnet_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "service_subnet_id", value)


@pulumi.type_token("ibm:index/ipsecVpn:IpsecVpn")
class IpsecVpn(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_translation: Optional[pulumi.Input[Union['IpsecVpnAddressTranslationArgs', 'IpsecVpnAddressTranslationArgsDict']]] = None,
                 customer_peer_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipsec_vpn_id: Optional[pulumi.Input[_builtins.str]] = None,
                 phase_one: Optional[pulumi.Input[Union['IpsecVpnPhaseOneArgs', 'IpsecVpnPhaseOneArgsDict']]] = None,
                 phase_two: Optional[pulumi.Input[Union['IpsecVpnPhaseTwoArgs', 'IpsecVpnPhaseTwoArgsDict']]] = None,
                 preshared_key: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_subnet: Optional[pulumi.Input[Union['IpsecVpnRemoteSubnetArgs', 'IpsecVpnRemoteSubnetArgsDict']]] = None,
                 remote_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 service_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a IpsecVpn resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] customer_peer_ip: Customer Peer IP Address
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.float] internal_subnet_id: Internal subnet ID value
        :param pulumi.Input[_builtins.str] preshared_key: Preshared Key data
        :param pulumi.Input[_builtins.float] remote_subnet_id: Remote subnet ID value
        :param pulumi.Input[_builtins.float] service_subnet_id: Service subnet ID value
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IpsecVpnArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IpsecVpn resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IpsecVpnArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpsecVpnArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_translation: Optional[pulumi.Input[Union['IpsecVpnAddressTranslationArgs', 'IpsecVpnAddressTranslationArgsDict']]] = None,
                 customer_peer_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipsec_vpn_id: Optional[pulumi.Input[_builtins.str]] = None,
                 phase_one: Optional[pulumi.Input[Union['IpsecVpnPhaseOneArgs', 'IpsecVpnPhaseOneArgsDict']]] = None,
                 phase_two: Optional[pulumi.Input[Union['IpsecVpnPhaseTwoArgs', 'IpsecVpnPhaseTwoArgsDict']]] = None,
                 preshared_key: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_subnet: Optional[pulumi.Input[Union['IpsecVpnRemoteSubnetArgs', 'IpsecVpnRemoteSubnetArgsDict']]] = None,
                 remote_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 service_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpsecVpnArgs.__new__(IpsecVpnArgs)

            __props__.__dict__["address_translation"] = address_translation
            __props__.__dict__["customer_peer_ip"] = customer_peer_ip
            if datacenter is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter'")
            __props__.__dict__["datacenter"] = datacenter
            __props__.__dict__["internal_subnet_id"] = internal_subnet_id
            __props__.__dict__["ipsec_vpn_id"] = ipsec_vpn_id
            __props__.__dict__["phase_one"] = phase_one
            __props__.__dict__["phase_two"] = phase_two
            __props__.__dict__["preshared_key"] = preshared_key
            __props__.__dict__["remote_subnet"] = remote_subnet
            __props__.__dict__["remote_subnet_id"] = remote_subnet_id
            __props__.__dict__["service_subnet_id"] = service_subnet_id
            __props__.__dict__["internal_peer_ip_address"] = None
            __props__.__dict__["name"] = None
        super(IpsecVpn, __self__).__init__(
            'ibm:index/ipsecVpn:IpsecVpn',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_translation: Optional[pulumi.Input[Union['IpsecVpnAddressTranslationArgs', 'IpsecVpnAddressTranslationArgsDict']]] = None,
            customer_peer_ip: Optional[pulumi.Input[_builtins.str]] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            internal_peer_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            internal_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
            ipsec_vpn_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            phase_one: Optional[pulumi.Input[Union['IpsecVpnPhaseOneArgs', 'IpsecVpnPhaseOneArgsDict']]] = None,
            phase_two: Optional[pulumi.Input[Union['IpsecVpnPhaseTwoArgs', 'IpsecVpnPhaseTwoArgsDict']]] = None,
            preshared_key: Optional[pulumi.Input[_builtins.str]] = None,
            remote_subnet: Optional[pulumi.Input[Union['IpsecVpnRemoteSubnetArgs', 'IpsecVpnRemoteSubnetArgsDict']]] = None,
            remote_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
            service_subnet_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'IpsecVpn':
        """
        Get an existing IpsecVpn resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] customer_peer_ip: Customer Peer IP Address
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.float] internal_subnet_id: Internal subnet ID value
        :param pulumi.Input[_builtins.str] preshared_key: Preshared Key data
        :param pulumi.Input[_builtins.float] remote_subnet_id: Remote subnet ID value
        :param pulumi.Input[_builtins.float] service_subnet_id: Service subnet ID value
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpsecVpnState.__new__(_IpsecVpnState)

        __props__.__dict__["address_translation"] = address_translation
        __props__.__dict__["customer_peer_ip"] = customer_peer_ip
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["internal_peer_ip_address"] = internal_peer_ip_address
        __props__.__dict__["internal_subnet_id"] = internal_subnet_id
        __props__.__dict__["ipsec_vpn_id"] = ipsec_vpn_id
        __props__.__dict__["name"] = name
        __props__.__dict__["phase_one"] = phase_one
        __props__.__dict__["phase_two"] = phase_two
        __props__.__dict__["preshared_key"] = preshared_key
        __props__.__dict__["remote_subnet"] = remote_subnet
        __props__.__dict__["remote_subnet_id"] = remote_subnet_id
        __props__.__dict__["service_subnet_id"] = service_subnet_id
        return IpsecVpn(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="addressTranslation")
    def address_translation(self) -> pulumi.Output[Optional['outputs.IpsecVpnAddressTranslation']]:
        return pulumi.get(self, "address_translation")

    @_builtins.property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Customer Peer IP Address
        """
        return pulumi.get(self, "customer_peer_ip")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter(name="internalPeerIpAddress")
    def internal_peer_ip_address(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "internal_peer_ip_address")

    @_builtins.property
    @pulumi.getter(name="internalSubnetId")
    def internal_subnet_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Internal subnet ID value
        """
        return pulumi.get(self, "internal_subnet_id")

    @_builtins.property
    @pulumi.getter(name="ipsecVpnId")
    def ipsec_vpn_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ipsec_vpn_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="phaseOne")
    def phase_one(self) -> pulumi.Output[Optional['outputs.IpsecVpnPhaseOne']]:
        return pulumi.get(self, "phase_one")

    @_builtins.property
    @pulumi.getter(name="phaseTwo")
    def phase_two(self) -> pulumi.Output[Optional['outputs.IpsecVpnPhaseTwo']]:
        return pulumi.get(self, "phase_two")

    @_builtins.property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Preshared Key data
        """
        return pulumi.get(self, "preshared_key")

    @_builtins.property
    @pulumi.getter(name="remoteSubnet")
    def remote_subnet(self) -> pulumi.Output[Optional['outputs.IpsecVpnRemoteSubnet']]:
        return pulumi.get(self, "remote_subnet")

    @_builtins.property
    @pulumi.getter(name="remoteSubnetId")
    def remote_subnet_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Remote subnet ID value
        """
        return pulumi.get(self, "remote_subnet_id")

    @_builtins.property
    @pulumi.getter(name="serviceSubnetId")
    def service_subnet_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Service subnet ID value
        """
        return pulumi.get(self, "service_subnet_id")

