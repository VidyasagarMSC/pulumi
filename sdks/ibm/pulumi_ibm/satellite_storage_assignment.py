# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SatelliteStorageAssignmentArgs', 'SatelliteStorageAssignment']

@pulumi.input_type
class SatelliteStorageAssignmentArgs:
    def __init__(__self__, *,
                 assignment_name: pulumi.Input[_builtins.str],
                 config: pulumi.Input[_builtins.str],
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 controller: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 satellite_storage_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['SatelliteStorageAssignmentTimeoutsArgs']] = None,
                 update_config_revision: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a SatelliteStorageAssignment resource.
        :param pulumi.Input[_builtins.str] assignment_name: Name of the Assignment.
        :param pulumi.Input[_builtins.str] config: Storage Configuration Name or ID.
        :param pulumi.Input[_builtins.str] cluster: ID of the Satellite cluster or Service Cluster that you want to apply the configuration to.
        :param pulumi.Input[_builtins.str] controller: The Name or ID of the Satellite Location.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] groups: One or more cluster groups on which you want to apply the configuration. Note that at least one cluster group is
               required.
        :param pulumi.Input[_builtins.bool] update_config_revision: Updating an assignment to the latest available storage configuration version.
        """
        pulumi.set(__self__, "assignment_name", assignment_name)
        pulumi.set(__self__, "config", config)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if controller is not None:
            pulumi.set(__self__, "controller", controller)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if satellite_storage_assignment_id is not None:
            pulumi.set(__self__, "satellite_storage_assignment_id", satellite_storage_assignment_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if update_config_revision is not None:
            pulumi.set(__self__, "update_config_revision", update_config_revision)

    @_builtins.property
    @pulumi.getter(name="assignmentName")
    def assignment_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the Assignment.
        """
        return pulumi.get(self, "assignment_name")

    @assignment_name.setter
    def assignment_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "assignment_name", value)

    @_builtins.property
    @pulumi.getter
    def config(self) -> pulumi.Input[_builtins.str]:
        """
        Storage Configuration Name or ID.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the Satellite cluster or Service Cluster that you want to apply the configuration to.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter
    def controller(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name or ID of the Satellite Location.
        """
        return pulumi.get(self, "controller")

    @controller.setter
    def controller(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "controller", value)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        One or more cluster groups on which you want to apply the configuration. Note that at least one cluster group is
        required.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter(name="satelliteStorageAssignmentId")
    def satellite_storage_assignment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_storage_assignment_id")

    @satellite_storage_assignment_id.setter
    def satellite_storage_assignment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_storage_assignment_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SatelliteStorageAssignmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SatelliteStorageAssignmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updateConfigRevision")
    def update_config_revision(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Updating an assignment to the latest available storage configuration version.
        """
        return pulumi.get(self, "update_config_revision")

    @update_config_revision.setter
    def update_config_revision(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "update_config_revision", value)


@pulumi.input_type
class _SatelliteStorageAssignmentState:
    def __init__(__self__, *,
                 assignment_name: Optional[pulumi.Input[_builtins.str]] = None,
                 assignment_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 config_uuid: Optional[pulumi.Input[_builtins.str]] = None,
                 config_version: Optional[pulumi.Input[_builtins.str]] = None,
                 config_version_uuid: Optional[pulumi.Input[_builtins.str]] = None,
                 controller: Optional[pulumi.Input[_builtins.str]] = None,
                 created: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_assignment_upgrade_available: Optional[pulumi.Input[_builtins.bool]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 rollout_error_count: Optional[pulumi.Input[_builtins.float]] = None,
                 rollout_success_count: Optional[pulumi.Input[_builtins.float]] = None,
                 sat_cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_storage_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 svc_cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['SatelliteStorageAssignmentTimeoutsArgs']] = None,
                 update_config_revision: Optional[pulumi.Input[_builtins.bool]] = None,
                 uuid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SatelliteStorageAssignment resources.
        :param pulumi.Input[_builtins.str] assignment_name: Name of the Assignment.
        :param pulumi.Input[_builtins.str] assignment_type: The Type of Assignment.
        :param pulumi.Input[_builtins.str] cluster: ID of the Satellite cluster or Service Cluster that you want to apply the configuration to.
        :param pulumi.Input[_builtins.str] config: Storage Configuration Name or ID.
        :param pulumi.Input[_builtins.str] config_uuid: The Universally Unique IDentifier (UUID) of the Storage Configuration.
        :param pulumi.Input[_builtins.str] config_version: The Storage Configuration Version.
        :param pulumi.Input[_builtins.str] config_version_uuid: The Universally Unique IDentifier (UUID) of the Storage Configuration Version.
        :param pulumi.Input[_builtins.str] controller: The Name or ID of the Satellite Location.
        :param pulumi.Input[_builtins.str] created: The Time of Creation of the Assignment.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] groups: One or more cluster groups on which you want to apply the configuration. Note that at least one cluster group is
               required.
        :param pulumi.Input[_builtins.bool] is_assignment_upgrade_available: Whether an Upgrade is Available for the Assignment.
        :param pulumi.Input[_builtins.str] owner: The Owner of the Assignment.
        :param pulumi.Input[_builtins.float] rollout_error_count: The Rollout Error Count of the Assignment.
        :param pulumi.Input[_builtins.float] rollout_success_count: The Rollout Success Count of the Assignment.
        :param pulumi.Input[_builtins.str] sat_cluster: ID of the Satellite cluster that you applied the configuration to.
        :param pulumi.Input[_builtins.str] svc_cluster: ID of the Service Cluster that you applied the configuration to.
        :param pulumi.Input[_builtins.bool] update_config_revision: Updating an assignment to the latest available storage configuration version.
        :param pulumi.Input[_builtins.str] uuid: The Universally Unique IDentifier (UUID) of the Assignment.
        """
        if assignment_name is not None:
            pulumi.set(__self__, "assignment_name", assignment_name)
        if assignment_type is not None:
            pulumi.set(__self__, "assignment_type", assignment_type)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if config_uuid is not None:
            pulumi.set(__self__, "config_uuid", config_uuid)
        if config_version is not None:
            pulumi.set(__self__, "config_version", config_version)
        if config_version_uuid is not None:
            pulumi.set(__self__, "config_version_uuid", config_version_uuid)
        if controller is not None:
            pulumi.set(__self__, "controller", controller)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if is_assignment_upgrade_available is not None:
            pulumi.set(__self__, "is_assignment_upgrade_available", is_assignment_upgrade_available)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if rollout_error_count is not None:
            pulumi.set(__self__, "rollout_error_count", rollout_error_count)
        if rollout_success_count is not None:
            pulumi.set(__self__, "rollout_success_count", rollout_success_count)
        if sat_cluster is not None:
            pulumi.set(__self__, "sat_cluster", sat_cluster)
        if satellite_storage_assignment_id is not None:
            pulumi.set(__self__, "satellite_storage_assignment_id", satellite_storage_assignment_id)
        if svc_cluster is not None:
            pulumi.set(__self__, "svc_cluster", svc_cluster)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if update_config_revision is not None:
            pulumi.set(__self__, "update_config_revision", update_config_revision)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="assignmentName")
    def assignment_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Assignment.
        """
        return pulumi.get(self, "assignment_name")

    @assignment_name.setter
    def assignment_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "assignment_name", value)

    @_builtins.property
    @pulumi.getter(name="assignmentType")
    def assignment_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Type of Assignment.
        """
        return pulumi.get(self, "assignment_type")

    @assignment_type.setter
    def assignment_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "assignment_type", value)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the Satellite cluster or Service Cluster that you want to apply the configuration to.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage Configuration Name or ID.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter(name="configUuid")
    def config_uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Universally Unique IDentifier (UUID) of the Storage Configuration.
        """
        return pulumi.get(self, "config_uuid")

    @config_uuid.setter
    def config_uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_uuid", value)

    @_builtins.property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Storage Configuration Version.
        """
        return pulumi.get(self, "config_version")

    @config_version.setter
    def config_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_version", value)

    @_builtins.property
    @pulumi.getter(name="configVersionUuid")
    def config_version_uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Universally Unique IDentifier (UUID) of the Storage Configuration Version.
        """
        return pulumi.get(self, "config_version_uuid")

    @config_version_uuid.setter
    def config_version_uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_version_uuid", value)

    @_builtins.property
    @pulumi.getter
    def controller(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name or ID of the Satellite Location.
        """
        return pulumi.get(self, "controller")

    @controller.setter
    def controller(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "controller", value)

    @_builtins.property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Time of Creation of the Assignment.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created", value)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        One or more cluster groups on which you want to apply the configuration. Note that at least one cluster group is
        required.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter(name="isAssignmentUpgradeAvailable")
    def is_assignment_upgrade_available(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether an Upgrade is Available for the Assignment.
        """
        return pulumi.get(self, "is_assignment_upgrade_available")

    @is_assignment_upgrade_available.setter
    def is_assignment_upgrade_available(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_assignment_upgrade_available", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Owner of the Assignment.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter(name="rolloutErrorCount")
    def rollout_error_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The Rollout Error Count of the Assignment.
        """
        return pulumi.get(self, "rollout_error_count")

    @rollout_error_count.setter
    def rollout_error_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "rollout_error_count", value)

    @_builtins.property
    @pulumi.getter(name="rolloutSuccessCount")
    def rollout_success_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The Rollout Success Count of the Assignment.
        """
        return pulumi.get(self, "rollout_success_count")

    @rollout_success_count.setter
    def rollout_success_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "rollout_success_count", value)

    @_builtins.property
    @pulumi.getter(name="satCluster")
    def sat_cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the Satellite cluster that you applied the configuration to.
        """
        return pulumi.get(self, "sat_cluster")

    @sat_cluster.setter
    def sat_cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sat_cluster", value)

    @_builtins.property
    @pulumi.getter(name="satelliteStorageAssignmentId")
    def satellite_storage_assignment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_storage_assignment_id")

    @satellite_storage_assignment_id.setter
    def satellite_storage_assignment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_storage_assignment_id", value)

    @_builtins.property
    @pulumi.getter(name="svcCluster")
    def svc_cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the Service Cluster that you applied the configuration to.
        """
        return pulumi.get(self, "svc_cluster")

    @svc_cluster.setter
    def svc_cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "svc_cluster", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SatelliteStorageAssignmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SatelliteStorageAssignmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updateConfigRevision")
    def update_config_revision(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Updating an assignment to the latest available storage configuration version.
        """
        return pulumi.get(self, "update_config_revision")

    @update_config_revision.setter
    def update_config_revision(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "update_config_revision", value)

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Universally Unique IDentifier (UUID) of the Assignment.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uuid", value)


@pulumi.type_token("ibm:index/satelliteStorageAssignment:SatelliteStorageAssignment")
class SatelliteStorageAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignment_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 controller: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 satellite_storage_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['SatelliteStorageAssignmentTimeoutsArgs', 'SatelliteStorageAssignmentTimeoutsArgsDict']]] = None,
                 update_config_revision: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a SatelliteStorageAssignment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] assignment_name: Name of the Assignment.
        :param pulumi.Input[_builtins.str] cluster: ID of the Satellite cluster or Service Cluster that you want to apply the configuration to.
        :param pulumi.Input[_builtins.str] config: Storage Configuration Name or ID.
        :param pulumi.Input[_builtins.str] controller: The Name or ID of the Satellite Location.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] groups: One or more cluster groups on which you want to apply the configuration. Note that at least one cluster group is
               required.
        :param pulumi.Input[_builtins.bool] update_config_revision: Updating an assignment to the latest available storage configuration version.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SatelliteStorageAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SatelliteStorageAssignment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SatelliteStorageAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SatelliteStorageAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignment_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 controller: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 satellite_storage_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['SatelliteStorageAssignmentTimeoutsArgs', 'SatelliteStorageAssignmentTimeoutsArgsDict']]] = None,
                 update_config_revision: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SatelliteStorageAssignmentArgs.__new__(SatelliteStorageAssignmentArgs)

            if assignment_name is None and not opts.urn:
                raise TypeError("Missing required property 'assignment_name'")
            __props__.__dict__["assignment_name"] = assignment_name
            __props__.__dict__["cluster"] = cluster
            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = config
            __props__.__dict__["controller"] = controller
            __props__.__dict__["groups"] = groups
            __props__.__dict__["satellite_storage_assignment_id"] = satellite_storage_assignment_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["update_config_revision"] = update_config_revision
            __props__.__dict__["assignment_type"] = None
            __props__.__dict__["config_uuid"] = None
            __props__.__dict__["config_version"] = None
            __props__.__dict__["config_version_uuid"] = None
            __props__.__dict__["created"] = None
            __props__.__dict__["is_assignment_upgrade_available"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["rollout_error_count"] = None
            __props__.__dict__["rollout_success_count"] = None
            __props__.__dict__["sat_cluster"] = None
            __props__.__dict__["svc_cluster"] = None
            __props__.__dict__["uuid"] = None
        super(SatelliteStorageAssignment, __self__).__init__(
            'ibm:index/satelliteStorageAssignment:SatelliteStorageAssignment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assignment_name: Optional[pulumi.Input[_builtins.str]] = None,
            assignment_type: Optional[pulumi.Input[_builtins.str]] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            config: Optional[pulumi.Input[_builtins.str]] = None,
            config_uuid: Optional[pulumi.Input[_builtins.str]] = None,
            config_version: Optional[pulumi.Input[_builtins.str]] = None,
            config_version_uuid: Optional[pulumi.Input[_builtins.str]] = None,
            controller: Optional[pulumi.Input[_builtins.str]] = None,
            created: Optional[pulumi.Input[_builtins.str]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            is_assignment_upgrade_available: Optional[pulumi.Input[_builtins.bool]] = None,
            owner: Optional[pulumi.Input[_builtins.str]] = None,
            rollout_error_count: Optional[pulumi.Input[_builtins.float]] = None,
            rollout_success_count: Optional[pulumi.Input[_builtins.float]] = None,
            sat_cluster: Optional[pulumi.Input[_builtins.str]] = None,
            satellite_storage_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
            svc_cluster: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['SatelliteStorageAssignmentTimeoutsArgs', 'SatelliteStorageAssignmentTimeoutsArgsDict']]] = None,
            update_config_revision: Optional[pulumi.Input[_builtins.bool]] = None,
            uuid: Optional[pulumi.Input[_builtins.str]] = None) -> 'SatelliteStorageAssignment':
        """
        Get an existing SatelliteStorageAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] assignment_name: Name of the Assignment.
        :param pulumi.Input[_builtins.str] assignment_type: The Type of Assignment.
        :param pulumi.Input[_builtins.str] cluster: ID of the Satellite cluster or Service Cluster that you want to apply the configuration to.
        :param pulumi.Input[_builtins.str] config: Storage Configuration Name or ID.
        :param pulumi.Input[_builtins.str] config_uuid: The Universally Unique IDentifier (UUID) of the Storage Configuration.
        :param pulumi.Input[_builtins.str] config_version: The Storage Configuration Version.
        :param pulumi.Input[_builtins.str] config_version_uuid: The Universally Unique IDentifier (UUID) of the Storage Configuration Version.
        :param pulumi.Input[_builtins.str] controller: The Name or ID of the Satellite Location.
        :param pulumi.Input[_builtins.str] created: The Time of Creation of the Assignment.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] groups: One or more cluster groups on which you want to apply the configuration. Note that at least one cluster group is
               required.
        :param pulumi.Input[_builtins.bool] is_assignment_upgrade_available: Whether an Upgrade is Available for the Assignment.
        :param pulumi.Input[_builtins.str] owner: The Owner of the Assignment.
        :param pulumi.Input[_builtins.float] rollout_error_count: The Rollout Error Count of the Assignment.
        :param pulumi.Input[_builtins.float] rollout_success_count: The Rollout Success Count of the Assignment.
        :param pulumi.Input[_builtins.str] sat_cluster: ID of the Satellite cluster that you applied the configuration to.
        :param pulumi.Input[_builtins.str] svc_cluster: ID of the Service Cluster that you applied the configuration to.
        :param pulumi.Input[_builtins.bool] update_config_revision: Updating an assignment to the latest available storage configuration version.
        :param pulumi.Input[_builtins.str] uuid: The Universally Unique IDentifier (UUID) of the Assignment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SatelliteStorageAssignmentState.__new__(_SatelliteStorageAssignmentState)

        __props__.__dict__["assignment_name"] = assignment_name
        __props__.__dict__["assignment_type"] = assignment_type
        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["config"] = config
        __props__.__dict__["config_uuid"] = config_uuid
        __props__.__dict__["config_version"] = config_version
        __props__.__dict__["config_version_uuid"] = config_version_uuid
        __props__.__dict__["controller"] = controller
        __props__.__dict__["created"] = created
        __props__.__dict__["groups"] = groups
        __props__.__dict__["is_assignment_upgrade_available"] = is_assignment_upgrade_available
        __props__.__dict__["owner"] = owner
        __props__.__dict__["rollout_error_count"] = rollout_error_count
        __props__.__dict__["rollout_success_count"] = rollout_success_count
        __props__.__dict__["sat_cluster"] = sat_cluster
        __props__.__dict__["satellite_storage_assignment_id"] = satellite_storage_assignment_id
        __props__.__dict__["svc_cluster"] = svc_cluster
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["update_config_revision"] = update_config_revision
        __props__.__dict__["uuid"] = uuid
        return SatelliteStorageAssignment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="assignmentName")
    def assignment_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Assignment.
        """
        return pulumi.get(self, "assignment_name")

    @_builtins.property
    @pulumi.getter(name="assignmentType")
    def assignment_type(self) -> pulumi.Output[_builtins.str]:
        """
        The Type of Assignment.
        """
        return pulumi.get(self, "assignment_type")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the Satellite cluster or Service Cluster that you want to apply the configuration to.
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter
    def config(self) -> pulumi.Output[_builtins.str]:
        """
        Storage Configuration Name or ID.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="configUuid")
    def config_uuid(self) -> pulumi.Output[_builtins.str]:
        """
        The Universally Unique IDentifier (UUID) of the Storage Configuration.
        """
        return pulumi.get(self, "config_uuid")

    @_builtins.property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> pulumi.Output[_builtins.str]:
        """
        The Storage Configuration Version.
        """
        return pulumi.get(self, "config_version")

    @_builtins.property
    @pulumi.getter(name="configVersionUuid")
    def config_version_uuid(self) -> pulumi.Output[_builtins.str]:
        """
        The Universally Unique IDentifier (UUID) of the Storage Configuration Version.
        """
        return pulumi.get(self, "config_version_uuid")

    @_builtins.property
    @pulumi.getter
    def controller(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Name or ID of the Satellite Location.
        """
        return pulumi.get(self, "controller")

    @_builtins.property
    @pulumi.getter
    def created(self) -> pulumi.Output[_builtins.str]:
        """
        The Time of Creation of the Assignment.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        One or more cluster groups on which you want to apply the configuration. Note that at least one cluster group is
        required.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter(name="isAssignmentUpgradeAvailable")
    def is_assignment_upgrade_available(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether an Upgrade is Available for the Assignment.
        """
        return pulumi.get(self, "is_assignment_upgrade_available")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Output[_builtins.str]:
        """
        The Owner of the Assignment.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="rolloutErrorCount")
    def rollout_error_count(self) -> pulumi.Output[_builtins.float]:
        """
        The Rollout Error Count of the Assignment.
        """
        return pulumi.get(self, "rollout_error_count")

    @_builtins.property
    @pulumi.getter(name="rolloutSuccessCount")
    def rollout_success_count(self) -> pulumi.Output[_builtins.float]:
        """
        The Rollout Success Count of the Assignment.
        """
        return pulumi.get(self, "rollout_success_count")

    @_builtins.property
    @pulumi.getter(name="satCluster")
    def sat_cluster(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the Satellite cluster that you applied the configuration to.
        """
        return pulumi.get(self, "sat_cluster")

    @_builtins.property
    @pulumi.getter(name="satelliteStorageAssignmentId")
    def satellite_storage_assignment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "satellite_storage_assignment_id")

    @_builtins.property
    @pulumi.getter(name="svcCluster")
    def svc_cluster(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the Service Cluster that you applied the configuration to.
        """
        return pulumi.get(self, "svc_cluster")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.SatelliteStorageAssignmentTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="updateConfigRevision")
    def update_config_revision(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Updating an assignment to the latest available storage configuration version.
        """
        return pulumi.get(self, "update_config_revision")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[_builtins.str]:
        """
        The Universally Unique IDentifier (UUID) of the Assignment.
        """
        return pulumi.get(self, "uuid")

