# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AppidCloudDirectoryTemplateArgs', 'AppidCloudDirectoryTemplate']

@pulumi.input_type
class AppidCloudDirectoryTemplateArgs:
    def __init__(__self__, *,
                 subject: pulumi.Input[_builtins.str],
                 template_name: pulumi.Input[_builtins.str],
                 tenant_id: pulumi.Input[_builtins.str],
                 appid_cloud_directory_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 html_body: Optional[pulumi.Input[_builtins.str]] = None,
                 language: Optional[pulumi.Input[_builtins.str]] = None,
                 plain_text_body: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppidCloudDirectoryTemplate resource.
        :param pulumi.Input[_builtins.str] subject: The subject of the email
        :param pulumi.Input[_builtins.str] template_name: The type of email template. This can be `USER_VERIFICATION`, `WELCOME`, `PASSWORD_CHANGED`, `RESET_PASSWORD` or
               `MFA_VERIFICATION`
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        :param pulumi.Input[_builtins.str] html_body: The HTML body of the email
        :param pulumi.Input[_builtins.str] language: Preferred language for resource. Format as described at RFC5646. According to the configured languages codes returned
               from the `GET /management/v4/{tenantId}/config/ui/languages API`.
        :param pulumi.Input[_builtins.str] plain_text_body: The text body of the email.
        """
        pulumi.set(__self__, "subject", subject)
        pulumi.set(__self__, "template_name", template_name)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if appid_cloud_directory_template_id is not None:
            pulumi.set(__self__, "appid_cloud_directory_template_id", appid_cloud_directory_template_id)
        if html_body is not None:
            pulumi.set(__self__, "html_body", html_body)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if plain_text_body is not None:
            pulumi.set(__self__, "plain_text_body", plain_text_body)

    @_builtins.property
    @pulumi.getter
    def subject(self) -> pulumi.Input[_builtins.str]:
        """
        The subject of the email
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subject", value)

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[_builtins.str]:
        """
        The type of email template. This can be `USER_VERIFICATION`, `WELCOME`, `PASSWORD_CHANGED`, `RESET_PASSWORD` or
        `MFA_VERIFICATION`
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_name", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        The AppID instance GUID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="appidCloudDirectoryTemplateId")
    def appid_cloud_directory_template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_cloud_directory_template_id")

    @appid_cloud_directory_template_id.setter
    def appid_cloud_directory_template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_cloud_directory_template_id", value)

    @_builtins.property
    @pulumi.getter(name="htmlBody")
    def html_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The HTML body of the email
        """
        return pulumi.get(self, "html_body")

    @html_body.setter
    def html_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "html_body", value)

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Preferred language for resource. Format as described at RFC5646. According to the configured languages codes returned
        from the `GET /management/v4/{tenantId}/config/ui/languages API`.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "language", value)

    @_builtins.property
    @pulumi.getter(name="plainTextBody")
    def plain_text_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The text body of the email.
        """
        return pulumi.get(self, "plain_text_body")

    @plain_text_body.setter
    def plain_text_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plain_text_body", value)


@pulumi.input_type
class _AppidCloudDirectoryTemplateState:
    def __init__(__self__, *,
                 appid_cloud_directory_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 base64_encoded_html_body: Optional[pulumi.Input[_builtins.str]] = None,
                 html_body: Optional[pulumi.Input[_builtins.str]] = None,
                 language: Optional[pulumi.Input[_builtins.str]] = None,
                 plain_text_body: Optional[pulumi.Input[_builtins.str]] = None,
                 subject: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppidCloudDirectoryTemplate resources.
        :param pulumi.Input[_builtins.str] base64_encoded_html_body: The HTML body of the email encoded in Base64
        :param pulumi.Input[_builtins.str] html_body: The HTML body of the email
        :param pulumi.Input[_builtins.str] language: Preferred language for resource. Format as described at RFC5646. According to the configured languages codes returned
               from the `GET /management/v4/{tenantId}/config/ui/languages API`.
        :param pulumi.Input[_builtins.str] plain_text_body: The text body of the email.
        :param pulumi.Input[_builtins.str] subject: The subject of the email
        :param pulumi.Input[_builtins.str] template_name: The type of email template. This can be `USER_VERIFICATION`, `WELCOME`, `PASSWORD_CHANGED`, `RESET_PASSWORD` or
               `MFA_VERIFICATION`
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        """
        if appid_cloud_directory_template_id is not None:
            pulumi.set(__self__, "appid_cloud_directory_template_id", appid_cloud_directory_template_id)
        if base64_encoded_html_body is not None:
            pulumi.set(__self__, "base64_encoded_html_body", base64_encoded_html_body)
        if html_body is not None:
            pulumi.set(__self__, "html_body", html_body)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if plain_text_body is not None:
            pulumi.set(__self__, "plain_text_body", plain_text_body)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="appidCloudDirectoryTemplateId")
    def appid_cloud_directory_template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_cloud_directory_template_id")

    @appid_cloud_directory_template_id.setter
    def appid_cloud_directory_template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_cloud_directory_template_id", value)

    @_builtins.property
    @pulumi.getter(name="base64EncodedHtmlBody")
    def base64_encoded_html_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The HTML body of the email encoded in Base64
        """
        return pulumi.get(self, "base64_encoded_html_body")

    @base64_encoded_html_body.setter
    def base64_encoded_html_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base64_encoded_html_body", value)

    @_builtins.property
    @pulumi.getter(name="htmlBody")
    def html_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The HTML body of the email
        """
        return pulumi.get(self, "html_body")

    @html_body.setter
    def html_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "html_body", value)

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Preferred language for resource. Format as described at RFC5646. According to the configured languages codes returned
        from the `GET /management/v4/{tenantId}/config/ui/languages API`.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "language", value)

    @_builtins.property
    @pulumi.getter(name="plainTextBody")
    def plain_text_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The text body of the email.
        """
        return pulumi.get(self, "plain_text_body")

    @plain_text_body.setter
    def plain_text_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plain_text_body", value)

    @_builtins.property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject of the email
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subject", value)

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of email template. This can be `USER_VERIFICATION`, `WELCOME`, `PASSWORD_CHANGED`, `RESET_PASSWORD` or
        `MFA_VERIFICATION`
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_name", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The AppID instance GUID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.type_token("ibm:index/appidCloudDirectoryTemplate:AppidCloudDirectoryTemplate")
class AppidCloudDirectoryTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_cloud_directory_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 html_body: Optional[pulumi.Input[_builtins.str]] = None,
                 language: Optional[pulumi.Input[_builtins.str]] = None,
                 plain_text_body: Optional[pulumi.Input[_builtins.str]] = None,
                 subject: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppidCloudDirectoryTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] html_body: The HTML body of the email
        :param pulumi.Input[_builtins.str] language: Preferred language for resource. Format as described at RFC5646. According to the configured languages codes returned
               from the `GET /management/v4/{tenantId}/config/ui/languages API`.
        :param pulumi.Input[_builtins.str] plain_text_body: The text body of the email.
        :param pulumi.Input[_builtins.str] subject: The subject of the email
        :param pulumi.Input[_builtins.str] template_name: The type of email template. This can be `USER_VERIFICATION`, `WELCOME`, `PASSWORD_CHANGED`, `RESET_PASSWORD` or
               `MFA_VERIFICATION`
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppidCloudDirectoryTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppidCloudDirectoryTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppidCloudDirectoryTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppidCloudDirectoryTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_cloud_directory_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 html_body: Optional[pulumi.Input[_builtins.str]] = None,
                 language: Optional[pulumi.Input[_builtins.str]] = None,
                 plain_text_body: Optional[pulumi.Input[_builtins.str]] = None,
                 subject: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppidCloudDirectoryTemplateArgs.__new__(AppidCloudDirectoryTemplateArgs)

            __props__.__dict__["appid_cloud_directory_template_id"] = appid_cloud_directory_template_id
            __props__.__dict__["html_body"] = html_body
            __props__.__dict__["language"] = language
            __props__.__dict__["plain_text_body"] = plain_text_body
            if subject is None and not opts.urn:
                raise TypeError("Missing required property 'subject'")
            __props__.__dict__["subject"] = subject
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["base64_encoded_html_body"] = None
        super(AppidCloudDirectoryTemplate, __self__).__init__(
            'ibm:index/appidCloudDirectoryTemplate:AppidCloudDirectoryTemplate',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            appid_cloud_directory_template_id: Optional[pulumi.Input[_builtins.str]] = None,
            base64_encoded_html_body: Optional[pulumi.Input[_builtins.str]] = None,
            html_body: Optional[pulumi.Input[_builtins.str]] = None,
            language: Optional[pulumi.Input[_builtins.str]] = None,
            plain_text_body: Optional[pulumi.Input[_builtins.str]] = None,
            subject: Optional[pulumi.Input[_builtins.str]] = None,
            template_name: Optional[pulumi.Input[_builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppidCloudDirectoryTemplate':
        """
        Get an existing AppidCloudDirectoryTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] base64_encoded_html_body: The HTML body of the email encoded in Base64
        :param pulumi.Input[_builtins.str] html_body: The HTML body of the email
        :param pulumi.Input[_builtins.str] language: Preferred language for resource. Format as described at RFC5646. According to the configured languages codes returned
               from the `GET /management/v4/{tenantId}/config/ui/languages API`.
        :param pulumi.Input[_builtins.str] plain_text_body: The text body of the email.
        :param pulumi.Input[_builtins.str] subject: The subject of the email
        :param pulumi.Input[_builtins.str] template_name: The type of email template. This can be `USER_VERIFICATION`, `WELCOME`, `PASSWORD_CHANGED`, `RESET_PASSWORD` or
               `MFA_VERIFICATION`
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppidCloudDirectoryTemplateState.__new__(_AppidCloudDirectoryTemplateState)

        __props__.__dict__["appid_cloud_directory_template_id"] = appid_cloud_directory_template_id
        __props__.__dict__["base64_encoded_html_body"] = base64_encoded_html_body
        __props__.__dict__["html_body"] = html_body
        __props__.__dict__["language"] = language
        __props__.__dict__["plain_text_body"] = plain_text_body
        __props__.__dict__["subject"] = subject
        __props__.__dict__["template_name"] = template_name
        __props__.__dict__["tenant_id"] = tenant_id
        return AppidCloudDirectoryTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appidCloudDirectoryTemplateId")
    def appid_cloud_directory_template_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "appid_cloud_directory_template_id")

    @_builtins.property
    @pulumi.getter(name="base64EncodedHtmlBody")
    def base64_encoded_html_body(self) -> pulumi.Output[_builtins.str]:
        """
        The HTML body of the email encoded in Base64
        """
        return pulumi.get(self, "base64_encoded_html_body")

    @_builtins.property
    @pulumi.getter(name="htmlBody")
    def html_body(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The HTML body of the email
        """
        return pulumi.get(self, "html_body")

    @_builtins.property
    @pulumi.getter
    def language(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Preferred language for resource. Format as described at RFC5646. According to the configured languages codes returned
        from the `GET /management/v4/{tenantId}/config/ui/languages API`.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter(name="plainTextBody")
    def plain_text_body(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The text body of the email.
        """
        return pulumi.get(self, "plain_text_body")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> pulumi.Output[_builtins.str]:
        """
        The subject of the email
        """
        return pulumi.get(self, "subject")

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[_builtins.str]:
        """
        The type of email template. This can be `USER_VERIFICATION`, `WELCOME`, `PASSWORD_CHANGED`, `RESET_PASSWORD` or
        `MFA_VERIFICATION`
        """
        return pulumi.get(self, "template_name")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        The AppID instance GUID
        """
        return pulumi.get(self, "tenant_id")

