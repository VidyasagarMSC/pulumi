# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IsInstanceGroupManagerPolicyArgs', 'IsInstanceGroupManagerPolicy']

@pulumi.input_type
class IsInstanceGroupManagerPolicyArgs:
    def __init__(__self__, *,
                 instance_group: pulumi.Input[_builtins.str],
                 instance_group_manager: pulumi.Input[_builtins.str],
                 metric_type: pulumi.Input[_builtins.str],
                 metric_value: pulumi.Input[_builtins.float],
                 policy_type: pulumi.Input[_builtins.str],
                 is_instance_group_manager_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsInstanceGroupManagerPolicy resource.
        :param pulumi.Input[_builtins.str] instance_group: instance group ID
        :param pulumi.Input[_builtins.str] instance_group_manager: Instance group manager ID
        :param pulumi.Input[_builtins.str] metric_type: The type of metric to be evaluated
        :param pulumi.Input[_builtins.float] metric_value: The metric value to be evaluated
        :param pulumi.Input[_builtins.str] policy_type: The type of Policy for the Instance Group
        :param pulumi.Input[_builtins.str] name: instance group manager policy name
        """
        pulumi.set(__self__, "instance_group", instance_group)
        pulumi.set(__self__, "instance_group_manager", instance_group_manager)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "metric_value", metric_value)
        pulumi.set(__self__, "policy_type", policy_type)
        if is_instance_group_manager_policy_id is not None:
            pulumi.set(__self__, "is_instance_group_manager_policy_id", is_instance_group_manager_policy_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> pulumi.Input[_builtins.str]:
        """
        instance group ID
        """
        return pulumi.get(self, "instance_group")

    @instance_group.setter
    def instance_group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_group", value)

    @_builtins.property
    @pulumi.getter(name="instanceGroupManager")
    def instance_group_manager(self) -> pulumi.Input[_builtins.str]:
        """
        Instance group manager ID
        """
        return pulumi.get(self, "instance_group_manager")

    @instance_group_manager.setter
    def instance_group_manager(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_group_manager", value)

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of metric to be evaluated
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "metric_type", value)

    @_builtins.property
    @pulumi.getter(name="metricValue")
    def metric_value(self) -> pulumi.Input[_builtins.float]:
        """
        The metric value to be evaluated
        """
        return pulumi.get(self, "metric_value")

    @metric_value.setter
    def metric_value(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "metric_value", value)

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of Policy for the Instance Group
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_type", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupManagerPolicyId")
    def is_instance_group_manager_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_group_manager_policy_id")

    @is_instance_group_manager_policy_id.setter
    def is_instance_group_manager_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_group_manager_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        instance group manager policy name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _IsInstanceGroupManagerPolicyState:
    def __init__(__self__, *,
                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_group_manager: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_manager_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metric_type: Optional[pulumi.Input[_builtins.str]] = None,
                 metric_value: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsInstanceGroupManagerPolicy resources.
        :param pulumi.Input[_builtins.str] instance_group: instance group ID
        :param pulumi.Input[_builtins.str] instance_group_manager: Instance group manager ID
        :param pulumi.Input[_builtins.str] metric_type: The type of metric to be evaluated
        :param pulumi.Input[_builtins.float] metric_value: The metric value to be evaluated
        :param pulumi.Input[_builtins.str] name: instance group manager policy name
        :param pulumi.Input[_builtins.str] policy_id: The Policy ID
        :param pulumi.Input[_builtins.str] policy_type: The type of Policy for the Instance Group
        """
        if instance_group is not None:
            pulumi.set(__self__, "instance_group", instance_group)
        if instance_group_manager is not None:
            pulumi.set(__self__, "instance_group_manager", instance_group_manager)
        if is_instance_group_manager_policy_id is not None:
            pulumi.set(__self__, "is_instance_group_manager_policy_id", is_instance_group_manager_policy_id)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if metric_value is not None:
            pulumi.set(__self__, "metric_value", metric_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        instance group ID
        """
        return pulumi.get(self, "instance_group")

    @instance_group.setter
    def instance_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_group", value)

    @_builtins.property
    @pulumi.getter(name="instanceGroupManager")
    def instance_group_manager(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance group manager ID
        """
        return pulumi.get(self, "instance_group_manager")

    @instance_group_manager.setter
    def instance_group_manager(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_group_manager", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupManagerPolicyId")
    def is_instance_group_manager_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_group_manager_policy_id")

    @is_instance_group_manager_policy_id.setter
    def is_instance_group_manager_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_group_manager_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of metric to be evaluated
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metric_type", value)

    @_builtins.property
    @pulumi.getter(name="metricValue")
    def metric_value(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The metric value to be evaluated
        """
        return pulumi.get(self, "metric_value")

    @metric_value.setter
    def metric_value(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "metric_value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        instance group manager policy name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Policy ID
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of Policy for the Instance Group
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_type", value)


@pulumi.type_token("ibm:index/isInstanceGroupManagerPolicy:IsInstanceGroupManagerPolicy")
class IsInstanceGroupManagerPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_group_manager: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_manager_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metric_type: Optional[pulumi.Input[_builtins.str]] = None,
                 metric_value: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsInstanceGroupManagerPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_group: instance group ID
        :param pulumi.Input[_builtins.str] instance_group_manager: Instance group manager ID
        :param pulumi.Input[_builtins.str] metric_type: The type of metric to be evaluated
        :param pulumi.Input[_builtins.float] metric_value: The metric value to be evaluated
        :param pulumi.Input[_builtins.str] name: instance group manager policy name
        :param pulumi.Input[_builtins.str] policy_type: The type of Policy for the Instance Group
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsInstanceGroupManagerPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsInstanceGroupManagerPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsInstanceGroupManagerPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsInstanceGroupManagerPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_group_manager: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_manager_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metric_type: Optional[pulumi.Input[_builtins.str]] = None,
                 metric_value: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsInstanceGroupManagerPolicyArgs.__new__(IsInstanceGroupManagerPolicyArgs)

            if instance_group is None and not opts.urn:
                raise TypeError("Missing required property 'instance_group'")
            __props__.__dict__["instance_group"] = instance_group
            if instance_group_manager is None and not opts.urn:
                raise TypeError("Missing required property 'instance_group_manager'")
            __props__.__dict__["instance_group_manager"] = instance_group_manager
            __props__.__dict__["is_instance_group_manager_policy_id"] = is_instance_group_manager_policy_id
            if metric_type is None and not opts.urn:
                raise TypeError("Missing required property 'metric_type'")
            __props__.__dict__["metric_type"] = metric_type
            if metric_value is None and not opts.urn:
                raise TypeError("Missing required property 'metric_value'")
            __props__.__dict__["metric_value"] = metric_value
            __props__.__dict__["name"] = name
            if policy_type is None and not opts.urn:
                raise TypeError("Missing required property 'policy_type'")
            __props__.__dict__["policy_type"] = policy_type
            __props__.__dict__["policy_id"] = None
        super(IsInstanceGroupManagerPolicy, __self__).__init__(
            'ibm:index/isInstanceGroupManagerPolicy:IsInstanceGroupManagerPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_group: Optional[pulumi.Input[_builtins.str]] = None,
            instance_group_manager: Optional[pulumi.Input[_builtins.str]] = None,
            is_instance_group_manager_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            metric_type: Optional[pulumi.Input[_builtins.str]] = None,
            metric_value: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            policy_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsInstanceGroupManagerPolicy':
        """
        Get an existing IsInstanceGroupManagerPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_group: instance group ID
        :param pulumi.Input[_builtins.str] instance_group_manager: Instance group manager ID
        :param pulumi.Input[_builtins.str] metric_type: The type of metric to be evaluated
        :param pulumi.Input[_builtins.float] metric_value: The metric value to be evaluated
        :param pulumi.Input[_builtins.str] name: instance group manager policy name
        :param pulumi.Input[_builtins.str] policy_id: The Policy ID
        :param pulumi.Input[_builtins.str] policy_type: The type of Policy for the Instance Group
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsInstanceGroupManagerPolicyState.__new__(_IsInstanceGroupManagerPolicyState)

        __props__.__dict__["instance_group"] = instance_group
        __props__.__dict__["instance_group_manager"] = instance_group_manager
        __props__.__dict__["is_instance_group_manager_policy_id"] = is_instance_group_manager_policy_id
        __props__.__dict__["metric_type"] = metric_type
        __props__.__dict__["metric_value"] = metric_value
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["policy_type"] = policy_type
        return IsInstanceGroupManagerPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> pulumi.Output[_builtins.str]:
        """
        instance group ID
        """
        return pulumi.get(self, "instance_group")

    @_builtins.property
    @pulumi.getter(name="instanceGroupManager")
    def instance_group_manager(self) -> pulumi.Output[_builtins.str]:
        """
        Instance group manager ID
        """
        return pulumi.get(self, "instance_group_manager")

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupManagerPolicyId")
    def is_instance_group_manager_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_instance_group_manager_policy_id")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of metric to be evaluated
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter(name="metricValue")
    def metric_value(self) -> pulumi.Output[_builtins.float]:
        """
        The metric value to be evaluated
        """
        return pulumi.get(self, "metric_value")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        instance group manager policy name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Policy ID
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of Policy for the Instance Group
        """
        return pulumi.get(self, "policy_type")

