# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsInstanceGroupArgs', 'IsInstanceGroup']

@pulumi.input_type
class IsInstanceGroupArgs:
    def __init__(__self__, *,
                 instance_template: pulumi.Input[_builtins.str],
                 subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 application_port: Optional[pulumi.Input[_builtins.float]] = None,
                 instance_count: Optional[pulumi.Input[_builtins.float]] = None,
                 is_instance_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancer: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancer_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsInstanceGroupTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsInstanceGroup resource.
        :param pulumi.Input[_builtins.str] instance_template: instance template ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: list of subnet IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.float] application_port: Used by the instance group when scaling up instances to supply the port for the load balancer pool member.
        :param pulumi.Input[_builtins.float] instance_count: The number of instances in the instance group
        :param pulumi.Input[_builtins.str] load_balancer: load balancer ID
        :param pulumi.Input[_builtins.str] load_balancer_pool: load balancer pool ID
        :param pulumi.Input[_builtins.str] name: The user-defined name for this instance group
        :param pulumi.Input[_builtins.str] resource_group: Resource group ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for instance group
        """
        pulumi.set(__self__, "instance_template", instance_template)
        pulumi.set(__self__, "subnets", subnets)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if application_port is not None:
            pulumi.set(__self__, "application_port", application_port)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if is_instance_group_id is not None:
            pulumi.set(__self__, "is_instance_group_id", is_instance_group_id)
        if load_balancer is not None:
            pulumi.set(__self__, "load_balancer", load_balancer)
        if load_balancer_pool is not None:
            pulumi.set(__self__, "load_balancer_pool", load_balancer_pool)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="instanceTemplate")
    def instance_template(self) -> pulumi.Input[_builtins.str]:
        """
        instance template ID
        """
        return pulumi.get(self, "instance_template")

    @instance_template.setter
    def instance_template(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_template", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        list of subnet IDs
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Used by the instance group when scaling up instances to supply the port for the load balancer pool member.
        """
        return pulumi.get(self, "application_port")

    @application_port.setter
    def application_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "application_port", value)

    @_builtins.property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of instances in the instance group
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "instance_count", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupId")
    def is_instance_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_group_id")

    @is_instance_group_id.setter
    def is_instance_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_group_id", value)

    @_builtins.property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        load balancer ID
        """
        return pulumi.get(self, "load_balancer")

    @load_balancer.setter
    def load_balancer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "load_balancer", value)

    @_builtins.property
    @pulumi.getter(name="loadBalancerPool")
    def load_balancer_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        load balancer pool ID
        """
        return pulumi.get(self, "load_balancer_pool")

    @load_balancer_pool.setter
    def load_balancer_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "load_balancer_pool", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this instance group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group ID
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for instance group
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsInstanceGroupTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsInstanceGroupTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsInstanceGroupState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 application_port: Optional[pulumi.Input[_builtins.float]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_count: Optional[pulumi.Input[_builtins.float]] = None,
                 instance_template: Optional[pulumi.Input[_builtins.str]] = None,
                 instances: Optional[pulumi.Input[_builtins.float]] = None,
                 is_instance_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancer: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancer_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsInstanceGroupTimeoutsArgs']] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsInstanceGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.float] application_port: Used by the instance group when scaling up instances to supply the port for the load balancer pool member.
        :param pulumi.Input[_builtins.str] crn: The CRN of this instance group
        :param pulumi.Input[_builtins.float] instance_count: The number of instances in the instance group
        :param pulumi.Input[_builtins.str] instance_template: instance template ID
        :param pulumi.Input[_builtins.float] instances: number of instances in the intances group
        :param pulumi.Input[_builtins.str] load_balancer: load balancer ID
        :param pulumi.Input[_builtins.str] load_balancer_pool: load balancer pool ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] managers: list of Managers associated with instancegroup
        :param pulumi.Input[_builtins.str] name: The user-defined name for this instance group
        :param pulumi.Input[_builtins.str] resource_group: Resource group ID
        :param pulumi.Input[_builtins.str] status: Instance group status - deleting, healthy, scaling, unhealthy
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: list of subnet IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for instance group
        :param pulumi.Input[_builtins.str] vpc: vpc instance
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if application_port is not None:
            pulumi.set(__self__, "application_port", application_port)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if instance_template is not None:
            pulumi.set(__self__, "instance_template", instance_template)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if is_instance_group_id is not None:
            pulumi.set(__self__, "is_instance_group_id", is_instance_group_id)
        if load_balancer is not None:
            pulumi.set(__self__, "load_balancer", load_balancer)
        if load_balancer_pool is not None:
            pulumi.set(__self__, "load_balancer_pool", load_balancer_pool)
        if managers is not None:
            pulumi.set(__self__, "managers", managers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Used by the instance group when scaling up instances to supply the port for the load balancer pool member.
        """
        return pulumi.get(self, "application_port")

    @application_port.setter
    def application_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "application_port", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of this instance group
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of instances in the instance group
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "instance_count", value)

    @_builtins.property
    @pulumi.getter(name="instanceTemplate")
    def instance_template(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        instance template ID
        """
        return pulumi.get(self, "instance_template")

    @instance_template.setter
    def instance_template(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_template", value)

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        number of instances in the intances group
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "instances", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupId")
    def is_instance_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_group_id")

    @is_instance_group_id.setter
    def is_instance_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_group_id", value)

    @_builtins.property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        load balancer ID
        """
        return pulumi.get(self, "load_balancer")

    @load_balancer.setter
    def load_balancer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "load_balancer", value)

    @_builtins.property
    @pulumi.getter(name="loadBalancerPool")
    def load_balancer_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        load balancer pool ID
        """
        return pulumi.get(self, "load_balancer_pool")

    @load_balancer_pool.setter
    def load_balancer_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "load_balancer_pool", value)

    @_builtins.property
    @pulumi.getter
    def managers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        list of Managers associated with instancegroup
        """
        return pulumi.get(self, "managers")

    @managers.setter
    def managers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "managers", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this instance group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group ID
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance group status - deleting, healthy, scaling, unhealthy
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        list of subnet IDs
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for instance group
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsInstanceGroupTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsInstanceGroupTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        vpc instance
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)


@pulumi.type_token("ibm:index/isInstanceGroup:IsInstanceGroup")
class IsInstanceGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 application_port: Optional[pulumi.Input[_builtins.float]] = None,
                 instance_count: Optional[pulumi.Input[_builtins.float]] = None,
                 instance_template: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancer: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancer_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsInstanceGroupTimeoutsArgs', 'IsInstanceGroupTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsInstanceGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.float] application_port: Used by the instance group when scaling up instances to supply the port for the load balancer pool member.
        :param pulumi.Input[_builtins.float] instance_count: The number of instances in the instance group
        :param pulumi.Input[_builtins.str] instance_template: instance template ID
        :param pulumi.Input[_builtins.str] load_balancer: load balancer ID
        :param pulumi.Input[_builtins.str] load_balancer_pool: load balancer pool ID
        :param pulumi.Input[_builtins.str] name: The user-defined name for this instance group
        :param pulumi.Input[_builtins.str] resource_group: Resource group ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: list of subnet IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for instance group
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsInstanceGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsInstanceGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsInstanceGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsInstanceGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 application_port: Optional[pulumi.Input[_builtins.float]] = None,
                 instance_count: Optional[pulumi.Input[_builtins.float]] = None,
                 instance_template: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancer: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancer_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsInstanceGroupTimeoutsArgs', 'IsInstanceGroupTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsInstanceGroupArgs.__new__(IsInstanceGroupArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["application_port"] = application_port
            __props__.__dict__["instance_count"] = instance_count
            if instance_template is None and not opts.urn:
                raise TypeError("Missing required property 'instance_template'")
            __props__.__dict__["instance_template"] = instance_template
            __props__.__dict__["is_instance_group_id"] = is_instance_group_id
            __props__.__dict__["load_balancer"] = load_balancer
            __props__.__dict__["load_balancer_pool"] = load_balancer_pool
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_group"] = resource_group
            if subnets is None and not opts.urn:
                raise TypeError("Missing required property 'subnets'")
            __props__.__dict__["subnets"] = subnets
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["instances"] = None
            __props__.__dict__["managers"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["vpc"] = None
        super(IsInstanceGroup, __self__).__init__(
            'ibm:index/isInstanceGroup:IsInstanceGroup',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            application_port: Optional[pulumi.Input[_builtins.float]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            instance_count: Optional[pulumi.Input[_builtins.float]] = None,
            instance_template: Optional[pulumi.Input[_builtins.str]] = None,
            instances: Optional[pulumi.Input[_builtins.float]] = None,
            is_instance_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            load_balancer: Optional[pulumi.Input[_builtins.str]] = None,
            load_balancer_pool: Optional[pulumi.Input[_builtins.str]] = None,
            managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsInstanceGroupTimeoutsArgs', 'IsInstanceGroupTimeoutsArgsDict']]] = None,
            vpc: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsInstanceGroup':
        """
        Get an existing IsInstanceGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.float] application_port: Used by the instance group when scaling up instances to supply the port for the load balancer pool member.
        :param pulumi.Input[_builtins.str] crn: The CRN of this instance group
        :param pulumi.Input[_builtins.float] instance_count: The number of instances in the instance group
        :param pulumi.Input[_builtins.str] instance_template: instance template ID
        :param pulumi.Input[_builtins.float] instances: number of instances in the intances group
        :param pulumi.Input[_builtins.str] load_balancer: load balancer ID
        :param pulumi.Input[_builtins.str] load_balancer_pool: load balancer pool ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] managers: list of Managers associated with instancegroup
        :param pulumi.Input[_builtins.str] name: The user-defined name for this instance group
        :param pulumi.Input[_builtins.str] resource_group: Resource group ID
        :param pulumi.Input[_builtins.str] status: Instance group status - deleting, healthy, scaling, unhealthy
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: list of subnet IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for instance group
        :param pulumi.Input[_builtins.str] vpc: vpc instance
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsInstanceGroupState.__new__(_IsInstanceGroupState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["application_port"] = application_port
        __props__.__dict__["crn"] = crn
        __props__.__dict__["instance_count"] = instance_count
        __props__.__dict__["instance_template"] = instance_template
        __props__.__dict__["instances"] = instances
        __props__.__dict__["is_instance_group_id"] = is_instance_group_id
        __props__.__dict__["load_balancer"] = load_balancer
        __props__.__dict__["load_balancer_pool"] = load_balancer_pool
        __props__.__dict__["managers"] = managers
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["status"] = status
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpc"] = vpc
        return IsInstanceGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Used by the instance group when scaling up instances to supply the port for the load balancer pool member.
        """
        return pulumi.get(self, "application_port")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of this instance group
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The number of instances in the instance group
        """
        return pulumi.get(self, "instance_count")

    @_builtins.property
    @pulumi.getter(name="instanceTemplate")
    def instance_template(self) -> pulumi.Output[_builtins.str]:
        """
        instance template ID
        """
        return pulumi.get(self, "instance_template")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> pulumi.Output[_builtins.float]:
        """
        number of instances in the intances group
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupId")
    def is_instance_group_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_instance_group_id")

    @_builtins.property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        load balancer ID
        """
        return pulumi.get(self, "load_balancer")

    @_builtins.property
    @pulumi.getter(name="loadBalancerPool")
    def load_balancer_pool(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        load balancer pool ID
        """
        return pulumi.get(self, "load_balancer_pool")

    @_builtins.property
    @pulumi.getter
    def managers(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        list of Managers associated with instancegroup
        """
        return pulumi.get(self, "managers")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this instance group
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Resource group ID
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Instance group status - deleting, healthy, scaling, unhealthy
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        list of subnet IDs
        """
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of tags for instance group
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsInstanceGroupTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[_builtins.str]:
        """
        vpc instance
        """
        return pulumi.get(self, "vpc")

