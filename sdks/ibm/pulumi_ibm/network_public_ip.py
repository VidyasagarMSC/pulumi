# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkPublicIpArgs', 'NetworkPublicIp']

@pulumi.input_type
class NetworkPublicIpArgs:
    def __init__(__self__, *,
                 routes_to: pulumi.Input[_builtins.str],
                 network_public_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['NetworkPublicIpTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a NetworkPublicIp resource.
        :param pulumi.Input[_builtins.str] routes_to: Route info
        :param pulumi.Input[_builtins.str] notes: Additional notes
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        pulumi.set(__self__, "routes_to", routes_to)
        if network_public_ip_id is not None:
            pulumi.set(__self__, "network_public_ip_id", network_public_ip_id)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="routesTo")
    def routes_to(self) -> pulumi.Input[_builtins.str]:
        """
        Route info
        """
        return pulumi.get(self, "routes_to")

    @routes_to.setter
    def routes_to(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "routes_to", value)

    @_builtins.property
    @pulumi.getter(name="networkPublicIpId")
    def network_public_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_public_ip_id")

    @network_public_ip_id.setter
    def network_public_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_public_ip_id", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Additional notes
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['NetworkPublicIpTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['NetworkPublicIpTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _NetworkPublicIpState:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network_public_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 routes_to: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['NetworkPublicIpTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering NetworkPublicIp resources.
        :param pulumi.Input[_builtins.str] ip_address: IP Address
        :param pulumi.Input[_builtins.str] notes: Additional notes
        :param pulumi.Input[_builtins.str] routes_to: Route info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if network_public_ip_id is not None:
            pulumi.set(__self__, "network_public_ip_id", network_public_ip_id)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if routes_to is not None:
            pulumi.set(__self__, "routes_to", routes_to)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="networkPublicIpId")
    def network_public_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_public_ip_id")

    @network_public_ip_id.setter
    def network_public_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_public_ip_id", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Additional notes
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="routesTo")
    def routes_to(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Route info
        """
        return pulumi.get(self, "routes_to")

    @routes_to.setter
    def routes_to(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routes_to", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['NetworkPublicIpTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['NetworkPublicIpTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/networkPublicIp:NetworkPublicIp")
class NetworkPublicIp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 network_public_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 routes_to: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['NetworkPublicIpTimeoutsArgs', 'NetworkPublicIpTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a NetworkPublicIp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] notes: Additional notes
        :param pulumi.Input[_builtins.str] routes_to: Route info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkPublicIpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkPublicIp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkPublicIpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkPublicIpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 network_public_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 routes_to: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['NetworkPublicIpTimeoutsArgs', 'NetworkPublicIpTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkPublicIpArgs.__new__(NetworkPublicIpArgs)

            __props__.__dict__["network_public_ip_id"] = network_public_ip_id
            __props__.__dict__["notes"] = notes
            if routes_to is None and not opts.urn:
                raise TypeError("Missing required property 'routes_to'")
            __props__.__dict__["routes_to"] = routes_to
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["ip_address"] = None
        super(NetworkPublicIp, __self__).__init__(
            'ibm:index/networkPublicIp:NetworkPublicIp',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            network_public_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
            notes: Optional[pulumi.Input[_builtins.str]] = None,
            routes_to: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['NetworkPublicIpTimeoutsArgs', 'NetworkPublicIpTimeoutsArgsDict']]] = None) -> 'NetworkPublicIp':
        """
        Get an existing NetworkPublicIp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] ip_address: IP Address
        :param pulumi.Input[_builtins.str] notes: Additional notes
        :param pulumi.Input[_builtins.str] routes_to: Route info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkPublicIpState.__new__(_NetworkPublicIpState)

        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["network_public_ip_id"] = network_public_ip_id
        __props__.__dict__["notes"] = notes
        __props__.__dict__["routes_to"] = routes_to
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        return NetworkPublicIp(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="networkPublicIpId")
    def network_public_ip_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "network_public_ip_id")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Additional notes
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="routesTo")
    def routes_to(self) -> pulumi.Output[_builtins.str]:
        """
        Route info
        """
        return pulumi.get(self, "routes_to")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.NetworkPublicIpTimeouts']]:
        return pulumi.get(self, "timeouts")

