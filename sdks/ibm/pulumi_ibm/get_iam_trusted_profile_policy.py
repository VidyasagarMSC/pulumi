# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamTrustedProfilePolicyResult',
    'AwaitableGetIamTrustedProfilePolicyResult',
    'get_iam_trusted_profile_policy',
    'get_iam_trusted_profile_policy_output',
]

@pulumi.output_type
class GetIamTrustedProfilePolicyResult:
    """
    A collection of values returned by getIamTrustedProfilePolicy.
    """
    def __init__(__self__, iam_id=None, id=None, policies=None, profile_id=None, sort=None, transaction_id=None):
        if iam_id and not isinstance(iam_id, str):
            raise TypeError("Expected argument 'iam_id' to be a str")
        pulumi.set(__self__, "iam_id", iam_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if profile_id and not isinstance(profile_id, str):
            raise TypeError("Expected argument 'profile_id' to be a str")
        pulumi.set(__self__, "profile_id", profile_id)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)
        if transaction_id and not isinstance(transaction_id, str):
            raise TypeError("Expected argument 'transaction_id' to be a str")
        pulumi.set(__self__, "transaction_id", transaction_id)

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "iam_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetIamTrustedProfilePolicyPolicyResult']:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="profileId")
    @_utilities.deprecated("""Deprecated""")
    def profile_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "profile_id")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> _builtins.str:
        return pulumi.get(self, "transaction_id")


class AwaitableGetIamTrustedProfilePolicyResult(GetIamTrustedProfilePolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamTrustedProfilePolicyResult(
            iam_id=self.iam_id,
            id=self.id,
            policies=self.policies,
            profile_id=self.profile_id,
            sort=self.sort,
            transaction_id=self.transaction_id)


def get_iam_trusted_profile_policy(iam_id: Optional[_builtins.str] = None,
                                   id: Optional[_builtins.str] = None,
                                   profile_id: Optional[_builtins.str] = None,
                                   sort: Optional[_builtins.str] = None,
                                   transaction_id: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamTrustedProfilePolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['iamId'] = iam_id
    __args__['id'] = id
    __args__['profileId'] = profile_id
    __args__['sort'] = sort
    __args__['transactionId'] = transaction_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamTrustedProfilePolicy:getIamTrustedProfilePolicy', __args__, opts=opts, typ=GetIamTrustedProfilePolicyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamTrustedProfilePolicyResult(
        iam_id=pulumi.get(__ret__, 'iam_id'),
        id=pulumi.get(__ret__, 'id'),
        policies=pulumi.get(__ret__, 'policies'),
        profile_id=pulumi.get(__ret__, 'profile_id'),
        sort=pulumi.get(__ret__, 'sort'),
        transaction_id=pulumi.get(__ret__, 'transaction_id'))
def get_iam_trusted_profile_policy_output(iam_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          profile_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          transaction_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamTrustedProfilePolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['iamId'] = iam_id
    __args__['id'] = id
    __args__['profileId'] = profile_id
    __args__['sort'] = sort
    __args__['transactionId'] = transaction_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamTrustedProfilePolicy:getIamTrustedProfilePolicy', __args__, opts=opts, typ=GetIamTrustedProfilePolicyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamTrustedProfilePolicyResult(
        iam_id=pulumi.get(__response__, 'iam_id'),
        id=pulumi.get(__response__, 'id'),
        policies=pulumi.get(__response__, 'policies'),
        profile_id=pulumi.get(__response__, 'profile_id'),
        sort=pulumi.get(__response__, 'sort'),
        transaction_id=pulumi.get(__response__, 'transaction_id')))
