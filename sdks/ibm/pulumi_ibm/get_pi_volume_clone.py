# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiVolumeCloneResult',
    'AwaitableGetPiVolumeCloneResult',
    'get_pi_volume_clone',
    'get_pi_volume_clone_output',
]

@pulumi.output_type
class GetPiVolumeCloneResult:
    """
    A collection of values returned by getPiVolumeClone.
    """
    def __init__(__self__, clone_volumes=None, failure_reason=None, id=None, percent_complete=None, pi_cloud_instance_id=None, pi_volume_clone_task_id=None, status=None):
        if clone_volumes and not isinstance(clone_volumes, list):
            raise TypeError("Expected argument 'clone_volumes' to be a list")
        pulumi.set(__self__, "clone_volumes", clone_volumes)
        if failure_reason and not isinstance(failure_reason, str):
            raise TypeError("Expected argument 'failure_reason' to be a str")
        pulumi.set(__self__, "failure_reason", failure_reason)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if percent_complete and not isinstance(percent_complete, float):
            raise TypeError("Expected argument 'percent_complete' to be a float")
        pulumi.set(__self__, "percent_complete", percent_complete)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_volume_clone_task_id and not isinstance(pi_volume_clone_task_id, str):
            raise TypeError("Expected argument 'pi_volume_clone_task_id' to be a str")
        pulumi.set(__self__, "pi_volume_clone_task_id", pi_volume_clone_task_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="cloneVolumes")
    def clone_volumes(self) -> Sequence['outputs.GetPiVolumeCloneCloneVolumeResult']:
        return pulumi.get(self, "clone_volumes")

    @_builtins.property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> _builtins.str:
        return pulumi.get(self, "failure_reason")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> _builtins.float:
        return pulumi.get(self, "percent_complete")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piVolumeCloneTaskId")
    def pi_volume_clone_task_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_volume_clone_task_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


class AwaitableGetPiVolumeCloneResult(GetPiVolumeCloneResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiVolumeCloneResult(
            clone_volumes=self.clone_volumes,
            failure_reason=self.failure_reason,
            id=self.id,
            percent_complete=self.percent_complete,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_volume_clone_task_id=self.pi_volume_clone_task_id,
            status=self.status)


def get_pi_volume_clone(id: Optional[_builtins.str] = None,
                        pi_cloud_instance_id: Optional[_builtins.str] = None,
                        pi_volume_clone_task_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiVolumeCloneResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piVolumeCloneTaskId'] = pi_volume_clone_task_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiVolumeClone:getPiVolumeClone', __args__, opts=opts, typ=GetPiVolumeCloneResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiVolumeCloneResult(
        clone_volumes=pulumi.get(__ret__, 'clone_volumes'),
        failure_reason=pulumi.get(__ret__, 'failure_reason'),
        id=pulumi.get(__ret__, 'id'),
        percent_complete=pulumi.get(__ret__, 'percent_complete'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_volume_clone_task_id=pulumi.get(__ret__, 'pi_volume_clone_task_id'),
        status=pulumi.get(__ret__, 'status'))
def get_pi_volume_clone_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                               pi_volume_clone_task_id: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiVolumeCloneResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piVolumeCloneTaskId'] = pi_volume_clone_task_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiVolumeClone:getPiVolumeClone', __args__, opts=opts, typ=GetPiVolumeCloneResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiVolumeCloneResult(
        clone_volumes=pulumi.get(__response__, 'clone_volumes'),
        failure_reason=pulumi.get(__response__, 'failure_reason'),
        id=pulumi.get(__response__, 'id'),
        percent_complete=pulumi.get(__response__, 'percent_complete'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_volume_clone_task_id=pulumi.get(__response__, 'pi_volume_clone_task_id'),
        status=pulumi.get(__response__, 'status')))
