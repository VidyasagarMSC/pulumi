# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IsShareDeleteAccessorBindingArgs', 'IsShareDeleteAccessorBinding']

@pulumi.input_type
class IsShareDeleteAccessorBindingArgs:
    def __init__(__self__, *,
                 accessor_binding: pulumi.Input[_builtins.str],
                 share: pulumi.Input[_builtins.str],
                 is_share_delete_accessor_binding_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsShareDeleteAccessorBinding resource.
        :param pulumi.Input[_builtins.str] accessor_binding: The accessor binding id
        :param pulumi.Input[_builtins.str] share: The file share identifier.
        """
        pulumi.set(__self__, "accessor_binding", accessor_binding)
        pulumi.set(__self__, "share", share)
        if is_share_delete_accessor_binding_id is not None:
            pulumi.set(__self__, "is_share_delete_accessor_binding_id", is_share_delete_accessor_binding_id)

    @_builtins.property
    @pulumi.getter(name="accessorBinding")
    def accessor_binding(self) -> pulumi.Input[_builtins.str]:
        """
        The accessor binding id
        """
        return pulumi.get(self, "accessor_binding")

    @accessor_binding.setter
    def accessor_binding(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "accessor_binding", value)

    @_builtins.property
    @pulumi.getter
    def share(self) -> pulumi.Input[_builtins.str]:
        """
        The file share identifier.
        """
        return pulumi.get(self, "share")

    @share.setter
    def share(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "share", value)

    @_builtins.property
    @pulumi.getter(name="isShareDeleteAccessorBindingId")
    def is_share_delete_accessor_binding_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_share_delete_accessor_binding_id")

    @is_share_delete_accessor_binding_id.setter
    def is_share_delete_accessor_binding_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_share_delete_accessor_binding_id", value)


@pulumi.input_type
class _IsShareDeleteAccessorBindingState:
    def __init__(__self__, *,
                 accessor_binding: Optional[pulumi.Input[_builtins.str]] = None,
                 is_share_delete_accessor_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                 share: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsShareDeleteAccessorBinding resources.
        :param pulumi.Input[_builtins.str] accessor_binding: The accessor binding id
        :param pulumi.Input[_builtins.str] share: The file share identifier.
        """
        if accessor_binding is not None:
            pulumi.set(__self__, "accessor_binding", accessor_binding)
        if is_share_delete_accessor_binding_id is not None:
            pulumi.set(__self__, "is_share_delete_accessor_binding_id", is_share_delete_accessor_binding_id)
        if share is not None:
            pulumi.set(__self__, "share", share)

    @_builtins.property
    @pulumi.getter(name="accessorBinding")
    def accessor_binding(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The accessor binding id
        """
        return pulumi.get(self, "accessor_binding")

    @accessor_binding.setter
    def accessor_binding(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accessor_binding", value)

    @_builtins.property
    @pulumi.getter(name="isShareDeleteAccessorBindingId")
    def is_share_delete_accessor_binding_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_share_delete_accessor_binding_id")

    @is_share_delete_accessor_binding_id.setter
    def is_share_delete_accessor_binding_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_share_delete_accessor_binding_id", value)

    @_builtins.property
    @pulumi.getter
    def share(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The file share identifier.
        """
        return pulumi.get(self, "share")

    @share.setter
    def share(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "share", value)


@pulumi.type_token("ibm:index/isShareDeleteAccessorBinding:IsShareDeleteAccessorBinding")
class IsShareDeleteAccessorBinding(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accessor_binding: Optional[pulumi.Input[_builtins.str]] = None,
                 is_share_delete_accessor_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                 share: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsShareDeleteAccessorBinding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] accessor_binding: The accessor binding id
        :param pulumi.Input[_builtins.str] share: The file share identifier.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsShareDeleteAccessorBindingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsShareDeleteAccessorBinding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsShareDeleteAccessorBindingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsShareDeleteAccessorBindingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accessor_binding: Optional[pulumi.Input[_builtins.str]] = None,
                 is_share_delete_accessor_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                 share: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsShareDeleteAccessorBindingArgs.__new__(IsShareDeleteAccessorBindingArgs)

            if accessor_binding is None and not opts.urn:
                raise TypeError("Missing required property 'accessor_binding'")
            __props__.__dict__["accessor_binding"] = accessor_binding
            __props__.__dict__["is_share_delete_accessor_binding_id"] = is_share_delete_accessor_binding_id
            if share is None and not opts.urn:
                raise TypeError("Missing required property 'share'")
            __props__.__dict__["share"] = share
        super(IsShareDeleteAccessorBinding, __self__).__init__(
            'ibm:index/isShareDeleteAccessorBinding:IsShareDeleteAccessorBinding',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accessor_binding: Optional[pulumi.Input[_builtins.str]] = None,
            is_share_delete_accessor_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
            share: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsShareDeleteAccessorBinding':
        """
        Get an existing IsShareDeleteAccessorBinding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] accessor_binding: The accessor binding id
        :param pulumi.Input[_builtins.str] share: The file share identifier.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsShareDeleteAccessorBindingState.__new__(_IsShareDeleteAccessorBindingState)

        __props__.__dict__["accessor_binding"] = accessor_binding
        __props__.__dict__["is_share_delete_accessor_binding_id"] = is_share_delete_accessor_binding_id
        __props__.__dict__["share"] = share
        return IsShareDeleteAccessorBinding(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessorBinding")
    def accessor_binding(self) -> pulumi.Output[_builtins.str]:
        """
        The accessor binding id
        """
        return pulumi.get(self, "accessor_binding")

    @_builtins.property
    @pulumi.getter(name="isShareDeleteAccessorBindingId")
    def is_share_delete_accessor_binding_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_share_delete_accessor_binding_id")

    @_builtins.property
    @pulumi.getter
    def share(self) -> pulumi.Output[_builtins.str]:
        """
        The file share identifier.
        """
        return pulumi.get(self, "share")

