# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppConfigSnapshotResult',
    'AwaitableGetAppConfigSnapshotResult',
    'get_app_config_snapshot',
    'get_app_config_snapshot_output',
]

@pulumi.output_type
class GetAppConfigSnapshotResult:
    """
    A collection of values returned by getAppConfigSnapshot.
    """
    def __init__(__self__, collections=None, created_time=None, environments=None, git_branch=None, git_config_id=None, git_config_name=None, git_file_path=None, git_url=None, guid=None, href=None, id=None, last_sync_time=None, updated_time=None):
        if collections and not isinstance(collections, list):
            raise TypeError("Expected argument 'collections' to be a list")
        pulumi.set(__self__, "collections", collections)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if environments and not isinstance(environments, list):
            raise TypeError("Expected argument 'environments' to be a list")
        pulumi.set(__self__, "environments", environments)
        if git_branch and not isinstance(git_branch, str):
            raise TypeError("Expected argument 'git_branch' to be a str")
        pulumi.set(__self__, "git_branch", git_branch)
        if git_config_id and not isinstance(git_config_id, str):
            raise TypeError("Expected argument 'git_config_id' to be a str")
        pulumi.set(__self__, "git_config_id", git_config_id)
        if git_config_name and not isinstance(git_config_name, str):
            raise TypeError("Expected argument 'git_config_name' to be a str")
        pulumi.set(__self__, "git_config_name", git_config_name)
        if git_file_path and not isinstance(git_file_path, str):
            raise TypeError("Expected argument 'git_file_path' to be a str")
        pulumi.set(__self__, "git_file_path", git_file_path)
        if git_url and not isinstance(git_url, str):
            raise TypeError("Expected argument 'git_url' to be a str")
        pulumi.set(__self__, "git_url", git_url)
        if guid and not isinstance(guid, str):
            raise TypeError("Expected argument 'guid' to be a str")
        pulumi.set(__self__, "guid", guid)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_sync_time and not isinstance(last_sync_time, str):
            raise TypeError("Expected argument 'last_sync_time' to be a str")
        pulumi.set(__self__, "last_sync_time", last_sync_time)
        if updated_time and not isinstance(updated_time, str):
            raise TypeError("Expected argument 'updated_time' to be a str")
        pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter
    def collections(self) -> Sequence['outputs.GetAppConfigSnapshotCollectionResult']:
        return pulumi.get(self, "collections")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetAppConfigSnapshotEnvironmentResult']:
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="gitBranch")
    def git_branch(self) -> _builtins.str:
        return pulumi.get(self, "git_branch")

    @_builtins.property
    @pulumi.getter(name="gitConfigId")
    def git_config_id(self) -> _builtins.str:
        return pulumi.get(self, "git_config_id")

    @_builtins.property
    @pulumi.getter(name="gitConfigName")
    def git_config_name(self) -> _builtins.str:
        return pulumi.get(self, "git_config_name")

    @_builtins.property
    @pulumi.getter(name="gitFilePath")
    def git_file_path(self) -> _builtins.str:
        return pulumi.get(self, "git_file_path")

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> _builtins.str:
        return pulumi.get(self, "git_url")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> _builtins.str:
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> _builtins.str:
        return pulumi.get(self, "last_sync_time")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> _builtins.str:
        return pulumi.get(self, "updated_time")


class AwaitableGetAppConfigSnapshotResult(GetAppConfigSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppConfigSnapshotResult(
            collections=self.collections,
            created_time=self.created_time,
            environments=self.environments,
            git_branch=self.git_branch,
            git_config_id=self.git_config_id,
            git_config_name=self.git_config_name,
            git_file_path=self.git_file_path,
            git_url=self.git_url,
            guid=self.guid,
            href=self.href,
            id=self.id,
            last_sync_time=self.last_sync_time,
            updated_time=self.updated_time)


def get_app_config_snapshot(git_config_id: Optional[_builtins.str] = None,
                            guid: Optional[_builtins.str] = None,
                            id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppConfigSnapshotResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['gitConfigId'] = git_config_id
    __args__['guid'] = guid
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppConfigSnapshot:getAppConfigSnapshot', __args__, opts=opts, typ=GetAppConfigSnapshotResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppConfigSnapshotResult(
        collections=pulumi.get(__ret__, 'collections'),
        created_time=pulumi.get(__ret__, 'created_time'),
        environments=pulumi.get(__ret__, 'environments'),
        git_branch=pulumi.get(__ret__, 'git_branch'),
        git_config_id=pulumi.get(__ret__, 'git_config_id'),
        git_config_name=pulumi.get(__ret__, 'git_config_name'),
        git_file_path=pulumi.get(__ret__, 'git_file_path'),
        git_url=pulumi.get(__ret__, 'git_url'),
        guid=pulumi.get(__ret__, 'guid'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        last_sync_time=pulumi.get(__ret__, 'last_sync_time'),
        updated_time=pulumi.get(__ret__, 'updated_time'))
def get_app_config_snapshot_output(git_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   guid: Optional[pulumi.Input[_builtins.str]] = None,
                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppConfigSnapshotResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['gitConfigId'] = git_config_id
    __args__['guid'] = guid
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppConfigSnapshot:getAppConfigSnapshot', __args__, opts=opts, typ=GetAppConfigSnapshotResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppConfigSnapshotResult(
        collections=pulumi.get(__response__, 'collections'),
        created_time=pulumi.get(__response__, 'created_time'),
        environments=pulumi.get(__response__, 'environments'),
        git_branch=pulumi.get(__response__, 'git_branch'),
        git_config_id=pulumi.get(__response__, 'git_config_id'),
        git_config_name=pulumi.get(__response__, 'git_config_name'),
        git_file_path=pulumi.get(__response__, 'git_file_path'),
        git_url=pulumi.get(__response__, 'git_url'),
        guid=pulumi.get(__response__, 'guid'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        last_sync_time=pulumi.get(__response__, 'last_sync_time'),
        updated_time=pulumi.get(__response__, 'updated_time')))
