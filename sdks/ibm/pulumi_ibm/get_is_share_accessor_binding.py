# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsShareAccessorBindingResult',
    'AwaitableGetIsShareAccessorBindingResult',
    'get_is_share_accessor_binding',
    'get_is_share_accessor_binding_output',
]

@pulumi.output_type
class GetIsShareAccessorBindingResult:
    """
    A collection of values returned by getIsShareAccessorBinding.
    """
    def __init__(__self__, accessor_binding=None, accessors=None, created_at=None, href=None, id=None, lifecycle_state=None, resource_type=None, share=None):
        if accessor_binding and not isinstance(accessor_binding, str):
            raise TypeError("Expected argument 'accessor_binding' to be a str")
        pulumi.set(__self__, "accessor_binding", accessor_binding)
        if accessors and not isinstance(accessors, list):
            raise TypeError("Expected argument 'accessors' to be a list")
        pulumi.set(__self__, "accessors", accessors)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if share and not isinstance(share, str):
            raise TypeError("Expected argument 'share' to be a str")
        pulumi.set(__self__, "share", share)

    @_builtins.property
    @pulumi.getter(name="accessorBinding")
    def accessor_binding(self) -> _builtins.str:
        return pulumi.get(self, "accessor_binding")

    @_builtins.property
    @pulumi.getter
    def accessors(self) -> Sequence['outputs.GetIsShareAccessorBindingAccessorResult']:
        return pulumi.get(self, "accessors")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def share(self) -> _builtins.str:
        return pulumi.get(self, "share")


class AwaitableGetIsShareAccessorBindingResult(GetIsShareAccessorBindingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsShareAccessorBindingResult(
            accessor_binding=self.accessor_binding,
            accessors=self.accessors,
            created_at=self.created_at,
            href=self.href,
            id=self.id,
            lifecycle_state=self.lifecycle_state,
            resource_type=self.resource_type,
            share=self.share)


def get_is_share_accessor_binding(accessor_binding: Optional[_builtins.str] = None,
                                  id: Optional[_builtins.str] = None,
                                  share: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsShareAccessorBindingResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessorBinding'] = accessor_binding
    __args__['id'] = id
    __args__['share'] = share
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsShareAccessorBinding:getIsShareAccessorBinding', __args__, opts=opts, typ=GetIsShareAccessorBindingResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsShareAccessorBindingResult(
        accessor_binding=pulumi.get(__ret__, 'accessor_binding'),
        accessors=pulumi.get(__ret__, 'accessors'),
        created_at=pulumi.get(__ret__, 'created_at'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        share=pulumi.get(__ret__, 'share'))
def get_is_share_accessor_binding_output(accessor_binding: Optional[pulumi.Input[_builtins.str]] = None,
                                         id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         share: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsShareAccessorBindingResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessorBinding'] = accessor_binding
    __args__['id'] = id
    __args__['share'] = share
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsShareAccessorBinding:getIsShareAccessorBinding', __args__, opts=opts, typ=GetIsShareAccessorBindingResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsShareAccessorBindingResult(
        accessor_binding=pulumi.get(__response__, 'accessor_binding'),
        accessors=pulumi.get(__response__, 'accessors'),
        created_at=pulumi.get(__response__, 'created_at'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        share=pulumi.get(__response__, 'share')))
