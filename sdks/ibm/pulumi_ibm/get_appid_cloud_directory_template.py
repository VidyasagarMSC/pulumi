# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAppidCloudDirectoryTemplateResult',
    'AwaitableGetAppidCloudDirectoryTemplateResult',
    'get_appid_cloud_directory_template',
    'get_appid_cloud_directory_template_output',
]

@pulumi.output_type
class GetAppidCloudDirectoryTemplateResult:
    """
    A collection of values returned by getAppidCloudDirectoryTemplate.
    """
    def __init__(__self__, base64_encoded_html_body=None, html_body=None, id=None, language=None, plain_text_body=None, subject=None, template_name=None, tenant_id=None):
        if base64_encoded_html_body and not isinstance(base64_encoded_html_body, str):
            raise TypeError("Expected argument 'base64_encoded_html_body' to be a str")
        pulumi.set(__self__, "base64_encoded_html_body", base64_encoded_html_body)
        if html_body and not isinstance(html_body, str):
            raise TypeError("Expected argument 'html_body' to be a str")
        pulumi.set(__self__, "html_body", html_body)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if language and not isinstance(language, str):
            raise TypeError("Expected argument 'language' to be a str")
        pulumi.set(__self__, "language", language)
        if plain_text_body and not isinstance(plain_text_body, str):
            raise TypeError("Expected argument 'plain_text_body' to be a str")
        pulumi.set(__self__, "plain_text_body", plain_text_body)
        if subject and not isinstance(subject, str):
            raise TypeError("Expected argument 'subject' to be a str")
        pulumi.set(__self__, "subject", subject)
        if template_name and not isinstance(template_name, str):
            raise TypeError("Expected argument 'template_name' to be a str")
        pulumi.set(__self__, "template_name", template_name)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="base64EncodedHtmlBody")
    def base64_encoded_html_body(self) -> _builtins.str:
        return pulumi.get(self, "base64_encoded_html_body")

    @_builtins.property
    @pulumi.getter(name="htmlBody")
    def html_body(self) -> _builtins.str:
        return pulumi.get(self, "html_body")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter(name="plainTextBody")
    def plain_text_body(self) -> _builtins.str:
        return pulumi.get(self, "plain_text_body")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> _builtins.str:
        return pulumi.get(self, "subject")

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> _builtins.str:
        return pulumi.get(self, "template_name")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetAppidCloudDirectoryTemplateResult(GetAppidCloudDirectoryTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppidCloudDirectoryTemplateResult(
            base64_encoded_html_body=self.base64_encoded_html_body,
            html_body=self.html_body,
            id=self.id,
            language=self.language,
            plain_text_body=self.plain_text_body,
            subject=self.subject,
            template_name=self.template_name,
            tenant_id=self.tenant_id)


def get_appid_cloud_directory_template(id: Optional[_builtins.str] = None,
                                       language: Optional[_builtins.str] = None,
                                       template_name: Optional[_builtins.str] = None,
                                       tenant_id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppidCloudDirectoryTemplateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['language'] = language
    __args__['templateName'] = template_name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppidCloudDirectoryTemplate:getAppidCloudDirectoryTemplate', __args__, opts=opts, typ=GetAppidCloudDirectoryTemplateResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppidCloudDirectoryTemplateResult(
        base64_encoded_html_body=pulumi.get(__ret__, 'base64_encoded_html_body'),
        html_body=pulumi.get(__ret__, 'html_body'),
        id=pulumi.get(__ret__, 'id'),
        language=pulumi.get(__ret__, 'language'),
        plain_text_body=pulumi.get(__ret__, 'plain_text_body'),
        subject=pulumi.get(__ret__, 'subject'),
        template_name=pulumi.get(__ret__, 'template_name'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_appid_cloud_directory_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              language: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              template_name: Optional[pulumi.Input[_builtins.str]] = None,
                                              tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppidCloudDirectoryTemplateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['language'] = language
    __args__['templateName'] = template_name
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppidCloudDirectoryTemplate:getAppidCloudDirectoryTemplate', __args__, opts=opts, typ=GetAppidCloudDirectoryTemplateResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppidCloudDirectoryTemplateResult(
        base64_encoded_html_body=pulumi.get(__response__, 'base64_encoded_html_body'),
        html_body=pulumi.get(__response__, 'html_body'),
        id=pulumi.get(__response__, 'id'),
        language=pulumi.get(__response__, 'language'),
        plain_text_body=pulumi.get(__response__, 'plain_text_body'),
        subject=pulumi.get(__response__, 'subject'),
        template_name=pulumi.get(__response__, 'template_name'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
