# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetContainerDedicatedHostFlavorResult',
    'AwaitableGetContainerDedicatedHostFlavorResult',
    'get_container_dedicated_host_flavor',
    'get_container_dedicated_host_flavor_output',
]

@pulumi.output_type
class GetContainerDedicatedHostFlavorResult:
    """
    A collection of values returned by getContainerDedicatedHostFlavor.
    """
    def __init__(__self__, deprecated=None, flavor_class=None, host_flavor_id=None, id=None, instance_storages=None, max_memory=None, max_vcpus=None, region=None, zone=None):
        if deprecated and not isinstance(deprecated, bool):
            raise TypeError("Expected argument 'deprecated' to be a bool")
        pulumi.set(__self__, "deprecated", deprecated)
        if flavor_class and not isinstance(flavor_class, str):
            raise TypeError("Expected argument 'flavor_class' to be a str")
        pulumi.set(__self__, "flavor_class", flavor_class)
        if host_flavor_id and not isinstance(host_flavor_id, str):
            raise TypeError("Expected argument 'host_flavor_id' to be a str")
        pulumi.set(__self__, "host_flavor_id", host_flavor_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_storages and not isinstance(instance_storages, list):
            raise TypeError("Expected argument 'instance_storages' to be a list")
        pulumi.set(__self__, "instance_storages", instance_storages)
        if max_memory and not isinstance(max_memory, float):
            raise TypeError("Expected argument 'max_memory' to be a float")
        pulumi.set(__self__, "max_memory", max_memory)
        if max_vcpus and not isinstance(max_vcpus, float):
            raise TypeError("Expected argument 'max_vcpus' to be a float")
        pulumi.set(__self__, "max_vcpus", max_vcpus)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def deprecated(self) -> _builtins.bool:
        return pulumi.get(self, "deprecated")

    @_builtins.property
    @pulumi.getter(name="flavorClass")
    def flavor_class(self) -> _builtins.str:
        return pulumi.get(self, "flavor_class")

    @_builtins.property
    @pulumi.getter(name="hostFlavorId")
    def host_flavor_id(self) -> _builtins.str:
        return pulumi.get(self, "host_flavor_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceStorages")
    def instance_storages(self) -> Sequence['outputs.GetContainerDedicatedHostFlavorInstanceStorageResult']:
        return pulumi.get(self, "instance_storages")

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> _builtins.float:
        return pulumi.get(self, "max_memory")

    @_builtins.property
    @pulumi.getter(name="maxVcpus")
    def max_vcpus(self) -> _builtins.float:
        return pulumi.get(self, "max_vcpus")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetContainerDedicatedHostFlavorResult(GetContainerDedicatedHostFlavorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerDedicatedHostFlavorResult(
            deprecated=self.deprecated,
            flavor_class=self.flavor_class,
            host_flavor_id=self.host_flavor_id,
            id=self.id,
            instance_storages=self.instance_storages,
            max_memory=self.max_memory,
            max_vcpus=self.max_vcpus,
            region=self.region,
            zone=self.zone)


def get_container_dedicated_host_flavor(host_flavor_id: Optional[_builtins.str] = None,
                                        id: Optional[_builtins.str] = None,
                                        zone: Optional[_builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerDedicatedHostFlavorResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hostFlavorId'] = host_flavor_id
    __args__['id'] = id
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerDedicatedHostFlavor:getContainerDedicatedHostFlavor', __args__, opts=opts, typ=GetContainerDedicatedHostFlavorResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerDedicatedHostFlavorResult(
        deprecated=pulumi.get(__ret__, 'deprecated'),
        flavor_class=pulumi.get(__ret__, 'flavor_class'),
        host_flavor_id=pulumi.get(__ret__, 'host_flavor_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_storages=pulumi.get(__ret__, 'instance_storages'),
        max_memory=pulumi.get(__ret__, 'max_memory'),
        max_vcpus=pulumi.get(__ret__, 'max_vcpus'),
        region=pulumi.get(__ret__, 'region'),
        zone=pulumi.get(__ret__, 'zone'))
def get_container_dedicated_host_flavor_output(host_flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                                               id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               zone: Optional[pulumi.Input[_builtins.str]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerDedicatedHostFlavorResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hostFlavorId'] = host_flavor_id
    __args__['id'] = id
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerDedicatedHostFlavor:getContainerDedicatedHostFlavor', __args__, opts=opts, typ=GetContainerDedicatedHostFlavorResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerDedicatedHostFlavorResult(
        deprecated=pulumi.get(__response__, 'deprecated'),
        flavor_class=pulumi.get(__response__, 'flavor_class'),
        host_flavor_id=pulumi.get(__response__, 'host_flavor_id'),
        id=pulumi.get(__response__, 'id'),
        instance_storages=pulumi.get(__response__, 'instance_storages'),
        max_memory=pulumi.get(__response__, 'max_memory'),
        max_vcpus=pulumi.get(__response__, 'max_vcpus'),
        region=pulumi.get(__response__, 'region'),
        zone=pulumi.get(__response__, 'zone')))
