# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsBackupPolicyPlanArgs', 'IsBackupPolicyPlan']

@pulumi.input_type
class IsBackupPolicyPlanArgs:
    def __init__(__self__, *,
                 backup_policy_id: pulumi.Input[_builtins.str],
                 cron_spec: pulumi.Input[_builtins.str],
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 attach_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 clone_policy: Optional[pulumi.Input['IsBackupPolicyPlanClonePolicyArgs']] = None,
                 copy_user_tags: Optional[pulumi.Input[_builtins.bool]] = None,
                 deletion_trigger: Optional[pulumi.Input['IsBackupPolicyPlanDeletionTriggerArgs']] = None,
                 is_backup_policy_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_region_policies: Optional[pulumi.Input[Sequence[pulumi.Input['IsBackupPolicyPlanRemoteRegionPolicyArgs']]]] = None):
        """
        The set of arguments for constructing a IsBackupPolicyPlan resource.
        :param pulumi.Input[_builtins.str] backup_policy_id: The backup policy identifier.
        :param pulumi.Input[_builtins.str] cron_spec: The cron specification for the backup schedule.
        :param pulumi.Input[_builtins.bool] active: Indicates whether the plan is active.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] attach_user_tags: User tags to attach to each backup (snapshot) created by this plan. If unspecified, no user tags will be attached.
        :param pulumi.Input[_builtins.bool] copy_user_tags: Indicates whether to copy the source's user tags to the created backups (snapshots).
        :param pulumi.Input[_builtins.str] name: The user-defined name for this backup policy plan. Names must be unique within the backup policy this plan resides in.
               If unspecified, the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[Sequence[pulumi.Input['IsBackupPolicyPlanRemoteRegionPolicyArgs']]] remote_region_policies: Backup policy plan cross region rule.
        """
        pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        pulumi.set(__self__, "cron_spec", cron_spec)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if attach_user_tags is not None:
            pulumi.set(__self__, "attach_user_tags", attach_user_tags)
        if clone_policy is not None:
            pulumi.set(__self__, "clone_policy", clone_policy)
        if copy_user_tags is not None:
            pulumi.set(__self__, "copy_user_tags", copy_user_tags)
        if deletion_trigger is not None:
            pulumi.set(__self__, "deletion_trigger", deletion_trigger)
        if is_backup_policy_plan_id is not None:
            pulumi.set(__self__, "is_backup_policy_plan_id", is_backup_policy_plan_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remote_region_policies is not None:
            pulumi.set(__self__, "remote_region_policies", remote_region_policies)

    @_builtins.property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        The backup policy identifier.
        """
        return pulumi.get(self, "backup_policy_id")

    @backup_policy_id.setter
    def backup_policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "backup_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="cronSpec")
    def cron_spec(self) -> pulumi.Input[_builtins.str]:
        """
        The cron specification for the backup schedule.
        """
        return pulumi.get(self, "cron_spec")

    @cron_spec.setter
    def cron_spec(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cron_spec", value)

    @_builtins.property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the plan is active.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "active", value)

    @_builtins.property
    @pulumi.getter(name="attachUserTags")
    def attach_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        User tags to attach to each backup (snapshot) created by this plan. If unspecified, no user tags will be attached.
        """
        return pulumi.get(self, "attach_user_tags")

    @attach_user_tags.setter
    def attach_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "attach_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="clonePolicy")
    def clone_policy(self) -> Optional[pulumi.Input['IsBackupPolicyPlanClonePolicyArgs']]:
        return pulumi.get(self, "clone_policy")

    @clone_policy.setter
    def clone_policy(self, value: Optional[pulumi.Input['IsBackupPolicyPlanClonePolicyArgs']]):
        pulumi.set(self, "clone_policy", value)

    @_builtins.property
    @pulumi.getter(name="copyUserTags")
    def copy_user_tags(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to copy the source's user tags to the created backups (snapshots).
        """
        return pulumi.get(self, "copy_user_tags")

    @copy_user_tags.setter
    def copy_user_tags(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "copy_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="deletionTrigger")
    def deletion_trigger(self) -> Optional[pulumi.Input['IsBackupPolicyPlanDeletionTriggerArgs']]:
        return pulumi.get(self, "deletion_trigger")

    @deletion_trigger.setter
    def deletion_trigger(self, value: Optional[pulumi.Input['IsBackupPolicyPlanDeletionTriggerArgs']]):
        pulumi.set(self, "deletion_trigger", value)

    @_builtins.property
    @pulumi.getter(name="isBackupPolicyPlanId")
    def is_backup_policy_plan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_backup_policy_plan_id")

    @is_backup_policy_plan_id.setter
    def is_backup_policy_plan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_backup_policy_plan_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this backup policy plan. Names must be unique within the backup policy this plan resides in.
        If unspecified, the name will be a hyphenated list of randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="remoteRegionPolicies")
    def remote_region_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBackupPolicyPlanRemoteRegionPolicyArgs']]]]:
        """
        Backup policy plan cross region rule.
        """
        return pulumi.get(self, "remote_region_policies")

    @remote_region_policies.setter
    def remote_region_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBackupPolicyPlanRemoteRegionPolicyArgs']]]]):
        pulumi.set(self, "remote_region_policies", value)


@pulumi.input_type
class _IsBackupPolicyPlanState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 attach_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_policy_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 clone_policy: Optional[pulumi.Input['IsBackupPolicyPlanClonePolicyArgs']] = None,
                 copy_user_tags: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 deletion_trigger: Optional[pulumi.Input['IsBackupPolicyPlanDeletionTriggerArgs']] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_backup_policy_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_region_policies: Optional[pulumi.Input[Sequence[pulumi.Input['IsBackupPolicyPlanRemoteRegionPolicyArgs']]]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsBackupPolicyPlan resources.
        :param pulumi.Input[_builtins.bool] active: Indicates whether the plan is active.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] attach_user_tags: User tags to attach to each backup (snapshot) created by this plan. If unspecified, no user tags will be attached.
        :param pulumi.Input[_builtins.str] backup_policy_id: The backup policy identifier.
        :param pulumi.Input[_builtins.str] backup_policy_plan_id: The backup policy identifier.
        :param pulumi.Input[_builtins.bool] copy_user_tags: Indicates whether to copy the source's user tags to the created backups (snapshots).
        :param pulumi.Input[_builtins.str] created_at: The date and time that the backup policy plan was created.
        :param pulumi.Input[_builtins.str] cron_spec: The cron specification for the backup schedule.
        :param pulumi.Input[_builtins.str] href: The URL for this backup policy plan.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of this backup policy plan.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this backup policy plan. Names must be unique within the backup policy this plan resides in.
               If unspecified, the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[Sequence[pulumi.Input['IsBackupPolicyPlanRemoteRegionPolicyArgs']]] remote_region_policies: Backup policy plan cross region rule.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] version: Version of the BackupPolicyPlan.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if attach_user_tags is not None:
            pulumi.set(__self__, "attach_user_tags", attach_user_tags)
        if backup_policy_id is not None:
            pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if backup_policy_plan_id is not None:
            pulumi.set(__self__, "backup_policy_plan_id", backup_policy_plan_id)
        if clone_policy is not None:
            pulumi.set(__self__, "clone_policy", clone_policy)
        if copy_user_tags is not None:
            pulumi.set(__self__, "copy_user_tags", copy_user_tags)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if cron_spec is not None:
            pulumi.set(__self__, "cron_spec", cron_spec)
        if deletion_trigger is not None:
            pulumi.set(__self__, "deletion_trigger", deletion_trigger)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_backup_policy_plan_id is not None:
            pulumi.set(__self__, "is_backup_policy_plan_id", is_backup_policy_plan_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remote_region_policies is not None:
            pulumi.set(__self__, "remote_region_policies", remote_region_policies)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the plan is active.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "active", value)

    @_builtins.property
    @pulumi.getter(name="attachUserTags")
    def attach_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        User tags to attach to each backup (snapshot) created by this plan. If unspecified, no user tags will be attached.
        """
        return pulumi.get(self, "attach_user_tags")

    @attach_user_tags.setter
    def attach_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "attach_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The backup policy identifier.
        """
        return pulumi.get(self, "backup_policy_id")

    @backup_policy_id.setter
    def backup_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlanId")
    def backup_policy_plan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The backup policy identifier.
        """
        return pulumi.get(self, "backup_policy_plan_id")

    @backup_policy_plan_id.setter
    def backup_policy_plan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_policy_plan_id", value)

    @_builtins.property
    @pulumi.getter(name="clonePolicy")
    def clone_policy(self) -> Optional[pulumi.Input['IsBackupPolicyPlanClonePolicyArgs']]:
        return pulumi.get(self, "clone_policy")

    @clone_policy.setter
    def clone_policy(self, value: Optional[pulumi.Input['IsBackupPolicyPlanClonePolicyArgs']]):
        pulumi.set(self, "clone_policy", value)

    @_builtins.property
    @pulumi.getter(name="copyUserTags")
    def copy_user_tags(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to copy the source's user tags to the created backups (snapshots).
        """
        return pulumi.get(self, "copy_user_tags")

    @copy_user_tags.setter
    def copy_user_tags(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "copy_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the backup policy plan was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="cronSpec")
    def cron_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cron specification for the backup schedule.
        """
        return pulumi.get(self, "cron_spec")

    @cron_spec.setter
    def cron_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cron_spec", value)

    @_builtins.property
    @pulumi.getter(name="deletionTrigger")
    def deletion_trigger(self) -> Optional[pulumi.Input['IsBackupPolicyPlanDeletionTriggerArgs']]:
        return pulumi.get(self, "deletion_trigger")

    @deletion_trigger.setter
    def deletion_trigger(self, value: Optional[pulumi.Input['IsBackupPolicyPlanDeletionTriggerArgs']]):
        pulumi.set(self, "deletion_trigger", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this backup policy plan.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isBackupPolicyPlanId")
    def is_backup_policy_plan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_backup_policy_plan_id")

    @is_backup_policy_plan_id.setter
    def is_backup_policy_plan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_backup_policy_plan_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of this backup policy plan.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this backup policy plan. Names must be unique within the backup policy this plan resides in.
        If unspecified, the name will be a hyphenated list of randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="remoteRegionPolicies")
    def remote_region_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBackupPolicyPlanRemoteRegionPolicyArgs']]]]:
        """
        Backup policy plan cross region rule.
        """
        return pulumi.get(self, "remote_region_policies")

    @remote_region_policies.setter
    def remote_region_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBackupPolicyPlanRemoteRegionPolicyArgs']]]]):
        pulumi.set(self, "remote_region_policies", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the BackupPolicyPlan.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/isBackupPolicyPlan:IsBackupPolicyPlan")
class IsBackupPolicyPlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 attach_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 clone_policy: Optional[pulumi.Input[Union['IsBackupPolicyPlanClonePolicyArgs', 'IsBackupPolicyPlanClonePolicyArgsDict']]] = None,
                 copy_user_tags: Optional[pulumi.Input[_builtins.bool]] = None,
                 cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 deletion_trigger: Optional[pulumi.Input[Union['IsBackupPolicyPlanDeletionTriggerArgs', 'IsBackupPolicyPlanDeletionTriggerArgsDict']]] = None,
                 is_backup_policy_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_region_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBackupPolicyPlanRemoteRegionPolicyArgs', 'IsBackupPolicyPlanRemoteRegionPolicyArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a IsBackupPolicyPlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] active: Indicates whether the plan is active.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] attach_user_tags: User tags to attach to each backup (snapshot) created by this plan. If unspecified, no user tags will be attached.
        :param pulumi.Input[_builtins.str] backup_policy_id: The backup policy identifier.
        :param pulumi.Input[_builtins.bool] copy_user_tags: Indicates whether to copy the source's user tags to the created backups (snapshots).
        :param pulumi.Input[_builtins.str] cron_spec: The cron specification for the backup schedule.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this backup policy plan. Names must be unique within the backup policy this plan resides in.
               If unspecified, the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsBackupPolicyPlanRemoteRegionPolicyArgs', 'IsBackupPolicyPlanRemoteRegionPolicyArgsDict']]]] remote_region_policies: Backup policy plan cross region rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsBackupPolicyPlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsBackupPolicyPlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsBackupPolicyPlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsBackupPolicyPlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 attach_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 clone_policy: Optional[pulumi.Input[Union['IsBackupPolicyPlanClonePolicyArgs', 'IsBackupPolicyPlanClonePolicyArgsDict']]] = None,
                 copy_user_tags: Optional[pulumi.Input[_builtins.bool]] = None,
                 cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 deletion_trigger: Optional[pulumi.Input[Union['IsBackupPolicyPlanDeletionTriggerArgs', 'IsBackupPolicyPlanDeletionTriggerArgsDict']]] = None,
                 is_backup_policy_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_region_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBackupPolicyPlanRemoteRegionPolicyArgs', 'IsBackupPolicyPlanRemoteRegionPolicyArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsBackupPolicyPlanArgs.__new__(IsBackupPolicyPlanArgs)

            __props__.__dict__["active"] = active
            __props__.__dict__["attach_user_tags"] = attach_user_tags
            if backup_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'backup_policy_id'")
            __props__.__dict__["backup_policy_id"] = backup_policy_id
            __props__.__dict__["clone_policy"] = clone_policy
            __props__.__dict__["copy_user_tags"] = copy_user_tags
            if cron_spec is None and not opts.urn:
                raise TypeError("Missing required property 'cron_spec'")
            __props__.__dict__["cron_spec"] = cron_spec
            __props__.__dict__["deletion_trigger"] = deletion_trigger
            __props__.__dict__["is_backup_policy_plan_id"] = is_backup_policy_plan_id
            __props__.__dict__["name"] = name
            __props__.__dict__["remote_region_policies"] = remote_region_policies
            __props__.__dict__["backup_policy_plan_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["version"] = None
        super(IsBackupPolicyPlan, __self__).__init__(
            'ibm:index/isBackupPolicyPlan:IsBackupPolicyPlan',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[_builtins.bool]] = None,
            attach_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            backup_policy_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
            clone_policy: Optional[pulumi.Input[Union['IsBackupPolicyPlanClonePolicyArgs', 'IsBackupPolicyPlanClonePolicyArgsDict']]] = None,
            copy_user_tags: Optional[pulumi.Input[_builtins.bool]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
            deletion_trigger: Optional[pulumi.Input[Union['IsBackupPolicyPlanDeletionTriggerArgs', 'IsBackupPolicyPlanDeletionTriggerArgsDict']]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_backup_policy_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            remote_region_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBackupPolicyPlanRemoteRegionPolicyArgs', 'IsBackupPolicyPlanRemoteRegionPolicyArgsDict']]]]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsBackupPolicyPlan':
        """
        Get an existing IsBackupPolicyPlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] active: Indicates whether the plan is active.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] attach_user_tags: User tags to attach to each backup (snapshot) created by this plan. If unspecified, no user tags will be attached.
        :param pulumi.Input[_builtins.str] backup_policy_id: The backup policy identifier.
        :param pulumi.Input[_builtins.str] backup_policy_plan_id: The backup policy identifier.
        :param pulumi.Input[_builtins.bool] copy_user_tags: Indicates whether to copy the source's user tags to the created backups (snapshots).
        :param pulumi.Input[_builtins.str] created_at: The date and time that the backup policy plan was created.
        :param pulumi.Input[_builtins.str] cron_spec: The cron specification for the backup schedule.
        :param pulumi.Input[_builtins.str] href: The URL for this backup policy plan.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of this backup policy plan.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this backup policy plan. Names must be unique within the backup policy this plan resides in.
               If unspecified, the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsBackupPolicyPlanRemoteRegionPolicyArgs', 'IsBackupPolicyPlanRemoteRegionPolicyArgsDict']]]] remote_region_policies: Backup policy plan cross region rule.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] version: Version of the BackupPolicyPlan.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsBackupPolicyPlanState.__new__(_IsBackupPolicyPlanState)

        __props__.__dict__["active"] = active
        __props__.__dict__["attach_user_tags"] = attach_user_tags
        __props__.__dict__["backup_policy_id"] = backup_policy_id
        __props__.__dict__["backup_policy_plan_id"] = backup_policy_plan_id
        __props__.__dict__["clone_policy"] = clone_policy
        __props__.__dict__["copy_user_tags"] = copy_user_tags
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["cron_spec"] = cron_spec
        __props__.__dict__["deletion_trigger"] = deletion_trigger
        __props__.__dict__["href"] = href
        __props__.__dict__["is_backup_policy_plan_id"] = is_backup_policy_plan_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["remote_region_policies"] = remote_region_policies
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["version"] = version
        return IsBackupPolicyPlan(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def active(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the plan is active.
        """
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter(name="attachUserTags")
    def attach_user_tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        User tags to attach to each backup (snapshot) created by this plan. If unspecified, no user tags will be attached.
        """
        return pulumi.get(self, "attach_user_tags")

    @_builtins.property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        The backup policy identifier.
        """
        return pulumi.get(self, "backup_policy_id")

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlanId")
    def backup_policy_plan_id(self) -> pulumi.Output[_builtins.str]:
        """
        The backup policy identifier.
        """
        return pulumi.get(self, "backup_policy_plan_id")

    @_builtins.property
    @pulumi.getter(name="clonePolicy")
    def clone_policy(self) -> pulumi.Output[Optional['outputs.IsBackupPolicyPlanClonePolicy']]:
        return pulumi.get(self, "clone_policy")

    @_builtins.property
    @pulumi.getter(name="copyUserTags")
    def copy_user_tags(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates whether to copy the source's user tags to the created backups (snapshots).
        """
        return pulumi.get(self, "copy_user_tags")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the backup policy plan was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="cronSpec")
    def cron_spec(self) -> pulumi.Output[_builtins.str]:
        """
        The cron specification for the backup schedule.
        """
        return pulumi.get(self, "cron_spec")

    @_builtins.property
    @pulumi.getter(name="deletionTrigger")
    def deletion_trigger(self) -> pulumi.Output[Optional['outputs.IsBackupPolicyPlanDeletionTrigger']]:
        return pulumi.get(self, "deletion_trigger")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this backup policy plan.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isBackupPolicyPlanId")
    def is_backup_policy_plan_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_backup_policy_plan_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of this backup policy plan.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this backup policy plan. Names must be unique within the backup policy this plan resides in.
        If unspecified, the name will be a hyphenated list of randomly-selected words.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="remoteRegionPolicies")
    def remote_region_policies(self) -> pulumi.Output[Optional[Sequence['outputs.IsBackupPolicyPlanRemoteRegionPolicy']]]:
        """
        Backup policy plan cross region rule.
        """
        return pulumi.get(self, "remote_region_policies")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Version of the BackupPolicyPlan.
        """
        return pulumi.get(self, "version")

