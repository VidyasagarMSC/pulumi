# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAccountResult',
    'AwaitableGetAccountResult',
    'get_account',
    'get_account_output',
]

@pulumi.output_type
class GetAccountResult:
    """
    A collection of values returned by getAccount.
    """
    def __init__(__self__, account_users=None, id=None, org_guid=None):
        if account_users and not isinstance(account_users, list):
            raise TypeError("Expected argument 'account_users' to be a list")
        pulumi.set(__self__, "account_users", account_users)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org_guid and not isinstance(org_guid, str):
            raise TypeError("Expected argument 'org_guid' to be a str")
        pulumi.set(__self__, "org_guid", org_guid)

    @_builtins.property
    @pulumi.getter(name="accountUsers")
    def account_users(self) -> Sequence['outputs.GetAccountAccountUserResult']:
        return pulumi.get(self, "account_users")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="orgGuid")
    def org_guid(self) -> _builtins.str:
        return pulumi.get(self, "org_guid")


class AwaitableGetAccountResult(GetAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountResult(
            account_users=self.account_users,
            id=self.id,
            org_guid=self.org_guid)


def get_account(id: Optional[_builtins.str] = None,
                org_guid: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['orgGuid'] = org_guid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAccount:getAccount', __args__, opts=opts, typ=GetAccountResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAccountResult(
        account_users=pulumi.get(__ret__, 'account_users'),
        id=pulumi.get(__ret__, 'id'),
        org_guid=pulumi.get(__ret__, 'org_guid'))
def get_account_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       org_guid: Optional[pulumi.Input[_builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAccountResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['orgGuid'] = org_guid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAccount:getAccount', __args__, opts=opts, typ=GetAccountResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAccountResult(
        account_users=pulumi.get(__response__, 'account_users'),
        id=pulumi.get(__response__, 'id'),
        org_guid=pulumi.get(__response__, 'org_guid')))
