# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsBareMetalServerNetworkInterfaceInitArgs', 'IsBareMetalServerNetworkInterface']

@pulumi.input_type
class IsBareMetalServerNetworkInterfaceInitArgs:
    def __init__(__self__, *,
                 bare_metal_server: pulumi.Input[_builtins.str],
                 subnet: pulumi.Input[_builtins.str],
                 allow_interface_to_float: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 enable_infrastructure_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 hard_stop: Optional[pulumi.Input[_builtins.bool]] = None,
                 interface_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input['IsBareMetalServerNetworkInterfacePrimaryIpArgs']] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsBareMetalServerNetworkInterfaceTimeoutsArgs']] = None,
                 vlan: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a IsBareMetalServerNetworkInterface resource.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] subnet: The id of the associated subnet
        :param pulumi.Input[_builtins.bool] allow_interface_to_float: Indicates if the interface can float to any other server within the same resource_group. The interface will float
               automatically if the network detects a GARP or RARP on another bare metal server in the resource group. Applies only to
               vlan type interfaces.
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
               interface. If true, source IP spoofing is allowed on this interface.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_vlans: Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) interface. A given VLAN can only be in the
               allowed_vlans array for one PCI type adapter per bare metal server.
        :param pulumi.Input[_builtins.bool] enable_infrastructure_nat: If true, the VPC infrastructure performs any needed NAT operations. If false, the packet is passed unmodified to/from
               the network interface, allowing the workload to perform any needed NAT operations.
        :param pulumi.Input[_builtins.bool] hard_stop: Only used for PCI network interfaces, whether to hard/immediately stop server
        :param pulumi.Input[_builtins.str] interface_type: The network interface type: [ pci, vlan, hipersocket ]
        :param pulumi.Input[_builtins.str] name: The user-defined name for this network interface
        :param pulumi.Input['IsBareMetalServerNetworkInterfacePrimaryIpArgs'] primary_ip: title: IPv4, The IP address.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Collection of security groups ids
        :param pulumi.Input[_builtins.float] vlan: Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this interface
        """
        pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        pulumi.set(__self__, "subnet", subnet)
        if allow_interface_to_float is not None:
            pulumi.set(__self__, "allow_interface_to_float", allow_interface_to_float)
        if allow_ip_spoofing is not None:
            pulumi.set(__self__, "allow_ip_spoofing", allow_ip_spoofing)
        if allowed_vlans is not None:
            pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        if enable_infrastructure_nat is not None:
            pulumi.set(__self__, "enable_infrastructure_nat", enable_infrastructure_nat)
        if hard_stop is not None:
            pulumi.set(__self__, "hard_stop", hard_stop)
        if interface_type is not None:
            pulumi.set(__self__, "interface_type", interface_type)
        if is_bare_metal_server_network_interface_id is not None:
            pulumi.set(__self__, "is_bare_metal_server_network_interface_id", is_bare_metal_server_network_interface_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> pulumi.Input[_builtins.str]:
        """
        Bare metal server identifier
        """
        return pulumi.get(self, "bare_metal_server")

    @bare_metal_server.setter
    def bare_metal_server(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bare_metal_server", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[_builtins.str]:
        """
        The id of the associated subnet
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter(name="allowInterfaceToFloat")
    def allow_interface_to_float(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the interface can float to any other server within the same resource_group. The interface will float
        automatically if the network detects a GARP or RARP on another bare metal server in the resource group. Applies only to
        vlan type interfaces.
        """
        return pulumi.get(self, "allow_interface_to_float")

    @allow_interface_to_float.setter
    def allow_interface_to_float(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_interface_to_float", value)

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
        interface. If true, source IP spoofing is allowed on this interface.
        """
        return pulumi.get(self, "allow_ip_spoofing")

    @allow_ip_spoofing.setter
    def allow_ip_spoofing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_ip_spoofing", value)

    @_builtins.property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) interface. A given VLAN can only be in the
        allowed_vlans array for one PCI type adapter per bare metal server.
        """
        return pulumi.get(self, "allowed_vlans")

    @allowed_vlans.setter
    def allowed_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "allowed_vlans", value)

    @_builtins.property
    @pulumi.getter(name="enableInfrastructureNat")
    def enable_infrastructure_nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, the VPC infrastructure performs any needed NAT operations. If false, the packet is passed unmodified to/from
        the network interface, allowing the workload to perform any needed NAT operations.
        """
        return pulumi.get(self, "enable_infrastructure_nat")

    @enable_infrastructure_nat.setter
    def enable_infrastructure_nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_infrastructure_nat", value)

    @_builtins.property
    @pulumi.getter(name="hardStop")
    def hard_stop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Only used for PCI network interfaces, whether to hard/immediately stop server
        """
        return pulumi.get(self, "hard_stop")

    @hard_stop.setter
    def hard_stop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hard_stop", value)

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network interface type: [ pci, vlan, hipersocket ]
        """
        return pulumi.get(self, "interface_type")

    @interface_type.setter
    def interface_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_type", value)

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerNetworkInterfaceId")
    def is_bare_metal_server_network_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_bare_metal_server_network_interface_id")

    @is_bare_metal_server_network_interface_id.setter
    def is_bare_metal_server_network_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_bare_metal_server_network_interface_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this network interface
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input['IsBareMetalServerNetworkInterfacePrimaryIpArgs']]:
        """
        title: IPv4, The IP address.
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input['IsBareMetalServerNetworkInterfacePrimaryIpArgs']]):
        pulumi.set(self, "primary_ip", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Collection of security groups ids
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsBareMetalServerNetworkInterfaceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsBareMetalServerNetworkInterfaceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this interface
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class _IsBareMetalServerNetworkInterfaceState:
    def __init__(__self__, *,
                 allow_interface_to_float: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_infrastructure_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 floating_ips: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkInterfaceFloatingIpArgs']]]] = None,
                 hard_stop: Optional[pulumi.Input[_builtins.bool]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 port_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 primary_ip: Optional[pulumi.Input['IsBareMetalServerNetworkInterfacePrimaryIpArgs']] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsBareMetalServerNetworkInterfaceTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering IsBareMetalServerNetworkInterface resources.
        :param pulumi.Input[_builtins.bool] allow_interface_to_float: Indicates if the interface can float to any other server within the same resource_group. The interface will float
               automatically if the network detects a GARP or RARP on another bare metal server in the resource group. Applies only to
               vlan type interfaces.
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
               interface. If true, source IP spoofing is allowed on this interface.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_vlans: Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) interface. A given VLAN can only be in the
               allowed_vlans array for one PCI type adapter per bare metal server.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.bool] enable_infrastructure_nat: If true, the VPC infrastructure performs any needed NAT operations. If false, the packet is passed unmodified to/from
               the network interface, allowing the workload to perform any needed NAT operations.
        :param pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkInterfaceFloatingIpArgs']]] floating_ips: The floating IPs associated with this network interface.
        :param pulumi.Input[_builtins.bool] hard_stop: Only used for PCI network interfaces, whether to hard/immediately stop server
        :param pulumi.Input[_builtins.str] href: The URL for this network interface
        :param pulumi.Input[_builtins.str] interface_type: The network interface type: [ pci, vlan, hipersocket ]
        :param pulumi.Input[_builtins.str] mac_address: The MAC address of the interface. If absent, the value is not known.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this network interface
        :param pulumi.Input[_builtins.str] network_interface: The bare metal server network interface identifier
        :param pulumi.Input[_builtins.float] port_speed: The network interface port speed in Mbps
        :param pulumi.Input['IsBareMetalServerNetworkInterfacePrimaryIpArgs'] primary_ip: title: IPv4, The IP address.
        :param pulumi.Input[_builtins.str] resource_type: The resource type : [ subnet_reserved_ip ]
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Collection of security groups ids
        :param pulumi.Input[_builtins.str] status: The status of the network interface : [ available, deleting, failed, pending ]
        :param pulumi.Input[_builtins.str] subnet: The id of the associated subnet
        :param pulumi.Input[_builtins.str] type: The type of this bare metal server network interface : [ primary, secondary ]
        :param pulumi.Input[_builtins.float] vlan: Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this interface
        """
        if allow_interface_to_float is not None:
            pulumi.set(__self__, "allow_interface_to_float", allow_interface_to_float)
        if allow_ip_spoofing is not None:
            pulumi.set(__self__, "allow_ip_spoofing", allow_ip_spoofing)
        if allowed_vlans is not None:
            pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        if bare_metal_server is not None:
            pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        if enable_infrastructure_nat is not None:
            pulumi.set(__self__, "enable_infrastructure_nat", enable_infrastructure_nat)
        if floating_ips is not None:
            pulumi.set(__self__, "floating_ips", floating_ips)
        if hard_stop is not None:
            pulumi.set(__self__, "hard_stop", hard_stop)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if interface_type is not None:
            pulumi.set(__self__, "interface_type", interface_type)
        if is_bare_metal_server_network_interface_id is not None:
            pulumi.set(__self__, "is_bare_metal_server_network_interface_id", is_bare_metal_server_network_interface_id)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_interface is not None:
            pulumi.set(__self__, "network_interface", network_interface)
        if port_speed is not None:
            pulumi.set(__self__, "port_speed", port_speed)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="allowInterfaceToFloat")
    def allow_interface_to_float(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the interface can float to any other server within the same resource_group. The interface will float
        automatically if the network detects a GARP or RARP on another bare metal server in the resource group. Applies only to
        vlan type interfaces.
        """
        return pulumi.get(self, "allow_interface_to_float")

    @allow_interface_to_float.setter
    def allow_interface_to_float(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_interface_to_float", value)

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
        interface. If true, source IP spoofing is allowed on this interface.
        """
        return pulumi.get(self, "allow_ip_spoofing")

    @allow_ip_spoofing.setter
    def allow_ip_spoofing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_ip_spoofing", value)

    @_builtins.property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) interface. A given VLAN can only be in the
        allowed_vlans array for one PCI type adapter per bare metal server.
        """
        return pulumi.get(self, "allowed_vlans")

    @allowed_vlans.setter
    def allowed_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "allowed_vlans", value)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server identifier
        """
        return pulumi.get(self, "bare_metal_server")

    @bare_metal_server.setter
    def bare_metal_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bare_metal_server", value)

    @_builtins.property
    @pulumi.getter(name="enableInfrastructureNat")
    def enable_infrastructure_nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, the VPC infrastructure performs any needed NAT operations. If false, the packet is passed unmodified to/from
        the network interface, allowing the workload to perform any needed NAT operations.
        """
        return pulumi.get(self, "enable_infrastructure_nat")

    @enable_infrastructure_nat.setter
    def enable_infrastructure_nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_infrastructure_nat", value)

    @_builtins.property
    @pulumi.getter(name="floatingIps")
    def floating_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkInterfaceFloatingIpArgs']]]]:
        """
        The floating IPs associated with this network interface.
        """
        return pulumi.get(self, "floating_ips")

    @floating_ips.setter
    def floating_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkInterfaceFloatingIpArgs']]]]):
        pulumi.set(self, "floating_ips", value)

    @_builtins.property
    @pulumi.getter(name="hardStop")
    def hard_stop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Only used for PCI network interfaces, whether to hard/immediately stop server
        """
        return pulumi.get(self, "hard_stop")

    @hard_stop.setter
    def hard_stop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hard_stop", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this network interface
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network interface type: [ pci, vlan, hipersocket ]
        """
        return pulumi.get(self, "interface_type")

    @interface_type.setter
    def interface_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_type", value)

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerNetworkInterfaceId")
    def is_bare_metal_server_network_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_bare_metal_server_network_interface_id")

    @is_bare_metal_server_network_interface_id.setter
    def is_bare_metal_server_network_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_bare_metal_server_network_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MAC address of the interface. If absent, the value is not known.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this network interface
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bare metal server network interface identifier
        """
        return pulumi.get(self, "network_interface")

    @network_interface.setter
    def network_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_interface", value)

    @_builtins.property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The network interface port speed in Mbps
        """
        return pulumi.get(self, "port_speed")

    @port_speed.setter
    def port_speed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port_speed", value)

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input['IsBareMetalServerNetworkInterfacePrimaryIpArgs']]:
        """
        title: IPv4, The IP address.
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input['IsBareMetalServerNetworkInterfacePrimaryIpArgs']]):
        pulumi.set(self, "primary_ip", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type : [ subnet_reserved_ip ]
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Collection of security groups ids
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the network interface : [ available, deleting, failed, pending ]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of the associated subnet
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsBareMetalServerNetworkInterfaceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsBareMetalServerNetworkInterfaceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of this bare metal server network interface : [ primary, secondary ]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this interface
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vlan", value)


@pulumi.type_token("ibm:index/isBareMetalServerNetworkInterface:IsBareMetalServerNetworkInterface")
class IsBareMetalServerNetworkInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_interface_to_float: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_infrastructure_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 hard_stop: Optional[pulumi.Input[_builtins.bool]] = None,
                 interface_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input[Union['IsBareMetalServerNetworkInterfacePrimaryIpArgs', 'IsBareMetalServerNetworkInterfacePrimaryIpArgsDict']]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsBareMetalServerNetworkInterfaceTimeoutsArgs', 'IsBareMetalServerNetworkInterfaceTimeoutsArgsDict']]] = None,
                 vlan: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a IsBareMetalServerNetworkInterface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_interface_to_float: Indicates if the interface can float to any other server within the same resource_group. The interface will float
               automatically if the network detects a GARP or RARP on another bare metal server in the resource group. Applies only to
               vlan type interfaces.
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
               interface. If true, source IP spoofing is allowed on this interface.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_vlans: Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) interface. A given VLAN can only be in the
               allowed_vlans array for one PCI type adapter per bare metal server.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.bool] enable_infrastructure_nat: If true, the VPC infrastructure performs any needed NAT operations. If false, the packet is passed unmodified to/from
               the network interface, allowing the workload to perform any needed NAT operations.
        :param pulumi.Input[_builtins.bool] hard_stop: Only used for PCI network interfaces, whether to hard/immediately stop server
        :param pulumi.Input[_builtins.str] interface_type: The network interface type: [ pci, vlan, hipersocket ]
        :param pulumi.Input[_builtins.str] name: The user-defined name for this network interface
        :param pulumi.Input[Union['IsBareMetalServerNetworkInterfacePrimaryIpArgs', 'IsBareMetalServerNetworkInterfacePrimaryIpArgsDict']] primary_ip: title: IPv4, The IP address.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Collection of security groups ids
        :param pulumi.Input[_builtins.str] subnet: The id of the associated subnet
        :param pulumi.Input[_builtins.float] vlan: Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this interface
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsBareMetalServerNetworkInterfaceInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsBareMetalServerNetworkInterface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsBareMetalServerNetworkInterfaceInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsBareMetalServerNetworkInterfaceInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_interface_to_float: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_infrastructure_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 hard_stop: Optional[pulumi.Input[_builtins.bool]] = None,
                 interface_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input[Union['IsBareMetalServerNetworkInterfacePrimaryIpArgs', 'IsBareMetalServerNetworkInterfacePrimaryIpArgsDict']]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsBareMetalServerNetworkInterfaceTimeoutsArgs', 'IsBareMetalServerNetworkInterfaceTimeoutsArgsDict']]] = None,
                 vlan: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsBareMetalServerNetworkInterfaceInitArgs.__new__(IsBareMetalServerNetworkInterfaceInitArgs)

            __props__.__dict__["allow_interface_to_float"] = allow_interface_to_float
            __props__.__dict__["allow_ip_spoofing"] = allow_ip_spoofing
            __props__.__dict__["allowed_vlans"] = allowed_vlans
            if bare_metal_server is None and not opts.urn:
                raise TypeError("Missing required property 'bare_metal_server'")
            __props__.__dict__["bare_metal_server"] = bare_metal_server
            __props__.__dict__["enable_infrastructure_nat"] = enable_infrastructure_nat
            __props__.__dict__["hard_stop"] = hard_stop
            __props__.__dict__["interface_type"] = interface_type
            __props__.__dict__["is_bare_metal_server_network_interface_id"] = is_bare_metal_server_network_interface_id
            __props__.__dict__["name"] = name
            __props__.__dict__["primary_ip"] = primary_ip
            __props__.__dict__["security_groups"] = security_groups
            if subnet is None and not opts.urn:
                raise TypeError("Missing required property 'subnet'")
            __props__.__dict__["subnet"] = subnet
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["vlan"] = vlan
            __props__.__dict__["floating_ips"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["mac_address"] = None
            __props__.__dict__["network_interface"] = None
            __props__.__dict__["port_speed"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
        super(IsBareMetalServerNetworkInterface, __self__).__init__(
            'ibm:index/isBareMetalServerNetworkInterface:IsBareMetalServerNetworkInterface',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_interface_to_float: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
            allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
            enable_infrastructure_nat: Optional[pulumi.Input[_builtins.bool]] = None,
            floating_ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerNetworkInterfaceFloatingIpArgs', 'IsBareMetalServerNetworkInterfaceFloatingIpArgsDict']]]]] = None,
            hard_stop: Optional[pulumi.Input[_builtins.bool]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            interface_type: Optional[pulumi.Input[_builtins.str]] = None,
            is_bare_metal_server_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
            mac_address: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_interface: Optional[pulumi.Input[_builtins.str]] = None,
            port_speed: Optional[pulumi.Input[_builtins.float]] = None,
            primary_ip: Optional[pulumi.Input[Union['IsBareMetalServerNetworkInterfacePrimaryIpArgs', 'IsBareMetalServerNetworkInterfacePrimaryIpArgsDict']]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsBareMetalServerNetworkInterfaceTimeoutsArgs', 'IsBareMetalServerNetworkInterfaceTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            vlan: Optional[pulumi.Input[_builtins.float]] = None) -> 'IsBareMetalServerNetworkInterface':
        """
        Get an existing IsBareMetalServerNetworkInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_interface_to_float: Indicates if the interface can float to any other server within the same resource_group. The interface will float
               automatically if the network detects a GARP or RARP on another bare metal server in the resource group. Applies only to
               vlan type interfaces.
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
               interface. If true, source IP spoofing is allowed on this interface.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_vlans: Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) interface. A given VLAN can only be in the
               allowed_vlans array for one PCI type adapter per bare metal server.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.bool] enable_infrastructure_nat: If true, the VPC infrastructure performs any needed NAT operations. If false, the packet is passed unmodified to/from
               the network interface, allowing the workload to perform any needed NAT operations.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerNetworkInterfaceFloatingIpArgs', 'IsBareMetalServerNetworkInterfaceFloatingIpArgsDict']]]] floating_ips: The floating IPs associated with this network interface.
        :param pulumi.Input[_builtins.bool] hard_stop: Only used for PCI network interfaces, whether to hard/immediately stop server
        :param pulumi.Input[_builtins.str] href: The URL for this network interface
        :param pulumi.Input[_builtins.str] interface_type: The network interface type: [ pci, vlan, hipersocket ]
        :param pulumi.Input[_builtins.str] mac_address: The MAC address of the interface. If absent, the value is not known.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this network interface
        :param pulumi.Input[_builtins.str] network_interface: The bare metal server network interface identifier
        :param pulumi.Input[_builtins.float] port_speed: The network interface port speed in Mbps
        :param pulumi.Input[Union['IsBareMetalServerNetworkInterfacePrimaryIpArgs', 'IsBareMetalServerNetworkInterfacePrimaryIpArgsDict']] primary_ip: title: IPv4, The IP address.
        :param pulumi.Input[_builtins.str] resource_type: The resource type : [ subnet_reserved_ip ]
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Collection of security groups ids
        :param pulumi.Input[_builtins.str] status: The status of the network interface : [ available, deleting, failed, pending ]
        :param pulumi.Input[_builtins.str] subnet: The id of the associated subnet
        :param pulumi.Input[_builtins.str] type: The type of this bare metal server network interface : [ primary, secondary ]
        :param pulumi.Input[_builtins.float] vlan: Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this interface
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsBareMetalServerNetworkInterfaceState.__new__(_IsBareMetalServerNetworkInterfaceState)

        __props__.__dict__["allow_interface_to_float"] = allow_interface_to_float
        __props__.__dict__["allow_ip_spoofing"] = allow_ip_spoofing
        __props__.__dict__["allowed_vlans"] = allowed_vlans
        __props__.__dict__["bare_metal_server"] = bare_metal_server
        __props__.__dict__["enable_infrastructure_nat"] = enable_infrastructure_nat
        __props__.__dict__["floating_ips"] = floating_ips
        __props__.__dict__["hard_stop"] = hard_stop
        __props__.__dict__["href"] = href
        __props__.__dict__["interface_type"] = interface_type
        __props__.__dict__["is_bare_metal_server_network_interface_id"] = is_bare_metal_server_network_interface_id
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["name"] = name
        __props__.__dict__["network_interface"] = network_interface
        __props__.__dict__["port_speed"] = port_speed
        __props__.__dict__["primary_ip"] = primary_ip
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["vlan"] = vlan
        return IsBareMetalServerNetworkInterface(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowInterfaceToFloat")
    def allow_interface_to_float(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates if the interface can float to any other server within the same resource_group. The interface will float
        automatically if the network detects a GARP or RARP on another bare metal server in the resource group. Applies only to
        vlan type interfaces.
        """
        return pulumi.get(self, "allow_interface_to_float")

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
        interface. If true, source IP spoofing is allowed on this interface.
        """
        return pulumi.get(self, "allow_ip_spoofing")

    @_builtins.property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> pulumi.Output[Sequence[_builtins.float]]:
        """
        Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) interface. A given VLAN can only be in the
        allowed_vlans array for one PCI type adapter per bare metal server.
        """
        return pulumi.get(self, "allowed_vlans")

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> pulumi.Output[_builtins.str]:
        """
        Bare metal server identifier
        """
        return pulumi.get(self, "bare_metal_server")

    @_builtins.property
    @pulumi.getter(name="enableInfrastructureNat")
    def enable_infrastructure_nat(self) -> pulumi.Output[_builtins.bool]:
        """
        If true, the VPC infrastructure performs any needed NAT operations. If false, the packet is passed unmodified to/from
        the network interface, allowing the workload to perform any needed NAT operations.
        """
        return pulumi.get(self, "enable_infrastructure_nat")

    @_builtins.property
    @pulumi.getter(name="floatingIps")
    def floating_ips(self) -> pulumi.Output[Sequence['outputs.IsBareMetalServerNetworkInterfaceFloatingIp']]:
        """
        The floating IPs associated with this network interface.
        """
        return pulumi.get(self, "floating_ips")

    @_builtins.property
    @pulumi.getter(name="hardStop")
    def hard_stop(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Only used for PCI network interfaces, whether to hard/immediately stop server
        """
        return pulumi.get(self, "hard_stop")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this network interface
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> pulumi.Output[_builtins.str]:
        """
        The network interface type: [ pci, vlan, hipersocket ]
        """
        return pulumi.get(self, "interface_type")

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerNetworkInterfaceId")
    def is_bare_metal_server_network_interface_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_bare_metal_server_network_interface_id")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[_builtins.str]:
        """
        The MAC address of the interface. If absent, the value is not known.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this network interface
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> pulumi.Output[_builtins.str]:
        """
        The bare metal server network interface identifier
        """
        return pulumi.get(self, "network_interface")

    @_builtins.property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> pulumi.Output[_builtins.float]:
        """
        The network interface port speed in Mbps
        """
        return pulumi.get(self, "port_speed")

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> pulumi.Output[Optional['outputs.IsBareMetalServerNetworkInterfacePrimaryIp']]:
        """
        title: IPv4, The IP address.
        """
        return pulumi.get(self, "primary_ip")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type : [ subnet_reserved_ip ]
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Collection of security groups ids
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the network interface : [ available, deleting, failed, pending ]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[_builtins.str]:
        """
        The id of the associated subnet
        """
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsBareMetalServerNetworkInterfaceTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of this bare metal server network interface : [ primary, secondary ]
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[_builtins.float]:
        """
        Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this interface
        """
        return pulumi.get(self, "vlan")

