# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsSecurityGroupTargetArgs', 'IsSecurityGroupTarget']

@pulumi.input_type
class IsSecurityGroupTargetArgs:
    def __init__(__self__, *,
                 security_group: pulumi.Input[_builtins.str],
                 target: pulumi.Input[_builtins.str],
                 is_security_group_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsSecurityGroupTargetTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsSecurityGroupTarget resource.
        :param pulumi.Input[_builtins.str] security_group: Security group id
        :param pulumi.Input[_builtins.str] target: security group target identifier
        """
        pulumi.set(__self__, "security_group", security_group)
        pulumi.set(__self__, "target", target)
        if is_security_group_target_id is not None:
            pulumi.set(__self__, "is_security_group_target_id", is_security_group_target_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> pulumi.Input[_builtins.str]:
        """
        Security group id
        """
        return pulumi.get(self, "security_group")

    @security_group.setter
    def security_group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "security_group", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Input[_builtins.str]:
        """
        security group target identifier
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter(name="isSecurityGroupTargetId")
    def is_security_group_target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_security_group_target_id")

    @is_security_group_target_id.setter
    def is_security_group_target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_security_group_target_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsSecurityGroupTargetTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsSecurityGroupTargetTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsSecurityGroupTargetState:
    def __init__(__self__, *,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 is_security_group_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsSecurityGroupTargetTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering IsSecurityGroupTarget resources.
        :param pulumi.Input[_builtins.str] crn: The CRN for this Security group target
        :param pulumi.Input[_builtins.str] name: Security group target name
        :param pulumi.Input[_builtins.str] resource_type: Resource Type
        :param pulumi.Input[_builtins.str] security_group: Security group id
        :param pulumi.Input[_builtins.str] target: security group target identifier
        """
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if is_security_group_target_id is not None:
            pulumi.set(__self__, "is_security_group_target_id", is_security_group_target_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if security_group is not None:
            pulumi.set(__self__, "security_group", security_group)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this Security group target
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="isSecurityGroupTargetId")
    def is_security_group_target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_security_group_target_id")

    @is_security_group_target_id.setter
    def is_security_group_target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_security_group_target_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Security group target name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource Type
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Security group id
        """
        return pulumi.get(self, "security_group")

    @security_group.setter
    def security_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_group", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        security group target identifier
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsSecurityGroupTargetTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsSecurityGroupTargetTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/isSecurityGroupTarget:IsSecurityGroupTarget")
class IsSecurityGroupTarget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_security_group_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsSecurityGroupTargetTimeoutsArgs', 'IsSecurityGroupTargetTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsSecurityGroupTarget resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] security_group: Security group id
        :param pulumi.Input[_builtins.str] target: security group target identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsSecurityGroupTargetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsSecurityGroupTarget resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsSecurityGroupTargetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsSecurityGroupTargetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_security_group_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsSecurityGroupTargetTimeoutsArgs', 'IsSecurityGroupTargetTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsSecurityGroupTargetArgs.__new__(IsSecurityGroupTargetArgs)

            __props__.__dict__["is_security_group_target_id"] = is_security_group_target_id
            if security_group is None and not opts.urn:
                raise TypeError("Missing required property 'security_group'")
            __props__.__dict__["security_group"] = security_group
            if target is None and not opts.urn:
                raise TypeError("Missing required property 'target'")
            __props__.__dict__["target"] = target
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["resource_type"] = None
        super(IsSecurityGroupTarget, __self__).__init__(
            'ibm:index/isSecurityGroupTarget:IsSecurityGroupTarget',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            is_security_group_target_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            security_group: Optional[pulumi.Input[_builtins.str]] = None,
            target: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsSecurityGroupTargetTimeoutsArgs', 'IsSecurityGroupTargetTimeoutsArgsDict']]] = None) -> 'IsSecurityGroupTarget':
        """
        Get an existing IsSecurityGroupTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: The CRN for this Security group target
        :param pulumi.Input[_builtins.str] name: Security group target name
        :param pulumi.Input[_builtins.str] resource_type: Resource Type
        :param pulumi.Input[_builtins.str] security_group: Security group id
        :param pulumi.Input[_builtins.str] target: security group target identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsSecurityGroupTargetState.__new__(_IsSecurityGroupTargetState)

        __props__.__dict__["crn"] = crn
        __props__.__dict__["is_security_group_target_id"] = is_security_group_target_id
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["security_group"] = security_group
        __props__.__dict__["target"] = target
        __props__.__dict__["timeouts"] = timeouts
        return IsSecurityGroupTarget(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this Security group target
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="isSecurityGroupTargetId")
    def is_security_group_target_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_security_group_target_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Security group target name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        Resource Type
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> pulumi.Output[_builtins.str]:
        """
        Security group id
        """
        return pulumi.get(self, "security_group")

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Output[_builtins.str]:
        """
        security group target identifier
        """
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsSecurityGroupTargetTimeouts']]:
        return pulumi.get(self, "timeouts")

