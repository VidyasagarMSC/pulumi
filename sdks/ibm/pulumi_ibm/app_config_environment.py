# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AppConfigEnvironmentArgs', 'AppConfigEnvironment']

@pulumi.input_type
class AppConfigEnvironmentArgs:
    def __init__(__self__, *,
                 environment_id: pulumi.Input[_builtins.str],
                 guid: pulumi.Input[_builtins.str],
                 app_config_environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 color_code: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppConfigEnvironment resource.
        :param pulumi.Input[_builtins.str] environment_id: Environment Id.
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] color_code: Color code to distinguish the environment.
        :param pulumi.Input[_builtins.str] description: Environment description
        :param pulumi.Input[_builtins.str] name: Environment name.
        :param pulumi.Input[_builtins.str] tags: Tags associated with the environment
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "guid", guid)
        if app_config_environment_id is not None:
            pulumi.set(__self__, "app_config_environment_id", app_config_environment_id)
        if color_code is not None:
            pulumi.set(__self__, "color_code", color_code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Environment Id.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Input[_builtins.str]:
        """
        GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter(name="appConfigEnvironmentId")
    def app_config_environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_config_environment_id")

    @app_config_environment_id.setter
    def app_config_environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_config_environment_id", value)

    @_builtins.property
    @pulumi.getter(name="colorCode")
    def color_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Color code to distinguish the environment.
        """
        return pulumi.get(self, "color_code")

    @color_code.setter
    def color_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "color_code", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Environment description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Environment name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tags associated with the environment
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AppConfigEnvironmentState:
    def __init__(__self__, *,
                 app_config_environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 color_code: Optional[pulumi.Input[_builtins.str]] = None,
                 created_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppConfigEnvironment resources.
        :param pulumi.Input[_builtins.str] color_code: Color code to distinguish the environment.
        :param pulumi.Input[_builtins.str] created_time: Creation time of the environment.
        :param pulumi.Input[_builtins.str] description: Environment description
        :param pulumi.Input[_builtins.str] environment_id: Environment Id.
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] href: Environment URL.
        :param pulumi.Input[_builtins.str] name: Environment name.
        :param pulumi.Input[_builtins.str] tags: Tags associated with the environment
        :param pulumi.Input[_builtins.str] updated_time: Last modified time of the environment data.
        """
        if app_config_environment_id is not None:
            pulumi.set(__self__, "app_config_environment_id", app_config_environment_id)
        if color_code is not None:
            pulumi.set(__self__, "color_code", color_code)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter(name="appConfigEnvironmentId")
    def app_config_environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_config_environment_id")

    @app_config_environment_id.setter
    def app_config_environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_config_environment_id", value)

    @_builtins.property
    @pulumi.getter(name="colorCode")
    def color_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Color code to distinguish the environment.
        """
        return pulumi.get(self, "color_code")

    @color_code.setter
    def color_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "color_code", value)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation time of the environment.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Environment description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Environment Id.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Environment URL.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Environment name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tags associated with the environment
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last modified time of the environment data.
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_time", value)


@pulumi.type_token("ibm:index/appConfigEnvironment:AppConfigEnvironment")
class AppConfigEnvironment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_config_environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 color_code: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppConfigEnvironment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] color_code: Color code to distinguish the environment.
        :param pulumi.Input[_builtins.str] description: Environment description
        :param pulumi.Input[_builtins.str] environment_id: Environment Id.
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] name: Environment name.
        :param pulumi.Input[_builtins.str] tags: Tags associated with the environment
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppConfigEnvironmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppConfigEnvironment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppConfigEnvironmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppConfigEnvironmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_config_environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 color_code: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppConfigEnvironmentArgs.__new__(AppConfigEnvironmentArgs)

            __props__.__dict__["app_config_environment_id"] = app_config_environment_id
            __props__.__dict__["color_code"] = color_code
            __props__.__dict__["description"] = description
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            if guid is None and not opts.urn:
                raise TypeError("Missing required property 'guid'")
            __props__.__dict__["guid"] = guid
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created_time"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["updated_time"] = None
        super(AppConfigEnvironment, __self__).__init__(
            'ibm:index/appConfigEnvironment:AppConfigEnvironment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_config_environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            color_code: Optional[pulumi.Input[_builtins.str]] = None,
            created_time: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            guid: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[_builtins.str]] = None,
            updated_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppConfigEnvironment':
        """
        Get an existing AppConfigEnvironment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] color_code: Color code to distinguish the environment.
        :param pulumi.Input[_builtins.str] created_time: Creation time of the environment.
        :param pulumi.Input[_builtins.str] description: Environment description
        :param pulumi.Input[_builtins.str] environment_id: Environment Id.
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] href: Environment URL.
        :param pulumi.Input[_builtins.str] name: Environment name.
        :param pulumi.Input[_builtins.str] tags: Tags associated with the environment
        :param pulumi.Input[_builtins.str] updated_time: Last modified time of the environment data.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppConfigEnvironmentState.__new__(_AppConfigEnvironmentState)

        __props__.__dict__["app_config_environment_id"] = app_config_environment_id
        __props__.__dict__["color_code"] = color_code
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["description"] = description
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["guid"] = guid
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_time"] = updated_time
        return AppConfigEnvironment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appConfigEnvironmentId")
    def app_config_environment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "app_config_environment_id")

    @_builtins.property
    @pulumi.getter(name="colorCode")
    def color_code(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Color code to distinguish the environment.
        """
        return pulumi.get(self, "color_code")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[_builtins.str]:
        """
        Creation time of the environment.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Environment description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Environment Id.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Output[_builtins.str]:
        """
        GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        Environment URL.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Environment name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Tags associated with the environment
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[_builtins.str]:
        """
        Last modified time of the environment data.
        """
        return pulumi.get(self, "updated_time")

