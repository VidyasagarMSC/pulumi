# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiInstancesResult',
    'AwaitableGetPiInstancesResult',
    'get_pi_instances',
    'get_pi_instances_output',
]

@pulumi.output_type
class GetPiInstancesResult:
    """
    A collection of values returned by getPiInstances.
    """
    def __init__(__self__, id=None, pi_cloud_instance_id=None, pvm_instances=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pvm_instances and not isinstance(pvm_instances, list):
            raise TypeError("Expected argument 'pvm_instances' to be a list")
        pulumi.set(__self__, "pvm_instances", pvm_instances)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="pvmInstances")
    def pvm_instances(self) -> Sequence['outputs.GetPiInstancesPvmInstanceResult']:
        return pulumi.get(self, "pvm_instances")


class AwaitableGetPiInstancesResult(GetPiInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiInstancesResult(
            id=self.id,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pvm_instances=self.pvm_instances)


def get_pi_instances(id: Optional[_builtins.str] = None,
                     pi_cloud_instance_id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiInstancesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiInstances:getPiInstances', __args__, opts=opts, typ=GetPiInstancesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiInstancesResult(
        id=pulumi.get(__ret__, 'id'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pvm_instances=pulumi.get(__ret__, 'pvm_instances'))
def get_pi_instances_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiInstancesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiInstances:getPiInstances', __args__, opts=opts, typ=GetPiInstancesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiInstancesResult(
        id=pulumi.get(__response__, 'id'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pvm_instances=pulumi.get(__response__, 'pvm_instances')))
