# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SmPublicCertificateConfigurationCaLetsEncryptArgs', 'SmPublicCertificateConfigurationCaLetsEncrypt']

@pulumi.input_type
class SmPublicCertificateConfigurationCaLetsEncryptArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 lets_encrypt_environment: pulumi.Input[_builtins.str],
                 lets_encrypt_private_key: pulumi.Input[_builtins.str],
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 lets_encrypt_preferred_chain: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_public_certificate_configuration_ca_lets_encrypt_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SmPublicCertificateConfigurationCaLetsEncrypt resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] lets_encrypt_environment: The configuration of the Let's Encrypt CA environment.
        :param pulumi.Input[_builtins.str] lets_encrypt_private_key: The PEM encoded private key of your Lets Encrypt account.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] lets_encrypt_preferred_chain: Prefer the chain with an issuer matching this Subject Common Name.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "lets_encrypt_environment", lets_encrypt_environment)
        pulumi.set(__self__, "lets_encrypt_private_key", lets_encrypt_private_key)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if lets_encrypt_preferred_chain is not None:
            pulumi.set(__self__, "lets_encrypt_preferred_chain", lets_encrypt_preferred_chain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sm_public_certificate_configuration_ca_lets_encrypt_id is not None:
            pulumi.set(__self__, "sm_public_certificate_configuration_ca_lets_encrypt_id", sm_public_certificate_configuration_ca_lets_encrypt_id)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="letsEncryptEnvironment")
    def lets_encrypt_environment(self) -> pulumi.Input[_builtins.str]:
        """
        The configuration of the Let's Encrypt CA environment.
        """
        return pulumi.get(self, "lets_encrypt_environment")

    @lets_encrypt_environment.setter
    def lets_encrypt_environment(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "lets_encrypt_environment", value)

    @_builtins.property
    @pulumi.getter(name="letsEncryptPrivateKey")
    def lets_encrypt_private_key(self) -> pulumi.Input[_builtins.str]:
        """
        The PEM encoded private key of your Lets Encrypt account.
        """
        return pulumi.get(self, "lets_encrypt_private_key")

    @lets_encrypt_private_key.setter
    def lets_encrypt_private_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "lets_encrypt_private_key", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="letsEncryptPreferredChain")
    def lets_encrypt_preferred_chain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefer the chain with an issuer matching this Subject Common Name.
        """
        return pulumi.get(self, "lets_encrypt_preferred_chain")

    @lets_encrypt_preferred_chain.setter
    def lets_encrypt_preferred_chain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lets_encrypt_preferred_chain", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
        your name or location, as an name for your secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="smPublicCertificateConfigurationCaLetsEncryptId")
    def sm_public_certificate_configuration_ca_lets_encrypt_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_public_certificate_configuration_ca_lets_encrypt_id")

    @sm_public_certificate_configuration_ca_lets_encrypt_id.setter
    def sm_public_certificate_configuration_ca_lets_encrypt_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_public_certificate_configuration_ca_lets_encrypt_id", value)


@pulumi.input_type
class _SmPublicCertificateConfigurationCaLetsEncryptState:
    def __init__(__self__, *,
                 config_type: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lets_encrypt_environment: Optional[pulumi.Input[_builtins.str]] = None,
                 lets_encrypt_preferred_chain: Optional[pulumi.Input[_builtins.str]] = None,
                 lets_encrypt_private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_type: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_public_certificate_configuration_ca_lets_encrypt_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SmPublicCertificateConfigurationCaLetsEncrypt resources.
        :param pulumi.Input[_builtins.str] config_type: The configuration type.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] lets_encrypt_environment: The configuration of the Let's Encrypt CA environment.
        :param pulumi.Input[_builtins.str] lets_encrypt_preferred_chain: Prefer the chain with an issuer matching this Subject Common Name.
        :param pulumi.Input[_builtins.str] lets_encrypt_private_key: The PEM encoded private key of your Lets Encrypt account.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_type: The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
               key-value, and user credentials.
        """
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if lets_encrypt_environment is not None:
            pulumi.set(__self__, "lets_encrypt_environment", lets_encrypt_environment)
        if lets_encrypt_preferred_chain is not None:
            pulumi.set(__self__, "lets_encrypt_preferred_chain", lets_encrypt_preferred_chain)
        if lets_encrypt_private_key is not None:
            pulumi.set(__self__, "lets_encrypt_private_key", lets_encrypt_private_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if sm_public_certificate_configuration_ca_lets_encrypt_id is not None:
            pulumi.set(__self__, "sm_public_certificate_configuration_ca_lets_encrypt_id", sm_public_certificate_configuration_ca_lets_encrypt_id)

    @_builtins.property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The configuration type.
        """
        return pulumi.get(self, "config_type")

    @config_type.setter
    def config_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_type", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="letsEncryptEnvironment")
    def lets_encrypt_environment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The configuration of the Let's Encrypt CA environment.
        """
        return pulumi.get(self, "lets_encrypt_environment")

    @lets_encrypt_environment.setter
    def lets_encrypt_environment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lets_encrypt_environment", value)

    @_builtins.property
    @pulumi.getter(name="letsEncryptPreferredChain")
    def lets_encrypt_preferred_chain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefer the chain with an issuer matching this Subject Common Name.
        """
        return pulumi.get(self, "lets_encrypt_preferred_chain")

    @lets_encrypt_preferred_chain.setter
    def lets_encrypt_preferred_chain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lets_encrypt_preferred_chain", value)

    @_builtins.property
    @pulumi.getter(name="letsEncryptPrivateKey")
    def lets_encrypt_private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PEM encoded private key of your Lets Encrypt account.
        """
        return pulumi.get(self, "lets_encrypt_private_key")

    @lets_encrypt_private_key.setter
    def lets_encrypt_private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lets_encrypt_private_key", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
        your name or location, as an name for your secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
        key-value, and user credentials.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_type", value)

    @_builtins.property
    @pulumi.getter(name="smPublicCertificateConfigurationCaLetsEncryptId")
    def sm_public_certificate_configuration_ca_lets_encrypt_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_public_certificate_configuration_ca_lets_encrypt_id")

    @sm_public_certificate_configuration_ca_lets_encrypt_id.setter
    def sm_public_certificate_configuration_ca_lets_encrypt_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_public_certificate_configuration_ca_lets_encrypt_id", value)


@pulumi.type_token("ibm:index/smPublicCertificateConfigurationCaLetsEncrypt:SmPublicCertificateConfigurationCaLetsEncrypt")
class SmPublicCertificateConfigurationCaLetsEncrypt(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lets_encrypt_environment: Optional[pulumi.Input[_builtins.str]] = None,
                 lets_encrypt_preferred_chain: Optional[pulumi.Input[_builtins.str]] = None,
                 lets_encrypt_private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_public_certificate_configuration_ca_lets_encrypt_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SmPublicCertificateConfigurationCaLetsEncrypt resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] lets_encrypt_environment: The configuration of the Let's Encrypt CA environment.
        :param pulumi.Input[_builtins.str] lets_encrypt_preferred_chain: Prefer the chain with an issuer matching this Subject Common Name.
        :param pulumi.Input[_builtins.str] lets_encrypt_private_key: The PEM encoded private key of your Lets Encrypt account.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SmPublicCertificateConfigurationCaLetsEncryptArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SmPublicCertificateConfigurationCaLetsEncrypt resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SmPublicCertificateConfigurationCaLetsEncryptArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SmPublicCertificateConfigurationCaLetsEncryptArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lets_encrypt_environment: Optional[pulumi.Input[_builtins.str]] = None,
                 lets_encrypt_preferred_chain: Optional[pulumi.Input[_builtins.str]] = None,
                 lets_encrypt_private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_public_certificate_configuration_ca_lets_encrypt_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SmPublicCertificateConfigurationCaLetsEncryptArgs.__new__(SmPublicCertificateConfigurationCaLetsEncryptArgs)

            __props__.__dict__["endpoint_type"] = endpoint_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if lets_encrypt_environment is None and not opts.urn:
                raise TypeError("Missing required property 'lets_encrypt_environment'")
            __props__.__dict__["lets_encrypt_environment"] = lets_encrypt_environment
            __props__.__dict__["lets_encrypt_preferred_chain"] = lets_encrypt_preferred_chain
            if lets_encrypt_private_key is None and not opts.urn:
                raise TypeError("Missing required property 'lets_encrypt_private_key'")
            __props__.__dict__["lets_encrypt_private_key"] = None if lets_encrypt_private_key is None else pulumi.Output.secret(lets_encrypt_private_key)
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["sm_public_certificate_configuration_ca_lets_encrypt_id"] = sm_public_certificate_configuration_ca_lets_encrypt_id
            __props__.__dict__["config_type"] = None
            __props__.__dict__["secret_type"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["letsEncryptPrivateKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SmPublicCertificateConfigurationCaLetsEncrypt, __self__).__init__(
            'ibm:index/smPublicCertificateConfigurationCaLetsEncrypt:SmPublicCertificateConfigurationCaLetsEncrypt',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_type: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            lets_encrypt_environment: Optional[pulumi.Input[_builtins.str]] = None,
            lets_encrypt_preferred_chain: Optional[pulumi.Input[_builtins.str]] = None,
            lets_encrypt_private_key: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            secret_type: Optional[pulumi.Input[_builtins.str]] = None,
            sm_public_certificate_configuration_ca_lets_encrypt_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SmPublicCertificateConfigurationCaLetsEncrypt':
        """
        Get an existing SmPublicCertificateConfigurationCaLetsEncrypt resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] config_type: The configuration type.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] lets_encrypt_environment: The configuration of the Let's Encrypt CA environment.
        :param pulumi.Input[_builtins.str] lets_encrypt_preferred_chain: Prefer the chain with an issuer matching this Subject Common Name.
        :param pulumi.Input[_builtins.str] lets_encrypt_private_key: The PEM encoded private key of your Lets Encrypt account.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_type: The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
               key-value, and user credentials.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SmPublicCertificateConfigurationCaLetsEncryptState.__new__(_SmPublicCertificateConfigurationCaLetsEncryptState)

        __props__.__dict__["config_type"] = config_type
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["lets_encrypt_environment"] = lets_encrypt_environment
        __props__.__dict__["lets_encrypt_preferred_chain"] = lets_encrypt_preferred_chain
        __props__.__dict__["lets_encrypt_private_key"] = lets_encrypt_private_key
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["secret_type"] = secret_type
        __props__.__dict__["sm_public_certificate_configuration_ca_lets_encrypt_id"] = sm_public_certificate_configuration_ca_lets_encrypt_id
        return SmPublicCertificateConfigurationCaLetsEncrypt(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="configType")
    def config_type(self) -> pulumi.Output[_builtins.str]:
        """
        The configuration type.
        """
        return pulumi.get(self, "config_type")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="letsEncryptEnvironment")
    def lets_encrypt_environment(self) -> pulumi.Output[_builtins.str]:
        """
        The configuration of the Let's Encrypt CA environment.
        """
        return pulumi.get(self, "lets_encrypt_environment")

    @_builtins.property
    @pulumi.getter(name="letsEncryptPreferredChain")
    def lets_encrypt_preferred_chain(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Prefer the chain with an issuer matching this Subject Common Name.
        """
        return pulumi.get(self, "lets_encrypt_preferred_chain")

    @_builtins.property
    @pulumi.getter(name="letsEncryptPrivateKey")
    def lets_encrypt_private_key(self) -> pulumi.Output[_builtins.str]:
        """
        The PEM encoded private key of your Lets Encrypt account.
        """
        return pulumi.get(self, "lets_encrypt_private_key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
        your name or location, as an name for your secret.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> pulumi.Output[_builtins.str]:
        """
        The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
        key-value, and user credentials.
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="smPublicCertificateConfigurationCaLetsEncryptId")
    def sm_public_certificate_configuration_ca_lets_encrypt_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "sm_public_certificate_configuration_ca_lets_encrypt_id")

