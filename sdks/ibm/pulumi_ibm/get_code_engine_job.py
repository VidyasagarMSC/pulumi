# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCodeEngineJobResult',
    'AwaitableGetCodeEngineJobResult',
    'get_code_engine_job',
    'get_code_engine_job_output',
]

@pulumi.output_type
class GetCodeEngineJobResult:
    """
    A collection of values returned by getCodeEngineJob.
    """
    def __init__(__self__, build=None, build_run=None, computed_env_variables=None, created_at=None, entity_tag=None, href=None, id=None, image_reference=None, image_secret=None, job_id=None, name=None, project_id=None, region=None, resource_type=None, run_arguments=None, run_as_user=None, run_commands=None, run_env_variables=None, run_mode=None, run_service_account=None, run_volume_mounts=None, scale_array_spec=None, scale_cpu_limit=None, scale_ephemeral_storage_limit=None, scale_max_execution_time=None, scale_memory_limit=None, scale_retry_limit=None):
        if build and not isinstance(build, str):
            raise TypeError("Expected argument 'build' to be a str")
        pulumi.set(__self__, "build", build)
        if build_run and not isinstance(build_run, str):
            raise TypeError("Expected argument 'build_run' to be a str")
        pulumi.set(__self__, "build_run", build_run)
        if computed_env_variables and not isinstance(computed_env_variables, list):
            raise TypeError("Expected argument 'computed_env_variables' to be a list")
        pulumi.set(__self__, "computed_env_variables", computed_env_variables)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if entity_tag and not isinstance(entity_tag, str):
            raise TypeError("Expected argument 'entity_tag' to be a str")
        pulumi.set(__self__, "entity_tag", entity_tag)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_reference and not isinstance(image_reference, str):
            raise TypeError("Expected argument 'image_reference' to be a str")
        pulumi.set(__self__, "image_reference", image_reference)
        if image_secret and not isinstance(image_secret, str):
            raise TypeError("Expected argument 'image_secret' to be a str")
        pulumi.set(__self__, "image_secret", image_secret)
        if job_id and not isinstance(job_id, str):
            raise TypeError("Expected argument 'job_id' to be a str")
        pulumi.set(__self__, "job_id", job_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if run_arguments and not isinstance(run_arguments, list):
            raise TypeError("Expected argument 'run_arguments' to be a list")
        pulumi.set(__self__, "run_arguments", run_arguments)
        if run_as_user and not isinstance(run_as_user, float):
            raise TypeError("Expected argument 'run_as_user' to be a float")
        pulumi.set(__self__, "run_as_user", run_as_user)
        if run_commands and not isinstance(run_commands, list):
            raise TypeError("Expected argument 'run_commands' to be a list")
        pulumi.set(__self__, "run_commands", run_commands)
        if run_env_variables and not isinstance(run_env_variables, list):
            raise TypeError("Expected argument 'run_env_variables' to be a list")
        pulumi.set(__self__, "run_env_variables", run_env_variables)
        if run_mode and not isinstance(run_mode, str):
            raise TypeError("Expected argument 'run_mode' to be a str")
        pulumi.set(__self__, "run_mode", run_mode)
        if run_service_account and not isinstance(run_service_account, str):
            raise TypeError("Expected argument 'run_service_account' to be a str")
        pulumi.set(__self__, "run_service_account", run_service_account)
        if run_volume_mounts and not isinstance(run_volume_mounts, list):
            raise TypeError("Expected argument 'run_volume_mounts' to be a list")
        pulumi.set(__self__, "run_volume_mounts", run_volume_mounts)
        if scale_array_spec and not isinstance(scale_array_spec, str):
            raise TypeError("Expected argument 'scale_array_spec' to be a str")
        pulumi.set(__self__, "scale_array_spec", scale_array_spec)
        if scale_cpu_limit and not isinstance(scale_cpu_limit, str):
            raise TypeError("Expected argument 'scale_cpu_limit' to be a str")
        pulumi.set(__self__, "scale_cpu_limit", scale_cpu_limit)
        if scale_ephemeral_storage_limit and not isinstance(scale_ephemeral_storage_limit, str):
            raise TypeError("Expected argument 'scale_ephemeral_storage_limit' to be a str")
        pulumi.set(__self__, "scale_ephemeral_storage_limit", scale_ephemeral_storage_limit)
        if scale_max_execution_time and not isinstance(scale_max_execution_time, float):
            raise TypeError("Expected argument 'scale_max_execution_time' to be a float")
        pulumi.set(__self__, "scale_max_execution_time", scale_max_execution_time)
        if scale_memory_limit and not isinstance(scale_memory_limit, str):
            raise TypeError("Expected argument 'scale_memory_limit' to be a str")
        pulumi.set(__self__, "scale_memory_limit", scale_memory_limit)
        if scale_retry_limit and not isinstance(scale_retry_limit, float):
            raise TypeError("Expected argument 'scale_retry_limit' to be a float")
        pulumi.set(__self__, "scale_retry_limit", scale_retry_limit)

    @_builtins.property
    @pulumi.getter
    def build(self) -> _builtins.str:
        return pulumi.get(self, "build")

    @_builtins.property
    @pulumi.getter(name="buildRun")
    def build_run(self) -> _builtins.str:
        return pulumi.get(self, "build_run")

    @_builtins.property
    @pulumi.getter(name="computedEnvVariables")
    def computed_env_variables(self) -> Sequence['outputs.GetCodeEngineJobComputedEnvVariableResult']:
        return pulumi.get(self, "computed_env_variables")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> _builtins.str:
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> _builtins.str:
        return pulumi.get(self, "image_reference")

    @_builtins.property
    @pulumi.getter(name="imageSecret")
    def image_secret(self) -> _builtins.str:
        return pulumi.get(self, "image_secret")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="runArguments")
    def run_arguments(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "run_arguments")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> _builtins.float:
        return pulumi.get(self, "run_as_user")

    @_builtins.property
    @pulumi.getter(name="runCommands")
    def run_commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "run_commands")

    @_builtins.property
    @pulumi.getter(name="runEnvVariables")
    def run_env_variables(self) -> Sequence['outputs.GetCodeEngineJobRunEnvVariableResult']:
        return pulumi.get(self, "run_env_variables")

    @_builtins.property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> _builtins.str:
        return pulumi.get(self, "run_mode")

    @_builtins.property
    @pulumi.getter(name="runServiceAccount")
    def run_service_account(self) -> _builtins.str:
        return pulumi.get(self, "run_service_account")

    @_builtins.property
    @pulumi.getter(name="runVolumeMounts")
    def run_volume_mounts(self) -> Sequence['outputs.GetCodeEngineJobRunVolumeMountResult']:
        return pulumi.get(self, "run_volume_mounts")

    @_builtins.property
    @pulumi.getter(name="scaleArraySpec")
    def scale_array_spec(self) -> _builtins.str:
        return pulumi.get(self, "scale_array_spec")

    @_builtins.property
    @pulumi.getter(name="scaleCpuLimit")
    def scale_cpu_limit(self) -> _builtins.str:
        return pulumi.get(self, "scale_cpu_limit")

    @_builtins.property
    @pulumi.getter(name="scaleEphemeralStorageLimit")
    def scale_ephemeral_storage_limit(self) -> _builtins.str:
        return pulumi.get(self, "scale_ephemeral_storage_limit")

    @_builtins.property
    @pulumi.getter(name="scaleMaxExecutionTime")
    def scale_max_execution_time(self) -> _builtins.float:
        return pulumi.get(self, "scale_max_execution_time")

    @_builtins.property
    @pulumi.getter(name="scaleMemoryLimit")
    def scale_memory_limit(self) -> _builtins.str:
        return pulumi.get(self, "scale_memory_limit")

    @_builtins.property
    @pulumi.getter(name="scaleRetryLimit")
    def scale_retry_limit(self) -> _builtins.float:
        return pulumi.get(self, "scale_retry_limit")


class AwaitableGetCodeEngineJobResult(GetCodeEngineJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCodeEngineJobResult(
            build=self.build,
            build_run=self.build_run,
            computed_env_variables=self.computed_env_variables,
            created_at=self.created_at,
            entity_tag=self.entity_tag,
            href=self.href,
            id=self.id,
            image_reference=self.image_reference,
            image_secret=self.image_secret,
            job_id=self.job_id,
            name=self.name,
            project_id=self.project_id,
            region=self.region,
            resource_type=self.resource_type,
            run_arguments=self.run_arguments,
            run_as_user=self.run_as_user,
            run_commands=self.run_commands,
            run_env_variables=self.run_env_variables,
            run_mode=self.run_mode,
            run_service_account=self.run_service_account,
            run_volume_mounts=self.run_volume_mounts,
            scale_array_spec=self.scale_array_spec,
            scale_cpu_limit=self.scale_cpu_limit,
            scale_ephemeral_storage_limit=self.scale_ephemeral_storage_limit,
            scale_max_execution_time=self.scale_max_execution_time,
            scale_memory_limit=self.scale_memory_limit,
            scale_retry_limit=self.scale_retry_limit)


def get_code_engine_job(id: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        project_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCodeEngineJobResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCodeEngineJob:getCodeEngineJob', __args__, opts=opts, typ=GetCodeEngineJobResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCodeEngineJobResult(
        build=pulumi.get(__ret__, 'build'),
        build_run=pulumi.get(__ret__, 'build_run'),
        computed_env_variables=pulumi.get(__ret__, 'computed_env_variables'),
        created_at=pulumi.get(__ret__, 'created_at'),
        entity_tag=pulumi.get(__ret__, 'entity_tag'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        image_reference=pulumi.get(__ret__, 'image_reference'),
        image_secret=pulumi.get(__ret__, 'image_secret'),
        job_id=pulumi.get(__ret__, 'job_id'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        run_arguments=pulumi.get(__ret__, 'run_arguments'),
        run_as_user=pulumi.get(__ret__, 'run_as_user'),
        run_commands=pulumi.get(__ret__, 'run_commands'),
        run_env_variables=pulumi.get(__ret__, 'run_env_variables'),
        run_mode=pulumi.get(__ret__, 'run_mode'),
        run_service_account=pulumi.get(__ret__, 'run_service_account'),
        run_volume_mounts=pulumi.get(__ret__, 'run_volume_mounts'),
        scale_array_spec=pulumi.get(__ret__, 'scale_array_spec'),
        scale_cpu_limit=pulumi.get(__ret__, 'scale_cpu_limit'),
        scale_ephemeral_storage_limit=pulumi.get(__ret__, 'scale_ephemeral_storage_limit'),
        scale_max_execution_time=pulumi.get(__ret__, 'scale_max_execution_time'),
        scale_memory_limit=pulumi.get(__ret__, 'scale_memory_limit'),
        scale_retry_limit=pulumi.get(__ret__, 'scale_retry_limit'))
def get_code_engine_job_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name: Optional[pulumi.Input[_builtins.str]] = None,
                               project_id: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCodeEngineJobResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCodeEngineJob:getCodeEngineJob', __args__, opts=opts, typ=GetCodeEngineJobResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCodeEngineJobResult(
        build=pulumi.get(__response__, 'build'),
        build_run=pulumi.get(__response__, 'build_run'),
        computed_env_variables=pulumi.get(__response__, 'computed_env_variables'),
        created_at=pulumi.get(__response__, 'created_at'),
        entity_tag=pulumi.get(__response__, 'entity_tag'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        image_reference=pulumi.get(__response__, 'image_reference'),
        image_secret=pulumi.get(__response__, 'image_secret'),
        job_id=pulumi.get(__response__, 'job_id'),
        name=pulumi.get(__response__, 'name'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        run_arguments=pulumi.get(__response__, 'run_arguments'),
        run_as_user=pulumi.get(__response__, 'run_as_user'),
        run_commands=pulumi.get(__response__, 'run_commands'),
        run_env_variables=pulumi.get(__response__, 'run_env_variables'),
        run_mode=pulumi.get(__response__, 'run_mode'),
        run_service_account=pulumi.get(__response__, 'run_service_account'),
        run_volume_mounts=pulumi.get(__response__, 'run_volume_mounts'),
        scale_array_spec=pulumi.get(__response__, 'scale_array_spec'),
        scale_cpu_limit=pulumi.get(__response__, 'scale_cpu_limit'),
        scale_ephemeral_storage_limit=pulumi.get(__response__, 'scale_ephemeral_storage_limit'),
        scale_max_execution_time=pulumi.get(__response__, 'scale_max_execution_time'),
        scale_memory_limit=pulumi.get(__response__, 'scale_memory_limit'),
        scale_retry_limit=pulumi.get(__response__, 'scale_retry_limit')))
