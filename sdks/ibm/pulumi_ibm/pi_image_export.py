# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiImageExportArgs', 'PiImageExport']

@pulumi.input_type
class PiImageExportArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_image_access_key: pulumi.Input[_builtins.str],
                 pi_image_bucket_name: pulumi.Input[_builtins.str],
                 pi_image_bucket_region: pulumi.Input[_builtins.str],
                 pi_image_id: pulumi.Input[_builtins.str],
                 pi_image_secret_key: pulumi.Input[_builtins.str],
                 pi_image_export_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiImageExportTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiImageExport resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_image_access_key: Cloud Object Storage access key; required for buckets with private access
        :param pulumi.Input[_builtins.str] pi_image_bucket_name: Cloud Object Storage bucket name; bucket-name[/optional/folder]
        :param pulumi.Input[_builtins.str] pi_image_bucket_region: Cloud Object Storage region
        :param pulumi.Input[_builtins.str] pi_image_id: Instance image id
        :param pulumi.Input[_builtins.str] pi_image_secret_key: Cloud Object Storage secret key; required for buckets with private access
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_image_access_key", pi_image_access_key)
        pulumi.set(__self__, "pi_image_bucket_name", pi_image_bucket_name)
        pulumi.set(__self__, "pi_image_bucket_region", pi_image_bucket_region)
        pulumi.set(__self__, "pi_image_id", pi_image_id)
        pulumi.set(__self__, "pi_image_secret_key", pi_image_secret_key)
        if pi_image_export_id is not None:
            pulumi.set(__self__, "pi_image_export_id", pi_image_export_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piImageAccessKey")
    def pi_image_access_key(self) -> pulumi.Input[_builtins.str]:
        """
        Cloud Object Storage access key; required for buckets with private access
        """
        return pulumi.get(self, "pi_image_access_key")

    @pi_image_access_key.setter
    def pi_image_access_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_image_access_key", value)

    @_builtins.property
    @pulumi.getter(name="piImageBucketName")
    def pi_image_bucket_name(self) -> pulumi.Input[_builtins.str]:
        """
        Cloud Object Storage bucket name; bucket-name[/optional/folder]
        """
        return pulumi.get(self, "pi_image_bucket_name")

    @pi_image_bucket_name.setter
    def pi_image_bucket_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_image_bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="piImageBucketRegion")
    def pi_image_bucket_region(self) -> pulumi.Input[_builtins.str]:
        """
        Cloud Object Storage region
        """
        return pulumi.get(self, "pi_image_bucket_region")

    @pi_image_bucket_region.setter
    def pi_image_bucket_region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_image_bucket_region", value)

    @_builtins.property
    @pulumi.getter(name="piImageId")
    def pi_image_id(self) -> pulumi.Input[_builtins.str]:
        """
        Instance image id
        """
        return pulumi.get(self, "pi_image_id")

    @pi_image_id.setter
    def pi_image_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_image_id", value)

    @_builtins.property
    @pulumi.getter(name="piImageSecretKey")
    def pi_image_secret_key(self) -> pulumi.Input[_builtins.str]:
        """
        Cloud Object Storage secret key; required for buckets with private access
        """
        return pulumi.get(self, "pi_image_secret_key")

    @pi_image_secret_key.setter
    def pi_image_secret_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_image_secret_key", value)

    @_builtins.property
    @pulumi.getter(name="piImageExportId")
    def pi_image_export_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_image_export_id")

    @pi_image_export_id.setter
    def pi_image_export_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_export_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiImageExportTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiImageExportTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiImageExportState:
    def __init__(__self__, *,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_region: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_export_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiImageExportTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiImageExport resources.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_image_access_key: Cloud Object Storage access key; required for buckets with private access
        :param pulumi.Input[_builtins.str] pi_image_bucket_name: Cloud Object Storage bucket name; bucket-name[/optional/folder]
        :param pulumi.Input[_builtins.str] pi_image_bucket_region: Cloud Object Storage region
        :param pulumi.Input[_builtins.str] pi_image_id: Instance image id
        :param pulumi.Input[_builtins.str] pi_image_secret_key: Cloud Object Storage secret key; required for buckets with private access
        """
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_image_access_key is not None:
            pulumi.set(__self__, "pi_image_access_key", pi_image_access_key)
        if pi_image_bucket_name is not None:
            pulumi.set(__self__, "pi_image_bucket_name", pi_image_bucket_name)
        if pi_image_bucket_region is not None:
            pulumi.set(__self__, "pi_image_bucket_region", pi_image_bucket_region)
        if pi_image_export_id is not None:
            pulumi.set(__self__, "pi_image_export_id", pi_image_export_id)
        if pi_image_id is not None:
            pulumi.set(__self__, "pi_image_id", pi_image_id)
        if pi_image_secret_key is not None:
            pulumi.set(__self__, "pi_image_secret_key", pi_image_secret_key)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piImageAccessKey")
    def pi_image_access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage access key; required for buckets with private access
        """
        return pulumi.get(self, "pi_image_access_key")

    @pi_image_access_key.setter
    def pi_image_access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_access_key", value)

    @_builtins.property
    @pulumi.getter(name="piImageBucketName")
    def pi_image_bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage bucket name; bucket-name[/optional/folder]
        """
        return pulumi.get(self, "pi_image_bucket_name")

    @pi_image_bucket_name.setter
    def pi_image_bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="piImageBucketRegion")
    def pi_image_bucket_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage region
        """
        return pulumi.get(self, "pi_image_bucket_region")

    @pi_image_bucket_region.setter
    def pi_image_bucket_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_bucket_region", value)

    @_builtins.property
    @pulumi.getter(name="piImageExportId")
    def pi_image_export_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_image_export_id")

    @pi_image_export_id.setter
    def pi_image_export_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_export_id", value)

    @_builtins.property
    @pulumi.getter(name="piImageId")
    def pi_image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance image id
        """
        return pulumi.get(self, "pi_image_id")

    @pi_image_id.setter
    def pi_image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_id", value)

    @_builtins.property
    @pulumi.getter(name="piImageSecretKey")
    def pi_image_secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage secret key; required for buckets with private access
        """
        return pulumi.get(self, "pi_image_secret_key")

    @pi_image_secret_key.setter
    def pi_image_secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_secret_key", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiImageExportTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiImageExportTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piImageExport:PiImageExport")
class PiImageExport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_region: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_export_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiImageExportTimeoutsArgs', 'PiImageExportTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiImageExport resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_image_access_key: Cloud Object Storage access key; required for buckets with private access
        :param pulumi.Input[_builtins.str] pi_image_bucket_name: Cloud Object Storage bucket name; bucket-name[/optional/folder]
        :param pulumi.Input[_builtins.str] pi_image_bucket_region: Cloud Object Storage region
        :param pulumi.Input[_builtins.str] pi_image_id: Instance image id
        :param pulumi.Input[_builtins.str] pi_image_secret_key: Cloud Object Storage secret key; required for buckets with private access
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiImageExportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiImageExport resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiImageExportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiImageExportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_region: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_export_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiImageExportTimeoutsArgs', 'PiImageExportTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiImageExportArgs.__new__(PiImageExportArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            if pi_image_access_key is None and not opts.urn:
                raise TypeError("Missing required property 'pi_image_access_key'")
            __props__.__dict__["pi_image_access_key"] = None if pi_image_access_key is None else pulumi.Output.secret(pi_image_access_key)
            if pi_image_bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_image_bucket_name'")
            __props__.__dict__["pi_image_bucket_name"] = pi_image_bucket_name
            if pi_image_bucket_region is None and not opts.urn:
                raise TypeError("Missing required property 'pi_image_bucket_region'")
            __props__.__dict__["pi_image_bucket_region"] = pi_image_bucket_region
            __props__.__dict__["pi_image_export_id"] = pi_image_export_id
            if pi_image_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_image_id'")
            __props__.__dict__["pi_image_id"] = pi_image_id
            if pi_image_secret_key is None and not opts.urn:
                raise TypeError("Missing required property 'pi_image_secret_key'")
            __props__.__dict__["pi_image_secret_key"] = None if pi_image_secret_key is None else pulumi.Output.secret(pi_image_secret_key)
            __props__.__dict__["timeouts"] = timeouts
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["piImageAccessKey", "piImageSecretKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(PiImageExport, __self__).__init__(
            'ibm:index/piImageExport:PiImageExport',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_access_key: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_bucket_region: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_export_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiImageExportTimeoutsArgs', 'PiImageExportTimeoutsArgsDict']]] = None) -> 'PiImageExport':
        """
        Get an existing PiImageExport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_image_access_key: Cloud Object Storage access key; required for buckets with private access
        :param pulumi.Input[_builtins.str] pi_image_bucket_name: Cloud Object Storage bucket name; bucket-name[/optional/folder]
        :param pulumi.Input[_builtins.str] pi_image_bucket_region: Cloud Object Storage region
        :param pulumi.Input[_builtins.str] pi_image_id: Instance image id
        :param pulumi.Input[_builtins.str] pi_image_secret_key: Cloud Object Storage secret key; required for buckets with private access
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiImageExportState.__new__(_PiImageExportState)

        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_image_access_key"] = pi_image_access_key
        __props__.__dict__["pi_image_bucket_name"] = pi_image_bucket_name
        __props__.__dict__["pi_image_bucket_region"] = pi_image_bucket_region
        __props__.__dict__["pi_image_export_id"] = pi_image_export_id
        __props__.__dict__["pi_image_id"] = pi_image_id
        __props__.__dict__["pi_image_secret_key"] = pi_image_secret_key
        __props__.__dict__["timeouts"] = timeouts
        return PiImageExport(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piImageAccessKey")
    def pi_image_access_key(self) -> pulumi.Output[_builtins.str]:
        """
        Cloud Object Storage access key; required for buckets with private access
        """
        return pulumi.get(self, "pi_image_access_key")

    @_builtins.property
    @pulumi.getter(name="piImageBucketName")
    def pi_image_bucket_name(self) -> pulumi.Output[_builtins.str]:
        """
        Cloud Object Storage bucket name; bucket-name[/optional/folder]
        """
        return pulumi.get(self, "pi_image_bucket_name")

    @_builtins.property
    @pulumi.getter(name="piImageBucketRegion")
    def pi_image_bucket_region(self) -> pulumi.Output[_builtins.str]:
        """
        Cloud Object Storage region
        """
        return pulumi.get(self, "pi_image_bucket_region")

    @_builtins.property
    @pulumi.getter(name="piImageExportId")
    def pi_image_export_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_image_export_id")

    @_builtins.property
    @pulumi.getter(name="piImageId")
    def pi_image_id(self) -> pulumi.Output[_builtins.str]:
        """
        Instance image id
        """
        return pulumi.get(self, "pi_image_id")

    @_builtins.property
    @pulumi.getter(name="piImageSecretKey")
    def pi_image_secret_key(self) -> pulumi.Output[_builtins.str]:
        """
        Cloud Object Storage secret key; required for buckets with private access
        """
        return pulumi.get(self, "pi_image_secret_key")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiImageExportTimeouts']]:
        return pulumi.get(self, "timeouts")

