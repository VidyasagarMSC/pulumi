# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDnsZonesResult',
    'AwaitableGetDnsZonesResult',
    'get_dns_zones',
    'get_dns_zones_output',
]

@pulumi.output_type
class GetDnsZonesResult:
    """
    A collection of values returned by getDnsZones.
    """
    def __init__(__self__, dns_zones=None, id=None, instance_id=None):
        if dns_zones and not isinstance(dns_zones, list):
            raise TypeError("Expected argument 'dns_zones' to be a list")
        pulumi.set(__self__, "dns_zones", dns_zones)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)

    @_builtins.property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Sequence['outputs.GetDnsZonesDnsZoneResult']:
        return pulumi.get(self, "dns_zones")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")


class AwaitableGetDnsZonesResult(GetDnsZonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDnsZonesResult(
            dns_zones=self.dns_zones,
            id=self.id,
            instance_id=self.instance_id)


def get_dns_zones(id: Optional[_builtins.str] = None,
                  instance_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDnsZonesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDnsZones:getDnsZones', __args__, opts=opts, typ=GetDnsZonesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDnsZonesResult(
        dns_zones=pulumi.get(__ret__, 'dns_zones'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'))
def get_dns_zones_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDnsZonesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDnsZones:getDnsZones', __args__, opts=opts, typ=GetDnsZonesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDnsZonesResult(
        dns_zones=pulumi.get(__response__, 'dns_zones'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id')))
