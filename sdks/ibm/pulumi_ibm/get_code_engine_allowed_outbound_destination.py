# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCodeEngineAllowedOutboundDestinationResult',
    'AwaitableGetCodeEngineAllowedOutboundDestinationResult',
    'get_code_engine_allowed_outbound_destination',
    'get_code_engine_allowed_outbound_destination_output',
]

@pulumi.output_type
class GetCodeEngineAllowedOutboundDestinationResult:
    """
    A collection of values returned by getCodeEngineAllowedOutboundDestination.
    """
    def __init__(__self__, cidr_block=None, entity_tag=None, id=None, name=None, project_id=None, type=None):
        if cidr_block and not isinstance(cidr_block, str):
            raise TypeError("Expected argument 'cidr_block' to be a str")
        pulumi.set(__self__, "cidr_block", cidr_block)
        if entity_tag and not isinstance(entity_tag, str):
            raise TypeError("Expected argument 'entity_tag' to be a str")
        pulumi.set(__self__, "entity_tag", entity_tag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> _builtins.str:
        return pulumi.get(self, "cidr_block")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> _builtins.str:
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetCodeEngineAllowedOutboundDestinationResult(GetCodeEngineAllowedOutboundDestinationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCodeEngineAllowedOutboundDestinationResult(
            cidr_block=self.cidr_block,
            entity_tag=self.entity_tag,
            id=self.id,
            name=self.name,
            project_id=self.project_id,
            type=self.type)


def get_code_engine_allowed_outbound_destination(id: Optional[_builtins.str] = None,
                                                 name: Optional[_builtins.str] = None,
                                                 project_id: Optional[_builtins.str] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCodeEngineAllowedOutboundDestinationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCodeEngineAllowedOutboundDestination:getCodeEngineAllowedOutboundDestination', __args__, opts=opts, typ=GetCodeEngineAllowedOutboundDestinationResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCodeEngineAllowedOutboundDestinationResult(
        cidr_block=pulumi.get(__ret__, 'cidr_block'),
        entity_tag=pulumi.get(__ret__, 'entity_tag'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        type=pulumi.get(__ret__, 'type'))
def get_code_engine_allowed_outbound_destination_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        name: Optional[pulumi.Input[_builtins.str]] = None,
                                                        project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCodeEngineAllowedOutboundDestinationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCodeEngineAllowedOutboundDestination:getCodeEngineAllowedOutboundDestination', __args__, opts=opts, typ=GetCodeEngineAllowedOutboundDestinationResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCodeEngineAllowedOutboundDestinationResult(
        cidr_block=pulumi.get(__response__, 'cidr_block'),
        entity_tag=pulumi.get(__response__, 'entity_tag'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        project_id=pulumi.get(__response__, 'project_id'),
        type=pulumi.get(__response__, 'type')))
