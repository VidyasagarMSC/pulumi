# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CmAccountArgs', 'CmAccount']

@pulumi.input_type
class CmAccountArgs:
    def __init__(__self__, *,
                 account_filters: Optional[pulumi.Input['CmAccountAccountFiltersArgs']] = None,
                 cm_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hide_ibm_cloud_catalog: Optional[pulumi.Input[_builtins.bool]] = None,
                 region_filter: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CmAccount resource.
        :param pulumi.Input['CmAccountAccountFiltersArgs'] account_filters: Filters for account and catalog filters.
        :param pulumi.Input[_builtins.bool] hide_ibm_cloud_catalog: Hide the public catalog in this account.
        :param pulumi.Input[_builtins.str] region_filter: Region filter string.
        """
        if account_filters is not None:
            pulumi.set(__self__, "account_filters", account_filters)
        if cm_account_id is not None:
            pulumi.set(__self__, "cm_account_id", cm_account_id)
        if hide_ibm_cloud_catalog is not None:
            pulumi.set(__self__, "hide_ibm_cloud_catalog", hide_ibm_cloud_catalog)
        if region_filter is not None:
            pulumi.set(__self__, "region_filter", region_filter)

    @_builtins.property
    @pulumi.getter(name="accountFilters")
    def account_filters(self) -> Optional[pulumi.Input['CmAccountAccountFiltersArgs']]:
        """
        Filters for account and catalog filters.
        """
        return pulumi.get(self, "account_filters")

    @account_filters.setter
    def account_filters(self, value: Optional[pulumi.Input['CmAccountAccountFiltersArgs']]):
        pulumi.set(self, "account_filters", value)

    @_builtins.property
    @pulumi.getter(name="cmAccountId")
    def cm_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cm_account_id")

    @cm_account_id.setter
    def cm_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cm_account_id", value)

    @_builtins.property
    @pulumi.getter(name="hideIbmCloudCatalog")
    def hide_ibm_cloud_catalog(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Hide the public catalog in this account.
        """
        return pulumi.get(self, "hide_ibm_cloud_catalog")

    @hide_ibm_cloud_catalog.setter
    def hide_ibm_cloud_catalog(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hide_ibm_cloud_catalog", value)

    @_builtins.property
    @pulumi.getter(name="regionFilter")
    def region_filter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region filter string.
        """
        return pulumi.get(self, "region_filter")

    @region_filter.setter
    def region_filter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_filter", value)


@pulumi.input_type
class _CmAccountState:
    def __init__(__self__, *,
                 account_filters: Optional[pulumi.Input['CmAccountAccountFiltersArgs']] = None,
                 cm_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hide_ibm_cloud_catalog: Optional[pulumi.Input[_builtins.bool]] = None,
                 region_filter: Optional[pulumi.Input[_builtins.str]] = None,
                 rev: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CmAccount resources.
        :param pulumi.Input['CmAccountAccountFiltersArgs'] account_filters: Filters for account and catalog filters.
        :param pulumi.Input[_builtins.bool] hide_ibm_cloud_catalog: Hide the public catalog in this account.
        :param pulumi.Input[_builtins.str] region_filter: Region filter string.
        :param pulumi.Input[_builtins.str] rev: Cloudant revision.
        """
        if account_filters is not None:
            pulumi.set(__self__, "account_filters", account_filters)
        if cm_account_id is not None:
            pulumi.set(__self__, "cm_account_id", cm_account_id)
        if hide_ibm_cloud_catalog is not None:
            pulumi.set(__self__, "hide_ibm_cloud_catalog", hide_ibm_cloud_catalog)
        if region_filter is not None:
            pulumi.set(__self__, "region_filter", region_filter)
        if rev is not None:
            pulumi.set(__self__, "rev", rev)

    @_builtins.property
    @pulumi.getter(name="accountFilters")
    def account_filters(self) -> Optional[pulumi.Input['CmAccountAccountFiltersArgs']]:
        """
        Filters for account and catalog filters.
        """
        return pulumi.get(self, "account_filters")

    @account_filters.setter
    def account_filters(self, value: Optional[pulumi.Input['CmAccountAccountFiltersArgs']]):
        pulumi.set(self, "account_filters", value)

    @_builtins.property
    @pulumi.getter(name="cmAccountId")
    def cm_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cm_account_id")

    @cm_account_id.setter
    def cm_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cm_account_id", value)

    @_builtins.property
    @pulumi.getter(name="hideIbmCloudCatalog")
    def hide_ibm_cloud_catalog(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Hide the public catalog in this account.
        """
        return pulumi.get(self, "hide_ibm_cloud_catalog")

    @hide_ibm_cloud_catalog.setter
    def hide_ibm_cloud_catalog(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hide_ibm_cloud_catalog", value)

    @_builtins.property
    @pulumi.getter(name="regionFilter")
    def region_filter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region filter string.
        """
        return pulumi.get(self, "region_filter")

    @region_filter.setter
    def region_filter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_filter", value)

    @_builtins.property
    @pulumi.getter
    def rev(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloudant revision.
        """
        return pulumi.get(self, "rev")

    @rev.setter
    def rev(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rev", value)


@pulumi.type_token("ibm:index/cmAccount:CmAccount")
class CmAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_filters: Optional[pulumi.Input[Union['CmAccountAccountFiltersArgs', 'CmAccountAccountFiltersArgsDict']]] = None,
                 cm_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hide_ibm_cloud_catalog: Optional[pulumi.Input[_builtins.bool]] = None,
                 region_filter: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CmAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CmAccountAccountFiltersArgs', 'CmAccountAccountFiltersArgsDict']] account_filters: Filters for account and catalog filters.
        :param pulumi.Input[_builtins.bool] hide_ibm_cloud_catalog: Hide the public catalog in this account.
        :param pulumi.Input[_builtins.str] region_filter: Region filter string.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CmAccountArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CmAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CmAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CmAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_filters: Optional[pulumi.Input[Union['CmAccountAccountFiltersArgs', 'CmAccountAccountFiltersArgsDict']]] = None,
                 cm_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hide_ibm_cloud_catalog: Optional[pulumi.Input[_builtins.bool]] = None,
                 region_filter: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CmAccountArgs.__new__(CmAccountArgs)

            __props__.__dict__["account_filters"] = account_filters
            __props__.__dict__["cm_account_id"] = cm_account_id
            __props__.__dict__["hide_ibm_cloud_catalog"] = hide_ibm_cloud_catalog
            __props__.__dict__["region_filter"] = region_filter
            __props__.__dict__["rev"] = None
        super(CmAccount, __self__).__init__(
            'ibm:index/cmAccount:CmAccount',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_filters: Optional[pulumi.Input[Union['CmAccountAccountFiltersArgs', 'CmAccountAccountFiltersArgsDict']]] = None,
            cm_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            hide_ibm_cloud_catalog: Optional[pulumi.Input[_builtins.bool]] = None,
            region_filter: Optional[pulumi.Input[_builtins.str]] = None,
            rev: Optional[pulumi.Input[_builtins.str]] = None) -> 'CmAccount':
        """
        Get an existing CmAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CmAccountAccountFiltersArgs', 'CmAccountAccountFiltersArgsDict']] account_filters: Filters for account and catalog filters.
        :param pulumi.Input[_builtins.bool] hide_ibm_cloud_catalog: Hide the public catalog in this account.
        :param pulumi.Input[_builtins.str] region_filter: Region filter string.
        :param pulumi.Input[_builtins.str] rev: Cloudant revision.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CmAccountState.__new__(_CmAccountState)

        __props__.__dict__["account_filters"] = account_filters
        __props__.__dict__["cm_account_id"] = cm_account_id
        __props__.__dict__["hide_ibm_cloud_catalog"] = hide_ibm_cloud_catalog
        __props__.__dict__["region_filter"] = region_filter
        __props__.__dict__["rev"] = rev
        return CmAccount(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountFilters")
    def account_filters(self) -> pulumi.Output[Optional['outputs.CmAccountAccountFilters']]:
        """
        Filters for account and catalog filters.
        """
        return pulumi.get(self, "account_filters")

    @_builtins.property
    @pulumi.getter(name="cmAccountId")
    def cm_account_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cm_account_id")

    @_builtins.property
    @pulumi.getter(name="hideIbmCloudCatalog")
    def hide_ibm_cloud_catalog(self) -> pulumi.Output[_builtins.bool]:
        """
        Hide the public catalog in this account.
        """
        return pulumi.get(self, "hide_ibm_cloud_catalog")

    @_builtins.property
    @pulumi.getter(name="regionFilter")
    def region_filter(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Region filter string.
        """
        return pulumi.get(self, "region_filter")

    @_builtins.property
    @pulumi.getter
    def rev(self) -> pulumi.Output[_builtins.str]:
        """
        Cloudant revision.
        """
        return pulumi.get(self, "rev")

