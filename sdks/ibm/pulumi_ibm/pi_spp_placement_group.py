# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiSppPlacementGroupArgs', 'PiSppPlacementGroup']

@pulumi.input_type
class PiSppPlacementGroupArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_spp_placement_group_name: pulumi.Input[_builtins.str],
                 pi_spp_placement_group_policy: pulumi.Input[_builtins.str],
                 pi_spp_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['PiSppPlacementGroupTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiSppPlacementGroup resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_spp_placement_group_name: Name of the SPP placement group
        :param pulumi.Input[_builtins.str] pi_spp_placement_group_policy: Policy of the SPP placement group
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: List of user tags attached to the resource.
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_spp_placement_group_name", pi_spp_placement_group_name)
        pulumi.set(__self__, "pi_spp_placement_group_policy", pi_spp_placement_group_policy)
        if pi_spp_placement_group_id is not None:
            pulumi.set(__self__, "pi_spp_placement_group_id", pi_spp_placement_group_id)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        PI cloud instance ID
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piSppPlacementGroupName")
    def pi_spp_placement_group_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the SPP placement group
        """
        return pulumi.get(self, "pi_spp_placement_group_name")

    @pi_spp_placement_group_name.setter
    def pi_spp_placement_group_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_spp_placement_group_name", value)

    @_builtins.property
    @pulumi.getter(name="piSppPlacementGroupPolicy")
    def pi_spp_placement_group_policy(self) -> pulumi.Input[_builtins.str]:
        """
        Policy of the SPP placement group
        """
        return pulumi.get(self, "pi_spp_placement_group_policy")

    @pi_spp_placement_group_policy.setter
    def pi_spp_placement_group_policy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_spp_placement_group_policy", value)

    @_builtins.property
    @pulumi.getter(name="piSppPlacementGroupId")
    def pi_spp_placement_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_spp_placement_group_id")

    @pi_spp_placement_group_id.setter
    def pi_spp_placement_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_spp_placement_group_id", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiSppPlacementGroupTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiSppPlacementGroupTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiSppPlacementGroupState:
    def __init__(__self__, *,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_spp_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_spp_placement_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_spp_placement_group_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 spp_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiSppPlacementGroupTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiSppPlacementGroup resources.
        :param pulumi.Input[_builtins.str] crn: The CRN of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] members: Member SPP IDs that are the SPP placement group members
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_spp_placement_group_name: Name of the SPP placement group
        :param pulumi.Input[_builtins.str] pi_spp_placement_group_policy: Policy of the SPP placement group
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: List of user tags attached to the resource.
        :param pulumi.Input[_builtins.str] spp_placement_group_id: SPP placement group ID
        """
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_spp_placement_group_id is not None:
            pulumi.set(__self__, "pi_spp_placement_group_id", pi_spp_placement_group_id)
        if pi_spp_placement_group_name is not None:
            pulumi.set(__self__, "pi_spp_placement_group_name", pi_spp_placement_group_name)
        if pi_spp_placement_group_policy is not None:
            pulumi.set(__self__, "pi_spp_placement_group_policy", pi_spp_placement_group_policy)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if spp_placement_group_id is not None:
            pulumi.set(__self__, "spp_placement_group_id", spp_placement_group_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of the resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Member SPP IDs that are the SPP placement group members
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PI cloud instance ID
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piSppPlacementGroupId")
    def pi_spp_placement_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_spp_placement_group_id")

    @pi_spp_placement_group_id.setter
    def pi_spp_placement_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_spp_placement_group_id", value)

    @_builtins.property
    @pulumi.getter(name="piSppPlacementGroupName")
    def pi_spp_placement_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the SPP placement group
        """
        return pulumi.get(self, "pi_spp_placement_group_name")

    @pi_spp_placement_group_name.setter
    def pi_spp_placement_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_spp_placement_group_name", value)

    @_builtins.property
    @pulumi.getter(name="piSppPlacementGroupPolicy")
    def pi_spp_placement_group_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy of the SPP placement group
        """
        return pulumi.get(self, "pi_spp_placement_group_policy")

    @pi_spp_placement_group_policy.setter
    def pi_spp_placement_group_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_spp_placement_group_policy", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="sppPlacementGroupId")
    def spp_placement_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SPP placement group ID
        """
        return pulumi.get(self, "spp_placement_group_id")

    @spp_placement_group_id.setter
    def spp_placement_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spp_placement_group_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiSppPlacementGroupTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiSppPlacementGroupTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piSppPlacementGroup:PiSppPlacementGroup")
class PiSppPlacementGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_spp_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_spp_placement_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_spp_placement_group_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiSppPlacementGroupTimeoutsArgs', 'PiSppPlacementGroupTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiSppPlacementGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_spp_placement_group_name: Name of the SPP placement group
        :param pulumi.Input[_builtins.str] pi_spp_placement_group_policy: Policy of the SPP placement group
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: List of user tags attached to the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiSppPlacementGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiSppPlacementGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiSppPlacementGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiSppPlacementGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_spp_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_spp_placement_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_spp_placement_group_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiSppPlacementGroupTimeoutsArgs', 'PiSppPlacementGroupTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiSppPlacementGroupArgs.__new__(PiSppPlacementGroupArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_spp_placement_group_id"] = pi_spp_placement_group_id
            if pi_spp_placement_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_spp_placement_group_name'")
            __props__.__dict__["pi_spp_placement_group_name"] = pi_spp_placement_group_name
            if pi_spp_placement_group_policy is None and not opts.urn:
                raise TypeError("Missing required property 'pi_spp_placement_group_policy'")
            __props__.__dict__["pi_spp_placement_group_policy"] = pi_spp_placement_group_policy
            __props__.__dict__["pi_user_tags"] = pi_user_tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["members"] = None
            __props__.__dict__["spp_placement_group_id"] = None
        super(PiSppPlacementGroup, __self__).__init__(
            'ibm:index/piSppPlacementGroup:PiSppPlacementGroup',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_spp_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_spp_placement_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_spp_placement_group_policy: Optional[pulumi.Input[_builtins.str]] = None,
            pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            spp_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiSppPlacementGroupTimeoutsArgs', 'PiSppPlacementGroupTimeoutsArgsDict']]] = None) -> 'PiSppPlacementGroup':
        """
        Get an existing PiSppPlacementGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: The CRN of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] members: Member SPP IDs that are the SPP placement group members
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_spp_placement_group_name: Name of the SPP placement group
        :param pulumi.Input[_builtins.str] pi_spp_placement_group_policy: Policy of the SPP placement group
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: List of user tags attached to the resource.
        :param pulumi.Input[_builtins.str] spp_placement_group_id: SPP placement group ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiSppPlacementGroupState.__new__(_PiSppPlacementGroupState)

        __props__.__dict__["crn"] = crn
        __props__.__dict__["members"] = members
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_spp_placement_group_id"] = pi_spp_placement_group_id
        __props__.__dict__["pi_spp_placement_group_name"] = pi_spp_placement_group_name
        __props__.__dict__["pi_spp_placement_group_policy"] = pi_spp_placement_group_policy
        __props__.__dict__["pi_user_tags"] = pi_user_tags
        __props__.__dict__["spp_placement_group_id"] = spp_placement_group_id
        __props__.__dict__["timeouts"] = timeouts
        return PiSppPlacementGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of the resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Member SPP IDs that are the SPP placement group members
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        PI cloud instance ID
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piSppPlacementGroupId")
    def pi_spp_placement_group_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_spp_placement_group_id")

    @_builtins.property
    @pulumi.getter(name="piSppPlacementGroupName")
    def pi_spp_placement_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the SPP placement group
        """
        return pulumi.get(self, "pi_spp_placement_group_name")

    @_builtins.property
    @pulumi.getter(name="piSppPlacementGroupPolicy")
    def pi_spp_placement_group_policy(self) -> pulumi.Output[_builtins.str]:
        """
        Policy of the SPP placement group
        """
        return pulumi.get(self, "pi_spp_placement_group_policy")

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @_builtins.property
    @pulumi.getter(name="sppPlacementGroupId")
    def spp_placement_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        SPP placement group ID
        """
        return pulumi.get(self, "spp_placement_group_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiSppPlacementGroupTimeouts']]:
        return pulumi.get(self, "timeouts")

