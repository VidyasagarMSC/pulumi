# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsInstanceVolumeAttachmentResult',
    'AwaitableGetIsInstanceVolumeAttachmentResult',
    'get_is_instance_volume_attachment',
    'get_is_instance_volume_attachment_output',
]

@pulumi.output_type
class GetIsInstanceVolumeAttachmentResult:
    """
    A collection of values returned by getIsInstanceVolumeAttachment.
    """
    def __init__(__self__, bandwidth=None, delete_volume_on_instance_delete=None, device=None, href=None, id=None, instance=None, name=None, status=None, type=None, volume_attachment_id=None, volume_references=None):
        if bandwidth and not isinstance(bandwidth, float):
            raise TypeError("Expected argument 'bandwidth' to be a float")
        pulumi.set(__self__, "bandwidth", bandwidth)
        if delete_volume_on_instance_delete and not isinstance(delete_volume_on_instance_delete, bool):
            raise TypeError("Expected argument 'delete_volume_on_instance_delete' to be a bool")
        pulumi.set(__self__, "delete_volume_on_instance_delete", delete_volume_on_instance_delete)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance and not isinstance(instance, str):
            raise TypeError("Expected argument 'instance' to be a str")
        pulumi.set(__self__, "instance", instance)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if volume_attachment_id and not isinstance(volume_attachment_id, str):
            raise TypeError("Expected argument 'volume_attachment_id' to be a str")
        pulumi.set(__self__, "volume_attachment_id", volume_attachment_id)
        if volume_references and not isinstance(volume_references, list):
            raise TypeError("Expected argument 'volume_references' to be a list")
        pulumi.set(__self__, "volume_references", volume_references)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.float:
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="deleteVolumeOnInstanceDelete")
    def delete_volume_on_instance_delete(self) -> _builtins.bool:
        return pulumi.get(self, "delete_volume_on_instance_delete")

    @_builtins.property
    @pulumi.getter
    def device(self) -> _builtins.str:
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instance(self) -> _builtins.str:
        return pulumi.get(self, "instance")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="volumeAttachmentId")
    def volume_attachment_id(self) -> _builtins.str:
        return pulumi.get(self, "volume_attachment_id")

    @_builtins.property
    @pulumi.getter(name="volumeReferences")
    def volume_references(self) -> Sequence['outputs.GetIsInstanceVolumeAttachmentVolumeReferenceResult']:
        return pulumi.get(self, "volume_references")


class AwaitableGetIsInstanceVolumeAttachmentResult(GetIsInstanceVolumeAttachmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceVolumeAttachmentResult(
            bandwidth=self.bandwidth,
            delete_volume_on_instance_delete=self.delete_volume_on_instance_delete,
            device=self.device,
            href=self.href,
            id=self.id,
            instance=self.instance,
            name=self.name,
            status=self.status,
            type=self.type,
            volume_attachment_id=self.volume_attachment_id,
            volume_references=self.volume_references)


def get_is_instance_volume_attachment(id: Optional[_builtins.str] = None,
                                      instance: Optional[_builtins.str] = None,
                                      name: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceVolumeAttachmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instance'] = instance
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceVolumeAttachment:getIsInstanceVolumeAttachment', __args__, opts=opts, typ=GetIsInstanceVolumeAttachmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceVolumeAttachmentResult(
        bandwidth=pulumi.get(__ret__, 'bandwidth'),
        delete_volume_on_instance_delete=pulumi.get(__ret__, 'delete_volume_on_instance_delete'),
        device=pulumi.get(__ret__, 'device'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        instance=pulumi.get(__ret__, 'instance'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        volume_attachment_id=pulumi.get(__ret__, 'volume_attachment_id'),
        volume_references=pulumi.get(__ret__, 'volume_references'))
def get_is_instance_volume_attachment_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             instance: Optional[pulumi.Input[_builtins.str]] = None,
                                             name: Optional[pulumi.Input[_builtins.str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceVolumeAttachmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instance'] = instance
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceVolumeAttachment:getIsInstanceVolumeAttachment', __args__, opts=opts, typ=GetIsInstanceVolumeAttachmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceVolumeAttachmentResult(
        bandwidth=pulumi.get(__response__, 'bandwidth'),
        delete_volume_on_instance_delete=pulumi.get(__response__, 'delete_volume_on_instance_delete'),
        device=pulumi.get(__response__, 'device'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        instance=pulumi.get(__response__, 'instance'),
        name=pulumi.get(__response__, 'name'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        volume_attachment_id=pulumi.get(__response__, 'volume_attachment_id'),
        volume_references=pulumi.get(__response__, 'volume_references')))
