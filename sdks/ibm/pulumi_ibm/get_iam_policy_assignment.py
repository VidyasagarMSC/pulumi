# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamPolicyAssignmentResult',
    'AwaitableGetIamPolicyAssignmentResult',
    'get_iam_policy_assignment',
    'get_iam_policy_assignment_output',
]

@pulumi.output_type
class GetIamPolicyAssignmentResult:
    """
    A collection of values returned by getIamPolicyAssignment.
    """
    def __init__(__self__, account_id=None, assignment_id=None, created_at=None, created_by_id=None, href=None, id=None, last_modified_at=None, last_modified_by_id=None, resources=None, subject=None, target=None, template=None, version=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if assignment_id and not isinstance(assignment_id, str):
            raise TypeError("Expected argument 'assignment_id' to be a str")
        pulumi.set(__self__, "assignment_id", assignment_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by_id and not isinstance(created_by_id, str):
            raise TypeError("Expected argument 'created_by_id' to be a str")
        pulumi.set(__self__, "created_by_id", created_by_id)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_modified_at and not isinstance(last_modified_at, str):
            raise TypeError("Expected argument 'last_modified_at' to be a str")
        pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by_id and not isinstance(last_modified_by_id, str):
            raise TypeError("Expected argument 'last_modified_by_id' to be a str")
        pulumi.set(__self__, "last_modified_by_id", last_modified_by_id)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if subject and not isinstance(subject, dict):
            raise TypeError("Expected argument 'subject' to be a dict")
        pulumi.set(__self__, "subject", subject)
        if target and not isinstance(target, dict):
            raise TypeError("Expected argument 'target' to be a dict")
        pulumi.set(__self__, "target", target)
        if template and not isinstance(template, dict):
            raise TypeError("Expected argument 'template' to be a dict")
        pulumi.set(__self__, "template", template)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="assignmentId")
    def assignment_id(self) -> _builtins.str:
        return pulumi.get(self, "assignment_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> _builtins.str:
        return pulumi.get(self, "created_by_id")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> _builtins.str:
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedById")
    def last_modified_by_id(self) -> _builtins.str:
        return pulumi.get(self, "last_modified_by_id")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetIamPolicyAssignmentResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "subject")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter
    def template(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "template")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "version")


class AwaitableGetIamPolicyAssignmentResult(GetIamPolicyAssignmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamPolicyAssignmentResult(
            account_id=self.account_id,
            assignment_id=self.assignment_id,
            created_at=self.created_at,
            created_by_id=self.created_by_id,
            href=self.href,
            id=self.id,
            last_modified_at=self.last_modified_at,
            last_modified_by_id=self.last_modified_by_id,
            resources=self.resources,
            subject=self.subject,
            target=self.target,
            template=self.template,
            version=self.version)


def get_iam_policy_assignment(assignment_id: Optional[_builtins.str] = None,
                              version: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamPolicyAssignmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['assignmentId'] = assignment_id
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamPolicyAssignment:getIamPolicyAssignment', __args__, opts=opts, typ=GetIamPolicyAssignmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamPolicyAssignmentResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        assignment_id=pulumi.get(__ret__, 'assignment_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by_id=pulumi.get(__ret__, 'created_by_id'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        last_modified_at=pulumi.get(__ret__, 'last_modified_at'),
        last_modified_by_id=pulumi.get(__ret__, 'last_modified_by_id'),
        resources=pulumi.get(__ret__, 'resources'),
        subject=pulumi.get(__ret__, 'subject'),
        target=pulumi.get(__ret__, 'target'),
        template=pulumi.get(__ret__, 'template'),
        version=pulumi.get(__ret__, 'version'))
def get_iam_policy_assignment_output(assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamPolicyAssignmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['assignmentId'] = assignment_id
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamPolicyAssignment:getIamPolicyAssignment', __args__, opts=opts, typ=GetIamPolicyAssignmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamPolicyAssignmentResult(
        account_id=pulumi.get(__response__, 'account_id'),
        assignment_id=pulumi.get(__response__, 'assignment_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by_id=pulumi.get(__response__, 'created_by_id'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        last_modified_at=pulumi.get(__response__, 'last_modified_at'),
        last_modified_by_id=pulumi.get(__response__, 'last_modified_by_id'),
        resources=pulumi.get(__response__, 'resources'),
        subject=pulumi.get(__response__, 'subject'),
        target=pulumi.get(__response__, 'target'),
        template=pulumi.get(__response__, 'template'),
        version=pulumi.get(__response__, 'version')))
