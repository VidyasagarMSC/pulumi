# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupRecoveryProtectionPolicyArgs', 'BackupRecoveryProtectionPolicy']

@pulumi.input_type
class BackupRecoveryProtectionPolicyArgs:
    def __init__(__self__, *,
                 backup_policy: pulumi.Input['BackupRecoveryProtectionPolicyBackupPolicyArgs'],
                 x_ibm_tenant_id: pulumi.Input[_builtins.str],
                 backup_recovery_protection_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 blackout_windows: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyBlackoutWindowArgs']]]] = None,
                 cascaded_targets_configs: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs']]]] = None,
                 data_lock: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 extended_retentions: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyExtendedRetentionArgs']]]] = None,
                 is_cbs_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_target_policy: Optional[pulumi.Input['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs']] = None,
                 retry_options: Optional[pulumi.Input['BackupRecoveryProtectionPolicyRetryOptionsArgs']] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a BackupRecoveryProtectionPolicy resource.
        :param pulumi.Input['BackupRecoveryProtectionPolicyBackupPolicyArgs'] backup_policy: Specifies the backup schedule and retentions of a Protection Policy.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyBlackoutWindowArgs']]] blackout_windows: List of Blackout Windows. If specified, this field defines blackout periods when new Group Runs are not started. If a
               Group Run has been scheduled but not yet executed and the blackout period starts, the behavior depends on the policy
               field AbortInBlackoutPeriod.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs']]] cascaded_targets_configs: Specifies the configuration for cascaded replications. Using cascaded replication, replication cluster(Rx) can further
               replicate and archive the snapshot copies to further targets. Its recommended to create cascaded configuration where
               protection group will be created.
        :param pulumi.Input[_builtins.str] data_lock: This field is now deprecated. Please use the DataLockConfig in the backup retention.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the Protection Policy.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyExtendedRetentionArgs']]] extended_retentions: Specifies additional retention policies that should be applied to the backup snapshots. A backup snapshot will be
               retained up to a time that is the maximum of all retention policies that are applicable to it.
        :param pulumi.Input[_builtins.bool] is_cbs_enabled: Specifies true if Calender Based Schedule is supported by client. Default value is assumed as false for this feature.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the Protection Policy.
        :param pulumi.Input['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs'] remote_target_policy: Specifies the replication, archival and cloud spin targets of Protection Policy.
        :param pulumi.Input['BackupRecoveryProtectionPolicyRetryOptionsArgs'] retry_options: Retry Options of a Protection Policy when a Protection Group run fails.
        :param pulumi.Input[_builtins.str] template_id: Specifies the parent policy template id to which the policy is linked to. This field is set only when policy is created
               from template.
        :param pulumi.Input[_builtins.float] version: Specifies the current policy verison. Policy version is incremented for optionally supporting new features and
               differentialting across releases.
        """
        pulumi.set(__self__, "backup_policy", backup_policy)
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)
        if backup_recovery_protection_policy_id is not None:
            pulumi.set(__self__, "backup_recovery_protection_policy_id", backup_recovery_protection_policy_id)
        if blackout_windows is not None:
            pulumi.set(__self__, "blackout_windows", blackout_windows)
        if cascaded_targets_configs is not None:
            pulumi.set(__self__, "cascaded_targets_configs", cascaded_targets_configs)
        if data_lock is not None:
            pulumi.set(__self__, "data_lock", data_lock)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if extended_retentions is not None:
            pulumi.set(__self__, "extended_retentions", extended_retentions)
        if is_cbs_enabled is not None:
            pulumi.set(__self__, "is_cbs_enabled", is_cbs_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remote_target_policy is not None:
            pulumi.set(__self__, "remote_target_policy", remote_target_policy)
        if retry_options is not None:
            pulumi.set(__self__, "retry_options", retry_options)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> pulumi.Input['BackupRecoveryProtectionPolicyBackupPolicyArgs']:
        """
        Specifies the backup schedule and retentions of a Protection Policy.
        """
        return pulumi.get(self, "backup_policy")

    @backup_policy.setter
    def backup_policy(self, value: pulumi.Input['BackupRecoveryProtectionPolicyBackupPolicyArgs']):
        pulumi.set(self, "backup_policy", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "x_ibm_tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryProtectionPolicyId")
    def backup_recovery_protection_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_protection_policy_id")

    @backup_recovery_protection_policy_id.setter
    def backup_recovery_protection_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_protection_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="blackoutWindows")
    def blackout_windows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyBlackoutWindowArgs']]]]:
        """
        List of Blackout Windows. If specified, this field defines blackout periods when new Group Runs are not started. If a
        Group Run has been scheduled but not yet executed and the blackout period starts, the behavior depends on the policy
        field AbortInBlackoutPeriod.
        """
        return pulumi.get(self, "blackout_windows")

    @blackout_windows.setter
    def blackout_windows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyBlackoutWindowArgs']]]]):
        pulumi.set(self, "blackout_windows", value)

    @_builtins.property
    @pulumi.getter(name="cascadedTargetsConfigs")
    def cascaded_targets_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs']]]]:
        """
        Specifies the configuration for cascaded replications. Using cascaded replication, replication cluster(Rx) can further
        replicate and archive the snapshot copies to further targets. Its recommended to create cascaded configuration where
        protection group will be created.
        """
        return pulumi.get(self, "cascaded_targets_configs")

    @cascaded_targets_configs.setter
    def cascaded_targets_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs']]]]):
        pulumi.set(self, "cascaded_targets_configs", value)

    @_builtins.property
    @pulumi.getter(name="dataLock")
    def data_lock(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This field is now deprecated. Please use the DataLockConfig in the backup retention.
        """
        return pulumi.get(self, "data_lock")

    @data_lock.setter
    def data_lock(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_lock", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the Protection Policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="extendedRetentions")
    def extended_retentions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyExtendedRetentionArgs']]]]:
        """
        Specifies additional retention policies that should be applied to the backup snapshots. A backup snapshot will be
        retained up to a time that is the maximum of all retention policies that are applicable to it.
        """
        return pulumi.get(self, "extended_retentions")

    @extended_retentions.setter
    def extended_retentions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyExtendedRetentionArgs']]]]):
        pulumi.set(self, "extended_retentions", value)

    @_builtins.property
    @pulumi.getter(name="isCbsEnabled")
    def is_cbs_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies true if Calender Based Schedule is supported by client. Default value is assumed as false for this feature.
        """
        return pulumi.get(self, "is_cbs_enabled")

    @is_cbs_enabled.setter
    def is_cbs_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_cbs_enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the Protection Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="remoteTargetPolicy")
    def remote_target_policy(self) -> Optional[pulumi.Input['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs']]:
        """
        Specifies the replication, archival and cloud spin targets of Protection Policy.
        """
        return pulumi.get(self, "remote_target_policy")

    @remote_target_policy.setter
    def remote_target_policy(self, value: Optional[pulumi.Input['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs']]):
        pulumi.set(self, "remote_target_policy", value)

    @_builtins.property
    @pulumi.getter(name="retryOptions")
    def retry_options(self) -> Optional[pulumi.Input['BackupRecoveryProtectionPolicyRetryOptionsArgs']]:
        """
        Retry Options of a Protection Policy when a Protection Group run fails.
        """
        return pulumi.get(self, "retry_options")

    @retry_options.setter
    def retry_options(self, value: Optional[pulumi.Input['BackupRecoveryProtectionPolicyRetryOptionsArgs']]):
        pulumi.set(self, "retry_options", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent policy template id to which the policy is linked to. This field is set only when policy is created
        from template.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the current policy verison. Policy version is incremented for optionally supporting new features and
        differentialting across releases.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _BackupRecoveryProtectionPolicyState:
    def __init__(__self__, *,
                 backup_policy: Optional[pulumi.Input['BackupRecoveryProtectionPolicyBackupPolicyArgs']] = None,
                 backup_recovery_protection_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 blackout_windows: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyBlackoutWindowArgs']]]] = None,
                 cascaded_targets_configs: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs']]]] = None,
                 data_lock: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 extended_retentions: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyExtendedRetentionArgs']]]] = None,
                 is_cbs_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_replicated: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_usable: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_modification_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 num_protected_objects: Optional[pulumi.Input[_builtins.float]] = None,
                 num_protection_groups: Optional[pulumi.Input[_builtins.float]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_target_policy: Optional[pulumi.Input['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs']] = None,
                 retry_options: Optional[pulumi.Input['BackupRecoveryProtectionPolicyRetryOptionsArgs']] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.float]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupRecoveryProtectionPolicy resources.
        :param pulumi.Input['BackupRecoveryProtectionPolicyBackupPolicyArgs'] backup_policy: Specifies the backup schedule and retentions of a Protection Policy.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyBlackoutWindowArgs']]] blackout_windows: List of Blackout Windows. If specified, this field defines blackout periods when new Group Runs are not started. If a
               Group Run has been scheduled but not yet executed and the blackout period starts, the behavior depends on the policy
               field AbortInBlackoutPeriod.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs']]] cascaded_targets_configs: Specifies the configuration for cascaded replications. Using cascaded replication, replication cluster(Rx) can further
               replicate and archive the snapshot copies to further targets. Its recommended to create cascaded configuration where
               protection group will be created.
        :param pulumi.Input[_builtins.str] data_lock: This field is now deprecated. Please use the DataLockConfig in the backup retention.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the Protection Policy.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyExtendedRetentionArgs']]] extended_retentions: Specifies additional retention policies that should be applied to the backup snapshots. A backup snapshot will be
               retained up to a time that is the maximum of all retention policies that are applicable to it.
        :param pulumi.Input[_builtins.bool] is_cbs_enabled: Specifies true if Calender Based Schedule is supported by client. Default value is assumed as false for this feature.
        :param pulumi.Input[_builtins.bool] is_replicated: This field is set to true when policy is the replicated policy.
        :param pulumi.Input[_builtins.bool] is_usable: This field is set to true if the linked policy which is internally created from a policy templates qualifies as usable
               to create more policies on the cluster. If the linked policy is partially filled and can not create a working policy
               then this field will be set to false. In case of normal policy created on the cluster, this field wont be populated.
        :param pulumi.Input[_builtins.float] last_modification_time_usecs: Specifies the last time this Policy was updated. If this is passed into a PUT request, then the backend will validate
               that the timestamp passed in matches the time that the policy was actually last modified. If the two timestamps do not
               match, then the request will be rejected with a stale error.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the Protection Policy.
        :param pulumi.Input[_builtins.float] num_protected_objects: Specifies the number of protected objects using the protection policy.
        :param pulumi.Input[_builtins.float] num_protection_groups: Specifies the number of protection groups using the protection policy.
        :param pulumi.Input[_builtins.str] policy_id: policy ID
        :param pulumi.Input['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs'] remote_target_policy: Specifies the replication, archival and cloud spin targets of Protection Policy.
        :param pulumi.Input['BackupRecoveryProtectionPolicyRetryOptionsArgs'] retry_options: Retry Options of a Protection Policy when a Protection Group run fails.
        :param pulumi.Input[_builtins.str] template_id: Specifies the parent policy template id to which the policy is linked to. This field is set only when policy is created
               from template.
        :param pulumi.Input[_builtins.float] version: Specifies the current policy verison. Policy version is incremented for optionally supporting new features and
               differentialting across releases.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        if backup_policy is not None:
            pulumi.set(__self__, "backup_policy", backup_policy)
        if backup_recovery_protection_policy_id is not None:
            pulumi.set(__self__, "backup_recovery_protection_policy_id", backup_recovery_protection_policy_id)
        if blackout_windows is not None:
            pulumi.set(__self__, "blackout_windows", blackout_windows)
        if cascaded_targets_configs is not None:
            pulumi.set(__self__, "cascaded_targets_configs", cascaded_targets_configs)
        if data_lock is not None:
            pulumi.set(__self__, "data_lock", data_lock)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if extended_retentions is not None:
            pulumi.set(__self__, "extended_retentions", extended_retentions)
        if is_cbs_enabled is not None:
            pulumi.set(__self__, "is_cbs_enabled", is_cbs_enabled)
        if is_replicated is not None:
            pulumi.set(__self__, "is_replicated", is_replicated)
        if is_usable is not None:
            pulumi.set(__self__, "is_usable", is_usable)
        if last_modification_time_usecs is not None:
            pulumi.set(__self__, "last_modification_time_usecs", last_modification_time_usecs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_protected_objects is not None:
            pulumi.set(__self__, "num_protected_objects", num_protected_objects)
        if num_protection_groups is not None:
            pulumi.set(__self__, "num_protection_groups", num_protection_groups)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if remote_target_policy is not None:
            pulumi.set(__self__, "remote_target_policy", remote_target_policy)
        if retry_options is not None:
            pulumi.set(__self__, "retry_options", retry_options)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if x_ibm_tenant_id is not None:
            pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> Optional[pulumi.Input['BackupRecoveryProtectionPolicyBackupPolicyArgs']]:
        """
        Specifies the backup schedule and retentions of a Protection Policy.
        """
        return pulumi.get(self, "backup_policy")

    @backup_policy.setter
    def backup_policy(self, value: Optional[pulumi.Input['BackupRecoveryProtectionPolicyBackupPolicyArgs']]):
        pulumi.set(self, "backup_policy", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryProtectionPolicyId")
    def backup_recovery_protection_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_protection_policy_id")

    @backup_recovery_protection_policy_id.setter
    def backup_recovery_protection_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_protection_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="blackoutWindows")
    def blackout_windows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyBlackoutWindowArgs']]]]:
        """
        List of Blackout Windows. If specified, this field defines blackout periods when new Group Runs are not started. If a
        Group Run has been scheduled but not yet executed and the blackout period starts, the behavior depends on the policy
        field AbortInBlackoutPeriod.
        """
        return pulumi.get(self, "blackout_windows")

    @blackout_windows.setter
    def blackout_windows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyBlackoutWindowArgs']]]]):
        pulumi.set(self, "blackout_windows", value)

    @_builtins.property
    @pulumi.getter(name="cascadedTargetsConfigs")
    def cascaded_targets_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs']]]]:
        """
        Specifies the configuration for cascaded replications. Using cascaded replication, replication cluster(Rx) can further
        replicate and archive the snapshot copies to further targets. Its recommended to create cascaded configuration where
        protection group will be created.
        """
        return pulumi.get(self, "cascaded_targets_configs")

    @cascaded_targets_configs.setter
    def cascaded_targets_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs']]]]):
        pulumi.set(self, "cascaded_targets_configs", value)

    @_builtins.property
    @pulumi.getter(name="dataLock")
    def data_lock(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This field is now deprecated. Please use the DataLockConfig in the backup retention.
        """
        return pulumi.get(self, "data_lock")

    @data_lock.setter
    def data_lock(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_lock", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the Protection Policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="extendedRetentions")
    def extended_retentions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyExtendedRetentionArgs']]]]:
        """
        Specifies additional retention policies that should be applied to the backup snapshots. A backup snapshot will be
        retained up to a time that is the maximum of all retention policies that are applicable to it.
        """
        return pulumi.get(self, "extended_retentions")

    @extended_retentions.setter
    def extended_retentions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionPolicyExtendedRetentionArgs']]]]):
        pulumi.set(self, "extended_retentions", value)

    @_builtins.property
    @pulumi.getter(name="isCbsEnabled")
    def is_cbs_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies true if Calender Based Schedule is supported by client. Default value is assumed as false for this feature.
        """
        return pulumi.get(self, "is_cbs_enabled")

    @is_cbs_enabled.setter
    def is_cbs_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_cbs_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isReplicated")
    def is_replicated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        This field is set to true when policy is the replicated policy.
        """
        return pulumi.get(self, "is_replicated")

    @is_replicated.setter
    def is_replicated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_replicated", value)

    @_builtins.property
    @pulumi.getter(name="isUsable")
    def is_usable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        This field is set to true if the linked policy which is internally created from a policy templates qualifies as usable
        to create more policies on the cluster. If the linked policy is partially filled and can not create a working policy
        then this field will be set to false. In case of normal policy created on the cluster, this field wont be populated.
        """
        return pulumi.get(self, "is_usable")

    @is_usable.setter
    def is_usable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_usable", value)

    @_builtins.property
    @pulumi.getter(name="lastModificationTimeUsecs")
    def last_modification_time_usecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the last time this Policy was updated. If this is passed into a PUT request, then the backend will validate
        that the timestamp passed in matches the time that the policy was actually last modified. If the two timestamps do not
        match, then the request will be rejected with a stale error.
        """
        return pulumi.get(self, "last_modification_time_usecs")

    @last_modification_time_usecs.setter
    def last_modification_time_usecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "last_modification_time_usecs", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the Protection Policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="numProtectedObjects")
    def num_protected_objects(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the number of protected objects using the protection policy.
        """
        return pulumi.get(self, "num_protected_objects")

    @num_protected_objects.setter
    def num_protected_objects(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "num_protected_objects", value)

    @_builtins.property
    @pulumi.getter(name="numProtectionGroups")
    def num_protection_groups(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the number of protection groups using the protection policy.
        """
        return pulumi.get(self, "num_protection_groups")

    @num_protection_groups.setter
    def num_protection_groups(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "num_protection_groups", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        policy ID
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="remoteTargetPolicy")
    def remote_target_policy(self) -> Optional[pulumi.Input['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs']]:
        """
        Specifies the replication, archival and cloud spin targets of Protection Policy.
        """
        return pulumi.get(self, "remote_target_policy")

    @remote_target_policy.setter
    def remote_target_policy(self, value: Optional[pulumi.Input['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs']]):
        pulumi.set(self, "remote_target_policy", value)

    @_builtins.property
    @pulumi.getter(name="retryOptions")
    def retry_options(self) -> Optional[pulumi.Input['BackupRecoveryProtectionPolicyRetryOptionsArgs']]:
        """
        Retry Options of a Protection Policy when a Protection Group run fails.
        """
        return pulumi.get(self, "retry_options")

    @retry_options.setter
    def retry_options(self, value: Optional[pulumi.Input['BackupRecoveryProtectionPolicyRetryOptionsArgs']]):
        pulumi.set(self, "retry_options", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the parent policy template id to which the policy is linked to. This field is set only when policy is created
        from template.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the current policy verison. Policy version is incremented for optionally supporting new features and
        differentialting across releases.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_ibm_tenant_id", value)


@pulumi.type_token("ibm:index/backupRecoveryProtectionPolicy:BackupRecoveryProtectionPolicy")
class BackupRecoveryProtectionPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_policy: Optional[pulumi.Input[Union['BackupRecoveryProtectionPolicyBackupPolicyArgs', 'BackupRecoveryProtectionPolicyBackupPolicyArgsDict']]] = None,
                 backup_recovery_protection_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 blackout_windows: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyBlackoutWindowArgs', 'BackupRecoveryProtectionPolicyBlackoutWindowArgsDict']]]]] = None,
                 cascaded_targets_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs', 'BackupRecoveryProtectionPolicyCascadedTargetsConfigArgsDict']]]]] = None,
                 data_lock: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 extended_retentions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyExtendedRetentionArgs', 'BackupRecoveryProtectionPolicyExtendedRetentionArgsDict']]]]] = None,
                 is_cbs_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_target_policy: Optional[pulumi.Input[Union['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs', 'BackupRecoveryProtectionPolicyRemoteTargetPolicyArgsDict']]] = None,
                 retry_options: Optional[pulumi.Input[Union['BackupRecoveryProtectionPolicyRetryOptionsArgs', 'BackupRecoveryProtectionPolicyRetryOptionsArgsDict']]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.float]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BackupRecoveryProtectionPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['BackupRecoveryProtectionPolicyBackupPolicyArgs', 'BackupRecoveryProtectionPolicyBackupPolicyArgsDict']] backup_policy: Specifies the backup schedule and retentions of a Protection Policy.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyBlackoutWindowArgs', 'BackupRecoveryProtectionPolicyBlackoutWindowArgsDict']]]] blackout_windows: List of Blackout Windows. If specified, this field defines blackout periods when new Group Runs are not started. If a
               Group Run has been scheduled but not yet executed and the blackout period starts, the behavior depends on the policy
               field AbortInBlackoutPeriod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs', 'BackupRecoveryProtectionPolicyCascadedTargetsConfigArgsDict']]]] cascaded_targets_configs: Specifies the configuration for cascaded replications. Using cascaded replication, replication cluster(Rx) can further
               replicate and archive the snapshot copies to further targets. Its recommended to create cascaded configuration where
               protection group will be created.
        :param pulumi.Input[_builtins.str] data_lock: This field is now deprecated. Please use the DataLockConfig in the backup retention.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the Protection Policy.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyExtendedRetentionArgs', 'BackupRecoveryProtectionPolicyExtendedRetentionArgsDict']]]] extended_retentions: Specifies additional retention policies that should be applied to the backup snapshots. A backup snapshot will be
               retained up to a time that is the maximum of all retention policies that are applicable to it.
        :param pulumi.Input[_builtins.bool] is_cbs_enabled: Specifies true if Calender Based Schedule is supported by client. Default value is assumed as false for this feature.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the Protection Policy.
        :param pulumi.Input[Union['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs', 'BackupRecoveryProtectionPolicyRemoteTargetPolicyArgsDict']] remote_target_policy: Specifies the replication, archival and cloud spin targets of Protection Policy.
        :param pulumi.Input[Union['BackupRecoveryProtectionPolicyRetryOptionsArgs', 'BackupRecoveryProtectionPolicyRetryOptionsArgsDict']] retry_options: Retry Options of a Protection Policy when a Protection Group run fails.
        :param pulumi.Input[_builtins.str] template_id: Specifies the parent policy template id to which the policy is linked to. This field is set only when policy is created
               from template.
        :param pulumi.Input[_builtins.float] version: Specifies the current policy verison. Policy version is incremented for optionally supporting new features and
               differentialting across releases.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupRecoveryProtectionPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupRecoveryProtectionPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupRecoveryProtectionPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupRecoveryProtectionPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_policy: Optional[pulumi.Input[Union['BackupRecoveryProtectionPolicyBackupPolicyArgs', 'BackupRecoveryProtectionPolicyBackupPolicyArgsDict']]] = None,
                 backup_recovery_protection_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 blackout_windows: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyBlackoutWindowArgs', 'BackupRecoveryProtectionPolicyBlackoutWindowArgsDict']]]]] = None,
                 cascaded_targets_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs', 'BackupRecoveryProtectionPolicyCascadedTargetsConfigArgsDict']]]]] = None,
                 data_lock: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 extended_retentions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyExtendedRetentionArgs', 'BackupRecoveryProtectionPolicyExtendedRetentionArgsDict']]]]] = None,
                 is_cbs_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_target_policy: Optional[pulumi.Input[Union['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs', 'BackupRecoveryProtectionPolicyRemoteTargetPolicyArgsDict']]] = None,
                 retry_options: Optional[pulumi.Input[Union['BackupRecoveryProtectionPolicyRetryOptionsArgs', 'BackupRecoveryProtectionPolicyRetryOptionsArgsDict']]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.float]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupRecoveryProtectionPolicyArgs.__new__(BackupRecoveryProtectionPolicyArgs)

            if backup_policy is None and not opts.urn:
                raise TypeError("Missing required property 'backup_policy'")
            __props__.__dict__["backup_policy"] = backup_policy
            __props__.__dict__["backup_recovery_protection_policy_id"] = backup_recovery_protection_policy_id
            __props__.__dict__["blackout_windows"] = blackout_windows
            __props__.__dict__["cascaded_targets_configs"] = cascaded_targets_configs
            __props__.__dict__["data_lock"] = data_lock
            __props__.__dict__["description"] = description
            __props__.__dict__["extended_retentions"] = extended_retentions
            __props__.__dict__["is_cbs_enabled"] = is_cbs_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["remote_target_policy"] = remote_target_policy
            __props__.__dict__["retry_options"] = retry_options
            __props__.__dict__["template_id"] = template_id
            __props__.__dict__["version"] = version
            if x_ibm_tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'x_ibm_tenant_id'")
            __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
            __props__.__dict__["is_replicated"] = None
            __props__.__dict__["is_usable"] = None
            __props__.__dict__["last_modification_time_usecs"] = None
            __props__.__dict__["num_protected_objects"] = None
            __props__.__dict__["num_protection_groups"] = None
            __props__.__dict__["policy_id"] = None
        super(BackupRecoveryProtectionPolicy, __self__).__init__(
            'ibm:index/backupRecoveryProtectionPolicy:BackupRecoveryProtectionPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_policy: Optional[pulumi.Input[Union['BackupRecoveryProtectionPolicyBackupPolicyArgs', 'BackupRecoveryProtectionPolicyBackupPolicyArgsDict']]] = None,
            backup_recovery_protection_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            blackout_windows: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyBlackoutWindowArgs', 'BackupRecoveryProtectionPolicyBlackoutWindowArgsDict']]]]] = None,
            cascaded_targets_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs', 'BackupRecoveryProtectionPolicyCascadedTargetsConfigArgsDict']]]]] = None,
            data_lock: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            extended_retentions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyExtendedRetentionArgs', 'BackupRecoveryProtectionPolicyExtendedRetentionArgsDict']]]]] = None,
            is_cbs_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            is_replicated: Optional[pulumi.Input[_builtins.bool]] = None,
            is_usable: Optional[pulumi.Input[_builtins.bool]] = None,
            last_modification_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            num_protected_objects: Optional[pulumi.Input[_builtins.float]] = None,
            num_protection_groups: Optional[pulumi.Input[_builtins.float]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            remote_target_policy: Optional[pulumi.Input[Union['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs', 'BackupRecoveryProtectionPolicyRemoteTargetPolicyArgsDict']]] = None,
            retry_options: Optional[pulumi.Input[Union['BackupRecoveryProtectionPolicyRetryOptionsArgs', 'BackupRecoveryProtectionPolicyRetryOptionsArgsDict']]] = None,
            template_id: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.float]] = None,
            x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupRecoveryProtectionPolicy':
        """
        Get an existing BackupRecoveryProtectionPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['BackupRecoveryProtectionPolicyBackupPolicyArgs', 'BackupRecoveryProtectionPolicyBackupPolicyArgsDict']] backup_policy: Specifies the backup schedule and retentions of a Protection Policy.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyBlackoutWindowArgs', 'BackupRecoveryProtectionPolicyBlackoutWindowArgsDict']]]] blackout_windows: List of Blackout Windows. If specified, this field defines blackout periods when new Group Runs are not started. If a
               Group Run has been scheduled but not yet executed and the blackout period starts, the behavior depends on the policy
               field AbortInBlackoutPeriod.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyCascadedTargetsConfigArgs', 'BackupRecoveryProtectionPolicyCascadedTargetsConfigArgsDict']]]] cascaded_targets_configs: Specifies the configuration for cascaded replications. Using cascaded replication, replication cluster(Rx) can further
               replicate and archive the snapshot copies to further targets. Its recommended to create cascaded configuration where
               protection group will be created.
        :param pulumi.Input[_builtins.str] data_lock: This field is now deprecated. Please use the DataLockConfig in the backup retention.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the Protection Policy.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionPolicyExtendedRetentionArgs', 'BackupRecoveryProtectionPolicyExtendedRetentionArgsDict']]]] extended_retentions: Specifies additional retention policies that should be applied to the backup snapshots. A backup snapshot will be
               retained up to a time that is the maximum of all retention policies that are applicable to it.
        :param pulumi.Input[_builtins.bool] is_cbs_enabled: Specifies true if Calender Based Schedule is supported by client. Default value is assumed as false for this feature.
        :param pulumi.Input[_builtins.bool] is_replicated: This field is set to true when policy is the replicated policy.
        :param pulumi.Input[_builtins.bool] is_usable: This field is set to true if the linked policy which is internally created from a policy templates qualifies as usable
               to create more policies on the cluster. If the linked policy is partially filled and can not create a working policy
               then this field will be set to false. In case of normal policy created on the cluster, this field wont be populated.
        :param pulumi.Input[_builtins.float] last_modification_time_usecs: Specifies the last time this Policy was updated. If this is passed into a PUT request, then the backend will validate
               that the timestamp passed in matches the time that the policy was actually last modified. If the two timestamps do not
               match, then the request will be rejected with a stale error.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the Protection Policy.
        :param pulumi.Input[_builtins.float] num_protected_objects: Specifies the number of protected objects using the protection policy.
        :param pulumi.Input[_builtins.float] num_protection_groups: Specifies the number of protection groups using the protection policy.
        :param pulumi.Input[_builtins.str] policy_id: policy ID
        :param pulumi.Input[Union['BackupRecoveryProtectionPolicyRemoteTargetPolicyArgs', 'BackupRecoveryProtectionPolicyRemoteTargetPolicyArgsDict']] remote_target_policy: Specifies the replication, archival and cloud spin targets of Protection Policy.
        :param pulumi.Input[Union['BackupRecoveryProtectionPolicyRetryOptionsArgs', 'BackupRecoveryProtectionPolicyRetryOptionsArgsDict']] retry_options: Retry Options of a Protection Policy when a Protection Group run fails.
        :param pulumi.Input[_builtins.str] template_id: Specifies the parent policy template id to which the policy is linked to. This field is set only when policy is created
               from template.
        :param pulumi.Input[_builtins.float] version: Specifies the current policy verison. Policy version is incremented for optionally supporting new features and
               differentialting across releases.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupRecoveryProtectionPolicyState.__new__(_BackupRecoveryProtectionPolicyState)

        __props__.__dict__["backup_policy"] = backup_policy
        __props__.__dict__["backup_recovery_protection_policy_id"] = backup_recovery_protection_policy_id
        __props__.__dict__["blackout_windows"] = blackout_windows
        __props__.__dict__["cascaded_targets_configs"] = cascaded_targets_configs
        __props__.__dict__["data_lock"] = data_lock
        __props__.__dict__["description"] = description
        __props__.__dict__["extended_retentions"] = extended_retentions
        __props__.__dict__["is_cbs_enabled"] = is_cbs_enabled
        __props__.__dict__["is_replicated"] = is_replicated
        __props__.__dict__["is_usable"] = is_usable
        __props__.__dict__["last_modification_time_usecs"] = last_modification_time_usecs
        __props__.__dict__["name"] = name
        __props__.__dict__["num_protected_objects"] = num_protected_objects
        __props__.__dict__["num_protection_groups"] = num_protection_groups
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["remote_target_policy"] = remote_target_policy
        __props__.__dict__["retry_options"] = retry_options
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["version"] = version
        __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
        return BackupRecoveryProtectionPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> pulumi.Output['outputs.BackupRecoveryProtectionPolicyBackupPolicy']:
        """
        Specifies the backup schedule and retentions of a Protection Policy.
        """
        return pulumi.get(self, "backup_policy")

    @_builtins.property
    @pulumi.getter(name="backupRecoveryProtectionPolicyId")
    def backup_recovery_protection_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "backup_recovery_protection_policy_id")

    @_builtins.property
    @pulumi.getter(name="blackoutWindows")
    def blackout_windows(self) -> pulumi.Output[Optional[Sequence['outputs.BackupRecoveryProtectionPolicyBlackoutWindow']]]:
        """
        List of Blackout Windows. If specified, this field defines blackout periods when new Group Runs are not started. If a
        Group Run has been scheduled but not yet executed and the blackout period starts, the behavior depends on the policy
        field AbortInBlackoutPeriod.
        """
        return pulumi.get(self, "blackout_windows")

    @_builtins.property
    @pulumi.getter(name="cascadedTargetsConfigs")
    def cascaded_targets_configs(self) -> pulumi.Output[Optional[Sequence['outputs.BackupRecoveryProtectionPolicyCascadedTargetsConfig']]]:
        """
        Specifies the configuration for cascaded replications. Using cascaded replication, replication cluster(Rx) can further
        replicate and archive the snapshot copies to further targets. Its recommended to create cascaded configuration where
        protection group will be created.
        """
        return pulumi.get(self, "cascaded_targets_configs")

    @_builtins.property
    @pulumi.getter(name="dataLock")
    def data_lock(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        This field is now deprecated. Please use the DataLockConfig in the backup retention.
        """
        return pulumi.get(self, "data_lock")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the Protection Policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="extendedRetentions")
    def extended_retentions(self) -> pulumi.Output[Optional[Sequence['outputs.BackupRecoveryProtectionPolicyExtendedRetention']]]:
        """
        Specifies additional retention policies that should be applied to the backup snapshots. A backup snapshot will be
        retained up to a time that is the maximum of all retention policies that are applicable to it.
        """
        return pulumi.get(self, "extended_retentions")

    @_builtins.property
    @pulumi.getter(name="isCbsEnabled")
    def is_cbs_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies true if Calender Based Schedule is supported by client. Default value is assumed as false for this feature.
        """
        return pulumi.get(self, "is_cbs_enabled")

    @_builtins.property
    @pulumi.getter(name="isReplicated")
    def is_replicated(self) -> pulumi.Output[_builtins.bool]:
        """
        This field is set to true when policy is the replicated policy.
        """
        return pulumi.get(self, "is_replicated")

    @_builtins.property
    @pulumi.getter(name="isUsable")
    def is_usable(self) -> pulumi.Output[_builtins.bool]:
        """
        This field is set to true if the linked policy which is internally created from a policy templates qualifies as usable
        to create more policies on the cluster. If the linked policy is partially filled and can not create a working policy
        then this field will be set to false. In case of normal policy created on the cluster, this field wont be populated.
        """
        return pulumi.get(self, "is_usable")

    @_builtins.property
    @pulumi.getter(name="lastModificationTimeUsecs")
    def last_modification_time_usecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the last time this Policy was updated. If this is passed into a PUT request, then the backend will validate
        that the timestamp passed in matches the time that the policy was actually last modified. If the two timestamps do not
        match, then the request will be rejected with a stale error.
        """
        return pulumi.get(self, "last_modification_time_usecs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the Protection Policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="numProtectedObjects")
    def num_protected_objects(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the number of protected objects using the protection policy.
        """
        return pulumi.get(self, "num_protected_objects")

    @_builtins.property
    @pulumi.getter(name="numProtectionGroups")
    def num_protection_groups(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the number of protection groups using the protection policy.
        """
        return pulumi.get(self, "num_protection_groups")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        policy ID
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="remoteTargetPolicy")
    def remote_target_policy(self) -> pulumi.Output[Optional['outputs.BackupRecoveryProtectionPolicyRemoteTargetPolicy']]:
        """
        Specifies the replication, archival and cloud spin targets of Protection Policy.
        """
        return pulumi.get(self, "remote_target_policy")

    @_builtins.property
    @pulumi.getter(name="retryOptions")
    def retry_options(self) -> pulumi.Output[Optional['outputs.BackupRecoveryProtectionPolicyRetryOptions']]:
        """
        Retry Options of a Protection Policy when a Protection Group run fails.
        """
        return pulumi.get(self, "retry_options")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the parent policy template id to which the policy is linked to. This field is set only when policy is created
        from template.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Specifies the current policy verison. Policy version is incremented for optionally supporting new features and
        differentialting across releases.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

