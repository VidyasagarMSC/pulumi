# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBareMetalServerDisksResult',
    'AwaitableGetIsBareMetalServerDisksResult',
    'get_is_bare_metal_server_disks',
    'get_is_bare_metal_server_disks_output',
]

@pulumi.output_type
class GetIsBareMetalServerDisksResult:
    """
    A collection of values returned by getIsBareMetalServerDisks.
    """
    def __init__(__self__, bare_metal_server=None, disks=None, id=None):
        if bare_metal_server and not isinstance(bare_metal_server, str):
            raise TypeError("Expected argument 'bare_metal_server' to be a str")
        pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        if disks and not isinstance(disks, list):
            raise TypeError("Expected argument 'disks' to be a list")
        pulumi.set(__self__, "disks", disks)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> _builtins.str:
        return pulumi.get(self, "bare_metal_server")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetIsBareMetalServerDisksDiskResult']:
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")


class AwaitableGetIsBareMetalServerDisksResult(GetIsBareMetalServerDisksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBareMetalServerDisksResult(
            bare_metal_server=self.bare_metal_server,
            disks=self.disks,
            id=self.id)


def get_is_bare_metal_server_disks(bare_metal_server: Optional[_builtins.str] = None,
                                   id: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBareMetalServerDisksResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bareMetalServer'] = bare_metal_server
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBareMetalServerDisks:getIsBareMetalServerDisks', __args__, opts=opts, typ=GetIsBareMetalServerDisksResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBareMetalServerDisksResult(
        bare_metal_server=pulumi.get(__ret__, 'bare_metal_server'),
        disks=pulumi.get(__ret__, 'disks'),
        id=pulumi.get(__ret__, 'id'))
def get_is_bare_metal_server_disks_output(bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                                          id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBareMetalServerDisksResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bareMetalServer'] = bare_metal_server
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBareMetalServerDisks:getIsBareMetalServerDisks', __args__, opts=opts, typ=GetIsBareMetalServerDisksResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBareMetalServerDisksResult(
        bare_metal_server=pulumi.get(__response__, 'bare_metal_server'),
        disks=pulumi.get(__response__, 'disks'),
        id=pulumi.get(__response__, 'id')))
