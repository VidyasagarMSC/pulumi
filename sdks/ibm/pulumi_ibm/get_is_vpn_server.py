# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpnServerResult',
    'AwaitableGetIsVpnServerResult',
    'get_is_vpn_server',
    'get_is_vpn_server_output',
]

@pulumi.output_type
class GetIsVpnServerResult:
    """
    A collection of values returned by getIsVpnServer.
    """
    def __init__(__self__, access_tags=None, certificates=None, client_authentications=None, client_auto_delete=None, client_auto_delete_timeout=None, client_dns_server_ips=None, client_idle_timeout=None, client_ip_pool=None, created_at=None, crn=None, enable_split_tunneling=None, health_reasons=None, health_state=None, hostname=None, href=None, id=None, identifier=None, lifecycle_reasons=None, lifecycle_state=None, name=None, port=None, private_ips=None, protocol=None, resource_groups=None, resource_type=None, security_groups=None, subnets=None, vpcs=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if client_authentications and not isinstance(client_authentications, list):
            raise TypeError("Expected argument 'client_authentications' to be a list")
        pulumi.set(__self__, "client_authentications", client_authentications)
        if client_auto_delete and not isinstance(client_auto_delete, bool):
            raise TypeError("Expected argument 'client_auto_delete' to be a bool")
        pulumi.set(__self__, "client_auto_delete", client_auto_delete)
        if client_auto_delete_timeout and not isinstance(client_auto_delete_timeout, float):
            raise TypeError("Expected argument 'client_auto_delete_timeout' to be a float")
        pulumi.set(__self__, "client_auto_delete_timeout", client_auto_delete_timeout)
        if client_dns_server_ips and not isinstance(client_dns_server_ips, list):
            raise TypeError("Expected argument 'client_dns_server_ips' to be a list")
        pulumi.set(__self__, "client_dns_server_ips", client_dns_server_ips)
        if client_idle_timeout and not isinstance(client_idle_timeout, float):
            raise TypeError("Expected argument 'client_idle_timeout' to be a float")
        pulumi.set(__self__, "client_idle_timeout", client_idle_timeout)
        if client_ip_pool and not isinstance(client_ip_pool, str):
            raise TypeError("Expected argument 'client_ip_pool' to be a str")
        pulumi.set(__self__, "client_ip_pool", client_ip_pool)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if enable_split_tunneling and not isinstance(enable_split_tunneling, bool):
            raise TypeError("Expected argument 'enable_split_tunneling' to be a bool")
        pulumi.set(__self__, "enable_split_tunneling", enable_split_tunneling)
        if health_reasons and not isinstance(health_reasons, list):
            raise TypeError("Expected argument 'health_reasons' to be a list")
        pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state and not isinstance(health_state, str):
            raise TypeError("Expected argument 'health_state' to be a str")
        pulumi.set(__self__, "health_state", health_state)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if lifecycle_reasons and not isinstance(lifecycle_reasons, list):
            raise TypeError("Expected argument 'lifecycle_reasons' to be a list")
        pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if port and not isinstance(port, float):
            raise TypeError("Expected argument 'port' to be a float")
        pulumi.set(__self__, "port", port)
        if private_ips and not isinstance(private_ips, list):
            raise TypeError("Expected argument 'private_ips' to be a list")
        pulumi.set(__self__, "private_ips", private_ips)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if resource_groups and not isinstance(resource_groups, list):
            raise TypeError("Expected argument 'resource_groups' to be a list")
        pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if vpcs and not isinstance(vpcs, list):
            raise TypeError("Expected argument 'vpcs' to be a list")
        pulumi.set(__self__, "vpcs", vpcs)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetIsVpnServerCertificateResult']:
        return pulumi.get(self, "certificates")

    @_builtins.property
    @pulumi.getter(name="clientAuthentications")
    def client_authentications(self) -> Sequence['outputs.GetIsVpnServerClientAuthenticationResult']:
        return pulumi.get(self, "client_authentications")

    @_builtins.property
    @pulumi.getter(name="clientAutoDelete")
    def client_auto_delete(self) -> _builtins.bool:
        return pulumi.get(self, "client_auto_delete")

    @_builtins.property
    @pulumi.getter(name="clientAutoDeleteTimeout")
    def client_auto_delete_timeout(self) -> _builtins.float:
        return pulumi.get(self, "client_auto_delete_timeout")

    @_builtins.property
    @pulumi.getter(name="clientDnsServerIps")
    def client_dns_server_ips(self) -> Sequence['outputs.GetIsVpnServerClientDnsServerIpResult']:
        return pulumi.get(self, "client_dns_server_ips")

    @_builtins.property
    @pulumi.getter(name="clientIdleTimeout")
    def client_idle_timeout(self) -> _builtins.float:
        return pulumi.get(self, "client_idle_timeout")

    @_builtins.property
    @pulumi.getter(name="clientIpPool")
    def client_ip_pool(self) -> _builtins.str:
        return pulumi.get(self, "client_ip_pool")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="enableSplitTunneling")
    def enable_split_tunneling(self) -> _builtins.bool:
        return pulumi.get(self, "enable_split_tunneling")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Sequence['outputs.GetIsVpnServerHealthReasonResult']:
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> _builtins.str:
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Sequence['outputs.GetIsVpnServerLifecycleReasonResult']:
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence['outputs.GetIsVpnServerPrivateIpResult']:
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Sequence['outputs.GetIsVpnServerResourceGroupResult']:
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetIsVpnServerSecurityGroupResult']:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetIsVpnServerSubnetResult']:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetIsVpnServerVpcResult']:
        return pulumi.get(self, "vpcs")


class AwaitableGetIsVpnServerResult(GetIsVpnServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpnServerResult(
            access_tags=self.access_tags,
            certificates=self.certificates,
            client_authentications=self.client_authentications,
            client_auto_delete=self.client_auto_delete,
            client_auto_delete_timeout=self.client_auto_delete_timeout,
            client_dns_server_ips=self.client_dns_server_ips,
            client_idle_timeout=self.client_idle_timeout,
            client_ip_pool=self.client_ip_pool,
            created_at=self.created_at,
            crn=self.crn,
            enable_split_tunneling=self.enable_split_tunneling,
            health_reasons=self.health_reasons,
            health_state=self.health_state,
            hostname=self.hostname,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            lifecycle_reasons=self.lifecycle_reasons,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            port=self.port,
            private_ips=self.private_ips,
            protocol=self.protocol,
            resource_groups=self.resource_groups,
            resource_type=self.resource_type,
            security_groups=self.security_groups,
            subnets=self.subnets,
            vpcs=self.vpcs)


def get_is_vpn_server(id: Optional[_builtins.str] = None,
                      identifier: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpnServerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpnServer:getIsVpnServer', __args__, opts=opts, typ=GetIsVpnServerResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpnServerResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        certificates=pulumi.get(__ret__, 'certificates'),
        client_authentications=pulumi.get(__ret__, 'client_authentications'),
        client_auto_delete=pulumi.get(__ret__, 'client_auto_delete'),
        client_auto_delete_timeout=pulumi.get(__ret__, 'client_auto_delete_timeout'),
        client_dns_server_ips=pulumi.get(__ret__, 'client_dns_server_ips'),
        client_idle_timeout=pulumi.get(__ret__, 'client_idle_timeout'),
        client_ip_pool=pulumi.get(__ret__, 'client_ip_pool'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        enable_split_tunneling=pulumi.get(__ret__, 'enable_split_tunneling'),
        health_reasons=pulumi.get(__ret__, 'health_reasons'),
        health_state=pulumi.get(__ret__, 'health_state'),
        hostname=pulumi.get(__ret__, 'hostname'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        lifecycle_reasons=pulumi.get(__ret__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        port=pulumi.get(__ret__, 'port'),
        private_ips=pulumi.get(__ret__, 'private_ips'),
        protocol=pulumi.get(__ret__, 'protocol'),
        resource_groups=pulumi.get(__ret__, 'resource_groups'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        subnets=pulumi.get(__ret__, 'subnets'),
        vpcs=pulumi.get(__ret__, 'vpcs'))
def get_is_vpn_server_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpnServerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpnServer:getIsVpnServer', __args__, opts=opts, typ=GetIsVpnServerResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpnServerResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        certificates=pulumi.get(__response__, 'certificates'),
        client_authentications=pulumi.get(__response__, 'client_authentications'),
        client_auto_delete=pulumi.get(__response__, 'client_auto_delete'),
        client_auto_delete_timeout=pulumi.get(__response__, 'client_auto_delete_timeout'),
        client_dns_server_ips=pulumi.get(__response__, 'client_dns_server_ips'),
        client_idle_timeout=pulumi.get(__response__, 'client_idle_timeout'),
        client_ip_pool=pulumi.get(__response__, 'client_ip_pool'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        enable_split_tunneling=pulumi.get(__response__, 'enable_split_tunneling'),
        health_reasons=pulumi.get(__response__, 'health_reasons'),
        health_state=pulumi.get(__response__, 'health_state'),
        hostname=pulumi.get(__response__, 'hostname'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        lifecycle_reasons=pulumi.get(__response__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        port=pulumi.get(__response__, 'port'),
        private_ips=pulumi.get(__response__, 'private_ips'),
        protocol=pulumi.get(__response__, 'protocol'),
        resource_groups=pulumi.get(__response__, 'resource_groups'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        subnets=pulumi.get(__response__, 'subnets'),
        vpcs=pulumi.get(__response__, 'vpcs')))
