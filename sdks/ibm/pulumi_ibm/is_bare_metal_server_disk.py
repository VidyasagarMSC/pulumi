# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsBareMetalServerDiskInitArgs', 'IsBareMetalServerDisk']

@pulumi.input_type
class IsBareMetalServerDiskInitArgs:
    def __init__(__self__, *,
                 bare_metal_server: pulumi.Input[_builtins.str],
                 disk: pulumi.Input[_builtins.str],
                 is_bare_metal_server_disk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsBareMetalServerDiskTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsBareMetalServerDisk resource.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] disk: Bare metal server disk identifier
        :param pulumi.Input[_builtins.str] name: Bare metal server disk name
        """
        pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        pulumi.set(__self__, "disk", disk)
        if is_bare_metal_server_disk_id is not None:
            pulumi.set(__self__, "is_bare_metal_server_disk_id", is_bare_metal_server_disk_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> pulumi.Input[_builtins.str]:
        """
        Bare metal server identifier
        """
        return pulumi.get(self, "bare_metal_server")

    @bare_metal_server.setter
    def bare_metal_server(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bare_metal_server", value)

    @_builtins.property
    @pulumi.getter
    def disk(self) -> pulumi.Input[_builtins.str]:
        """
        Bare metal server disk identifier
        """
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "disk", value)

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerDiskId")
    def is_bare_metal_server_disk_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_bare_metal_server_disk_id")

    @is_bare_metal_server_disk_id.setter
    def is_bare_metal_server_disk_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_bare_metal_server_disk_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server disk name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsBareMetalServerDiskTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsBareMetalServerDiskTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsBareMetalServerDiskState:
    def __init__(__self__, *,
                 allowed_uses: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerDiskAllowedUseArgs']]]] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 disk: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_disk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.float]] = None,
                 timeouts: Optional[pulumi.Input['IsBareMetalServerDiskTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering IsBareMetalServerDisk resources.
        :param pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerDiskAllowedUseArgs']]] allowed_uses: The usage constraints to match against the requested instance or bare metal server properties to determine
               compatibility.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] created_at: The date and time that the disk was created.
        :param pulumi.Input[_builtins.str] disk: Bare metal server disk identifier
        :param pulumi.Input[_builtins.str] href: The URL for this bare metal server disk.
        :param pulumi.Input[_builtins.str] interface_type: The disk attachment interface used:- `fcp`: Fiber Channel Protocol- `sata`: Serial Advanced Technology Attachment-
               `nvme`: Non-Volatile Memory ExpressThe enumerated values for this property
               may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        :param pulumi.Input[_builtins.str] name: Bare metal server disk name
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.float] size: The size of the disk in GB (gigabytes).
        """
        if allowed_uses is not None:
            pulumi.set(__self__, "allowed_uses", allowed_uses)
        if bare_metal_server is not None:
            pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if interface_type is not None:
            pulumi.set(__self__, "interface_type", interface_type)
        if is_bare_metal_server_disk_id is not None:
            pulumi.set(__self__, "is_bare_metal_server_disk_id", is_bare_metal_server_disk_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="allowedUses")
    def allowed_uses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerDiskAllowedUseArgs']]]]:
        """
        The usage constraints to match against the requested instance or bare metal server properties to determine
        compatibility.
        """
        return pulumi.get(self, "allowed_uses")

    @allowed_uses.setter
    def allowed_uses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerDiskAllowedUseArgs']]]]):
        pulumi.set(self, "allowed_uses", value)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server identifier
        """
        return pulumi.get(self, "bare_metal_server")

    @bare_metal_server.setter
    def bare_metal_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bare_metal_server", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the disk was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def disk(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server disk identifier
        """
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disk", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this bare metal server disk.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The disk attachment interface used:- `fcp`: Fiber Channel Protocol- `sata`: Serial Advanced Technology Attachment-
        `nvme`: Non-Volatile Memory ExpressThe enumerated values for this property
        may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        """
        return pulumi.get(self, "interface_type")

    @interface_type.setter
    def interface_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_type", value)

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerDiskId")
    def is_bare_metal_server_disk_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_bare_metal_server_disk_id")

    @is_bare_metal_server_disk_id.setter
    def is_bare_metal_server_disk_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_bare_metal_server_disk_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server disk name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The size of the disk in GB (gigabytes).
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsBareMetalServerDiskTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsBareMetalServerDiskTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/isBareMetalServerDisk:IsBareMetalServerDisk")
class IsBareMetalServerDisk(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 disk: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_disk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsBareMetalServerDiskTimeoutsArgs', 'IsBareMetalServerDiskTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsBareMetalServerDisk resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] disk: Bare metal server disk identifier
        :param pulumi.Input[_builtins.str] name: Bare metal server disk name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsBareMetalServerDiskInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsBareMetalServerDisk resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsBareMetalServerDiskInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsBareMetalServerDiskInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 disk: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_disk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsBareMetalServerDiskTimeoutsArgs', 'IsBareMetalServerDiskTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsBareMetalServerDiskInitArgs.__new__(IsBareMetalServerDiskInitArgs)

            if bare_metal_server is None and not opts.urn:
                raise TypeError("Missing required property 'bare_metal_server'")
            __props__.__dict__["bare_metal_server"] = bare_metal_server
            if disk is None and not opts.urn:
                raise TypeError("Missing required property 'disk'")
            __props__.__dict__["disk"] = disk
            __props__.__dict__["is_bare_metal_server_disk_id"] = is_bare_metal_server_disk_id
            __props__.__dict__["name"] = name
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["allowed_uses"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["interface_type"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["size"] = None
        super(IsBareMetalServerDisk, __self__).__init__(
            'ibm:index/isBareMetalServerDisk:IsBareMetalServerDisk',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_uses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerDiskAllowedUseArgs', 'IsBareMetalServerDiskAllowedUseArgsDict']]]]] = None,
            bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            disk: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            interface_type: Optional[pulumi.Input[_builtins.str]] = None,
            is_bare_metal_server_disk_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.float]] = None,
            timeouts: Optional[pulumi.Input[Union['IsBareMetalServerDiskTimeoutsArgs', 'IsBareMetalServerDiskTimeoutsArgsDict']]] = None) -> 'IsBareMetalServerDisk':
        """
        Get an existing IsBareMetalServerDisk resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerDiskAllowedUseArgs', 'IsBareMetalServerDiskAllowedUseArgsDict']]]] allowed_uses: The usage constraints to match against the requested instance or bare metal server properties to determine
               compatibility.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] created_at: The date and time that the disk was created.
        :param pulumi.Input[_builtins.str] disk: Bare metal server disk identifier
        :param pulumi.Input[_builtins.str] href: The URL for this bare metal server disk.
        :param pulumi.Input[_builtins.str] interface_type: The disk attachment interface used:- `fcp`: Fiber Channel Protocol- `sata`: Serial Advanced Technology Attachment-
               `nvme`: Non-Volatile Memory ExpressThe enumerated values for this property
               may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        :param pulumi.Input[_builtins.str] name: Bare metal server disk name
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.float] size: The size of the disk in GB (gigabytes).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsBareMetalServerDiskState.__new__(_IsBareMetalServerDiskState)

        __props__.__dict__["allowed_uses"] = allowed_uses
        __props__.__dict__["bare_metal_server"] = bare_metal_server
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["disk"] = disk
        __props__.__dict__["href"] = href
        __props__.__dict__["interface_type"] = interface_type
        __props__.__dict__["is_bare_metal_server_disk_id"] = is_bare_metal_server_disk_id
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["size"] = size
        __props__.__dict__["timeouts"] = timeouts
        return IsBareMetalServerDisk(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowedUses")
    def allowed_uses(self) -> pulumi.Output[Sequence['outputs.IsBareMetalServerDiskAllowedUse']]:
        """
        The usage constraints to match against the requested instance or bare metal server properties to determine
        compatibility.
        """
        return pulumi.get(self, "allowed_uses")

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> pulumi.Output[_builtins.str]:
        """
        Bare metal server identifier
        """
        return pulumi.get(self, "bare_metal_server")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the disk was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def disk(self) -> pulumi.Output[_builtins.str]:
        """
        Bare metal server disk identifier
        """
        return pulumi.get(self, "disk")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this bare metal server disk.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> pulumi.Output[_builtins.str]:
        """
        The disk attachment interface used:- `fcp`: Fiber Channel Protocol- `sata`: Serial Advanced Technology Attachment-
        `nvme`: Non-Volatile Memory ExpressThe enumerated values for this property
        may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        """
        return pulumi.get(self, "interface_type")

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerDiskId")
    def is_bare_metal_server_disk_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_bare_metal_server_disk_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Bare metal server disk name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.float]:
        """
        The size of the disk in GB (gigabytes).
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsBareMetalServerDiskTimeouts']]:
        return pulumi.get(self, "timeouts")

