# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCodeEngineBindingResult',
    'AwaitableGetCodeEngineBindingResult',
    'get_code_engine_binding',
    'get_code_engine_binding_output',
]

@pulumi.output_type
class GetCodeEngineBindingResult:
    """
    A collection of values returned by getCodeEngineBinding.
    """
    def __init__(__self__, binding_id=None, components=None, href=None, id=None, prefix=None, project_id=None, resource_type=None, secret_name=None, status=None):
        if binding_id and not isinstance(binding_id, str):
            raise TypeError("Expected argument 'binding_id' to be a str")
        pulumi.set(__self__, "binding_id", binding_id)
        if components and not isinstance(components, list):
            raise TypeError("Expected argument 'components' to be a list")
        pulumi.set(__self__, "components", components)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if prefix and not isinstance(prefix, str):
            raise TypeError("Expected argument 'prefix' to be a str")
        pulumi.set(__self__, "prefix", prefix)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if secret_name and not isinstance(secret_name, str):
            raise TypeError("Expected argument 'secret_name' to be a str")
        pulumi.set(__self__, "secret_name", secret_name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="bindingId")
    def binding_id(self) -> _builtins.str:
        return pulumi.get(self, "binding_id")

    @_builtins.property
    @pulumi.getter
    def components(self) -> Sequence['outputs.GetCodeEngineBindingComponentResult']:
        return pulumi.get(self, "components")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> _builtins.str:
        return pulumi.get(self, "secret_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


class AwaitableGetCodeEngineBindingResult(GetCodeEngineBindingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCodeEngineBindingResult(
            binding_id=self.binding_id,
            components=self.components,
            href=self.href,
            id=self.id,
            prefix=self.prefix,
            project_id=self.project_id,
            resource_type=self.resource_type,
            secret_name=self.secret_name,
            status=self.status)


def get_code_engine_binding(binding_id: Optional[_builtins.str] = None,
                            id: Optional[_builtins.str] = None,
                            project_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCodeEngineBindingResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bindingId'] = binding_id
    __args__['id'] = id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCodeEngineBinding:getCodeEngineBinding', __args__, opts=opts, typ=GetCodeEngineBindingResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCodeEngineBindingResult(
        binding_id=pulumi.get(__ret__, 'binding_id'),
        components=pulumi.get(__ret__, 'components'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        prefix=pulumi.get(__ret__, 'prefix'),
        project_id=pulumi.get(__ret__, 'project_id'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        secret_name=pulumi.get(__ret__, 'secret_name'),
        status=pulumi.get(__ret__, 'status'))
def get_code_engine_binding_output(binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCodeEngineBindingResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bindingId'] = binding_id
    __args__['id'] = id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCodeEngineBinding:getCodeEngineBinding', __args__, opts=opts, typ=GetCodeEngineBindingResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCodeEngineBindingResult(
        binding_id=pulumi.get(__response__, 'binding_id'),
        components=pulumi.get(__response__, 'components'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        prefix=pulumi.get(__response__, 'prefix'),
        project_id=pulumi.get(__response__, 'project_id'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        secret_name=pulumi.get(__response__, 'secret_name'),
        status=pulumi.get(__response__, 'status')))
