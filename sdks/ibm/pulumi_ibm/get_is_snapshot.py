# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetIsSnapshotResult',
    'AwaitableGetIsSnapshotResult',
    'get_is_snapshot',
    'get_is_snapshot_output',
]

@pulumi.output_type
class GetIsSnapshotResult:
    """
    A collection of values returned by getIsSnapshot.
    """
    def __init__(__self__, access_tags=None, allowed_uses=None, backup_policy_plans=None, bootable=None, captured_at=None, catalog_offerings=None, clones=None, copies=None, crn=None, encryption=None, encryption_key=None, href=None, id=None, identifier=None, lifecycle_state=None, minimum_capacity=None, name=None, operating_system=None, resource_group=None, resource_type=None, service_tags=None, size=None, snapshot_consistency_groups=None, source_image=None, source_snapshots=None, source_volume=None, tags=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if allowed_uses and not isinstance(allowed_uses, list):
            raise TypeError("Expected argument 'allowed_uses' to be a list")
        pulumi.set(__self__, "allowed_uses", allowed_uses)
        if backup_policy_plans and not isinstance(backup_policy_plans, list):
            raise TypeError("Expected argument 'backup_policy_plans' to be a list")
        pulumi.set(__self__, "backup_policy_plans", backup_policy_plans)
        if bootable and not isinstance(bootable, bool):
            raise TypeError("Expected argument 'bootable' to be a bool")
        pulumi.set(__self__, "bootable", bootable)
        if captured_at and not isinstance(captured_at, str):
            raise TypeError("Expected argument 'captured_at' to be a str")
        pulumi.set(__self__, "captured_at", captured_at)
        if catalog_offerings and not isinstance(catalog_offerings, list):
            raise TypeError("Expected argument 'catalog_offerings' to be a list")
        pulumi.set(__self__, "catalog_offerings", catalog_offerings)
        if clones and not isinstance(clones, list):
            raise TypeError("Expected argument 'clones' to be a list")
        pulumi.set(__self__, "clones", clones)
        if copies and not isinstance(copies, list):
            raise TypeError("Expected argument 'copies' to be a list")
        pulumi.set(__self__, "copies", copies)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if encryption and not isinstance(encryption, str):
            raise TypeError("Expected argument 'encryption' to be a str")
        pulumi.set(__self__, "encryption", encryption)
        if encryption_key and not isinstance(encryption_key, str):
            raise TypeError("Expected argument 'encryption_key' to be a str")
        pulumi.set(__self__, "encryption_key", encryption_key)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if minimum_capacity and not isinstance(minimum_capacity, float):
            raise TypeError("Expected argument 'minimum_capacity' to be a float")
        pulumi.set(__self__, "minimum_capacity", minimum_capacity)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operating_system and not isinstance(operating_system, str):
            raise TypeError("Expected argument 'operating_system' to be a str")
        pulumi.set(__self__, "operating_system", operating_system)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if service_tags and not isinstance(service_tags, list):
            raise TypeError("Expected argument 'service_tags' to be a list")
        pulumi.set(__self__, "service_tags", service_tags)
        if size and not isinstance(size, float):
            raise TypeError("Expected argument 'size' to be a float")
        pulumi.set(__self__, "size", size)
        if snapshot_consistency_groups and not isinstance(snapshot_consistency_groups, list):
            raise TypeError("Expected argument 'snapshot_consistency_groups' to be a list")
        pulumi.set(__self__, "snapshot_consistency_groups", snapshot_consistency_groups)
        if source_image and not isinstance(source_image, str):
            raise TypeError("Expected argument 'source_image' to be a str")
        pulumi.set(__self__, "source_image", source_image)
        if source_snapshots and not isinstance(source_snapshots, list):
            raise TypeError("Expected argument 'source_snapshots' to be a list")
        pulumi.set(__self__, "source_snapshots", source_snapshots)
        if source_volume and not isinstance(source_volume, str):
            raise TypeError("Expected argument 'source_volume' to be a str")
        pulumi.set(__self__, "source_volume", source_volume)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="allowedUses")
    def allowed_uses(self) -> Sequence['outputs.GetIsSnapshotAllowedUseResult']:
        return pulumi.get(self, "allowed_uses")

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlans")
    def backup_policy_plans(self) -> Sequence['outputs.GetIsSnapshotBackupPolicyPlanResult']:
        return pulumi.get(self, "backup_policy_plans")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.bool:
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter(name="capturedAt")
    def captured_at(self) -> _builtins.str:
        return pulumi.get(self, "captured_at")

    @_builtins.property
    @pulumi.getter(name="catalogOfferings")
    def catalog_offerings(self) -> Sequence['outputs.GetIsSnapshotCatalogOfferingResult']:
        return pulumi.get(self, "catalog_offerings")

    @_builtins.property
    @pulumi.getter
    def clones(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "clones")

    @_builtins.property
    @pulumi.getter
    def copies(self) -> Sequence['outputs.GetIsSnapshotCopyResult']:
        return pulumi.get(self, "copies")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> _builtins.str:
        return pulumi.get(self, "encryption")

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> _builtins.str:
        return pulumi.get(self, "encryption_key")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="minimumCapacity")
    def minimum_capacity(self) -> _builtins.float:
        return pulumi.get(self, "minimum_capacity")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> _builtins.str:
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="serviceTags")
    def service_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "service_tags")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.float:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotConsistencyGroups")
    def snapshot_consistency_groups(self) -> Sequence['outputs.GetIsSnapshotSnapshotConsistencyGroupResult']:
        return pulumi.get(self, "snapshot_consistency_groups")

    @_builtins.property
    @pulumi.getter(name="sourceImage")
    def source_image(self) -> _builtins.str:
        return pulumi.get(self, "source_image")

    @_builtins.property
    @pulumi.getter(name="sourceSnapshots")
    def source_snapshots(self) -> Optional[Sequence['outputs.GetIsSnapshotSourceSnapshotResult']]:
        return pulumi.get(self, "source_snapshots")

    @_builtins.property
    @pulumi.getter(name="sourceVolume")
    def source_volume(self) -> _builtins.str:
        return pulumi.get(self, "source_volume")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")


class AwaitableGetIsSnapshotResult(GetIsSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsSnapshotResult(
            access_tags=self.access_tags,
            allowed_uses=self.allowed_uses,
            backup_policy_plans=self.backup_policy_plans,
            bootable=self.bootable,
            captured_at=self.captured_at,
            catalog_offerings=self.catalog_offerings,
            clones=self.clones,
            copies=self.copies,
            crn=self.crn,
            encryption=self.encryption,
            encryption_key=self.encryption_key,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            lifecycle_state=self.lifecycle_state,
            minimum_capacity=self.minimum_capacity,
            name=self.name,
            operating_system=self.operating_system,
            resource_group=self.resource_group,
            resource_type=self.resource_type,
            service_tags=self.service_tags,
            size=self.size,
            snapshot_consistency_groups=self.snapshot_consistency_groups,
            source_image=self.source_image,
            source_snapshots=self.source_snapshots,
            source_volume=self.source_volume,
            tags=self.tags)


def get_is_snapshot(id: Optional[_builtins.str] = None,
                    identifier: Optional[_builtins.str] = None,
                    name: Optional[_builtins.str] = None,
                    source_snapshots: Optional[Sequence[Union['GetIsSnapshotSourceSnapshotArgs', 'GetIsSnapshotSourceSnapshotArgsDict']]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsSnapshotResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['sourceSnapshots'] = source_snapshots
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsSnapshot:getIsSnapshot', __args__, opts=opts, typ=GetIsSnapshotResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsSnapshotResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        allowed_uses=pulumi.get(__ret__, 'allowed_uses'),
        backup_policy_plans=pulumi.get(__ret__, 'backup_policy_plans'),
        bootable=pulumi.get(__ret__, 'bootable'),
        captured_at=pulumi.get(__ret__, 'captured_at'),
        catalog_offerings=pulumi.get(__ret__, 'catalog_offerings'),
        clones=pulumi.get(__ret__, 'clones'),
        copies=pulumi.get(__ret__, 'copies'),
        crn=pulumi.get(__ret__, 'crn'),
        encryption=pulumi.get(__ret__, 'encryption'),
        encryption_key=pulumi.get(__ret__, 'encryption_key'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        minimum_capacity=pulumi.get(__ret__, 'minimum_capacity'),
        name=pulumi.get(__ret__, 'name'),
        operating_system=pulumi.get(__ret__, 'operating_system'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        service_tags=pulumi.get(__ret__, 'service_tags'),
        size=pulumi.get(__ret__, 'size'),
        snapshot_consistency_groups=pulumi.get(__ret__, 'snapshot_consistency_groups'),
        source_image=pulumi.get(__ret__, 'source_image'),
        source_snapshots=pulumi.get(__ret__, 'source_snapshots'),
        source_volume=pulumi.get(__ret__, 'source_volume'),
        tags=pulumi.get(__ret__, 'tags'))
def get_is_snapshot_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           source_snapshots: Optional[pulumi.Input[Optional[Sequence[Union['GetIsSnapshotSourceSnapshotArgs', 'GetIsSnapshotSourceSnapshotArgsDict']]]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsSnapshotResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['sourceSnapshots'] = source_snapshots
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsSnapshot:getIsSnapshot', __args__, opts=opts, typ=GetIsSnapshotResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsSnapshotResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        allowed_uses=pulumi.get(__response__, 'allowed_uses'),
        backup_policy_plans=pulumi.get(__response__, 'backup_policy_plans'),
        bootable=pulumi.get(__response__, 'bootable'),
        captured_at=pulumi.get(__response__, 'captured_at'),
        catalog_offerings=pulumi.get(__response__, 'catalog_offerings'),
        clones=pulumi.get(__response__, 'clones'),
        copies=pulumi.get(__response__, 'copies'),
        crn=pulumi.get(__response__, 'crn'),
        encryption=pulumi.get(__response__, 'encryption'),
        encryption_key=pulumi.get(__response__, 'encryption_key'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        minimum_capacity=pulumi.get(__response__, 'minimum_capacity'),
        name=pulumi.get(__response__, 'name'),
        operating_system=pulumi.get(__response__, 'operating_system'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        service_tags=pulumi.get(__response__, 'service_tags'),
        size=pulumi.get(__response__, 'size'),
        snapshot_consistency_groups=pulumi.get(__response__, 'snapshot_consistency_groups'),
        source_image=pulumi.get(__response__, 'source_image'),
        source_snapshots=pulumi.get(__response__, 'source_snapshots'),
        source_volume=pulumi.get(__response__, 'source_volume'),
        tags=pulumi.get(__response__, 'tags')))
