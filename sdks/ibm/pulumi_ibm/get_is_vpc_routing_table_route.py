# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpcRoutingTableRouteResult',
    'AwaitableGetIsVpcRoutingTableRouteResult',
    'get_is_vpc_routing_table_route',
    'get_is_vpc_routing_table_route_output',
]

@pulumi.output_type
class GetIsVpcRoutingTableRouteResult:
    """
    A collection of values returned by getIsVpcRoutingTableRoute.
    """
    def __init__(__self__, action=None, advertise=None, created_at=None, creators=None, destination=None, href=None, id=None, lifecycle_state=None, name=None, next_hops=None, origin=None, priority=None, route_id=None, routing_table=None, vpc=None, zones=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if advertise and not isinstance(advertise, bool):
            raise TypeError("Expected argument 'advertise' to be a bool")
        pulumi.set(__self__, "advertise", advertise)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if creators and not isinstance(creators, list):
            raise TypeError("Expected argument 'creators' to be a list")
        pulumi.set(__self__, "creators", creators)
        if destination and not isinstance(destination, str):
            raise TypeError("Expected argument 'destination' to be a str")
        pulumi.set(__self__, "destination", destination)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if next_hops and not isinstance(next_hops, list):
            raise TypeError("Expected argument 'next_hops' to be a list")
        pulumi.set(__self__, "next_hops", next_hops)
        if origin and not isinstance(origin, str):
            raise TypeError("Expected argument 'origin' to be a str")
        pulumi.set(__self__, "origin", origin)
        if priority and not isinstance(priority, float):
            raise TypeError("Expected argument 'priority' to be a float")
        pulumi.set(__self__, "priority", priority)
        if route_id and not isinstance(route_id, str):
            raise TypeError("Expected argument 'route_id' to be a str")
        pulumi.set(__self__, "route_id", route_id)
        if routing_table and not isinstance(routing_table, str):
            raise TypeError("Expected argument 'routing_table' to be a str")
        pulumi.set(__self__, "routing_table", routing_table)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def advertise(self) -> _builtins.bool:
        return pulumi.get(self, "advertise")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creators(self) -> Sequence['outputs.GetIsVpcRoutingTableRouteCreatorResult']:
        return pulumi.get(self, "creators")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Sequence['outputs.GetIsVpcRoutingTableRouteNextHopResult']:
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> _builtins.str:
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.float:
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="routeId")
    def route_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_id")

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> _builtins.str:
        return pulumi.get(self, "routing_table")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> _builtins.str:
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetIsVpcRoutingTableRouteZoneResult']:
        return pulumi.get(self, "zones")


class AwaitableGetIsVpcRoutingTableRouteResult(GetIsVpcRoutingTableRouteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpcRoutingTableRouteResult(
            action=self.action,
            advertise=self.advertise,
            created_at=self.created_at,
            creators=self.creators,
            destination=self.destination,
            href=self.href,
            id=self.id,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            next_hops=self.next_hops,
            origin=self.origin,
            priority=self.priority,
            route_id=self.route_id,
            routing_table=self.routing_table,
            vpc=self.vpc,
            zones=self.zones)


def get_is_vpc_routing_table_route(id: Optional[_builtins.str] = None,
                                   name: Optional[_builtins.str] = None,
                                   route_id: Optional[_builtins.str] = None,
                                   routing_table: Optional[_builtins.str] = None,
                                   vpc: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpcRoutingTableRouteResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['routeId'] = route_id
    __args__['routingTable'] = routing_table
    __args__['vpc'] = vpc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpcRoutingTableRoute:getIsVpcRoutingTableRoute', __args__, opts=opts, typ=GetIsVpcRoutingTableRouteResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpcRoutingTableRouteResult(
        action=pulumi.get(__ret__, 'action'),
        advertise=pulumi.get(__ret__, 'advertise'),
        created_at=pulumi.get(__ret__, 'created_at'),
        creators=pulumi.get(__ret__, 'creators'),
        destination=pulumi.get(__ret__, 'destination'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        next_hops=pulumi.get(__ret__, 'next_hops'),
        origin=pulumi.get(__ret__, 'origin'),
        priority=pulumi.get(__ret__, 'priority'),
        route_id=pulumi.get(__ret__, 'route_id'),
        routing_table=pulumi.get(__ret__, 'routing_table'),
        vpc=pulumi.get(__ret__, 'vpc'),
        zones=pulumi.get(__ret__, 'zones'))
def get_is_vpc_routing_table_route_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          route_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                                          vpc: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpcRoutingTableRouteResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['routeId'] = route_id
    __args__['routingTable'] = routing_table
    __args__['vpc'] = vpc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpcRoutingTableRoute:getIsVpcRoutingTableRoute', __args__, opts=opts, typ=GetIsVpcRoutingTableRouteResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpcRoutingTableRouteResult(
        action=pulumi.get(__response__, 'action'),
        advertise=pulumi.get(__response__, 'advertise'),
        created_at=pulumi.get(__response__, 'created_at'),
        creators=pulumi.get(__response__, 'creators'),
        destination=pulumi.get(__response__, 'destination'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        next_hops=pulumi.get(__response__, 'next_hops'),
        origin=pulumi.get(__response__, 'origin'),
        priority=pulumi.get(__response__, 'priority'),
        route_id=pulumi.get(__response__, 'route_id'),
        routing_table=pulumi.get(__response__, 'routing_table'),
        vpc=pulumi.get(__response__, 'vpc'),
        zones=pulumi.get(__response__, 'zones')))
