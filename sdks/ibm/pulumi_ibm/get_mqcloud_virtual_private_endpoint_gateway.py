# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMqcloudVirtualPrivateEndpointGatewayResult',
    'AwaitableGetMqcloudVirtualPrivateEndpointGatewayResult',
    'get_mqcloud_virtual_private_endpoint_gateway',
    'get_mqcloud_virtual_private_endpoint_gateway_output',
]

@pulumi.output_type
class GetMqcloudVirtualPrivateEndpointGatewayResult:
    """
    A collection of values returned by getMqcloudVirtualPrivateEndpointGateway.
    """
    def __init__(__self__, href=None, id=None, name=None, service_instance_guid=None, status=None, target_crn=None, trusted_profile=None, virtual_private_endpoint_gateway_guid=None):
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if service_instance_guid and not isinstance(service_instance_guid, str):
            raise TypeError("Expected argument 'service_instance_guid' to be a str")
        pulumi.set(__self__, "service_instance_guid", service_instance_guid)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if target_crn and not isinstance(target_crn, str):
            raise TypeError("Expected argument 'target_crn' to be a str")
        pulumi.set(__self__, "target_crn", target_crn)
        if trusted_profile and not isinstance(trusted_profile, str):
            raise TypeError("Expected argument 'trusted_profile' to be a str")
        pulumi.set(__self__, "trusted_profile", trusted_profile)
        if virtual_private_endpoint_gateway_guid and not isinstance(virtual_private_endpoint_gateway_guid, str):
            raise TypeError("Expected argument 'virtual_private_endpoint_gateway_guid' to be a str")
        pulumi.set(__self__, "virtual_private_endpoint_gateway_guid", virtual_private_endpoint_gateway_guid)

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> _builtins.str:
        return pulumi.get(self, "service_instance_guid")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="targetCrn")
    def target_crn(self) -> _builtins.str:
        return pulumi.get(self, "target_crn")

    @_builtins.property
    @pulumi.getter(name="trustedProfile")
    def trusted_profile(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "trusted_profile")

    @_builtins.property
    @pulumi.getter(name="virtualPrivateEndpointGatewayGuid")
    def virtual_private_endpoint_gateway_guid(self) -> _builtins.str:
        return pulumi.get(self, "virtual_private_endpoint_gateway_guid")


class AwaitableGetMqcloudVirtualPrivateEndpointGatewayResult(GetMqcloudVirtualPrivateEndpointGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMqcloudVirtualPrivateEndpointGatewayResult(
            href=self.href,
            id=self.id,
            name=self.name,
            service_instance_guid=self.service_instance_guid,
            status=self.status,
            target_crn=self.target_crn,
            trusted_profile=self.trusted_profile,
            virtual_private_endpoint_gateway_guid=self.virtual_private_endpoint_gateway_guid)


def get_mqcloud_virtual_private_endpoint_gateway(id: Optional[_builtins.str] = None,
                                                 service_instance_guid: Optional[_builtins.str] = None,
                                                 trusted_profile: Optional[_builtins.str] = None,
                                                 virtual_private_endpoint_gateway_guid: Optional[_builtins.str] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMqcloudVirtualPrivateEndpointGatewayResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['serviceInstanceGuid'] = service_instance_guid
    __args__['trustedProfile'] = trusted_profile
    __args__['virtualPrivateEndpointGatewayGuid'] = virtual_private_endpoint_gateway_guid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getMqcloudVirtualPrivateEndpointGateway:getMqcloudVirtualPrivateEndpointGateway', __args__, opts=opts, typ=GetMqcloudVirtualPrivateEndpointGatewayResult, package_ref=_utilities.get_package()).value

    return AwaitableGetMqcloudVirtualPrivateEndpointGatewayResult(
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        service_instance_guid=pulumi.get(__ret__, 'service_instance_guid'),
        status=pulumi.get(__ret__, 'status'),
        target_crn=pulumi.get(__ret__, 'target_crn'),
        trusted_profile=pulumi.get(__ret__, 'trusted_profile'),
        virtual_private_endpoint_gateway_guid=pulumi.get(__ret__, 'virtual_private_endpoint_gateway_guid'))
def get_mqcloud_virtual_private_endpoint_gateway_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                                                        trusted_profile: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        virtual_private_endpoint_gateway_guid: Optional[pulumi.Input[_builtins.str]] = None,
                                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMqcloudVirtualPrivateEndpointGatewayResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['serviceInstanceGuid'] = service_instance_guid
    __args__['trustedProfile'] = trusted_profile
    __args__['virtualPrivateEndpointGatewayGuid'] = virtual_private_endpoint_gateway_guid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getMqcloudVirtualPrivateEndpointGateway:getMqcloudVirtualPrivateEndpointGateway', __args__, opts=opts, typ=GetMqcloudVirtualPrivateEndpointGatewayResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetMqcloudVirtualPrivateEndpointGatewayResult(
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        service_instance_guid=pulumi.get(__response__, 'service_instance_guid'),
        status=pulumi.get(__response__, 'status'),
        target_crn=pulumi.get(__response__, 'target_crn'),
        trusted_profile=pulumi.get(__response__, 'trusted_profile'),
        virtual_private_endpoint_gateway_guid=pulumi.get(__response__, 'virtual_private_endpoint_gateway_guid')))
