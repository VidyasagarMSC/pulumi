# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsClusterNetworkSubnetResult',
    'AwaitableGetIsClusterNetworkSubnetResult',
    'get_is_cluster_network_subnet',
    'get_is_cluster_network_subnet_output',
]

@pulumi.output_type
class GetIsClusterNetworkSubnetResult:
    """
    A collection of values returned by getIsClusterNetworkSubnet.
    """
    def __init__(__self__, available_ipv4_address_count=None, cluster_network_id=None, cluster_network_subnet_id=None, created_at=None, href=None, id=None, ip_version=None, ipv4_cidr_block=None, lifecycle_reasons=None, lifecycle_state=None, name=None, resource_type=None, total_ipv4_address_count=None):
        if available_ipv4_address_count and not isinstance(available_ipv4_address_count, float):
            raise TypeError("Expected argument 'available_ipv4_address_count' to be a float")
        pulumi.set(__self__, "available_ipv4_address_count", available_ipv4_address_count)
        if cluster_network_id and not isinstance(cluster_network_id, str):
            raise TypeError("Expected argument 'cluster_network_id' to be a str")
        pulumi.set(__self__, "cluster_network_id", cluster_network_id)
        if cluster_network_subnet_id and not isinstance(cluster_network_subnet_id, str):
            raise TypeError("Expected argument 'cluster_network_subnet_id' to be a str")
        pulumi.set(__self__, "cluster_network_subnet_id", cluster_network_subnet_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_version and not isinstance(ip_version, str):
            raise TypeError("Expected argument 'ip_version' to be a str")
        pulumi.set(__self__, "ip_version", ip_version)
        if ipv4_cidr_block and not isinstance(ipv4_cidr_block, str):
            raise TypeError("Expected argument 'ipv4_cidr_block' to be a str")
        pulumi.set(__self__, "ipv4_cidr_block", ipv4_cidr_block)
        if lifecycle_reasons and not isinstance(lifecycle_reasons, list):
            raise TypeError("Expected argument 'lifecycle_reasons' to be a list")
        pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if total_ipv4_address_count and not isinstance(total_ipv4_address_count, float):
            raise TypeError("Expected argument 'total_ipv4_address_count' to be a float")
        pulumi.set(__self__, "total_ipv4_address_count", total_ipv4_address_count)

    @_builtins.property
    @pulumi.getter(name="availableIpv4AddressCount")
    def available_ipv4_address_count(self) -> _builtins.float:
        return pulumi.get(self, "available_ipv4_address_count")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkId")
    def cluster_network_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_network_id")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkSubnetId")
    def cluster_network_subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_network_subnet_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="ipv4CidrBlock")
    def ipv4_cidr_block(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_cidr_block")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Sequence['outputs.GetIsClusterNetworkSubnetLifecycleReasonResult']:
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="totalIpv4AddressCount")
    def total_ipv4_address_count(self) -> _builtins.float:
        return pulumi.get(self, "total_ipv4_address_count")


class AwaitableGetIsClusterNetworkSubnetResult(GetIsClusterNetworkSubnetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsClusterNetworkSubnetResult(
            available_ipv4_address_count=self.available_ipv4_address_count,
            cluster_network_id=self.cluster_network_id,
            cluster_network_subnet_id=self.cluster_network_subnet_id,
            created_at=self.created_at,
            href=self.href,
            id=self.id,
            ip_version=self.ip_version,
            ipv4_cidr_block=self.ipv4_cidr_block,
            lifecycle_reasons=self.lifecycle_reasons,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            resource_type=self.resource_type,
            total_ipv4_address_count=self.total_ipv4_address_count)


def get_is_cluster_network_subnet(cluster_network_id: Optional[_builtins.str] = None,
                                  cluster_network_subnet_id: Optional[_builtins.str] = None,
                                  id: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsClusterNetworkSubnetResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNetworkId'] = cluster_network_id
    __args__['clusterNetworkSubnetId'] = cluster_network_subnet_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsClusterNetworkSubnet:getIsClusterNetworkSubnet', __args__, opts=opts, typ=GetIsClusterNetworkSubnetResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsClusterNetworkSubnetResult(
        available_ipv4_address_count=pulumi.get(__ret__, 'available_ipv4_address_count'),
        cluster_network_id=pulumi.get(__ret__, 'cluster_network_id'),
        cluster_network_subnet_id=pulumi.get(__ret__, 'cluster_network_subnet_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        ip_version=pulumi.get(__ret__, 'ip_version'),
        ipv4_cidr_block=pulumi.get(__ret__, 'ipv4_cidr_block'),
        lifecycle_reasons=pulumi.get(__ret__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        total_ipv4_address_count=pulumi.get(__ret__, 'total_ipv4_address_count'))
def get_is_cluster_network_subnet_output(cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         cluster_network_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsClusterNetworkSubnetResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNetworkId'] = cluster_network_id
    __args__['clusterNetworkSubnetId'] = cluster_network_subnet_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsClusterNetworkSubnet:getIsClusterNetworkSubnet', __args__, opts=opts, typ=GetIsClusterNetworkSubnetResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsClusterNetworkSubnetResult(
        available_ipv4_address_count=pulumi.get(__response__, 'available_ipv4_address_count'),
        cluster_network_id=pulumi.get(__response__, 'cluster_network_id'),
        cluster_network_subnet_id=pulumi.get(__response__, 'cluster_network_subnet_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        ip_version=pulumi.get(__response__, 'ip_version'),
        ipv4_cidr_block=pulumi.get(__response__, 'ipv4_cidr_block'),
        lifecycle_reasons=pulumi.get(__response__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        total_ipv4_address_count=pulumi.get(__response__, 'total_ipv4_address_count')))
