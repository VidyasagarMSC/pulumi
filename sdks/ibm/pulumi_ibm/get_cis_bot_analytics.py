# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCisBotAnalyticsResult',
    'AwaitableGetCisBotAnalyticsResult',
    'get_cis_bot_analytics',
    'get_cis_bot_analytics_output',
]

@pulumi.output_type
class GetCisBotAnalyticsResult:
    """
    A collection of values returned by getCisBotAnalytics.
    """
    def __init__(__self__, cis_id=None, domain_id=None, id=None, result=None, since=None, type=None, until=None):
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        pulumi.set(__self__, "result", result)
        if since and not isinstance(since, str):
            raise TypeError("Expected argument 'since' to be a str")
        pulumi.set(__self__, "since", since)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if until and not isinstance(until, str):
            raise TypeError("Expected argument 'until' to be a str")
        pulumi.set(__self__, "until", until)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def result(self) -> _builtins.str:
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter
    def since(self) -> _builtins.str:
        return pulumi.get(self, "since")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def until(self) -> _builtins.str:
        return pulumi.get(self, "until")


class AwaitableGetCisBotAnalyticsResult(GetCisBotAnalyticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisBotAnalyticsResult(
            cis_id=self.cis_id,
            domain_id=self.domain_id,
            id=self.id,
            result=self.result,
            since=self.since,
            type=self.type,
            until=self.until)


def get_cis_bot_analytics(cis_id: Optional[_builtins.str] = None,
                          domain_id: Optional[_builtins.str] = None,
                          id: Optional[_builtins.str] = None,
                          since: Optional[_builtins.str] = None,
                          type: Optional[_builtins.str] = None,
                          until: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisBotAnalyticsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    __args__['since'] = since
    __args__['type'] = type
    __args__['until'] = until
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisBotAnalytics:getCisBotAnalytics', __args__, opts=opts, typ=GetCisBotAnalyticsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisBotAnalyticsResult(
        cis_id=pulumi.get(__ret__, 'cis_id'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        result=pulumi.get(__ret__, 'result'),
        since=pulumi.get(__ret__, 'since'),
        type=pulumi.get(__ret__, 'type'),
        until=pulumi.get(__ret__, 'until'))
def get_cis_bot_analytics_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 since: Optional[pulumi.Input[_builtins.str]] = None,
                                 type: Optional[pulumi.Input[_builtins.str]] = None,
                                 until: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisBotAnalyticsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    __args__['since'] = since
    __args__['type'] = type
    __args__['until'] = until
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisBotAnalytics:getCisBotAnalytics', __args__, opts=opts, typ=GetCisBotAnalyticsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisBotAnalyticsResult(
        cis_id=pulumi.get(__response__, 'cis_id'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        id=pulumi.get(__response__, 'id'),
        result=pulumi.get(__response__, 'result'),
        since=pulumi.get(__response__, 'since'),
        type=pulumi.get(__response__, 'type'),
        until=pulumi.get(__response__, 'until')))
