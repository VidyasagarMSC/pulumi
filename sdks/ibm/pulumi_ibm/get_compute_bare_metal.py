# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetComputeBareMetalResult',
    'AwaitableGetComputeBareMetalResult',
    'get_compute_bare_metal',
    'get_compute_bare_metal_output',
]

@pulumi.output_type
class GetComputeBareMetalResult:
    """
    A collection of values returned by getComputeBareMetal.
    """
    def __init__(__self__, block_storage_ids=None, datacenter=None, domain=None, file_storage_ids=None, global_identifier=None, hostname=None, hourly_billing=None, id=None, ipv6_address=None, ipv6_address_id=None, ipv6_enabled=None, memory=None, most_recent=None, network_speed=None, notes=None, os_reference_code=None, private_ipv4_address=None, private_ipv4_address_id=None, private_network_only=None, private_subnet=None, private_vlan_id=None, public_bandwidth=None, public_ipv4_address=None, public_ipv4_address_id=None, public_subnet=None, public_vlan_id=None, redundant_network=None, redundant_power_supply=None, secondary_ip_addresses=None, secondary_ip_count=None, tags=None, unbonded_network=None, user_metadata=None):
        if block_storage_ids and not isinstance(block_storage_ids, list):
            raise TypeError("Expected argument 'block_storage_ids' to be a list")
        pulumi.set(__self__, "block_storage_ids", block_storage_ids)
        if datacenter and not isinstance(datacenter, str):
            raise TypeError("Expected argument 'datacenter' to be a str")
        pulumi.set(__self__, "datacenter", datacenter)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if file_storage_ids and not isinstance(file_storage_ids, list):
            raise TypeError("Expected argument 'file_storage_ids' to be a list")
        pulumi.set(__self__, "file_storage_ids", file_storage_ids)
        if global_identifier and not isinstance(global_identifier, str):
            raise TypeError("Expected argument 'global_identifier' to be a str")
        pulumi.set(__self__, "global_identifier", global_identifier)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if hourly_billing and not isinstance(hourly_billing, bool):
            raise TypeError("Expected argument 'hourly_billing' to be a bool")
        pulumi.set(__self__, "hourly_billing", hourly_billing)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv6_address and not isinstance(ipv6_address, str):
            raise TypeError("Expected argument 'ipv6_address' to be a str")
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_id and not isinstance(ipv6_address_id, float):
            raise TypeError("Expected argument 'ipv6_address_id' to be a float")
        pulumi.set(__self__, "ipv6_address_id", ipv6_address_id)
        if ipv6_enabled and not isinstance(ipv6_enabled, bool):
            raise TypeError("Expected argument 'ipv6_enabled' to be a bool")
        pulumi.set(__self__, "ipv6_enabled", ipv6_enabled)
        if memory and not isinstance(memory, float):
            raise TypeError("Expected argument 'memory' to be a float")
        pulumi.set(__self__, "memory", memory)
        if most_recent and not isinstance(most_recent, bool):
            raise TypeError("Expected argument 'most_recent' to be a bool")
        pulumi.set(__self__, "most_recent", most_recent)
        if network_speed and not isinstance(network_speed, float):
            raise TypeError("Expected argument 'network_speed' to be a float")
        pulumi.set(__self__, "network_speed", network_speed)
        if notes and not isinstance(notes, str):
            raise TypeError("Expected argument 'notes' to be a str")
        pulumi.set(__self__, "notes", notes)
        if os_reference_code and not isinstance(os_reference_code, str):
            raise TypeError("Expected argument 'os_reference_code' to be a str")
        pulumi.set(__self__, "os_reference_code", os_reference_code)
        if private_ipv4_address and not isinstance(private_ipv4_address, str):
            raise TypeError("Expected argument 'private_ipv4_address' to be a str")
        pulumi.set(__self__, "private_ipv4_address", private_ipv4_address)
        if private_ipv4_address_id and not isinstance(private_ipv4_address_id, float):
            raise TypeError("Expected argument 'private_ipv4_address_id' to be a float")
        pulumi.set(__self__, "private_ipv4_address_id", private_ipv4_address_id)
        if private_network_only and not isinstance(private_network_only, bool):
            raise TypeError("Expected argument 'private_network_only' to be a bool")
        pulumi.set(__self__, "private_network_only", private_network_only)
        if private_subnet and not isinstance(private_subnet, float):
            raise TypeError("Expected argument 'private_subnet' to be a float")
        pulumi.set(__self__, "private_subnet", private_subnet)
        if private_vlan_id and not isinstance(private_vlan_id, float):
            raise TypeError("Expected argument 'private_vlan_id' to be a float")
        pulumi.set(__self__, "private_vlan_id", private_vlan_id)
        if public_bandwidth and not isinstance(public_bandwidth, float):
            raise TypeError("Expected argument 'public_bandwidth' to be a float")
        pulumi.set(__self__, "public_bandwidth", public_bandwidth)
        if public_ipv4_address and not isinstance(public_ipv4_address, str):
            raise TypeError("Expected argument 'public_ipv4_address' to be a str")
        pulumi.set(__self__, "public_ipv4_address", public_ipv4_address)
        if public_ipv4_address_id and not isinstance(public_ipv4_address_id, float):
            raise TypeError("Expected argument 'public_ipv4_address_id' to be a float")
        pulumi.set(__self__, "public_ipv4_address_id", public_ipv4_address_id)
        if public_subnet and not isinstance(public_subnet, float):
            raise TypeError("Expected argument 'public_subnet' to be a float")
        pulumi.set(__self__, "public_subnet", public_subnet)
        if public_vlan_id and not isinstance(public_vlan_id, float):
            raise TypeError("Expected argument 'public_vlan_id' to be a float")
        pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if redundant_network and not isinstance(redundant_network, bool):
            raise TypeError("Expected argument 'redundant_network' to be a bool")
        pulumi.set(__self__, "redundant_network", redundant_network)
        if redundant_power_supply and not isinstance(redundant_power_supply, bool):
            raise TypeError("Expected argument 'redundant_power_supply' to be a bool")
        pulumi.set(__self__, "redundant_power_supply", redundant_power_supply)
        if secondary_ip_addresses and not isinstance(secondary_ip_addresses, list):
            raise TypeError("Expected argument 'secondary_ip_addresses' to be a list")
        pulumi.set(__self__, "secondary_ip_addresses", secondary_ip_addresses)
        if secondary_ip_count and not isinstance(secondary_ip_count, float):
            raise TypeError("Expected argument 'secondary_ip_count' to be a float")
        pulumi.set(__self__, "secondary_ip_count", secondary_ip_count)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if unbonded_network and not isinstance(unbonded_network, bool):
            raise TypeError("Expected argument 'unbonded_network' to be a bool")
        pulumi.set(__self__, "unbonded_network", unbonded_network)
        if user_metadata and not isinstance(user_metadata, str):
            raise TypeError("Expected argument 'user_metadata' to be a str")
        pulumi.set(__self__, "user_metadata", user_metadata)

    @_builtins.property
    @pulumi.getter(name="blockStorageIds")
    def block_storage_ids(self) -> Sequence[_builtins.float]:
        return pulumi.get(self, "block_storage_ids")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> _builtins.str:
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="fileStorageIds")
    def file_storage_ids(self) -> Sequence[_builtins.float]:
        return pulumi.get(self, "file_storage_ids")

    @_builtins.property
    @pulumi.getter(name="globalIdentifier")
    def global_identifier(self) -> _builtins.str:
        return pulumi.get(self, "global_identifier")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> _builtins.bool:
        return pulumi.get(self, "hourly_billing")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> _builtins.str:
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressId")
    def ipv6_address_id(self) -> _builtins.float:
        return pulumi.get(self, "ipv6_address_id")

    @_builtins.property
    @pulumi.getter(name="ipv6Enabled")
    def ipv6_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "ipv6_enabled")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.float:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="mostRecent")
    def most_recent(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "most_recent")

    @_builtins.property
    @pulumi.getter(name="networkSpeed")
    def network_speed(self) -> _builtins.float:
        return pulumi.get(self, "network_speed")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> _builtins.str:
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="osReferenceCode")
    def os_reference_code(self) -> _builtins.str:
        return pulumi.get(self, "os_reference_code")

    @_builtins.property
    @pulumi.getter(name="privateIpv4Address")
    def private_ipv4_address(self) -> _builtins.str:
        return pulumi.get(self, "private_ipv4_address")

    @_builtins.property
    @pulumi.getter(name="privateIpv4AddressId")
    def private_ipv4_address_id(self) -> _builtins.float:
        return pulumi.get(self, "private_ipv4_address_id")

    @_builtins.property
    @pulumi.getter(name="privateNetworkOnly")
    def private_network_only(self) -> _builtins.bool:
        return pulumi.get(self, "private_network_only")

    @_builtins.property
    @pulumi.getter(name="privateSubnet")
    def private_subnet(self) -> _builtins.float:
        return pulumi.get(self, "private_subnet")

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> _builtins.float:
        return pulumi.get(self, "private_vlan_id")

    @_builtins.property
    @pulumi.getter(name="publicBandwidth")
    def public_bandwidth(self) -> _builtins.float:
        return pulumi.get(self, "public_bandwidth")

    @_builtins.property
    @pulumi.getter(name="publicIpv4Address")
    def public_ipv4_address(self) -> _builtins.str:
        return pulumi.get(self, "public_ipv4_address")

    @_builtins.property
    @pulumi.getter(name="publicIpv4AddressId")
    def public_ipv4_address_id(self) -> _builtins.float:
        return pulumi.get(self, "public_ipv4_address_id")

    @_builtins.property
    @pulumi.getter(name="publicSubnet")
    def public_subnet(self) -> _builtins.float:
        return pulumi.get(self, "public_subnet")

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> _builtins.float:
        return pulumi.get(self, "public_vlan_id")

    @_builtins.property
    @pulumi.getter(name="redundantNetwork")
    def redundant_network(self) -> _builtins.bool:
        return pulumi.get(self, "redundant_network")

    @_builtins.property
    @pulumi.getter(name="redundantPowerSupply")
    def redundant_power_supply(self) -> _builtins.bool:
        return pulumi.get(self, "redundant_power_supply")

    @_builtins.property
    @pulumi.getter(name="secondaryIpAddresses")
    def secondary_ip_addresses(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "secondary_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="secondaryIpCount")
    def secondary_ip_count(self) -> _builtins.float:
        return pulumi.get(self, "secondary_ip_count")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="unbondedNetwork")
    def unbonded_network(self) -> _builtins.bool:
        return pulumi.get(self, "unbonded_network")

    @_builtins.property
    @pulumi.getter(name="userMetadata")
    def user_metadata(self) -> _builtins.str:
        return pulumi.get(self, "user_metadata")


class AwaitableGetComputeBareMetalResult(GetComputeBareMetalResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeBareMetalResult(
            block_storage_ids=self.block_storage_ids,
            datacenter=self.datacenter,
            domain=self.domain,
            file_storage_ids=self.file_storage_ids,
            global_identifier=self.global_identifier,
            hostname=self.hostname,
            hourly_billing=self.hourly_billing,
            id=self.id,
            ipv6_address=self.ipv6_address,
            ipv6_address_id=self.ipv6_address_id,
            ipv6_enabled=self.ipv6_enabled,
            memory=self.memory,
            most_recent=self.most_recent,
            network_speed=self.network_speed,
            notes=self.notes,
            os_reference_code=self.os_reference_code,
            private_ipv4_address=self.private_ipv4_address,
            private_ipv4_address_id=self.private_ipv4_address_id,
            private_network_only=self.private_network_only,
            private_subnet=self.private_subnet,
            private_vlan_id=self.private_vlan_id,
            public_bandwidth=self.public_bandwidth,
            public_ipv4_address=self.public_ipv4_address,
            public_ipv4_address_id=self.public_ipv4_address_id,
            public_subnet=self.public_subnet,
            public_vlan_id=self.public_vlan_id,
            redundant_network=self.redundant_network,
            redundant_power_supply=self.redundant_power_supply,
            secondary_ip_addresses=self.secondary_ip_addresses,
            secondary_ip_count=self.secondary_ip_count,
            tags=self.tags,
            unbonded_network=self.unbonded_network,
            user_metadata=self.user_metadata)


def get_compute_bare_metal(domain: Optional[_builtins.str] = None,
                           global_identifier: Optional[_builtins.str] = None,
                           hostname: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           most_recent: Optional[_builtins.bool] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeBareMetalResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['globalIdentifier'] = global_identifier
    __args__['hostname'] = hostname
    __args__['id'] = id
    __args__['mostRecent'] = most_recent
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getComputeBareMetal:getComputeBareMetal', __args__, opts=opts, typ=GetComputeBareMetalResult, package_ref=_utilities.get_package()).value

    return AwaitableGetComputeBareMetalResult(
        block_storage_ids=pulumi.get(__ret__, 'block_storage_ids'),
        datacenter=pulumi.get(__ret__, 'datacenter'),
        domain=pulumi.get(__ret__, 'domain'),
        file_storage_ids=pulumi.get(__ret__, 'file_storage_ids'),
        global_identifier=pulumi.get(__ret__, 'global_identifier'),
        hostname=pulumi.get(__ret__, 'hostname'),
        hourly_billing=pulumi.get(__ret__, 'hourly_billing'),
        id=pulumi.get(__ret__, 'id'),
        ipv6_address=pulumi.get(__ret__, 'ipv6_address'),
        ipv6_address_id=pulumi.get(__ret__, 'ipv6_address_id'),
        ipv6_enabled=pulumi.get(__ret__, 'ipv6_enabled'),
        memory=pulumi.get(__ret__, 'memory'),
        most_recent=pulumi.get(__ret__, 'most_recent'),
        network_speed=pulumi.get(__ret__, 'network_speed'),
        notes=pulumi.get(__ret__, 'notes'),
        os_reference_code=pulumi.get(__ret__, 'os_reference_code'),
        private_ipv4_address=pulumi.get(__ret__, 'private_ipv4_address'),
        private_ipv4_address_id=pulumi.get(__ret__, 'private_ipv4_address_id'),
        private_network_only=pulumi.get(__ret__, 'private_network_only'),
        private_subnet=pulumi.get(__ret__, 'private_subnet'),
        private_vlan_id=pulumi.get(__ret__, 'private_vlan_id'),
        public_bandwidth=pulumi.get(__ret__, 'public_bandwidth'),
        public_ipv4_address=pulumi.get(__ret__, 'public_ipv4_address'),
        public_ipv4_address_id=pulumi.get(__ret__, 'public_ipv4_address_id'),
        public_subnet=pulumi.get(__ret__, 'public_subnet'),
        public_vlan_id=pulumi.get(__ret__, 'public_vlan_id'),
        redundant_network=pulumi.get(__ret__, 'redundant_network'),
        redundant_power_supply=pulumi.get(__ret__, 'redundant_power_supply'),
        secondary_ip_addresses=pulumi.get(__ret__, 'secondary_ip_addresses'),
        secondary_ip_count=pulumi.get(__ret__, 'secondary_ip_count'),
        tags=pulumi.get(__ret__, 'tags'),
        unbonded_network=pulumi.get(__ret__, 'unbonded_network'),
        user_metadata=pulumi.get(__ret__, 'user_metadata'))
def get_compute_bare_metal_output(domain: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  global_identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  hostname: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  most_recent: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComputeBareMetalResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['globalIdentifier'] = global_identifier
    __args__['hostname'] = hostname
    __args__['id'] = id
    __args__['mostRecent'] = most_recent
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getComputeBareMetal:getComputeBareMetal', __args__, opts=opts, typ=GetComputeBareMetalResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetComputeBareMetalResult(
        block_storage_ids=pulumi.get(__response__, 'block_storage_ids'),
        datacenter=pulumi.get(__response__, 'datacenter'),
        domain=pulumi.get(__response__, 'domain'),
        file_storage_ids=pulumi.get(__response__, 'file_storage_ids'),
        global_identifier=pulumi.get(__response__, 'global_identifier'),
        hostname=pulumi.get(__response__, 'hostname'),
        hourly_billing=pulumi.get(__response__, 'hourly_billing'),
        id=pulumi.get(__response__, 'id'),
        ipv6_address=pulumi.get(__response__, 'ipv6_address'),
        ipv6_address_id=pulumi.get(__response__, 'ipv6_address_id'),
        ipv6_enabled=pulumi.get(__response__, 'ipv6_enabled'),
        memory=pulumi.get(__response__, 'memory'),
        most_recent=pulumi.get(__response__, 'most_recent'),
        network_speed=pulumi.get(__response__, 'network_speed'),
        notes=pulumi.get(__response__, 'notes'),
        os_reference_code=pulumi.get(__response__, 'os_reference_code'),
        private_ipv4_address=pulumi.get(__response__, 'private_ipv4_address'),
        private_ipv4_address_id=pulumi.get(__response__, 'private_ipv4_address_id'),
        private_network_only=pulumi.get(__response__, 'private_network_only'),
        private_subnet=pulumi.get(__response__, 'private_subnet'),
        private_vlan_id=pulumi.get(__response__, 'private_vlan_id'),
        public_bandwidth=pulumi.get(__response__, 'public_bandwidth'),
        public_ipv4_address=pulumi.get(__response__, 'public_ipv4_address'),
        public_ipv4_address_id=pulumi.get(__response__, 'public_ipv4_address_id'),
        public_subnet=pulumi.get(__response__, 'public_subnet'),
        public_vlan_id=pulumi.get(__response__, 'public_vlan_id'),
        redundant_network=pulumi.get(__response__, 'redundant_network'),
        redundant_power_supply=pulumi.get(__response__, 'redundant_power_supply'),
        secondary_ip_addresses=pulumi.get(__response__, 'secondary_ip_addresses'),
        secondary_ip_count=pulumi.get(__response__, 'secondary_ip_count'),
        tags=pulumi.get(__response__, 'tags'),
        unbonded_network=pulumi.get(__response__, 'unbonded_network'),
        user_metadata=pulumi.get(__response__, 'user_metadata')))
