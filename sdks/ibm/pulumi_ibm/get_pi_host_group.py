# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiHostGroupResult',
    'AwaitableGetPiHostGroupResult',
    'get_pi_host_group',
    'get_pi_host_group_output',
]

@pulumi.output_type
class GetPiHostGroupResult:
    """
    A collection of values returned by getPiHostGroup.
    """
    def __init__(__self__, creation_date=None, hosts=None, id=None, name=None, pi_cloud_instance_id=None, pi_host_group_id=None, primary=None, secondaries=None):
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        pulumi.set(__self__, "hosts", hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_host_group_id and not isinstance(pi_host_group_id, str):
            raise TypeError("Expected argument 'pi_host_group_id' to be a str")
        pulumi.set(__self__, "pi_host_group_id", pi_host_group_id)
        if primary and not isinstance(primary, str):
            raise TypeError("Expected argument 'primary' to be a str")
        pulumi.set(__self__, "primary", primary)
        if secondaries and not isinstance(secondaries, list):
            raise TypeError("Expected argument 'secondaries' to be a list")
        pulumi.set(__self__, "secondaries", secondaries)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piHostGroupId")
    def pi_host_group_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_host_group_id")

    @_builtins.property
    @pulumi.getter
    def primary(self) -> _builtins.str:
        return pulumi.get(self, "primary")

    @_builtins.property
    @pulumi.getter
    def secondaries(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "secondaries")


class AwaitableGetPiHostGroupResult(GetPiHostGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiHostGroupResult(
            creation_date=self.creation_date,
            hosts=self.hosts,
            id=self.id,
            name=self.name,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_host_group_id=self.pi_host_group_id,
            primary=self.primary,
            secondaries=self.secondaries)


def get_pi_host_group(id: Optional[_builtins.str] = None,
                      pi_cloud_instance_id: Optional[_builtins.str] = None,
                      pi_host_group_id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiHostGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piHostGroupId'] = pi_host_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiHostGroup:getPiHostGroup', __args__, opts=opts, typ=GetPiHostGroupResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiHostGroupResult(
        creation_date=pulumi.get(__ret__, 'creation_date'),
        hosts=pulumi.get(__ret__, 'hosts'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_host_group_id=pulumi.get(__ret__, 'pi_host_group_id'),
        primary=pulumi.get(__ret__, 'primary'),
        secondaries=pulumi.get(__ret__, 'secondaries'))
def get_pi_host_group_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                             pi_host_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiHostGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piHostGroupId'] = pi_host_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiHostGroup:getPiHostGroup', __args__, opts=opts, typ=GetPiHostGroupResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiHostGroupResult(
        creation_date=pulumi.get(__response__, 'creation_date'),
        hosts=pulumi.get(__response__, 'hosts'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_host_group_id=pulumi.get(__response__, 'pi_host_group_id'),
        primary=pulumi.get(__response__, 'primary'),
        secondaries=pulumi.get(__response__, 'secondaries')))
