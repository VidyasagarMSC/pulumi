# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppConfigPropertyArgs', 'AppConfigProperty']

@pulumi.input_type
class AppConfigPropertyArgs:
    def __init__(__self__, *,
                 environment_id: pulumi.Input[_builtins.str],
                 guid: pulumi.Input[_builtins.str],
                 property_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 app_config_property_id: Optional[pulumi.Input[_builtins.str]] = None,
                 collections: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigPropertyCollectionArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 segment_rules: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigPropertySegmentRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppConfigProperty resource.
        :param pulumi.Input[_builtins.str] environment_id: Environment Id.
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] property_id: Property id.
        :param pulumi.Input[_builtins.str] type: Type of the Property (BOOLEAN, STRING, NUMERIC).
        :param pulumi.Input[_builtins.str] value: Value of the Property. The value can be Boolean, String or a Numeric value as per the `type` attribute.
        :param pulumi.Input[Sequence[pulumi.Input['AppConfigPropertyCollectionArgs']]] collections: List of collection id representing the collections that are associated with the specified property.
        :param pulumi.Input[_builtins.str] description: Property description.
        :param pulumi.Input[_builtins.str] format: Format of the feature (TEXT, JSON, YAML).
        :param pulumi.Input[_builtins.str] name: Property name.
        :param pulumi.Input[Sequence[pulumi.Input['AppConfigPropertySegmentRuleArgs']]] segment_rules: Specify the targeting rules that is used to set different property values for different segments.
        :param pulumi.Input[_builtins.str] tags: Tags associated with the property.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "guid", guid)
        pulumi.set(__self__, "property_id", property_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if app_config_property_id is not None:
            pulumi.set(__self__, "app_config_property_id", app_config_property_id)
        if collections is not None:
            pulumi.set(__self__, "collections", collections)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if segment_rules is not None:
            pulumi.set(__self__, "segment_rules", segment_rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Environment Id.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Input[_builtins.str]:
        """
        GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> pulumi.Input[_builtins.str]:
        """
        Property id.
        """
        return pulumi.get(self, "property_id")

    @property_id.setter
    def property_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "property_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of the Property (BOOLEAN, STRING, NUMERIC).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Value of the Property. The value can be Boolean, String or a Numeric value as per the `type` attribute.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="appConfigPropertyId")
    def app_config_property_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_config_property_id")

    @app_config_property_id.setter
    def app_config_property_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_config_property_id", value)

    @_builtins.property
    @pulumi.getter
    def collections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigPropertyCollectionArgs']]]]:
        """
        List of collection id representing the collections that are associated with the specified property.
        """
        return pulumi.get(self, "collections")

    @collections.setter
    def collections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigPropertyCollectionArgs']]]]):
        pulumi.set(self, "collections", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Property description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Format of the feature (TEXT, JSON, YAML).
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Property name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="segmentRules")
    def segment_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigPropertySegmentRuleArgs']]]]:
        """
        Specify the targeting rules that is used to set different property values for different segments.
        """
        return pulumi.get(self, "segment_rules")

    @segment_rules.setter
    def segment_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigPropertySegmentRuleArgs']]]]):
        pulumi.set(self, "segment_rules", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tags associated with the property.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AppConfigPropertyState:
    def __init__(__self__, *,
                 app_config_property_id: Optional[pulumi.Input[_builtins.str]] = None,
                 collections: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigPropertyCollectionArgs']]]] = None,
                 created_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 evaluation_time: Optional[pulumi.Input[_builtins.str]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 property_id: Optional[pulumi.Input[_builtins.str]] = None,
                 segment_exists: Optional[pulumi.Input[_builtins.bool]] = None,
                 segment_rules: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigPropertySegmentRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppConfigProperty resources.
        :param pulumi.Input[Sequence[pulumi.Input['AppConfigPropertyCollectionArgs']]] collections: List of collection id representing the collections that are associated with the specified property.
        :param pulumi.Input[_builtins.str] created_time: Creation time of the property.
        :param pulumi.Input[_builtins.str] description: Property description.
        :param pulumi.Input[_builtins.str] environment_id: Environment Id.
        :param pulumi.Input[_builtins.str] evaluation_time: The last occurrence of the property value evaluation.
        :param pulumi.Input[_builtins.str] format: Format of the feature (TEXT, JSON, YAML).
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] href: Property URL.
        :param pulumi.Input[_builtins.str] name: Property name.
        :param pulumi.Input[_builtins.str] property_id: Property id.
        :param pulumi.Input[_builtins.bool] segment_exists: Denotes if the targeting rules are specified for the property.
        :param pulumi.Input[Sequence[pulumi.Input['AppConfigPropertySegmentRuleArgs']]] segment_rules: Specify the targeting rules that is used to set different property values for different segments.
        :param pulumi.Input[_builtins.str] tags: Tags associated with the property.
        :param pulumi.Input[_builtins.str] type: Type of the Property (BOOLEAN, STRING, NUMERIC).
        :param pulumi.Input[_builtins.str] updated_time: Last modified time of the property data.
        :param pulumi.Input[_builtins.str] value: Value of the Property. The value can be Boolean, String or a Numeric value as per the `type` attribute.
        """
        if app_config_property_id is not None:
            pulumi.set(__self__, "app_config_property_id", app_config_property_id)
        if collections is not None:
            pulumi.set(__self__, "collections", collections)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if evaluation_time is not None:
            pulumi.set(__self__, "evaluation_time", evaluation_time)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if property_id is not None:
            pulumi.set(__self__, "property_id", property_id)
        if segment_exists is not None:
            pulumi.set(__self__, "segment_exists", segment_exists)
        if segment_rules is not None:
            pulumi.set(__self__, "segment_rules", segment_rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="appConfigPropertyId")
    def app_config_property_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_config_property_id")

    @app_config_property_id.setter
    def app_config_property_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_config_property_id", value)

    @_builtins.property
    @pulumi.getter
    def collections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigPropertyCollectionArgs']]]]:
        """
        List of collection id representing the collections that are associated with the specified property.
        """
        return pulumi.get(self, "collections")

    @collections.setter
    def collections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigPropertyCollectionArgs']]]]):
        pulumi.set(self, "collections", value)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation time of the property.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Property description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Environment Id.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter(name="evaluationTime")
    def evaluation_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The last occurrence of the property value evaluation.
        """
        return pulumi.get(self, "evaluation_time")

    @evaluation_time.setter
    def evaluation_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "evaluation_time", value)

    @_builtins.property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Format of the feature (TEXT, JSON, YAML).
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Property URL.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Property name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Property id.
        """
        return pulumi.get(self, "property_id")

    @property_id.setter
    def property_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "property_id", value)

    @_builtins.property
    @pulumi.getter(name="segmentExists")
    def segment_exists(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Denotes if the targeting rules are specified for the property.
        """
        return pulumi.get(self, "segment_exists")

    @segment_exists.setter
    def segment_exists(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "segment_exists", value)

    @_builtins.property
    @pulumi.getter(name="segmentRules")
    def segment_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigPropertySegmentRuleArgs']]]]:
        """
        Specify the targeting rules that is used to set different property values for different segments.
        """
        return pulumi.get(self, "segment_rules")

    @segment_rules.setter
    def segment_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigPropertySegmentRuleArgs']]]]):
        pulumi.set(self, "segment_rules", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tags associated with the property.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the Property (BOOLEAN, STRING, NUMERIC).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last modified time of the property data.
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_time", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value of the Property. The value can be Boolean, String or a Numeric value as per the `type` attribute.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.type_token("ibm:index/appConfigProperty:AppConfigProperty")
class AppConfigProperty(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_config_property_id: Optional[pulumi.Input[_builtins.str]] = None,
                 collections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigPropertyCollectionArgs', 'AppConfigPropertyCollectionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 property_id: Optional[pulumi.Input[_builtins.str]] = None,
                 segment_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigPropertySegmentRuleArgs', 'AppConfigPropertySegmentRuleArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppConfigProperty resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppConfigPropertyCollectionArgs', 'AppConfigPropertyCollectionArgsDict']]]] collections: List of collection id representing the collections that are associated with the specified property.
        :param pulumi.Input[_builtins.str] description: Property description.
        :param pulumi.Input[_builtins.str] environment_id: Environment Id.
        :param pulumi.Input[_builtins.str] format: Format of the feature (TEXT, JSON, YAML).
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] name: Property name.
        :param pulumi.Input[_builtins.str] property_id: Property id.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppConfigPropertySegmentRuleArgs', 'AppConfigPropertySegmentRuleArgsDict']]]] segment_rules: Specify the targeting rules that is used to set different property values for different segments.
        :param pulumi.Input[_builtins.str] tags: Tags associated with the property.
        :param pulumi.Input[_builtins.str] type: Type of the Property (BOOLEAN, STRING, NUMERIC).
        :param pulumi.Input[_builtins.str] value: Value of the Property. The value can be Boolean, String or a Numeric value as per the `type` attribute.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppConfigPropertyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppConfigProperty resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppConfigPropertyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppConfigPropertyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_config_property_id: Optional[pulumi.Input[_builtins.str]] = None,
                 collections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigPropertyCollectionArgs', 'AppConfigPropertyCollectionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 property_id: Optional[pulumi.Input[_builtins.str]] = None,
                 segment_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigPropertySegmentRuleArgs', 'AppConfigPropertySegmentRuleArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppConfigPropertyArgs.__new__(AppConfigPropertyArgs)

            __props__.__dict__["app_config_property_id"] = app_config_property_id
            __props__.__dict__["collections"] = collections
            __props__.__dict__["description"] = description
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["format"] = format
            if guid is None and not opts.urn:
                raise TypeError("Missing required property 'guid'")
            __props__.__dict__["guid"] = guid
            __props__.__dict__["name"] = name
            if property_id is None and not opts.urn:
                raise TypeError("Missing required property 'property_id'")
            __props__.__dict__["property_id"] = property_id
            __props__.__dict__["segment_rules"] = segment_rules
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
            __props__.__dict__["created_time"] = None
            __props__.__dict__["evaluation_time"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["segment_exists"] = None
            __props__.__dict__["updated_time"] = None
        super(AppConfigProperty, __self__).__init__(
            'ibm:index/appConfigProperty:AppConfigProperty',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_config_property_id: Optional[pulumi.Input[_builtins.str]] = None,
            collections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigPropertyCollectionArgs', 'AppConfigPropertyCollectionArgsDict']]]]] = None,
            created_time: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            evaluation_time: Optional[pulumi.Input[_builtins.str]] = None,
            format: Optional[pulumi.Input[_builtins.str]] = None,
            guid: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            property_id: Optional[pulumi.Input[_builtins.str]] = None,
            segment_exists: Optional[pulumi.Input[_builtins.bool]] = None,
            segment_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigPropertySegmentRuleArgs', 'AppConfigPropertySegmentRuleArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_time: Optional[pulumi.Input[_builtins.str]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppConfigProperty':
        """
        Get an existing AppConfigProperty resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppConfigPropertyCollectionArgs', 'AppConfigPropertyCollectionArgsDict']]]] collections: List of collection id representing the collections that are associated with the specified property.
        :param pulumi.Input[_builtins.str] created_time: Creation time of the property.
        :param pulumi.Input[_builtins.str] description: Property description.
        :param pulumi.Input[_builtins.str] environment_id: Environment Id.
        :param pulumi.Input[_builtins.str] evaluation_time: The last occurrence of the property value evaluation.
        :param pulumi.Input[_builtins.str] format: Format of the feature (TEXT, JSON, YAML).
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] href: Property URL.
        :param pulumi.Input[_builtins.str] name: Property name.
        :param pulumi.Input[_builtins.str] property_id: Property id.
        :param pulumi.Input[_builtins.bool] segment_exists: Denotes if the targeting rules are specified for the property.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppConfigPropertySegmentRuleArgs', 'AppConfigPropertySegmentRuleArgsDict']]]] segment_rules: Specify the targeting rules that is used to set different property values for different segments.
        :param pulumi.Input[_builtins.str] tags: Tags associated with the property.
        :param pulumi.Input[_builtins.str] type: Type of the Property (BOOLEAN, STRING, NUMERIC).
        :param pulumi.Input[_builtins.str] updated_time: Last modified time of the property data.
        :param pulumi.Input[_builtins.str] value: Value of the Property. The value can be Boolean, String or a Numeric value as per the `type` attribute.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppConfigPropertyState.__new__(_AppConfigPropertyState)

        __props__.__dict__["app_config_property_id"] = app_config_property_id
        __props__.__dict__["collections"] = collections
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["description"] = description
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["evaluation_time"] = evaluation_time
        __props__.__dict__["format"] = format
        __props__.__dict__["guid"] = guid
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["property_id"] = property_id
        __props__.__dict__["segment_exists"] = segment_exists
        __props__.__dict__["segment_rules"] = segment_rules
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_time"] = updated_time
        __props__.__dict__["value"] = value
        return AppConfigProperty(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appConfigPropertyId")
    def app_config_property_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "app_config_property_id")

    @_builtins.property
    @pulumi.getter
    def collections(self) -> pulumi.Output[Optional[Sequence['outputs.AppConfigPropertyCollection']]]:
        """
        List of collection id representing the collections that are associated with the specified property.
        """
        return pulumi.get(self, "collections")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[_builtins.str]:
        """
        Creation time of the property.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Property description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Environment Id.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter(name="evaluationTime")
    def evaluation_time(self) -> pulumi.Output[_builtins.str]:
        """
        The last occurrence of the property value evaluation.
        """
        return pulumi.get(self, "evaluation_time")

    @_builtins.property
    @pulumi.getter
    def format(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Format of the feature (TEXT, JSON, YAML).
        """
        return pulumi.get(self, "format")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Output[_builtins.str]:
        """
        GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        Property URL.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Property name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> pulumi.Output[_builtins.str]:
        """
        Property id.
        """
        return pulumi.get(self, "property_id")

    @_builtins.property
    @pulumi.getter(name="segmentExists")
    def segment_exists(self) -> pulumi.Output[_builtins.bool]:
        """
        Denotes if the targeting rules are specified for the property.
        """
        return pulumi.get(self, "segment_exists")

    @_builtins.property
    @pulumi.getter(name="segmentRules")
    def segment_rules(self) -> pulumi.Output[Optional[Sequence['outputs.AppConfigPropertySegmentRule']]]:
        """
        Specify the targeting rules that is used to set different property values for different segments.
        """
        return pulumi.get(self, "segment_rules")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Tags associated with the property.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the Property (BOOLEAN, STRING, NUMERIC).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[_builtins.str]:
        """
        Last modified time of the property data.
        """
        return pulumi.get(self, "updated_time")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[_builtins.str]:
        """
        Value of the Property. The value can be Boolean, String or a Numeric value as per the `type` attribute.
        """
        return pulumi.get(self, "value")

