# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSchematicsInventoryResult',
    'AwaitableGetSchematicsInventoryResult',
    'get_schematics_inventory',
    'get_schematics_inventory_output',
]

@pulumi.output_type
class GetSchematicsInventoryResult:
    """
    A collection of values returned by getSchematicsInventory.
    """
    def __init__(__self__, created_at=None, created_by=None, description=None, id=None, inventories_ini=None, inventory_id=None, location=None, name=None, resource_group=None, resource_queries=None, updated_at=None, updated_by=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inventories_ini and not isinstance(inventories_ini, str):
            raise TypeError("Expected argument 'inventories_ini' to be a str")
        pulumi.set(__self__, "inventories_ini", inventories_ini)
        if inventory_id and not isinstance(inventory_id, str):
            raise TypeError("Expected argument 'inventory_id' to be a str")
        pulumi.set(__self__, "inventory_id", inventory_id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_queries and not isinstance(resource_queries, list):
            raise TypeError("Expected argument 'resource_queries' to be a list")
        pulumi.set(__self__, "resource_queries", resource_queries)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="inventoriesIni")
    def inventories_ini(self) -> _builtins.str:
        return pulumi.get(self, "inventories_ini")

    @_builtins.property
    @pulumi.getter(name="inventoryId")
    def inventory_id(self) -> _builtins.str:
        return pulumi.get(self, "inventory_id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceQueries")
    def resource_queries(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "resource_queries")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")


class AwaitableGetSchematicsInventoryResult(GetSchematicsInventoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchematicsInventoryResult(
            created_at=self.created_at,
            created_by=self.created_by,
            description=self.description,
            id=self.id,
            inventories_ini=self.inventories_ini,
            inventory_id=self.inventory_id,
            location=self.location,
            name=self.name,
            resource_group=self.resource_group,
            resource_queries=self.resource_queries,
            updated_at=self.updated_at,
            updated_by=self.updated_by)


def get_schematics_inventory(inventory_id: Optional[_builtins.str] = None,
                             location: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchematicsInventoryResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['inventoryId'] = inventory_id
    __args__['location'] = location
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSchematicsInventory:getSchematicsInventory', __args__, opts=opts, typ=GetSchematicsInventoryResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSchematicsInventoryResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        inventories_ini=pulumi.get(__ret__, 'inventories_ini'),
        inventory_id=pulumi.get(__ret__, 'inventory_id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_queries=pulumi.get(__ret__, 'resource_queries'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        updated_by=pulumi.get(__ret__, 'updated_by'))
def get_schematics_inventory_output(inventory_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    location: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSchematicsInventoryResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['inventoryId'] = inventory_id
    __args__['location'] = location
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSchematicsInventory:getSchematicsInventory', __args__, opts=opts, typ=GetSchematicsInventoryResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSchematicsInventoryResult(
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        inventories_ini=pulumi.get(__response__, 'inventories_ini'),
        inventory_id=pulumi.get(__response__, 'inventory_id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_queries=pulumi.get(__response__, 'resource_queries'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        updated_by=pulumi.get(__response__, 'updated_by')))
