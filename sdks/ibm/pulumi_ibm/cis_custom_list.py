# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisCustomListArgs', 'CisCustomList']

@pulumi.input_type
class CisCustomListArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 kind: pulumi.Input[_builtins.str],
                 cis_custom_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisCustomList resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] kind: Kind of the List
        :param pulumi.Input[_builtins.str] description: Description of the List
        :param pulumi.Input[_builtins.str] name: Type of the List
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "kind", kind)
        if cis_custom_list_id is not None:
            pulumi.set(__self__, "cis_custom_list_id", cis_custom_list_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Input[_builtins.str]:
        """
        Kind of the List
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter(name="cisCustomListId")
    def cis_custom_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_custom_list_id")

    @cis_custom_list_id.setter
    def cis_custom_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_custom_list_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the List
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the List
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CisCustomListState:
    def __init__(__self__, *,
                 cis_custom_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 num_items: Optional[pulumi.Input[_builtins.float]] = None,
                 num_referencing_filters: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering CisCustomList resources.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] description: Description of the List
        :param pulumi.Input[_builtins.str] kind: Kind of the List
        :param pulumi.Input[_builtins.str] list_id: CIS instance crn
        :param pulumi.Input[_builtins.str] name: Type of the List
        :param pulumi.Input[_builtins.float] num_items: Number of items in the List
        :param pulumi.Input[_builtins.float] num_referencing_filters: Number of times the list is used by rule expressions.
        """
        if cis_custom_list_id is not None:
            pulumi.set(__self__, "cis_custom_list_id", cis_custom_list_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if list_id is not None:
            pulumi.set(__self__, "list_id", list_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_items is not None:
            pulumi.set(__self__, "num_items", num_items)
        if num_referencing_filters is not None:
            pulumi.set(__self__, "num_referencing_filters", num_referencing_filters)

    @_builtins.property
    @pulumi.getter(name="cisCustomListId")
    def cis_custom_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_custom_list_id")

    @cis_custom_list_id.setter
    def cis_custom_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_custom_list_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the List
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kind of the List
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter(name="listId")
    def list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "list_id")

    @list_id.setter
    def list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "list_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the List
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="numItems")
    def num_items(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of items in the List
        """
        return pulumi.get(self, "num_items")

    @num_items.setter
    def num_items(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "num_items", value)

    @_builtins.property
    @pulumi.getter(name="numReferencingFilters")
    def num_referencing_filters(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of times the list is used by rule expressions.
        """
        return pulumi.get(self, "num_referencing_filters")

    @num_referencing_filters.setter
    def num_referencing_filters(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "num_referencing_filters", value)


@pulumi.type_token("ibm:index/cisCustomList:CisCustomList")
class CisCustomList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_custom_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisCustomList resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] description: Description of the List
        :param pulumi.Input[_builtins.str] kind: Kind of the List
        :param pulumi.Input[_builtins.str] name: Type of the List
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisCustomListArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisCustomList resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisCustomListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisCustomListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_custom_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisCustomListArgs.__new__(CisCustomListArgs)

            __props__.__dict__["cis_custom_list_id"] = cis_custom_list_id
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["description"] = description
            if kind is None and not opts.urn:
                raise TypeError("Missing required property 'kind'")
            __props__.__dict__["kind"] = kind
            __props__.__dict__["name"] = name
            __props__.__dict__["list_id"] = None
            __props__.__dict__["num_items"] = None
            __props__.__dict__["num_referencing_filters"] = None
        super(CisCustomList, __self__).__init__(
            'ibm:index/cisCustomList:CisCustomList',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cis_custom_list_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            kind: Optional[pulumi.Input[_builtins.str]] = None,
            list_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            num_items: Optional[pulumi.Input[_builtins.float]] = None,
            num_referencing_filters: Optional[pulumi.Input[_builtins.float]] = None) -> 'CisCustomList':
        """
        Get an existing CisCustomList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] description: Description of the List
        :param pulumi.Input[_builtins.str] kind: Kind of the List
        :param pulumi.Input[_builtins.str] list_id: CIS instance crn
        :param pulumi.Input[_builtins.str] name: Type of the List
        :param pulumi.Input[_builtins.float] num_items: Number of items in the List
        :param pulumi.Input[_builtins.float] num_referencing_filters: Number of times the list is used by rule expressions.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisCustomListState.__new__(_CisCustomListState)

        __props__.__dict__["cis_custom_list_id"] = cis_custom_list_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["description"] = description
        __props__.__dict__["kind"] = kind
        __props__.__dict__["list_id"] = list_id
        __props__.__dict__["name"] = name
        __props__.__dict__["num_items"] = num_items
        __props__.__dict__["num_referencing_filters"] = num_referencing_filters
        return CisCustomList(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cisCustomListId")
    def cis_custom_list_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_custom_list_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the List
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Output[_builtins.str]:
        """
        Kind of the List
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter(name="listId")
    def list_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "list_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the List
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="numItems")
    def num_items(self) -> pulumi.Output[_builtins.float]:
        """
        Number of items in the List
        """
        return pulumi.get(self, "num_items")

    @_builtins.property
    @pulumi.getter(name="numReferencingFilters")
    def num_referencing_filters(self) -> pulumi.Output[_builtins.float]:
        """
        Number of times the list is used by rule expressions.
        """
        return pulumi.get(self, "num_referencing_filters")

