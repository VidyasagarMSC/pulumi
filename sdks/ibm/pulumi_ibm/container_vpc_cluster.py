# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerVpcClusterArgs', 'ContainerVpcCluster']

@pulumi.input_type
class ContainerVpcClusterArgs:
    def __init__(__self__, *,
                 flavor: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 zones: pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterZoneArgs']]],
                 container_vpc_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 crk: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_outbound_traffic_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_secure_by_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete_storage: Optional[pulumi.Input[_builtins.bool]] = None,
                 host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_security_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_config: Optional[pulumi.Input['ContainerVpcClusterKmsConfigArgs']] = None,
                 kms_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kube_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 patch_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
                 secondary_storage: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterTaintArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['ContainerVpcClusterTimeoutsArgs']] = None,
                 update_all_workers: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_till: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a ContainerVpcCluster resource.
        :param pulumi.Input[_builtins.str] flavor: Cluster nodes flavour
        :param pulumi.Input[_builtins.str] vpc_id: The vpc id where the cluster is
        :param pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterZoneArgs']]] zones: Zone info
        :param pulumi.Input[_builtins.str] cos_instance_crn: A standard cloud object storage instance CRN to back up the internal registry in your OpenShift on VPC Gen 2 cluster
        :param pulumi.Input[_builtins.str] crk: Root Key ID for boot volume encryption
        :param pulumi.Input[_builtins.bool] disable_outbound_traffic_protection: Allow outbound connections to public destinations
        :param pulumi.Input[_builtins.bool] disable_public_service_endpoint: Boolean value true if Public service endpoint to be disabled
        :param pulumi.Input[_builtins.bool] enable_secure_by_default: Enable Secure-by-default on existing clusters (note: can be used on existing clusters)
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.bool] force_delete_storage: Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        :param pulumi.Input[_builtins.str] host_pool_id: The ID of the default worker pool's associated host pool
        :param pulumi.Input[_builtins.bool] image_security_enforcement: Set true to enable image security enforcement policies
        :param pulumi.Input[_builtins.str] kms_account_id: Account ID of kms instance holder - if not provided, defaults to the account in use
        :param pulumi.Input['ContainerVpcClusterKmsConfigArgs'] kms_config: Enables KMS on a given cluster
        :param pulumi.Input[_builtins.str] kms_instance_id: Instance ID for boot volume encryption
        :param pulumi.Input[_builtins.str] kube_version: Kubernetes version
        :param pulumi.Input[_builtins.str] name: The cluster name
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the default worker pool.
        :param pulumi.Input[_builtins.str] patch_version: Kubernetes patch version
        :param pulumi.Input[_builtins.str] pod_subnet: Custom subnet CIDR to provide private IP addresses for pods
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] retry_patch_version: Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
               if the previous apply fails
        :param pulumi.Input[_builtins.str] secondary_storage: The secondary storage option for the default worker pool.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Allow user to set which security groups added to their workers
        :param pulumi.Input[_builtins.str] service_subnet: Custom subnet CIDR to provide private IP addresses for services
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resources
        :param pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterTaintArgs']]] taints: Taints for the default worker pool
        :param pulumi.Input[_builtins.bool] update_all_workers: Updates all the woker nodes if sets to true
        :param pulumi.Input[_builtins.bool] wait_for_worker_update: Wait for worker node to update during kube version update.
        :param pulumi.Input[_builtins.str] wait_till: wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        :param pulumi.Input[_builtins.float] worker_count: Number of worker nodes in the default worker pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] worker_labels: Labels for default worker pool
        """
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zones", zones)
        if container_vpc_cluster_id is not None:
            pulumi.set(__self__, "container_vpc_cluster_id", container_vpc_cluster_id)
        if cos_instance_crn is not None:
            pulumi.set(__self__, "cos_instance_crn", cos_instance_crn)
        if crk is not None:
            pulumi.set(__self__, "crk", crk)
        if disable_outbound_traffic_protection is not None:
            pulumi.set(__self__, "disable_outbound_traffic_protection", disable_outbound_traffic_protection)
        if disable_public_service_endpoint is not None:
            pulumi.set(__self__, "disable_public_service_endpoint", disable_public_service_endpoint)
        if enable_secure_by_default is not None:
            pulumi.set(__self__, "enable_secure_by_default", enable_secure_by_default)
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)
        if force_delete_storage is not None:
            pulumi.set(__self__, "force_delete_storage", force_delete_storage)
        if host_pool_id is not None:
            pulumi.set(__self__, "host_pool_id", host_pool_id)
        if image_security_enforcement is not None:
            pulumi.set(__self__, "image_security_enforcement", image_security_enforcement)
        if kms_account_id is not None:
            pulumi.set(__self__, "kms_account_id", kms_account_id)
        if kms_config is not None:
            pulumi.set(__self__, "kms_config", kms_config)
        if kms_instance_id is not None:
            pulumi.set(__self__, "kms_instance_id", kms_instance_id)
        if kube_version is not None:
            pulumi.set(__self__, "kube_version", kube_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if patch_version is not None:
            pulumi.set(__self__, "patch_version", patch_version)
        if pod_subnet is not None:
            pulumi.set(__self__, "pod_subnet", pod_subnet)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if retry_patch_version is not None:
            pulumi.set(__self__, "retry_patch_version", retry_patch_version)
        if secondary_storage is not None:
            pulumi.set(__self__, "secondary_storage", secondary_storage)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if service_subnet is not None:
            pulumi.set(__self__, "service_subnet", service_subnet)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if update_all_workers is not None:
            pulumi.set(__self__, "update_all_workers", update_all_workers)
        if wait_for_worker_update is not None:
            pulumi.set(__self__, "wait_for_worker_update", wait_for_worker_update)
        if wait_till is not None:
            pulumi.set(__self__, "wait_till", wait_till)
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)
        if worker_labels is not None:
            pulumi.set(__self__, "worker_labels", worker_labels)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster nodes flavour
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        The vpc id where the cluster is
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterZoneArgs']]]:
        """
        Zone info
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterZoneArgs']]]):
        pulumi.set(self, "zones", value)

    @_builtins.property
    @pulumi.getter(name="containerVpcClusterId")
    def container_vpc_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_vpc_cluster_id")

    @container_vpc_cluster_id.setter
    def container_vpc_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_vpc_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="cosInstanceCrn")
    def cos_instance_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A standard cloud object storage instance CRN to back up the internal registry in your OpenShift on VPC Gen 2 cluster
        """
        return pulumi.get(self, "cos_instance_crn")

    @cos_instance_crn.setter
    def cos_instance_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_instance_crn", value)

    @_builtins.property
    @pulumi.getter
    def crk(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Root Key ID for boot volume encryption
        """
        return pulumi.get(self, "crk")

    @crk.setter
    def crk(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crk", value)

    @_builtins.property
    @pulumi.getter(name="disableOutboundTrafficProtection")
    def disable_outbound_traffic_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow outbound connections to public destinations
        """
        return pulumi.get(self, "disable_outbound_traffic_protection")

    @disable_outbound_traffic_protection.setter
    def disable_outbound_traffic_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_outbound_traffic_protection", value)

    @_builtins.property
    @pulumi.getter(name="disablePublicServiceEndpoint")
    def disable_public_service_endpoint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value true if Public service endpoint to be disabled
        """
        return pulumi.get(self, "disable_public_service_endpoint")

    @disable_public_service_endpoint.setter
    def disable_public_service_endpoint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_public_service_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="enableSecureByDefault")
    def enable_secure_by_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Secure-by-default on existing clusters (note: can be used on existing clusters)
        """
        return pulumi.get(self, "enable_secure_by_default")

    @enable_secure_by_default.setter
    def enable_secure_by_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_secure_by_default", value)

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entitlement", value)

    @_builtins.property
    @pulumi.getter(name="forceDeleteStorage")
    def force_delete_storage(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        """
        return pulumi.get(self, "force_delete_storage")

    @force_delete_storage.setter
    def force_delete_storage(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_delete_storage", value)

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the default worker pool's associated host pool
        """
        return pulumi.get(self, "host_pool_id")

    @host_pool_id.setter
    def host_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="imageSecurityEnforcement")
    def image_security_enforcement(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set true to enable image security enforcement policies
        """
        return pulumi.get(self, "image_security_enforcement")

    @image_security_enforcement.setter
    def image_security_enforcement(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "image_security_enforcement", value)

    @_builtins.property
    @pulumi.getter(name="kmsAccountId")
    def kms_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Account ID of kms instance holder - if not provided, defaults to the account in use
        """
        return pulumi.get(self, "kms_account_id")

    @kms_account_id.setter
    def kms_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_account_id", value)

    @_builtins.property
    @pulumi.getter(name="kmsConfig")
    def kms_config(self) -> Optional[pulumi.Input['ContainerVpcClusterKmsConfigArgs']]:
        """
        Enables KMS on a given cluster
        """
        return pulumi.get(self, "kms_config")

    @kms_config.setter
    def kms_config(self, value: Optional[pulumi.Input['ContainerVpcClusterKmsConfigArgs']]):
        pulumi.set(self, "kms_config", value)

    @_builtins.property
    @pulumi.getter(name="kmsInstanceId")
    def kms_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance ID for boot volume encryption
        """
        return pulumi.get(self, "kms_instance_id")

    @kms_instance_id.setter
    def kms_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes version
        """
        return pulumi.get(self, "kube_version")

    @kube_version.setter
    def kube_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kube_version", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operating system of the workers in the default worker pool.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="patchVersion")
    def patch_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes patch version
        """
        return pulumi.get(self, "patch_version")

    @patch_version.setter
    def patch_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "patch_version", value)

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom subnet CIDR to provide private IP addresses for pods
        """
        return pulumi.get(self, "pod_subnet")

    @pod_subnet.setter
    def pod_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_subnet", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="retryPatchVersion")
    def retry_patch_version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
        if the previous apply fails
        """
        return pulumi.get(self, "retry_patch_version")

    @retry_patch_version.setter
    def retry_patch_version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retry_patch_version", value)

    @_builtins.property
    @pulumi.getter(name="secondaryStorage")
    def secondary_storage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secondary storage option for the default worker pool.
        """
        return pulumi.get(self, "secondary_storage")

    @secondary_storage.setter
    def secondary_storage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_storage", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Allow user to set which security groups added to their workers
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom subnet CIDR to provide private IP addresses for services
        """
        return pulumi.get(self, "service_subnet")

    @service_subnet.setter
    def service_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_subnet", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for the resources
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterTaintArgs']]]]:
        """
        Taints for the default worker pool
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerVpcClusterTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerVpcClusterTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updateAllWorkers")
    def update_all_workers(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Updates all the woker nodes if sets to true
        """
        return pulumi.get(self, "update_all_workers")

    @update_all_workers.setter
    def update_all_workers(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "update_all_workers", value)

    @_builtins.property
    @pulumi.getter(name="waitForWorkerUpdate")
    def wait_for_worker_update(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Wait for worker node to update during kube version update.
        """
        return pulumi.get(self, "wait_for_worker_update")

    @wait_for_worker_update.setter
    def wait_for_worker_update(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_for_worker_update", value)

    @_builtins.property
    @pulumi.getter(name="waitTill")
    def wait_till(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        """
        return pulumi.get(self, "wait_till")

    @wait_till.setter
    def wait_till(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "wait_till", value)

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of worker nodes in the default worker pool
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "worker_count", value)

    @_builtins.property
    @pulumi.getter(name="workerLabels")
    def worker_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for default worker pool
        """
        return pulumi.get(self, "worker_labels")

    @worker_labels.setter
    def worker_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "worker_labels", value)


@pulumi.input_type
class _ContainerVpcClusterState:
    def __init__(__self__, *,
                 albs: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterAlbArgs']]]] = None,
                 container_vpc_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 crk: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_outbound_traffic_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_secure_by_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete_storage: Optional[pulumi.Input[_builtins.bool]] = None,
                 host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_security_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
                 ingress_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 ingress_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_config: Optional[pulumi.Input['ContainerVpcClusterKmsConfigArgs']] = None,
                 kms_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kube_version: Optional[pulumi.Input[_builtins.str]] = None,
                 master_status: Optional[pulumi.Input[_builtins.str]] = None,
                 master_url: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 patch_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 public_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
                 secondary_storage: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterTaintArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['ContainerVpcClusterTimeoutsArgs']] = None,
                 update_all_workers: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpe_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_till: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterZoneArgs']]]] = None):
        """
        Input properties used for looking up and filtering ContainerVpcCluster resources.
        :param pulumi.Input[_builtins.str] cos_instance_crn: A standard cloud object storage instance CRN to back up the internal registry in your OpenShift on VPC Gen 2 cluster
        :param pulumi.Input[_builtins.str] crk: Root Key ID for boot volume encryption
        :param pulumi.Input[_builtins.str] crn: CRN of resource instance
        :param pulumi.Input[_builtins.bool] disable_outbound_traffic_protection: Allow outbound connections to public destinations
        :param pulumi.Input[_builtins.bool] disable_public_service_endpoint: Boolean value true if Public service endpoint to be disabled
        :param pulumi.Input[_builtins.bool] enable_secure_by_default: Enable Secure-by-default on existing clusters (note: can be used on existing clusters)
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] flavor: Cluster nodes flavour
        :param pulumi.Input[_builtins.bool] force_delete_storage: Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        :param pulumi.Input[_builtins.str] host_pool_id: The ID of the default worker pool's associated host pool
        :param pulumi.Input[_builtins.bool] image_security_enforcement: Set true to enable image security enforcement policies
        :param pulumi.Input[_builtins.str] kms_account_id: Account ID of kms instance holder - if not provided, defaults to the account in use
        :param pulumi.Input['ContainerVpcClusterKmsConfigArgs'] kms_config: Enables KMS on a given cluster
        :param pulumi.Input[_builtins.str] kms_instance_id: Instance ID for boot volume encryption
        :param pulumi.Input[_builtins.str] kube_version: Kubernetes version
        :param pulumi.Input[_builtins.str] name: The cluster name
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the default worker pool.
        :param pulumi.Input[_builtins.str] patch_version: Kubernetes patch version
        :param pulumi.Input[_builtins.str] pod_subnet: Custom subnet CIDR to provide private IP addresses for pods
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.float] retry_patch_version: Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
               if the previous apply fails
        :param pulumi.Input[_builtins.str] secondary_storage: The secondary storage option for the default worker pool.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Allow user to set which security groups added to their workers
        :param pulumi.Input[_builtins.str] service_subnet: Custom subnet CIDR to provide private IP addresses for services
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resources
        :param pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterTaintArgs']]] taints: Taints for the default worker pool
        :param pulumi.Input[_builtins.bool] update_all_workers: Updates all the woker nodes if sets to true
        :param pulumi.Input[_builtins.str] vpc_id: The vpc id where the cluster is
        :param pulumi.Input[_builtins.bool] wait_for_worker_update: Wait for worker node to update during kube version update.
        :param pulumi.Input[_builtins.str] wait_till: wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        :param pulumi.Input[_builtins.float] worker_count: Number of worker nodes in the default worker pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] worker_labels: Labels for default worker pool
        :param pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterZoneArgs']]] zones: Zone info
        """
        if albs is not None:
            pulumi.set(__self__, "albs", albs)
        if container_vpc_cluster_id is not None:
            pulumi.set(__self__, "container_vpc_cluster_id", container_vpc_cluster_id)
        if cos_instance_crn is not None:
            pulumi.set(__self__, "cos_instance_crn", cos_instance_crn)
        if crk is not None:
            pulumi.set(__self__, "crk", crk)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if disable_outbound_traffic_protection is not None:
            pulumi.set(__self__, "disable_outbound_traffic_protection", disable_outbound_traffic_protection)
        if disable_public_service_endpoint is not None:
            pulumi.set(__self__, "disable_public_service_endpoint", disable_public_service_endpoint)
        if enable_secure_by_default is not None:
            pulumi.set(__self__, "enable_secure_by_default", enable_secure_by_default)
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if force_delete_storage is not None:
            pulumi.set(__self__, "force_delete_storage", force_delete_storage)
        if host_pool_id is not None:
            pulumi.set(__self__, "host_pool_id", host_pool_id)
        if image_security_enforcement is not None:
            pulumi.set(__self__, "image_security_enforcement", image_security_enforcement)
        if ingress_hostname is not None:
            pulumi.set(__self__, "ingress_hostname", ingress_hostname)
        if ingress_secret is not None:
            pulumi.set(__self__, "ingress_secret", ingress_secret)
        if kms_account_id is not None:
            pulumi.set(__self__, "kms_account_id", kms_account_id)
        if kms_config is not None:
            pulumi.set(__self__, "kms_config", kms_config)
        if kms_instance_id is not None:
            pulumi.set(__self__, "kms_instance_id", kms_instance_id)
        if kube_version is not None:
            pulumi.set(__self__, "kube_version", kube_version)
        if master_status is not None:
            pulumi.set(__self__, "master_status", master_status)
        if master_url is not None:
            pulumi.set(__self__, "master_url", master_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if patch_version is not None:
            pulumi.set(__self__, "patch_version", patch_version)
        if pod_subnet is not None:
            pulumi.set(__self__, "pod_subnet", pod_subnet)
        if private_service_endpoint_url is not None:
            pulumi.set(__self__, "private_service_endpoint_url", private_service_endpoint_url)
        if public_service_endpoint_url is not None:
            pulumi.set(__self__, "public_service_endpoint_url", public_service_endpoint_url)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn is not None:
            pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if retry_patch_version is not None:
            pulumi.set(__self__, "retry_patch_version", retry_patch_version)
        if secondary_storage is not None:
            pulumi.set(__self__, "secondary_storage", secondary_storage)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if service_subnet is not None:
            pulumi.set(__self__, "service_subnet", service_subnet)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if update_all_workers is not None:
            pulumi.set(__self__, "update_all_workers", update_all_workers)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpe_service_endpoint_url is not None:
            pulumi.set(__self__, "vpe_service_endpoint_url", vpe_service_endpoint_url)
        if wait_for_worker_update is not None:
            pulumi.set(__self__, "wait_for_worker_update", wait_for_worker_update)
        if wait_till is not None:
            pulumi.set(__self__, "wait_till", wait_till)
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)
        if worker_labels is not None:
            pulumi.set(__self__, "worker_labels", worker_labels)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter
    def albs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterAlbArgs']]]]:
        return pulumi.get(self, "albs")

    @albs.setter
    def albs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterAlbArgs']]]]):
        pulumi.set(self, "albs", value)

    @_builtins.property
    @pulumi.getter(name="containerVpcClusterId")
    def container_vpc_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_vpc_cluster_id")

    @container_vpc_cluster_id.setter
    def container_vpc_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_vpc_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="cosInstanceCrn")
    def cos_instance_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A standard cloud object storage instance CRN to back up the internal registry in your OpenShift on VPC Gen 2 cluster
        """
        return pulumi.get(self, "cos_instance_crn")

    @cos_instance_crn.setter
    def cos_instance_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_instance_crn", value)

    @_builtins.property
    @pulumi.getter
    def crk(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Root Key ID for boot volume encryption
        """
        return pulumi.get(self, "crk")

    @crk.setter
    def crk(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crk", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of resource instance
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="disableOutboundTrafficProtection")
    def disable_outbound_traffic_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow outbound connections to public destinations
        """
        return pulumi.get(self, "disable_outbound_traffic_protection")

    @disable_outbound_traffic_protection.setter
    def disable_outbound_traffic_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_outbound_traffic_protection", value)

    @_builtins.property
    @pulumi.getter(name="disablePublicServiceEndpoint")
    def disable_public_service_endpoint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value true if Public service endpoint to be disabled
        """
        return pulumi.get(self, "disable_public_service_endpoint")

    @disable_public_service_endpoint.setter
    def disable_public_service_endpoint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_public_service_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="enableSecureByDefault")
    def enable_secure_by_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Secure-by-default on existing clusters (note: can be used on existing clusters)
        """
        return pulumi.get(self, "enable_secure_by_default")

    @enable_secure_by_default.setter
    def enable_secure_by_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_secure_by_default", value)

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entitlement", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster nodes flavour
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="forceDeleteStorage")
    def force_delete_storage(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        """
        return pulumi.get(self, "force_delete_storage")

    @force_delete_storage.setter
    def force_delete_storage(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_delete_storage", value)

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the default worker pool's associated host pool
        """
        return pulumi.get(self, "host_pool_id")

    @host_pool_id.setter
    def host_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="imageSecurityEnforcement")
    def image_security_enforcement(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set true to enable image security enforcement policies
        """
        return pulumi.get(self, "image_security_enforcement")

    @image_security_enforcement.setter
    def image_security_enforcement(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "image_security_enforcement", value)

    @_builtins.property
    @pulumi.getter(name="ingressHostname")
    def ingress_hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ingress_hostname")

    @ingress_hostname.setter
    def ingress_hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ingress_hostname", value)

    @_builtins.property
    @pulumi.getter(name="ingressSecret")
    def ingress_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ingress_secret")

    @ingress_secret.setter
    def ingress_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ingress_secret", value)

    @_builtins.property
    @pulumi.getter(name="kmsAccountId")
    def kms_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Account ID of kms instance holder - if not provided, defaults to the account in use
        """
        return pulumi.get(self, "kms_account_id")

    @kms_account_id.setter
    def kms_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_account_id", value)

    @_builtins.property
    @pulumi.getter(name="kmsConfig")
    def kms_config(self) -> Optional[pulumi.Input['ContainerVpcClusterKmsConfigArgs']]:
        """
        Enables KMS on a given cluster
        """
        return pulumi.get(self, "kms_config")

    @kms_config.setter
    def kms_config(self, value: Optional[pulumi.Input['ContainerVpcClusterKmsConfigArgs']]):
        pulumi.set(self, "kms_config", value)

    @_builtins.property
    @pulumi.getter(name="kmsInstanceId")
    def kms_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance ID for boot volume encryption
        """
        return pulumi.get(self, "kms_instance_id")

    @kms_instance_id.setter
    def kms_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes version
        """
        return pulumi.get(self, "kube_version")

    @kube_version.setter
    def kube_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kube_version", value)

    @_builtins.property
    @pulumi.getter(name="masterStatus")
    def master_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "master_status")

    @master_status.setter
    def master_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_status", value)

    @_builtins.property
    @pulumi.getter(name="masterUrl")
    def master_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "master_url")

    @master_url.setter
    def master_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_url", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operating system of the workers in the default worker pool.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="patchVersion")
    def patch_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes patch version
        """
        return pulumi.get(self, "patch_version")

    @patch_version.setter
    def patch_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "patch_version", value)

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom subnet CIDR to provide private IP addresses for pods
        """
        return pulumi.get(self, "pod_subnet")

    @pod_subnet.setter
    def pod_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_subnet", value)

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpointUrl")
    def private_service_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_service_endpoint_url")

    @private_service_endpoint_url.setter
    def private_service_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_service_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpointUrl")
    def public_service_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_service_endpoint_url")

    @public_service_endpoint_url.setter
    def public_service_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_service_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @resource_crn.setter
    def resource_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter(name="retryPatchVersion")
    def retry_patch_version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
        if the previous apply fails
        """
        return pulumi.get(self, "retry_patch_version")

    @retry_patch_version.setter
    def retry_patch_version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retry_patch_version", value)

    @_builtins.property
    @pulumi.getter(name="secondaryStorage")
    def secondary_storage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secondary storage option for the default worker pool.
        """
        return pulumi.get(self, "secondary_storage")

    @secondary_storage.setter
    def secondary_storage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_storage", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Allow user to set which security groups added to their workers
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom subnet CIDR to provide private IP addresses for services
        """
        return pulumi.get(self, "service_subnet")

    @service_subnet.setter
    def service_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_subnet", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for the resources
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterTaintArgs']]]]:
        """
        Taints for the default worker pool
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerVpcClusterTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerVpcClusterTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updateAllWorkers")
    def update_all_workers(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Updates all the woker nodes if sets to true
        """
        return pulumi.get(self, "update_all_workers")

    @update_all_workers.setter
    def update_all_workers(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "update_all_workers", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The vpc id where the cluster is
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="vpeServiceEndpointUrl")
    def vpe_service_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vpe_service_endpoint_url")

    @vpe_service_endpoint_url.setter
    def vpe_service_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpe_service_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="waitForWorkerUpdate")
    def wait_for_worker_update(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Wait for worker node to update during kube version update.
        """
        return pulumi.get(self, "wait_for_worker_update")

    @wait_for_worker_update.setter
    def wait_for_worker_update(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_for_worker_update", value)

    @_builtins.property
    @pulumi.getter(name="waitTill")
    def wait_till(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        """
        return pulumi.get(self, "wait_till")

    @wait_till.setter
    def wait_till(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "wait_till", value)

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of worker nodes in the default worker pool
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "worker_count", value)

    @_builtins.property
    @pulumi.getter(name="workerLabels")
    def worker_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for default worker pool
        """
        return pulumi.get(self, "worker_labels")

    @worker_labels.setter
    def worker_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "worker_labels", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterZoneArgs']]]]:
        """
        Zone info
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcClusterZoneArgs']]]]):
        pulumi.set(self, "zones", value)


@pulumi.type_token("ibm:index/containerVpcCluster:ContainerVpcCluster")
class ContainerVpcCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_vpc_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 crk: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_outbound_traffic_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_secure_by_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete_storage: Optional[pulumi.Input[_builtins.bool]] = None,
                 host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_security_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_config: Optional[pulumi.Input[Union['ContainerVpcClusterKmsConfigArgs', 'ContainerVpcClusterKmsConfigArgsDict']]] = None,
                 kms_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kube_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 patch_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
                 secondary_storage: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcClusterTaintArgs', 'ContainerVpcClusterTaintArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerVpcClusterTimeoutsArgs', 'ContainerVpcClusterTimeoutsArgsDict']]] = None,
                 update_all_workers: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_till: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcClusterZoneArgs', 'ContainerVpcClusterZoneArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a ContainerVpcCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cos_instance_crn: A standard cloud object storage instance CRN to back up the internal registry in your OpenShift on VPC Gen 2 cluster
        :param pulumi.Input[_builtins.str] crk: Root Key ID for boot volume encryption
        :param pulumi.Input[_builtins.bool] disable_outbound_traffic_protection: Allow outbound connections to public destinations
        :param pulumi.Input[_builtins.bool] disable_public_service_endpoint: Boolean value true if Public service endpoint to be disabled
        :param pulumi.Input[_builtins.bool] enable_secure_by_default: Enable Secure-by-default on existing clusters (note: can be used on existing clusters)
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] flavor: Cluster nodes flavour
        :param pulumi.Input[_builtins.bool] force_delete_storage: Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        :param pulumi.Input[_builtins.str] host_pool_id: The ID of the default worker pool's associated host pool
        :param pulumi.Input[_builtins.bool] image_security_enforcement: Set true to enable image security enforcement policies
        :param pulumi.Input[_builtins.str] kms_account_id: Account ID of kms instance holder - if not provided, defaults to the account in use
        :param pulumi.Input[Union['ContainerVpcClusterKmsConfigArgs', 'ContainerVpcClusterKmsConfigArgsDict']] kms_config: Enables KMS on a given cluster
        :param pulumi.Input[_builtins.str] kms_instance_id: Instance ID for boot volume encryption
        :param pulumi.Input[_builtins.str] kube_version: Kubernetes version
        :param pulumi.Input[_builtins.str] name: The cluster name
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the default worker pool.
        :param pulumi.Input[_builtins.str] patch_version: Kubernetes patch version
        :param pulumi.Input[_builtins.str] pod_subnet: Custom subnet CIDR to provide private IP addresses for pods
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] retry_patch_version: Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
               if the previous apply fails
        :param pulumi.Input[_builtins.str] secondary_storage: The secondary storage option for the default worker pool.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Allow user to set which security groups added to their workers
        :param pulumi.Input[_builtins.str] service_subnet: Custom subnet CIDR to provide private IP addresses for services
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resources
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcClusterTaintArgs', 'ContainerVpcClusterTaintArgsDict']]]] taints: Taints for the default worker pool
        :param pulumi.Input[_builtins.bool] update_all_workers: Updates all the woker nodes if sets to true
        :param pulumi.Input[_builtins.str] vpc_id: The vpc id where the cluster is
        :param pulumi.Input[_builtins.bool] wait_for_worker_update: Wait for worker node to update during kube version update.
        :param pulumi.Input[_builtins.str] wait_till: wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        :param pulumi.Input[_builtins.float] worker_count: Number of worker nodes in the default worker pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] worker_labels: Labels for default worker pool
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcClusterZoneArgs', 'ContainerVpcClusterZoneArgsDict']]]] zones: Zone info
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerVpcClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerVpcCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerVpcClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerVpcClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_vpc_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 crk: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_outbound_traffic_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_secure_by_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete_storage: Optional[pulumi.Input[_builtins.bool]] = None,
                 host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_security_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_config: Optional[pulumi.Input[Union['ContainerVpcClusterKmsConfigArgs', 'ContainerVpcClusterKmsConfigArgsDict']]] = None,
                 kms_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kube_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 patch_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
                 secondary_storage: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcClusterTaintArgs', 'ContainerVpcClusterTaintArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerVpcClusterTimeoutsArgs', 'ContainerVpcClusterTimeoutsArgsDict']]] = None,
                 update_all_workers: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_till: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcClusterZoneArgs', 'ContainerVpcClusterZoneArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerVpcClusterArgs.__new__(ContainerVpcClusterArgs)

            __props__.__dict__["container_vpc_cluster_id"] = container_vpc_cluster_id
            __props__.__dict__["cos_instance_crn"] = cos_instance_crn
            __props__.__dict__["crk"] = crk
            __props__.__dict__["disable_outbound_traffic_protection"] = disable_outbound_traffic_protection
            __props__.__dict__["disable_public_service_endpoint"] = disable_public_service_endpoint
            __props__.__dict__["enable_secure_by_default"] = enable_secure_by_default
            __props__.__dict__["entitlement"] = entitlement
            if flavor is None and not opts.urn:
                raise TypeError("Missing required property 'flavor'")
            __props__.__dict__["flavor"] = flavor
            __props__.__dict__["force_delete_storage"] = force_delete_storage
            __props__.__dict__["host_pool_id"] = host_pool_id
            __props__.__dict__["image_security_enforcement"] = image_security_enforcement
            __props__.__dict__["kms_account_id"] = kms_account_id
            __props__.__dict__["kms_config"] = kms_config
            __props__.__dict__["kms_instance_id"] = kms_instance_id
            __props__.__dict__["kube_version"] = kube_version
            __props__.__dict__["name"] = name
            __props__.__dict__["operating_system"] = operating_system
            __props__.__dict__["patch_version"] = patch_version
            __props__.__dict__["pod_subnet"] = pod_subnet
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["retry_patch_version"] = retry_patch_version
            __props__.__dict__["secondary_storage"] = secondary_storage
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["service_subnet"] = service_subnet
            __props__.__dict__["tags"] = tags
            __props__.__dict__["taints"] = taints
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["update_all_workers"] = update_all_workers
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["wait_for_worker_update"] = wait_for_worker_update
            __props__.__dict__["wait_till"] = wait_till
            __props__.__dict__["worker_count"] = worker_count
            __props__.__dict__["worker_labels"] = worker_labels
            if zones is None and not opts.urn:
                raise TypeError("Missing required property 'zones'")
            __props__.__dict__["zones"] = zones
            __props__.__dict__["albs"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["ingress_hostname"] = None
            __props__.__dict__["ingress_secret"] = None
            __props__.__dict__["master_status"] = None
            __props__.__dict__["master_url"] = None
            __props__.__dict__["private_service_endpoint_url"] = None
            __props__.__dict__["public_service_endpoint_url"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_crn"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_status"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["vpe_service_endpoint_url"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["ingressSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ContainerVpcCluster, __self__).__init__(
            'ibm:index/containerVpcCluster:ContainerVpcCluster',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            albs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcClusterAlbArgs', 'ContainerVpcClusterAlbArgsDict']]]]] = None,
            container_vpc_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            cos_instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
            crk: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            disable_outbound_traffic_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            disable_public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_secure_by_default: Optional[pulumi.Input[_builtins.bool]] = None,
            entitlement: Optional[pulumi.Input[_builtins.str]] = None,
            flavor: Optional[pulumi.Input[_builtins.str]] = None,
            force_delete_storage: Optional[pulumi.Input[_builtins.bool]] = None,
            host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_security_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
            ingress_hostname: Optional[pulumi.Input[_builtins.str]] = None,
            ingress_secret: Optional[pulumi.Input[_builtins.str]] = None,
            kms_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            kms_config: Optional[pulumi.Input[Union['ContainerVpcClusterKmsConfigArgs', 'ContainerVpcClusterKmsConfigArgsDict']]] = None,
            kms_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            kube_version: Optional[pulumi.Input[_builtins.str]] = None,
            master_status: Optional[pulumi.Input[_builtins.str]] = None,
            master_url: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            operating_system: Optional[pulumi.Input[_builtins.str]] = None,
            patch_version: Optional[pulumi.Input[_builtins.str]] = None,
            pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            private_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
            public_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
            secondary_storage: Optional[pulumi.Input[_builtins.str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcClusterTaintArgs', 'ContainerVpcClusterTaintArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerVpcClusterTimeoutsArgs', 'ContainerVpcClusterTimeoutsArgsDict']]] = None,
            update_all_workers: Optional[pulumi.Input[_builtins.bool]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
            vpe_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
            wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
            wait_till: Optional[pulumi.Input[_builtins.str]] = None,
            worker_count: Optional[pulumi.Input[_builtins.float]] = None,
            worker_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcClusterZoneArgs', 'ContainerVpcClusterZoneArgsDict']]]]] = None) -> 'ContainerVpcCluster':
        """
        Get an existing ContainerVpcCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cos_instance_crn: A standard cloud object storage instance CRN to back up the internal registry in your OpenShift on VPC Gen 2 cluster
        :param pulumi.Input[_builtins.str] crk: Root Key ID for boot volume encryption
        :param pulumi.Input[_builtins.str] crn: CRN of resource instance
        :param pulumi.Input[_builtins.bool] disable_outbound_traffic_protection: Allow outbound connections to public destinations
        :param pulumi.Input[_builtins.bool] disable_public_service_endpoint: Boolean value true if Public service endpoint to be disabled
        :param pulumi.Input[_builtins.bool] enable_secure_by_default: Enable Secure-by-default on existing clusters (note: can be used on existing clusters)
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] flavor: Cluster nodes flavour
        :param pulumi.Input[_builtins.bool] force_delete_storage: Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        :param pulumi.Input[_builtins.str] host_pool_id: The ID of the default worker pool's associated host pool
        :param pulumi.Input[_builtins.bool] image_security_enforcement: Set true to enable image security enforcement policies
        :param pulumi.Input[_builtins.str] kms_account_id: Account ID of kms instance holder - if not provided, defaults to the account in use
        :param pulumi.Input[Union['ContainerVpcClusterKmsConfigArgs', 'ContainerVpcClusterKmsConfigArgsDict']] kms_config: Enables KMS on a given cluster
        :param pulumi.Input[_builtins.str] kms_instance_id: Instance ID for boot volume encryption
        :param pulumi.Input[_builtins.str] kube_version: Kubernetes version
        :param pulumi.Input[_builtins.str] name: The cluster name
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the default worker pool.
        :param pulumi.Input[_builtins.str] patch_version: Kubernetes patch version
        :param pulumi.Input[_builtins.str] pod_subnet: Custom subnet CIDR to provide private IP addresses for pods
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.float] retry_patch_version: Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
               if the previous apply fails
        :param pulumi.Input[_builtins.str] secondary_storage: The secondary storage option for the default worker pool.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Allow user to set which security groups added to their workers
        :param pulumi.Input[_builtins.str] service_subnet: Custom subnet CIDR to provide private IP addresses for services
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resources
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcClusterTaintArgs', 'ContainerVpcClusterTaintArgsDict']]]] taints: Taints for the default worker pool
        :param pulumi.Input[_builtins.bool] update_all_workers: Updates all the woker nodes if sets to true
        :param pulumi.Input[_builtins.str] vpc_id: The vpc id where the cluster is
        :param pulumi.Input[_builtins.bool] wait_for_worker_update: Wait for worker node to update during kube version update.
        :param pulumi.Input[_builtins.str] wait_till: wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        :param pulumi.Input[_builtins.float] worker_count: Number of worker nodes in the default worker pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] worker_labels: Labels for default worker pool
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcClusterZoneArgs', 'ContainerVpcClusterZoneArgsDict']]]] zones: Zone info
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerVpcClusterState.__new__(_ContainerVpcClusterState)

        __props__.__dict__["albs"] = albs
        __props__.__dict__["container_vpc_cluster_id"] = container_vpc_cluster_id
        __props__.__dict__["cos_instance_crn"] = cos_instance_crn
        __props__.__dict__["crk"] = crk
        __props__.__dict__["crn"] = crn
        __props__.__dict__["disable_outbound_traffic_protection"] = disable_outbound_traffic_protection
        __props__.__dict__["disable_public_service_endpoint"] = disable_public_service_endpoint
        __props__.__dict__["enable_secure_by_default"] = enable_secure_by_default
        __props__.__dict__["entitlement"] = entitlement
        __props__.__dict__["flavor"] = flavor
        __props__.__dict__["force_delete_storage"] = force_delete_storage
        __props__.__dict__["host_pool_id"] = host_pool_id
        __props__.__dict__["image_security_enforcement"] = image_security_enforcement
        __props__.__dict__["ingress_hostname"] = ingress_hostname
        __props__.__dict__["ingress_secret"] = ingress_secret
        __props__.__dict__["kms_account_id"] = kms_account_id
        __props__.__dict__["kms_config"] = kms_config
        __props__.__dict__["kms_instance_id"] = kms_instance_id
        __props__.__dict__["kube_version"] = kube_version
        __props__.__dict__["master_status"] = master_status
        __props__.__dict__["master_url"] = master_url
        __props__.__dict__["name"] = name
        __props__.__dict__["operating_system"] = operating_system
        __props__.__dict__["patch_version"] = patch_version
        __props__.__dict__["pod_subnet"] = pod_subnet
        __props__.__dict__["private_service_endpoint_url"] = private_service_endpoint_url
        __props__.__dict__["public_service_endpoint_url"] = public_service_endpoint_url
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_crn"] = resource_crn
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["retry_patch_version"] = retry_patch_version
        __props__.__dict__["secondary_storage"] = secondary_storage
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["service_subnet"] = service_subnet
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["taints"] = taints
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["update_all_workers"] = update_all_workers
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vpe_service_endpoint_url"] = vpe_service_endpoint_url
        __props__.__dict__["wait_for_worker_update"] = wait_for_worker_update
        __props__.__dict__["wait_till"] = wait_till
        __props__.__dict__["worker_count"] = worker_count
        __props__.__dict__["worker_labels"] = worker_labels
        __props__.__dict__["zones"] = zones
        return ContainerVpcCluster(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def albs(self) -> pulumi.Output[Sequence['outputs.ContainerVpcClusterAlb']]:
        return pulumi.get(self, "albs")

    @_builtins.property
    @pulumi.getter(name="containerVpcClusterId")
    def container_vpc_cluster_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_vpc_cluster_id")

    @_builtins.property
    @pulumi.getter(name="cosInstanceCrn")
    def cos_instance_crn(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A standard cloud object storage instance CRN to back up the internal registry in your OpenShift on VPC Gen 2 cluster
        """
        return pulumi.get(self, "cos_instance_crn")

    @_builtins.property
    @pulumi.getter
    def crk(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Root Key ID for boot volume encryption
        """
        return pulumi.get(self, "crk")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        CRN of resource instance
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="disableOutboundTrafficProtection")
    def disable_outbound_traffic_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow outbound connections to public destinations
        """
        return pulumi.get(self, "disable_outbound_traffic_protection")

    @_builtins.property
    @pulumi.getter(name="disablePublicServiceEndpoint")
    def disable_public_service_endpoint(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Boolean value true if Public service endpoint to be disabled
        """
        return pulumi.get(self, "disable_public_service_endpoint")

    @_builtins.property
    @pulumi.getter(name="enableSecureByDefault")
    def enable_secure_by_default(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable Secure-by-default on existing clusters (note: can be used on existing clusters)
        """
        return pulumi.get(self, "enable_secure_by_default")

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster nodes flavour
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="forceDeleteStorage")
    def force_delete_storage(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        """
        return pulumi.get(self, "force_delete_storage")

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the default worker pool's associated host pool
        """
        return pulumi.get(self, "host_pool_id")

    @_builtins.property
    @pulumi.getter(name="imageSecurityEnforcement")
    def image_security_enforcement(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set true to enable image security enforcement policies
        """
        return pulumi.get(self, "image_security_enforcement")

    @_builtins.property
    @pulumi.getter(name="ingressHostname")
    def ingress_hostname(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ingress_hostname")

    @_builtins.property
    @pulumi.getter(name="ingressSecret")
    def ingress_secret(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ingress_secret")

    @_builtins.property
    @pulumi.getter(name="kmsAccountId")
    def kms_account_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Account ID of kms instance holder - if not provided, defaults to the account in use
        """
        return pulumi.get(self, "kms_account_id")

    @_builtins.property
    @pulumi.getter(name="kmsConfig")
    def kms_config(self) -> pulumi.Output[Optional['outputs.ContainerVpcClusterKmsConfig']]:
        """
        Enables KMS on a given cluster
        """
        return pulumi.get(self, "kms_config")

    @_builtins.property
    @pulumi.getter(name="kmsInstanceId")
    def kms_instance_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Instance ID for boot volume encryption
        """
        return pulumi.get(self, "kms_instance_id")

    @_builtins.property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> pulumi.Output[_builtins.str]:
        """
        Kubernetes version
        """
        return pulumi.get(self, "kube_version")

    @_builtins.property
    @pulumi.getter(name="masterStatus")
    def master_status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "master_status")

    @_builtins.property
    @pulumi.getter(name="masterUrl")
    def master_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "master_url")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The cluster name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Output[_builtins.str]:
        """
        The operating system of the workers in the default worker pool.
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="patchVersion")
    def patch_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Kubernetes patch version
        """
        return pulumi.get(self, "patch_version")

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> pulumi.Output[_builtins.str]:
        """
        Custom subnet CIDR to provide private IP addresses for pods
        """
        return pulumi.get(self, "pod_subnet")

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpointUrl")
    def private_service_endpoint_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "private_service_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpointUrl")
    def public_service_endpoint_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "public_service_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="retryPatchVersion")
    def retry_patch_version(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
        if the previous apply fails
        """
        return pulumi.get(self, "retry_patch_version")

    @_builtins.property
    @pulumi.getter(name="secondaryStorage")
    def secondary_storage(self) -> pulumi.Output[_builtins.str]:
        """
        The secondary storage option for the default worker pool.
        """
        return pulumi.get(self, "secondary_storage")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Allow user to set which security groups added to their workers
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> pulumi.Output[_builtins.str]:
        """
        Custom subnet CIDR to provide private IP addresses for services
        """
        return pulumi.get(self, "service_subnet")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of tags for the resources
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerVpcClusterTaint']]]:
        """
        Taints for the default worker pool
        """
        return pulumi.get(self, "taints")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerVpcClusterTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="updateAllWorkers")
    def update_all_workers(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Updates all the woker nodes if sets to true
        """
        return pulumi.get(self, "update_all_workers")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        The vpc id where the cluster is
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vpeServiceEndpointUrl")
    def vpe_service_endpoint_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "vpe_service_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="waitForWorkerUpdate")
    def wait_for_worker_update(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Wait for worker node to update during kube version update.
        """
        return pulumi.get(self, "wait_for_worker_update")

    @_builtins.property
    @pulumi.getter(name="waitTill")
    def wait_till(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        """
        return pulumi.get(self, "wait_till")

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Number of worker nodes in the default worker pool
        """
        return pulumi.get(self, "worker_count")

    @_builtins.property
    @pulumi.getter(name="workerLabels")
    def worker_labels(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Labels for default worker pool
        """
        return pulumi.get(self, "worker_labels")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Sequence['outputs.ContainerVpcClusterZone']]:
        """
        Zone info
        """
        return pulumi.get(self, "zones")

