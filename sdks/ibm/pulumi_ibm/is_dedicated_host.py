# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsDedicatedHostArgs', 'IsDedicatedHost']

@pulumi.input_type
class IsDedicatedHostArgs:
    def __init__(__self__, *,
                 host_group: pulumi.Input[_builtins.str],
                 profile: pulumi.Input[_builtins.str],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 instance_placement_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsDedicatedHost resource.
        :param pulumi.Input[_builtins.str] host_group: The unique identifier of the dedicated host group for this dedicated host.
        :param pulumi.Input[_builtins.str] profile: The Globally unique name of the dedicated host profile to use for this dedicated host.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.bool] instance_placement_enabled: If set to true, instances can be placed on this dedicated host.
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this dedicated host. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier for the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        pulumi.set(__self__, "host_group", host_group)
        pulumi.set(__self__, "profile", profile)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if instance_placement_enabled is not None:
            pulumi.set(__self__, "instance_placement_enabled", instance_placement_enabled)
        if is_dedicated_host_id is not None:
            pulumi.set(__self__, "is_dedicated_host_id", is_dedicated_host_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)

    @_builtins.property
    @pulumi.getter(name="hostGroup")
    def host_group(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of the dedicated host group for this dedicated host.
        """
        return pulumi.get(self, "host_group")

    @host_group.setter
    def host_group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_group", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Input[_builtins.str]:
        """
        The Globally unique name of the dedicated host profile to use for this dedicated host.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="instancePlacementEnabled")
    def instance_placement_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, instances can be placed on this dedicated host.
        """
        return pulumi.get(self, "instance_placement_enabled")

    @instance_placement_enabled.setter
    def instance_placement_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "instance_placement_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isDedicatedHostId")
    def is_dedicated_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_dedicated_host_id")

    @is_dedicated_host_id.setter
    def is_dedicated_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_dedicated_host_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique user-defined name for this dedicated host. If unspecified, the name will be a hyphenated list of
        randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for the resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)


@pulumi.input_type
class _IsDedicatedHostState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 available_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 available_vcpus: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostAvailableVcpusArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostDiskArgs']]]] = None,
                 host_group: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_placement_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 instances: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostInstanceArgs']]]] = None,
                 is_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 numas: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostNumaArgs']]]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 provisionable: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 socket_count: Optional[pulumi.Input[_builtins.float]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 supported_instance_profiles: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostSupportedInstanceProfileArgs']]]] = None,
                 vcpus: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostVcpusArgs']]]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsDedicatedHost resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.float] available_memory: The amount of memory in gibibytes that is currently available for instances.
        :param pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostAvailableVcpusArgs']]] available_vcpus: The available VCPU for the dedicated host.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the dedicated host was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this dedicated host.
        :param pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostDiskArgs']]] disks: Collection of the dedicated host's disks.
        :param pulumi.Input[_builtins.str] host_group: The unique identifier of the dedicated host group for this dedicated host.
        :param pulumi.Input[_builtins.str] href: The URL for this dedicated host.
        :param pulumi.Input[_builtins.bool] instance_placement_enabled: If set to true, instances can be placed on this dedicated host.
        :param pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostInstanceArgs']]] instances: Array of instances that are allocated to this dedicated host.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the dedicated host resource.
        :param pulumi.Input[_builtins.float] memory: The total amount of memory in gibibytes for this host.
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this dedicated host. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostNumaArgs']]] numas: The dedicated host NUMA configuration
        :param pulumi.Input[_builtins.str] profile: The Globally unique name of the dedicated host profile to use for this dedicated host.
        :param pulumi.Input[_builtins.bool] provisionable: Indicates whether this dedicated host is available for instance creation.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier for the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] resource_type: The type of resource referenced.
        :param pulumi.Input[_builtins.float] socket_count: The total number of sockets for this host.
        :param pulumi.Input[_builtins.str] state: The administrative state of the dedicated host.The enumerated values for this property are expected to expand in the
               future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
               error, or bypass the dedicated host on which the unexpected property value was encountered.
        :param pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostSupportedInstanceProfileArgs']]] supported_instance_profiles: Array of instance profiles that can be used by instances placed on this dedicated host.
        :param pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostVcpusArgs']]] vcpus: The total VCPU of the dedicated host.
        :param pulumi.Input[_builtins.str] zone: The globally unique name of the zone this dedicated host resides in.
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if available_memory is not None:
            pulumi.set(__self__, "available_memory", available_memory)
        if available_vcpus is not None:
            pulumi.set(__self__, "available_vcpus", available_vcpus)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if host_group is not None:
            pulumi.set(__self__, "host_group", host_group)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if instance_placement_enabled is not None:
            pulumi.set(__self__, "instance_placement_enabled", instance_placement_enabled)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if is_dedicated_host_id is not None:
            pulumi.set(__self__, "is_dedicated_host_id", is_dedicated_host_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if numas is not None:
            pulumi.set(__self__, "numas", numas)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if provisionable is not None:
            pulumi.set(__self__, "provisionable", provisionable)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if socket_count is not None:
            pulumi.set(__self__, "socket_count", socket_count)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_instance_profiles is not None:
            pulumi.set(__self__, "supported_instance_profiles", supported_instance_profiles)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="availableMemory")
    def available_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The amount of memory in gibibytes that is currently available for instances.
        """
        return pulumi.get(self, "available_memory")

    @available_memory.setter
    def available_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "available_memory", value)

    @_builtins.property
    @pulumi.getter(name="availableVcpus")
    def available_vcpus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostAvailableVcpusArgs']]]]:
        """
        The available VCPU for the dedicated host.
        """
        return pulumi.get(self, "available_vcpus")

    @available_vcpus.setter
    def available_vcpus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostAvailableVcpusArgs']]]]):
        pulumi.set(self, "available_vcpus", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the dedicated host was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this dedicated host.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostDiskArgs']]]]:
        """
        Collection of the dedicated host's disks.
        """
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostDiskArgs']]]]):
        pulumi.set(self, "disks", value)

    @_builtins.property
    @pulumi.getter(name="hostGroup")
    def host_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the dedicated host group for this dedicated host.
        """
        return pulumi.get(self, "host_group")

    @host_group.setter
    def host_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_group", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this dedicated host.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="instancePlacementEnabled")
    def instance_placement_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, instances can be placed on this dedicated host.
        """
        return pulumi.get(self, "instance_placement_enabled")

    @instance_placement_enabled.setter
    def instance_placement_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "instance_placement_enabled", value)

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostInstanceArgs']]]]:
        """
        Array of instances that are allocated to this dedicated host.
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostInstanceArgs']]]]):
        pulumi.set(self, "instances", value)

    @_builtins.property
    @pulumi.getter(name="isDedicatedHostId")
    def is_dedicated_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_dedicated_host_id")

    @is_dedicated_host_id.setter
    def is_dedicated_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_dedicated_host_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the dedicated host resource.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total amount of memory in gibibytes for this host.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique user-defined name for this dedicated host. If unspecified, the name will be a hyphenated list of
        randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def numas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostNumaArgs']]]]:
        """
        The dedicated host NUMA configuration
        """
        return pulumi.get(self, "numas")

    @numas.setter
    def numas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostNumaArgs']]]]):
        pulumi.set(self, "numas", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Globally unique name of the dedicated host profile to use for this dedicated host.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter
    def provisionable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether this dedicated host is available for instance creation.
        """
        return pulumi.get(self, "provisionable")

    @provisionable.setter
    def provisionable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "provisionable", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for the resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of resource referenced.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="socketCount")
    def socket_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total number of sockets for this host.
        """
        return pulumi.get(self, "socket_count")

    @socket_count.setter
    def socket_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "socket_count", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The administrative state of the dedicated host.The enumerated values for this property are expected to expand in the
        future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
        error, or bypass the dedicated host on which the unexpected property value was encountered.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter(name="supportedInstanceProfiles")
    def supported_instance_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostSupportedInstanceProfileArgs']]]]:
        """
        Array of instance profiles that can be used by instances placed on this dedicated host.
        """
        return pulumi.get(self, "supported_instance_profiles")

    @supported_instance_profiles.setter
    def supported_instance_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostSupportedInstanceProfileArgs']]]]):
        pulumi.set(self, "supported_instance_profiles", value)

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostVcpusArgs']]]]:
        """
        The total VCPU of the dedicated host.
        """
        return pulumi.get(self, "vcpus")

    @vcpus.setter
    def vcpus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsDedicatedHostVcpusArgs']]]]):
        pulumi.set(self, "vcpus", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique name of the zone this dedicated host resides in.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isDedicatedHost:IsDedicatedHost")
class IsDedicatedHost(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host_group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_placement_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsDedicatedHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] host_group: The unique identifier of the dedicated host group for this dedicated host.
        :param pulumi.Input[_builtins.bool] instance_placement_enabled: If set to true, instances can be placed on this dedicated host.
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this dedicated host. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[_builtins.str] profile: The Globally unique name of the dedicated host profile to use for this dedicated host.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier for the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsDedicatedHostArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsDedicatedHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsDedicatedHostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsDedicatedHostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host_group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_placement_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsDedicatedHostArgs.__new__(IsDedicatedHostArgs)

            __props__.__dict__["access_tags"] = access_tags
            if host_group is None and not opts.urn:
                raise TypeError("Missing required property 'host_group'")
            __props__.__dict__["host_group"] = host_group
            __props__.__dict__["instance_placement_enabled"] = instance_placement_enabled
            __props__.__dict__["is_dedicated_host_id"] = is_dedicated_host_id
            __props__.__dict__["name"] = name
            if profile is None and not opts.urn:
                raise TypeError("Missing required property 'profile'")
            __props__.__dict__["profile"] = profile
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["available_memory"] = None
            __props__.__dict__["available_vcpus"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["disks"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["instances"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["memory"] = None
            __props__.__dict__["numas"] = None
            __props__.__dict__["provisionable"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["socket_count"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["supported_instance_profiles"] = None
            __props__.__dict__["vcpus"] = None
            __props__.__dict__["zone"] = None
        super(IsDedicatedHost, __self__).__init__(
            'ibm:index/isDedicatedHost:IsDedicatedHost',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            available_memory: Optional[pulumi.Input[_builtins.float]] = None,
            available_vcpus: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostAvailableVcpusArgs', 'IsDedicatedHostAvailableVcpusArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostDiskArgs', 'IsDedicatedHostDiskArgsDict']]]]] = None,
            host_group: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            instance_placement_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostInstanceArgs', 'IsDedicatedHostInstanceArgsDict']]]]] = None,
            is_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            memory: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            numas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostNumaArgs', 'IsDedicatedHostNumaArgsDict']]]]] = None,
            profile: Optional[pulumi.Input[_builtins.str]] = None,
            provisionable: Optional[pulumi.Input[_builtins.bool]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            socket_count: Optional[pulumi.Input[_builtins.float]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            supported_instance_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostSupportedInstanceProfileArgs', 'IsDedicatedHostSupportedInstanceProfileArgsDict']]]]] = None,
            vcpus: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostVcpusArgs', 'IsDedicatedHostVcpusArgsDict']]]]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsDedicatedHost':
        """
        Get an existing IsDedicatedHost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.float] available_memory: The amount of memory in gibibytes that is currently available for instances.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostAvailableVcpusArgs', 'IsDedicatedHostAvailableVcpusArgsDict']]]] available_vcpus: The available VCPU for the dedicated host.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the dedicated host was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this dedicated host.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostDiskArgs', 'IsDedicatedHostDiskArgsDict']]]] disks: Collection of the dedicated host's disks.
        :param pulumi.Input[_builtins.str] host_group: The unique identifier of the dedicated host group for this dedicated host.
        :param pulumi.Input[_builtins.str] href: The URL for this dedicated host.
        :param pulumi.Input[_builtins.bool] instance_placement_enabled: If set to true, instances can be placed on this dedicated host.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostInstanceArgs', 'IsDedicatedHostInstanceArgsDict']]]] instances: Array of instances that are allocated to this dedicated host.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the dedicated host resource.
        :param pulumi.Input[_builtins.float] memory: The total amount of memory in gibibytes for this host.
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this dedicated host. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostNumaArgs', 'IsDedicatedHostNumaArgsDict']]]] numas: The dedicated host NUMA configuration
        :param pulumi.Input[_builtins.str] profile: The Globally unique name of the dedicated host profile to use for this dedicated host.
        :param pulumi.Input[_builtins.bool] provisionable: Indicates whether this dedicated host is available for instance creation.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier for the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] resource_type: The type of resource referenced.
        :param pulumi.Input[_builtins.float] socket_count: The total number of sockets for this host.
        :param pulumi.Input[_builtins.str] state: The administrative state of the dedicated host.The enumerated values for this property are expected to expand in the
               future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
               error, or bypass the dedicated host on which the unexpected property value was encountered.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostSupportedInstanceProfileArgs', 'IsDedicatedHostSupportedInstanceProfileArgsDict']]]] supported_instance_profiles: Array of instance profiles that can be used by instances placed on this dedicated host.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsDedicatedHostVcpusArgs', 'IsDedicatedHostVcpusArgsDict']]]] vcpus: The total VCPU of the dedicated host.
        :param pulumi.Input[_builtins.str] zone: The globally unique name of the zone this dedicated host resides in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsDedicatedHostState.__new__(_IsDedicatedHostState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["available_memory"] = available_memory
        __props__.__dict__["available_vcpus"] = available_vcpus
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["disks"] = disks
        __props__.__dict__["host_group"] = host_group
        __props__.__dict__["href"] = href
        __props__.__dict__["instance_placement_enabled"] = instance_placement_enabled
        __props__.__dict__["instances"] = instances
        __props__.__dict__["is_dedicated_host_id"] = is_dedicated_host_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["memory"] = memory
        __props__.__dict__["name"] = name
        __props__.__dict__["numas"] = numas
        __props__.__dict__["profile"] = profile
        __props__.__dict__["provisionable"] = provisionable
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["socket_count"] = socket_count
        __props__.__dict__["state"] = state
        __props__.__dict__["supported_instance_profiles"] = supported_instance_profiles
        __props__.__dict__["vcpus"] = vcpus
        __props__.__dict__["zone"] = zone
        return IsDedicatedHost(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="availableMemory")
    def available_memory(self) -> pulumi.Output[_builtins.float]:
        """
        The amount of memory in gibibytes that is currently available for instances.
        """
        return pulumi.get(self, "available_memory")

    @_builtins.property
    @pulumi.getter(name="availableVcpus")
    def available_vcpus(self) -> pulumi.Output[Sequence['outputs.IsDedicatedHostAvailableVcpus']]:
        """
        The available VCPU for the dedicated host.
        """
        return pulumi.get(self, "available_vcpus")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the dedicated host was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this dedicated host.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> pulumi.Output[Sequence['outputs.IsDedicatedHostDisk']]:
        """
        Collection of the dedicated host's disks.
        """
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter(name="hostGroup")
    def host_group(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the dedicated host group for this dedicated host.
        """
        return pulumi.get(self, "host_group")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this dedicated host.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="instancePlacementEnabled")
    def instance_placement_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, instances can be placed on this dedicated host.
        """
        return pulumi.get(self, "instance_placement_enabled")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Sequence['outputs.IsDedicatedHostInstance']]:
        """
        Array of instances that are allocated to this dedicated host.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="isDedicatedHostId")
    def is_dedicated_host_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_dedicated_host_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the dedicated host resource.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> pulumi.Output[_builtins.float]:
        """
        The total amount of memory in gibibytes for this host.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The unique user-defined name for this dedicated host. If unspecified, the name will be a hyphenated list of
        randomly-selected words.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def numas(self) -> pulumi.Output[Sequence['outputs.IsDedicatedHostNuma']]:
        """
        The dedicated host NUMA configuration
        """
        return pulumi.get(self, "numas")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Output[_builtins.str]:
        """
        The Globally unique name of the dedicated host profile to use for this dedicated host.
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter
    def provisionable(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether this dedicated host is available for instance creation.
        """
        return pulumi.get(self, "provisionable")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for the resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of resource referenced.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="socketCount")
    def socket_count(self) -> pulumi.Output[_builtins.float]:
        """
        The total number of sockets for this host.
        """
        return pulumi.get(self, "socket_count")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The administrative state of the dedicated host.The enumerated values for this property are expected to expand in the
        future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
        error, or bypass the dedicated host on which the unexpected property value was encountered.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="supportedInstanceProfiles")
    def supported_instance_profiles(self) -> pulumi.Output[Sequence['outputs.IsDedicatedHostSupportedInstanceProfile']]:
        """
        Array of instance profiles that can be used by instances placed on this dedicated host.
        """
        return pulumi.get(self, "supported_instance_profiles")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> pulumi.Output[Sequence['outputs.IsDedicatedHostVcpus']]:
        """
        The total VCPU of the dedicated host.
        """
        return pulumi.get(self, "vcpus")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique name of the zone this dedicated host resides in.
        """
        return pulumi.get(self, "zone")

