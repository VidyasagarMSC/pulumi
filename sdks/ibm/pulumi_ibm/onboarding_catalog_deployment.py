# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OnboardingCatalogDeploymentArgs', 'OnboardingCatalogDeployment']

@pulumi.input_type
class OnboardingCatalogDeploymentArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[_builtins.bool],
                 catalog_plan_id: pulumi.Input[_builtins.str],
                 catalog_product_id: pulumi.Input[_builtins.str],
                 disabled: pulumi.Input[_builtins.bool],
                 kind: pulumi.Input[_builtins.str],
                 object_provider: pulumi.Input['OnboardingCatalogDeploymentObjectProviderArgs'],
                 product_id: pulumi.Input[_builtins.str],
                 env: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input['OnboardingCatalogDeploymentMetadataArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_catalog_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 overview_ui: Optional[pulumi.Input['OnboardingCatalogDeploymentOverviewUiArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a OnboardingCatalogDeployment resource.
        :param pulumi.Input[_builtins.bool] active: Whether the service is active.
        :param pulumi.Input[_builtins.str] catalog_plan_id: The unique ID of this global catalog plan.
        :param pulumi.Input[_builtins.str] catalog_product_id: The unique ID of this global catalog product.
        :param pulumi.Input[_builtins.bool] disabled: Determines the global visibility for the catalog entry, and its children. If it is not enabled, all plans are disabled.
        :param pulumi.Input[_builtins.str] kind: The kind of the global catalog object.
        :param pulumi.Input['OnboardingCatalogDeploymentObjectProviderArgs'] object_provider: The provider or owner of the product.
        :param pulumi.Input[_builtins.str] product_id: The unique ID of the product.
        :param pulumi.Input[_builtins.str] env: The environment to fetch this object from.
        :param pulumi.Input['OnboardingCatalogDeploymentMetadataArgs'] metadata: Global catalog deployment metadata.
        :param pulumi.Input[_builtins.str] name: The programmatic name of this deployment.
        :param pulumi.Input[_builtins.str] object_id: The desired ID of the global catalog object.
        :param pulumi.Input['OnboardingCatalogDeploymentOverviewUiArgs'] overview_ui: The object that contains the service details from the Overview page in global catalog.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: A list of tags that carry information about your product. These tags can be used to find your product in the IBM Cloud
               catalog.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "catalog_plan_id", catalog_plan_id)
        pulumi.set(__self__, "catalog_product_id", catalog_product_id)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "object_provider", object_provider)
        pulumi.set(__self__, "product_id", product_id)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if onboarding_catalog_deployment_id is not None:
            pulumi.set(__self__, "onboarding_catalog_deployment_id", onboarding_catalog_deployment_id)
        if overview_ui is not None:
            pulumi.set(__self__, "overview_ui", overview_ui)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def active(self) -> pulumi.Input[_builtins.bool]:
        """
        Whether the service is active.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "active", value)

    @_builtins.property
    @pulumi.getter(name="catalogPlanId")
    def catalog_plan_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique ID of this global catalog plan.
        """
        return pulumi.get(self, "catalog_plan_id")

    @catalog_plan_id.setter
    def catalog_plan_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "catalog_plan_id", value)

    @_builtins.property
    @pulumi.getter(name="catalogProductId")
    def catalog_product_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique ID of this global catalog product.
        """
        return pulumi.get(self, "catalog_product_id")

    @catalog_product_id.setter
    def catalog_product_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "catalog_product_id", value)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> pulumi.Input[_builtins.bool]:
        """
        Determines the global visibility for the catalog entry, and its children. If it is not enabled, all plans are disabled.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Input[_builtins.str]:
        """
        The kind of the global catalog object.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter(name="objectProvider")
    def object_provider(self) -> pulumi.Input['OnboardingCatalogDeploymentObjectProviderArgs']:
        """
        The provider or owner of the product.
        """
        return pulumi.get(self, "object_provider")

    @object_provider.setter
    def object_provider(self, value: pulumi.Input['OnboardingCatalogDeploymentObjectProviderArgs']):
        pulumi.set(self, "object_provider", value)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique ID of the product.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The environment to fetch this object from.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "env", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['OnboardingCatalogDeploymentMetadataArgs']]:
        """
        Global catalog deployment metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['OnboardingCatalogDeploymentMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The programmatic name of this deployment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The desired ID of the global catalog object.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_id", value)

    @_builtins.property
    @pulumi.getter(name="onboardingCatalogDeploymentId")
    def onboarding_catalog_deployment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "onboarding_catalog_deployment_id")

    @onboarding_catalog_deployment_id.setter
    def onboarding_catalog_deployment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "onboarding_catalog_deployment_id", value)

    @_builtins.property
    @pulumi.getter(name="overviewUi")
    def overview_ui(self) -> Optional[pulumi.Input['OnboardingCatalogDeploymentOverviewUiArgs']]:
        """
        The object that contains the service details from the Overview page in global catalog.
        """
        return pulumi.get(self, "overview_ui")

    @overview_ui.setter
    def overview_ui(self, value: Optional[pulumi.Input['OnboardingCatalogDeploymentOverviewUiArgs']]):
        pulumi.set(self, "overview_ui", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of tags that carry information about your product. These tags can be used to find your product in the IBM Cloud
        catalog.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _OnboardingCatalogDeploymentState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 catalog_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 env: Optional[pulumi.Input[_builtins.str]] = None,
                 geo_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input['OnboardingCatalogDeploymentMetadataArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 object_provider: Optional[pulumi.Input['OnboardingCatalogDeploymentObjectProviderArgs']] = None,
                 onboarding_catalog_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 overview_ui: Optional[pulumi.Input['OnboardingCatalogDeploymentOverviewUiArgs']] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering OnboardingCatalogDeployment resources.
        :param pulumi.Input[_builtins.bool] active: Whether the service is active.
        :param pulumi.Input[_builtins.str] catalog_deployment_id: The ID of a global catalog object.
        :param pulumi.Input[_builtins.str] catalog_plan_id: The unique ID of this global catalog plan.
        :param pulumi.Input[_builtins.str] catalog_product_id: The unique ID of this global catalog product.
        :param pulumi.Input[_builtins.bool] disabled: Determines the global visibility for the catalog entry, and its children. If it is not enabled, all plans are disabled.
        :param pulumi.Input[_builtins.str] env: The environment to fetch this object from.
        :param pulumi.Input[_builtins.str] kind: The kind of the global catalog object.
        :param pulumi.Input['OnboardingCatalogDeploymentMetadataArgs'] metadata: Global catalog deployment metadata.
        :param pulumi.Input[_builtins.str] name: The programmatic name of this deployment.
        :param pulumi.Input[_builtins.str] object_id: The desired ID of the global catalog object.
        :param pulumi.Input['OnboardingCatalogDeploymentObjectProviderArgs'] object_provider: The provider or owner of the product.
        :param pulumi.Input['OnboardingCatalogDeploymentOverviewUiArgs'] overview_ui: The object that contains the service details from the Overview page in global catalog.
        :param pulumi.Input[_builtins.str] product_id: The unique ID of the product.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: A list of tags that carry information about your product. These tags can be used to find your product in the IBM Cloud
               catalog.
        :param pulumi.Input[_builtins.str] url: The global catalog URL of your product.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if catalog_deployment_id is not None:
            pulumi.set(__self__, "catalog_deployment_id", catalog_deployment_id)
        if catalog_plan_id is not None:
            pulumi.set(__self__, "catalog_plan_id", catalog_plan_id)
        if catalog_product_id is not None:
            pulumi.set(__self__, "catalog_product_id", catalog_product_id)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if geo_tags is not None:
            pulumi.set(__self__, "geo_tags", geo_tags)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if object_provider is not None:
            pulumi.set(__self__, "object_provider", object_provider)
        if onboarding_catalog_deployment_id is not None:
            pulumi.set(__self__, "onboarding_catalog_deployment_id", onboarding_catalog_deployment_id)
        if overview_ui is not None:
            pulumi.set(__self__, "overview_ui", overview_ui)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the service is active.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "active", value)

    @_builtins.property
    @pulumi.getter(name="catalogDeploymentId")
    def catalog_deployment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of a global catalog object.
        """
        return pulumi.get(self, "catalog_deployment_id")

    @catalog_deployment_id.setter
    def catalog_deployment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_deployment_id", value)

    @_builtins.property
    @pulumi.getter(name="catalogPlanId")
    def catalog_plan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique ID of this global catalog plan.
        """
        return pulumi.get(self, "catalog_plan_id")

    @catalog_plan_id.setter
    def catalog_plan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_plan_id", value)

    @_builtins.property
    @pulumi.getter(name="catalogProductId")
    def catalog_product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique ID of this global catalog product.
        """
        return pulumi.get(self, "catalog_product_id")

    @catalog_product_id.setter
    def catalog_product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_product_id", value)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines the global visibility for the catalog entry, and its children. If it is not enabled, all plans are disabled.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The environment to fetch this object from.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "env", value)

    @_builtins.property
    @pulumi.getter(name="geoTags")
    def geo_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "geo_tags")

    @geo_tags.setter
    def geo_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "geo_tags", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The kind of the global catalog object.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['OnboardingCatalogDeploymentMetadataArgs']]:
        """
        Global catalog deployment metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['OnboardingCatalogDeploymentMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The programmatic name of this deployment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The desired ID of the global catalog object.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_id", value)

    @_builtins.property
    @pulumi.getter(name="objectProvider")
    def object_provider(self) -> Optional[pulumi.Input['OnboardingCatalogDeploymentObjectProviderArgs']]:
        """
        The provider or owner of the product.
        """
        return pulumi.get(self, "object_provider")

    @object_provider.setter
    def object_provider(self, value: Optional[pulumi.Input['OnboardingCatalogDeploymentObjectProviderArgs']]):
        pulumi.set(self, "object_provider", value)

    @_builtins.property
    @pulumi.getter(name="onboardingCatalogDeploymentId")
    def onboarding_catalog_deployment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "onboarding_catalog_deployment_id")

    @onboarding_catalog_deployment_id.setter
    def onboarding_catalog_deployment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "onboarding_catalog_deployment_id", value)

    @_builtins.property
    @pulumi.getter(name="overviewUi")
    def overview_ui(self) -> Optional[pulumi.Input['OnboardingCatalogDeploymentOverviewUiArgs']]:
        """
        The object that contains the service details from the Overview page in global catalog.
        """
        return pulumi.get(self, "overview_ui")

    @overview_ui.setter
    def overview_ui(self, value: Optional[pulumi.Input['OnboardingCatalogDeploymentOverviewUiArgs']]):
        pulumi.set(self, "overview_ui", value)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique ID of the product.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of tags that carry information about your product. These tags can be used to find your product in the IBM Cloud
        catalog.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The global catalog URL of your product.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


@pulumi.type_token("ibm:index/onboardingCatalogDeployment:OnboardingCatalogDeployment")
class OnboardingCatalogDeployment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 catalog_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 env: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Union['OnboardingCatalogDeploymentMetadataArgs', 'OnboardingCatalogDeploymentMetadataArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 object_provider: Optional[pulumi.Input[Union['OnboardingCatalogDeploymentObjectProviderArgs', 'OnboardingCatalogDeploymentObjectProviderArgsDict']]] = None,
                 onboarding_catalog_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 overview_ui: Optional[pulumi.Input[Union['OnboardingCatalogDeploymentOverviewUiArgs', 'OnboardingCatalogDeploymentOverviewUiArgsDict']]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a OnboardingCatalogDeployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] active: Whether the service is active.
        :param pulumi.Input[_builtins.str] catalog_plan_id: The unique ID of this global catalog plan.
        :param pulumi.Input[_builtins.str] catalog_product_id: The unique ID of this global catalog product.
        :param pulumi.Input[_builtins.bool] disabled: Determines the global visibility for the catalog entry, and its children. If it is not enabled, all plans are disabled.
        :param pulumi.Input[_builtins.str] env: The environment to fetch this object from.
        :param pulumi.Input[_builtins.str] kind: The kind of the global catalog object.
        :param pulumi.Input[Union['OnboardingCatalogDeploymentMetadataArgs', 'OnboardingCatalogDeploymentMetadataArgsDict']] metadata: Global catalog deployment metadata.
        :param pulumi.Input[_builtins.str] name: The programmatic name of this deployment.
        :param pulumi.Input[_builtins.str] object_id: The desired ID of the global catalog object.
        :param pulumi.Input[Union['OnboardingCatalogDeploymentObjectProviderArgs', 'OnboardingCatalogDeploymentObjectProviderArgsDict']] object_provider: The provider or owner of the product.
        :param pulumi.Input[Union['OnboardingCatalogDeploymentOverviewUiArgs', 'OnboardingCatalogDeploymentOverviewUiArgsDict']] overview_ui: The object that contains the service details from the Overview page in global catalog.
        :param pulumi.Input[_builtins.str] product_id: The unique ID of the product.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: A list of tags that carry information about your product. These tags can be used to find your product in the IBM Cloud
               catalog.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OnboardingCatalogDeploymentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OnboardingCatalogDeployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OnboardingCatalogDeploymentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OnboardingCatalogDeploymentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 catalog_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 env: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Union['OnboardingCatalogDeploymentMetadataArgs', 'OnboardingCatalogDeploymentMetadataArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 object_provider: Optional[pulumi.Input[Union['OnboardingCatalogDeploymentObjectProviderArgs', 'OnboardingCatalogDeploymentObjectProviderArgsDict']]] = None,
                 onboarding_catalog_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 overview_ui: Optional[pulumi.Input[Union['OnboardingCatalogDeploymentOverviewUiArgs', 'OnboardingCatalogDeploymentOverviewUiArgsDict']]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OnboardingCatalogDeploymentArgs.__new__(OnboardingCatalogDeploymentArgs)

            if active is None and not opts.urn:
                raise TypeError("Missing required property 'active'")
            __props__.__dict__["active"] = active
            if catalog_plan_id is None and not opts.urn:
                raise TypeError("Missing required property 'catalog_plan_id'")
            __props__.__dict__["catalog_plan_id"] = catalog_plan_id
            if catalog_product_id is None and not opts.urn:
                raise TypeError("Missing required property 'catalog_product_id'")
            __props__.__dict__["catalog_product_id"] = catalog_product_id
            if disabled is None and not opts.urn:
                raise TypeError("Missing required property 'disabled'")
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["env"] = env
            if kind is None and not opts.urn:
                raise TypeError("Missing required property 'kind'")
            __props__.__dict__["kind"] = kind
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            __props__.__dict__["object_id"] = object_id
            if object_provider is None and not opts.urn:
                raise TypeError("Missing required property 'object_provider'")
            __props__.__dict__["object_provider"] = object_provider
            __props__.__dict__["onboarding_catalog_deployment_id"] = onboarding_catalog_deployment_id
            __props__.__dict__["overview_ui"] = overview_ui
            if product_id is None and not opts.urn:
                raise TypeError("Missing required property 'product_id'")
            __props__.__dict__["product_id"] = product_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["catalog_deployment_id"] = None
            __props__.__dict__["geo_tags"] = None
            __props__.__dict__["url"] = None
        super(OnboardingCatalogDeployment, __self__).__init__(
            'ibm:index/onboardingCatalogDeployment:OnboardingCatalogDeployment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[_builtins.bool]] = None,
            catalog_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
            catalog_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
            catalog_product_id: Optional[pulumi.Input[_builtins.str]] = None,
            disabled: Optional[pulumi.Input[_builtins.bool]] = None,
            env: Optional[pulumi.Input[_builtins.str]] = None,
            geo_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            kind: Optional[pulumi.Input[_builtins.str]] = None,
            metadata: Optional[pulumi.Input[Union['OnboardingCatalogDeploymentMetadataArgs', 'OnboardingCatalogDeploymentMetadataArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            object_id: Optional[pulumi.Input[_builtins.str]] = None,
            object_provider: Optional[pulumi.Input[Union['OnboardingCatalogDeploymentObjectProviderArgs', 'OnboardingCatalogDeploymentObjectProviderArgsDict']]] = None,
            onboarding_catalog_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
            overview_ui: Optional[pulumi.Input[Union['OnboardingCatalogDeploymentOverviewUiArgs', 'OnboardingCatalogDeploymentOverviewUiArgsDict']]] = None,
            product_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            url: Optional[pulumi.Input[_builtins.str]] = None) -> 'OnboardingCatalogDeployment':
        """
        Get an existing OnboardingCatalogDeployment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] active: Whether the service is active.
        :param pulumi.Input[_builtins.str] catalog_deployment_id: The ID of a global catalog object.
        :param pulumi.Input[_builtins.str] catalog_plan_id: The unique ID of this global catalog plan.
        :param pulumi.Input[_builtins.str] catalog_product_id: The unique ID of this global catalog product.
        :param pulumi.Input[_builtins.bool] disabled: Determines the global visibility for the catalog entry, and its children. If it is not enabled, all plans are disabled.
        :param pulumi.Input[_builtins.str] env: The environment to fetch this object from.
        :param pulumi.Input[_builtins.str] kind: The kind of the global catalog object.
        :param pulumi.Input[Union['OnboardingCatalogDeploymentMetadataArgs', 'OnboardingCatalogDeploymentMetadataArgsDict']] metadata: Global catalog deployment metadata.
        :param pulumi.Input[_builtins.str] name: The programmatic name of this deployment.
        :param pulumi.Input[_builtins.str] object_id: The desired ID of the global catalog object.
        :param pulumi.Input[Union['OnboardingCatalogDeploymentObjectProviderArgs', 'OnboardingCatalogDeploymentObjectProviderArgsDict']] object_provider: The provider or owner of the product.
        :param pulumi.Input[Union['OnboardingCatalogDeploymentOverviewUiArgs', 'OnboardingCatalogDeploymentOverviewUiArgsDict']] overview_ui: The object that contains the service details from the Overview page in global catalog.
        :param pulumi.Input[_builtins.str] product_id: The unique ID of the product.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: A list of tags that carry information about your product. These tags can be used to find your product in the IBM Cloud
               catalog.
        :param pulumi.Input[_builtins.str] url: The global catalog URL of your product.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OnboardingCatalogDeploymentState.__new__(_OnboardingCatalogDeploymentState)

        __props__.__dict__["active"] = active
        __props__.__dict__["catalog_deployment_id"] = catalog_deployment_id
        __props__.__dict__["catalog_plan_id"] = catalog_plan_id
        __props__.__dict__["catalog_product_id"] = catalog_product_id
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["env"] = env
        __props__.__dict__["geo_tags"] = geo_tags
        __props__.__dict__["kind"] = kind
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["object_id"] = object_id
        __props__.__dict__["object_provider"] = object_provider
        __props__.__dict__["onboarding_catalog_deployment_id"] = onboarding_catalog_deployment_id
        __props__.__dict__["overview_ui"] = overview_ui
        __props__.__dict__["product_id"] = product_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["url"] = url
        return OnboardingCatalogDeployment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def active(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the service is active.
        """
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter(name="catalogDeploymentId")
    def catalog_deployment_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of a global catalog object.
        """
        return pulumi.get(self, "catalog_deployment_id")

    @_builtins.property
    @pulumi.getter(name="catalogPlanId")
    def catalog_plan_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique ID of this global catalog plan.
        """
        return pulumi.get(self, "catalog_plan_id")

    @_builtins.property
    @pulumi.getter(name="catalogProductId")
    def catalog_product_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique ID of this global catalog product.
        """
        return pulumi.get(self, "catalog_product_id")

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Determines the global visibility for the catalog entry, and its children. If it is not enabled, all plans are disabled.
        """
        return pulumi.get(self, "disabled")

    @_builtins.property
    @pulumi.getter
    def env(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The environment to fetch this object from.
        """
        return pulumi.get(self, "env")

    @_builtins.property
    @pulumi.getter(name="geoTags")
    def geo_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "geo_tags")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Output[_builtins.str]:
        """
        The kind of the global catalog object.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional['outputs.OnboardingCatalogDeploymentMetadata']]:
        """
        Global catalog deployment metadata.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The programmatic name of this deployment.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The desired ID of the global catalog object.
        """
        return pulumi.get(self, "object_id")

    @_builtins.property
    @pulumi.getter(name="objectProvider")
    def object_provider(self) -> pulumi.Output['outputs.OnboardingCatalogDeploymentObjectProvider']:
        """
        The provider or owner of the product.
        """
        return pulumi.get(self, "object_provider")

    @_builtins.property
    @pulumi.getter(name="onboardingCatalogDeploymentId")
    def onboarding_catalog_deployment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "onboarding_catalog_deployment_id")

    @_builtins.property
    @pulumi.getter(name="overviewUi")
    def overview_ui(self) -> pulumi.Output[Optional['outputs.OnboardingCatalogDeploymentOverviewUi']]:
        """
        The object that contains the service details from the Overview page in global catalog.
        """
        return pulumi.get(self, "overview_ui")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique ID of the product.
        """
        return pulumi.get(self, "product_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        A list of tags that carry information about your product. These tags can be used to find your product in the IBM Cloud
        catalog.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Output[_builtins.str]:
        """
        The global catalog URL of your product.
        """
        return pulumi.get(self, "url")

