# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IamApiKeyArgs', 'IamApiKey']

@pulumi.input_type
class IamApiKeyArgs:
    def __init__(__self__, *,
                 apikey: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_lock: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_api_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 store_value: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a IamApiKey resource.
        :param pulumi.Input[_builtins.str] apikey: You can optionally passthrough the API key value for this API key. If passed, NO validation of that apiKey value is
               done, i.e. the value can be non-URL safe. If omitted, the API key management will create an URL safe opaque API key
               value. The value of the API key is checked for uniqueness. Please ensure enough variations when passing in this value.
        :param pulumi.Input[_builtins.str] description: The optional description of the API key. The 'description' property is only available if a description was provided
               during a create of an API key.
        :param pulumi.Input[_builtins.str] entity_lock: Indicates if the API key is locked for further write operations. False by default.
        :param pulumi.Input[_builtins.str] file: File where api key is to be stored
        :param pulumi.Input[_builtins.str] name: Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value can exist.
               Access is done via the UUID of the API key.
        :param pulumi.Input[_builtins.bool] store_value: Send true or false to set whether the API key value is retrievable in the future by using the Get details of an API key
               request. If you create an API key for a user, you must specify `false` or omit the value. We don't allow storing of API
               keys for users.
        """
        if apikey is not None:
            pulumi.set(__self__, "apikey", apikey)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entity_lock is not None:
            pulumi.set(__self__, "entity_lock", entity_lock)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if iam_api_key_id is not None:
            pulumi.set(__self__, "iam_api_key_id", iam_api_key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if store_value is not None:
            pulumi.set(__self__, "store_value", store_value)

    @_builtins.property
    @pulumi.getter
    def apikey(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        You can optionally passthrough the API key value for this API key. If passed, NO validation of that apiKey value is
        done, i.e. the value can be non-URL safe. If omitted, the API key management will create an URL safe opaque API key
        value. The value of the API key is checked for uniqueness. Please ensure enough variations when passing in this value.
        """
        return pulumi.get(self, "apikey")

    @apikey.setter
    def apikey(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apikey", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The optional description of the API key. The 'description' property is only available if a description was provided
        during a create of an API key.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="entityLock")
    def entity_lock(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates if the API key is locked for further write operations. False by default.
        """
        return pulumi.get(self, "entity_lock")

    @entity_lock.setter
    def entity_lock(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_lock", value)

    @_builtins.property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        File where api key is to be stored
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file", value)

    @_builtins.property
    @pulumi.getter(name="iamApiKeyId")
    def iam_api_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_api_key_id")

    @iam_api_key_id.setter
    def iam_api_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_api_key_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value can exist.
        Access is done via the UUID of the API key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="storeValue")
    def store_value(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send true or false to set whether the API key value is retrievable in the future by using the Get details of an API key
        request. If you create an API key for a user, you must specify `false` or omit the value. We don't allow storing of API
        keys for users.
        """
        return pulumi.get(self, "store_value")

    @store_value.setter
    def store_value(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "store_value", value)


@pulumi.input_type
class _IamApiKeyState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 apikey: Optional[pulumi.Input[_builtins.str]] = None,
                 apikey_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_lock: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_api_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_id: Optional[pulumi.Input[_builtins.str]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 modified_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 store_value: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering IamApiKey resources.
        :param pulumi.Input[_builtins.str] account_id: The account ID of the API key.
        :param pulumi.Input[_builtins.str] apikey: You can optionally passthrough the API key value for this API key. If passed, NO validation of that apiKey value is
               done, i.e. the value can be non-URL safe. If omitted, the API key management will create an URL safe opaque API key
               value. The value of the API key is checked for uniqueness. Please ensure enough variations when passing in this value.
        :param pulumi.Input[_builtins.str] apikey_id: Unique identifier of this API Key.
        :param pulumi.Input[_builtins.str] created_at: If set contains a date time string of the creation date in ISO format.
        :param pulumi.Input[_builtins.str] created_by: IAM ID of the user or service which created the API key.
        :param pulumi.Input[_builtins.str] crn: Cloud Resource Name of the item. Example Cloud Resource Name:
               'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::apikey:1234-9012-5678'.
        :param pulumi.Input[_builtins.str] description: The optional description of the API key. The 'description' property is only available if a description was provided
               during a create of an API key.
        :param pulumi.Input[_builtins.str] entity_lock: Indicates if the API key is locked for further write operations. False by default.
        :param pulumi.Input[_builtins.str] entity_tag: Version of the API Key details object. You need to specify this value when updating the API key to avoid stale updates.
        :param pulumi.Input[_builtins.str] file: File where api key is to be stored
        :param pulumi.Input[_builtins.str] iam_id: The iam_id that this API key authenticates.
        :param pulumi.Input[_builtins.bool] locked: The API key cannot be changed if set to true.
        :param pulumi.Input[_builtins.str] modified_at: If set contains a date time string of the last modification date in ISO format.
        :param pulumi.Input[_builtins.str] name: Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value can exist.
               Access is done via the UUID of the API key.
        :param pulumi.Input[_builtins.bool] store_value: Send true or false to set whether the API key value is retrievable in the future by using the Get details of an API key
               request. If you create an API key for a user, you must specify `false` or omit the value. We don't allow storing of API
               keys for users.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if apikey is not None:
            pulumi.set(__self__, "apikey", apikey)
        if apikey_id is not None:
            pulumi.set(__self__, "apikey_id", apikey_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entity_lock is not None:
            pulumi.set(__self__, "entity_lock", entity_lock)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if iam_api_key_id is not None:
            pulumi.set(__self__, "iam_api_key_id", iam_api_key_id)
        if iam_id is not None:
            pulumi.set(__self__, "iam_id", iam_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modified_at is not None:
            pulumi.set(__self__, "modified_at", modified_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if store_value is not None:
            pulumi.set(__self__, "store_value", store_value)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account ID of the API key.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter
    def apikey(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        You can optionally passthrough the API key value for this API key. If passed, NO validation of that apiKey value is
        done, i.e. the value can be non-URL safe. If omitted, the API key management will create an URL safe opaque API key
        value. The value of the API key is checked for uniqueness. Please ensure enough variations when passing in this value.
        """
        return pulumi.get(self, "apikey")

    @apikey.setter
    def apikey(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apikey", value)

    @_builtins.property
    @pulumi.getter(name="apikeyId")
    def apikey_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier of this API Key.
        """
        return pulumi.get(self, "apikey_id")

    @apikey_id.setter
    def apikey_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apikey_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If set contains a date time string of the creation date in ISO format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IAM ID of the user or service which created the API key.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Resource Name of the item. Example Cloud Resource Name:
        'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::apikey:1234-9012-5678'.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The optional description of the API key. The 'description' property is only available if a description was provided
        during a create of an API key.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="entityLock")
    def entity_lock(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates if the API key is locked for further write operations. False by default.
        """
        return pulumi.get(self, "entity_lock")

    @entity_lock.setter
    def entity_lock(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_lock", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the API Key details object. You need to specify this value when updating the API key to avoid stale updates.
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        File where api key is to be stored
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file", value)

    @_builtins.property
    @pulumi.getter(name="iamApiKeyId")
    def iam_api_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_api_key_id")

    @iam_api_key_id.setter
    def iam_api_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_api_key_id", value)

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The iam_id that this API key authenticates.
        """
        return pulumi.get(self, "iam_id")

    @iam_id.setter
    def iam_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_id", value)

    @_builtins.property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The API key cannot be changed if set to true.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "locked", value)

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If set contains a date time string of the last modification date in ISO format.
        """
        return pulumi.get(self, "modified_at")

    @modified_at.setter
    def modified_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value can exist.
        Access is done via the UUID of the API key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="storeValue")
    def store_value(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send true or false to set whether the API key value is retrievable in the future by using the Get details of an API key
        request. If you create an API key for a user, you must specify `false` or omit the value. We don't allow storing of API
        keys for users.
        """
        return pulumi.get(self, "store_value")

    @store_value.setter
    def store_value(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "store_value", value)


@pulumi.type_token("ibm:index/iamApiKey:IamApiKey")
class IamApiKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apikey: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_lock: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_api_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 store_value: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a IamApiKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] apikey: You can optionally passthrough the API key value for this API key. If passed, NO validation of that apiKey value is
               done, i.e. the value can be non-URL safe. If omitted, the API key management will create an URL safe opaque API key
               value. The value of the API key is checked for uniqueness. Please ensure enough variations when passing in this value.
        :param pulumi.Input[_builtins.str] description: The optional description of the API key. The 'description' property is only available if a description was provided
               during a create of an API key.
        :param pulumi.Input[_builtins.str] entity_lock: Indicates if the API key is locked for further write operations. False by default.
        :param pulumi.Input[_builtins.str] file: File where api key is to be stored
        :param pulumi.Input[_builtins.str] name: Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value can exist.
               Access is done via the UUID of the API key.
        :param pulumi.Input[_builtins.bool] store_value: Send true or false to set whether the API key value is retrievable in the future by using the Get details of an API key
               request. If you create an API key for a user, you must specify `false` or omit the value. We don't allow storing of API
               keys for users.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IamApiKeyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamApiKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamApiKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamApiKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apikey: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_lock: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_api_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 store_value: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamApiKeyArgs.__new__(IamApiKeyArgs)

            __props__.__dict__["apikey"] = None if apikey is None else pulumi.Output.secret(apikey)
            __props__.__dict__["description"] = description
            __props__.__dict__["entity_lock"] = entity_lock
            __props__.__dict__["file"] = file
            __props__.__dict__["iam_api_key_id"] = iam_api_key_id
            __props__.__dict__["name"] = name
            __props__.__dict__["store_value"] = store_value
            __props__.__dict__["account_id"] = None
            __props__.__dict__["apikey_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["entity_tag"] = None
            __props__.__dict__["iam_id"] = None
            __props__.__dict__["locked"] = None
            __props__.__dict__["modified_at"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apikey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(IamApiKey, __self__).__init__(
            'ibm:index/iamApiKey:IamApiKey',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            apikey: Optional[pulumi.Input[_builtins.str]] = None,
            apikey_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            entity_lock: Optional[pulumi.Input[_builtins.str]] = None,
            entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
            file: Optional[pulumi.Input[_builtins.str]] = None,
            iam_api_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            iam_id: Optional[pulumi.Input[_builtins.str]] = None,
            locked: Optional[pulumi.Input[_builtins.bool]] = None,
            modified_at: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            store_value: Optional[pulumi.Input[_builtins.bool]] = None) -> 'IamApiKey':
        """
        Get an existing IamApiKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: The account ID of the API key.
        :param pulumi.Input[_builtins.str] apikey: You can optionally passthrough the API key value for this API key. If passed, NO validation of that apiKey value is
               done, i.e. the value can be non-URL safe. If omitted, the API key management will create an URL safe opaque API key
               value. The value of the API key is checked for uniqueness. Please ensure enough variations when passing in this value.
        :param pulumi.Input[_builtins.str] apikey_id: Unique identifier of this API Key.
        :param pulumi.Input[_builtins.str] created_at: If set contains a date time string of the creation date in ISO format.
        :param pulumi.Input[_builtins.str] created_by: IAM ID of the user or service which created the API key.
        :param pulumi.Input[_builtins.str] crn: Cloud Resource Name of the item. Example Cloud Resource Name:
               'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::apikey:1234-9012-5678'.
        :param pulumi.Input[_builtins.str] description: The optional description of the API key. The 'description' property is only available if a description was provided
               during a create of an API key.
        :param pulumi.Input[_builtins.str] entity_lock: Indicates if the API key is locked for further write operations. False by default.
        :param pulumi.Input[_builtins.str] entity_tag: Version of the API Key details object. You need to specify this value when updating the API key to avoid stale updates.
        :param pulumi.Input[_builtins.str] file: File where api key is to be stored
        :param pulumi.Input[_builtins.str] iam_id: The iam_id that this API key authenticates.
        :param pulumi.Input[_builtins.bool] locked: The API key cannot be changed if set to true.
        :param pulumi.Input[_builtins.str] modified_at: If set contains a date time string of the last modification date in ISO format.
        :param pulumi.Input[_builtins.str] name: Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value can exist.
               Access is done via the UUID of the API key.
        :param pulumi.Input[_builtins.bool] store_value: Send true or false to set whether the API key value is retrievable in the future by using the Get details of an API key
               request. If you create an API key for a user, you must specify `false` or omit the value. We don't allow storing of API
               keys for users.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamApiKeyState.__new__(_IamApiKeyState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["apikey"] = apikey
        __props__.__dict__["apikey_id"] = apikey_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["crn"] = crn
        __props__.__dict__["description"] = description
        __props__.__dict__["entity_lock"] = entity_lock
        __props__.__dict__["entity_tag"] = entity_tag
        __props__.__dict__["file"] = file
        __props__.__dict__["iam_api_key_id"] = iam_api_key_id
        __props__.__dict__["iam_id"] = iam_id
        __props__.__dict__["locked"] = locked
        __props__.__dict__["modified_at"] = modified_at
        __props__.__dict__["name"] = name
        __props__.__dict__["store_value"] = store_value
        return IamApiKey(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The account ID of the API key.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def apikey(self) -> pulumi.Output[_builtins.str]:
        """
        You can optionally passthrough the API key value for this API key. If passed, NO validation of that apiKey value is
        done, i.e. the value can be non-URL safe. If omitted, the API key management will create an URL safe opaque API key
        value. The value of the API key is checked for uniqueness. Please ensure enough variations when passing in this value.
        """
        return pulumi.get(self, "apikey")

    @_builtins.property
    @pulumi.getter(name="apikeyId")
    def apikey_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier of this API Key.
        """
        return pulumi.get(self, "apikey_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        If set contains a date time string of the creation date in ISO format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        IAM ID of the user or service which created the API key.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        Cloud Resource Name of the item. Example Cloud Resource Name:
        'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::apikey:1234-9012-5678'.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The optional description of the API key. The 'description' property is only available if a description was provided
        during a create of an API key.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="entityLock")
    def entity_lock(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Indicates if the API key is locked for further write operations. False by default.
        """
        return pulumi.get(self, "entity_lock")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> pulumi.Output[_builtins.str]:
        """
        Version of the API Key details object. You need to specify this value when updating the API key to avoid stale updates.
        """
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def file(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        File where api key is to be stored
        """
        return pulumi.get(self, "file")

    @_builtins.property
    @pulumi.getter(name="iamApiKeyId")
    def iam_api_key_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_api_key_id")

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> pulumi.Output[_builtins.str]:
        """
        The iam_id that this API key authenticates.
        """
        return pulumi.get(self, "iam_id")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> pulumi.Output[_builtins.bool]:
        """
        The API key cannot be changed if set to true.
        """
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> pulumi.Output[_builtins.str]:
        """
        If set contains a date time string of the last modification date in ISO format.
        """
        return pulumi.get(self, "modified_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value can exist.
        Access is done via the UUID of the API key.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="storeValue")
    def store_value(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Send true or false to set whether the API key value is retrievable in the future by using the Get details of an API key
        request. If you create an API key for a user, you must specify `false` or omit the value. We don't allow storing of API
        keys for users.
        """
        return pulumi.get(self, "store_value")

