# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiInstanceSnapshotsResult',
    'AwaitableGetPiInstanceSnapshotsResult',
    'get_pi_instance_snapshots',
    'get_pi_instance_snapshots_output',
]

@pulumi.output_type
class GetPiInstanceSnapshotsResult:
    """
    A collection of values returned by getPiInstanceSnapshots.
    """
    def __init__(__self__, id=None, instance_snapshots=None, pi_cloud_instance_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_snapshots and not isinstance(instance_snapshots, list):
            raise TypeError("Expected argument 'instance_snapshots' to be a list")
        pulumi.set(__self__, "instance_snapshots", instance_snapshots)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceSnapshots")
    def instance_snapshots(self) -> Sequence['outputs.GetPiInstanceSnapshotsInstanceSnapshotResult']:
        return pulumi.get(self, "instance_snapshots")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")


class AwaitableGetPiInstanceSnapshotsResult(GetPiInstanceSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiInstanceSnapshotsResult(
            id=self.id,
            instance_snapshots=self.instance_snapshots,
            pi_cloud_instance_id=self.pi_cloud_instance_id)


def get_pi_instance_snapshots(id: Optional[_builtins.str] = None,
                              pi_cloud_instance_id: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiInstanceSnapshotsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiInstanceSnapshots:getPiInstanceSnapshots', __args__, opts=opts, typ=GetPiInstanceSnapshotsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiInstanceSnapshotsResult(
        id=pulumi.get(__ret__, 'id'),
        instance_snapshots=pulumi.get(__ret__, 'instance_snapshots'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'))
def get_pi_instance_snapshots_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiInstanceSnapshotsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiInstanceSnapshots:getPiInstanceSnapshots', __args__, opts=opts, typ=GetPiInstanceSnapshotsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiInstanceSnapshotsResult(
        id=pulumi.get(__response__, 'id'),
        instance_snapshots=pulumi.get(__response__, 'instance_snapshots'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id')))
