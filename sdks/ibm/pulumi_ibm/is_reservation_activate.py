# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsReservationActivateArgs', 'IsReservationActivate']

@pulumi.input_type
class IsReservationActivateArgs:
    def __init__(__self__, *,
                 reservation: pulumi.Input[_builtins.str],
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateResourceGroupArgs']]]] = None):
        """
        The set of arguments for constructing a IsReservationActivate resource.
        :param pulumi.Input[_builtins.str] reservation: The unique identifier for this reservation.
        :param pulumi.Input[Sequence[pulumi.Input['IsReservationActivateResourceGroupArgs']]] resource_groups: The committed use configuration to use for this reservation
        """
        pulumi.set(__self__, "reservation", reservation)
        if resource_groups is not None:
            pulumi.set(__self__, "resource_groups", resource_groups)

    @_builtins.property
    @pulumi.getter
    def reservation(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier for this reservation.
        """
        return pulumi.get(self, "reservation")

    @reservation.setter
    def reservation(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "reservation", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateResourceGroupArgs']]]]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateResourceGroupArgs']]]]):
        pulumi.set(self, "resource_groups", value)


@pulumi.input_type
class _IsReservationActivateState:
    def __init__(__self__, *,
                 affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 capacities: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateCapacityArgs']]]] = None,
                 committed_uses: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateCommittedUseArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateProfileArgs']]]] = None,
                 reservation: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateResourceGroupArgs']]]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateStatusReasonArgs']]]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsReservationActivate resources.
        :param pulumi.Input[_builtins.str] affinity_policy: The affinity policy to use for this reservation
        :param pulumi.Input[Sequence[pulumi.Input['IsReservationActivateCapacityArgs']]] capacities: The capacity reservation configuration to use
        :param pulumi.Input[Sequence[pulumi.Input['IsReservationActivateCommittedUseArgs']]] committed_uses: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] created_at: The date and time that the reservation was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this reservation.
        :param pulumi.Input[_builtins.str] href: The URL for this reservation.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of this reservation.
        :param pulumi.Input[_builtins.str] name: Reservation name
        :param pulumi.Input[Sequence[pulumi.Input['IsReservationActivateProfileArgs']]] profiles: The profile used for this reservation.
        :param pulumi.Input[_builtins.str] reservation: The unique identifier for this reservation.
        :param pulumi.Input[Sequence[pulumi.Input['IsReservationActivateResourceGroupArgs']]] resource_groups: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] status: The status of the reservation.
        :param pulumi.Input[Sequence[pulumi.Input['IsReservationActivateStatusReasonArgs']]] status_reasons: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] zone: The globally unique name for this zone.
        """
        if affinity_policy is not None:
            pulumi.set(__self__, "affinity_policy", affinity_policy)
        if capacities is not None:
            pulumi.set(__self__, "capacities", capacities)
        if committed_uses is not None:
            pulumi.set(__self__, "committed_uses", committed_uses)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if reservation is not None:
            pulumi.set(__self__, "reservation", reservation)
        if resource_groups is not None:
            pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="affinityPolicy")
    def affinity_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The affinity policy to use for this reservation
        """
        return pulumi.get(self, "affinity_policy")

    @affinity_policy.setter
    def affinity_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "affinity_policy", value)

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateCapacityArgs']]]]:
        """
        The capacity reservation configuration to use
        """
        return pulumi.get(self, "capacities")

    @capacities.setter
    def capacities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateCapacityArgs']]]]):
        pulumi.set(self, "capacities", value)

    @_builtins.property
    @pulumi.getter(name="committedUses")
    def committed_uses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateCommittedUseArgs']]]]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "committed_uses")

    @committed_uses.setter
    def committed_uses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateCommittedUseArgs']]]]):
        pulumi.set(self, "committed_uses", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the reservation was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this reservation.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this reservation.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of this reservation.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reservation name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateProfileArgs']]]]:
        """
        The profile used for this reservation.
        """
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateProfileArgs']]]]):
        pulumi.set(self, "profiles", value)

    @_builtins.property
    @pulumi.getter
    def reservation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this reservation.
        """
        return pulumi.get(self, "reservation")

    @reservation.setter
    def reservation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reservation", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateResourceGroupArgs']]]]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateResourceGroupArgs']]]]):
        pulumi.set(self, "resource_groups", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the reservation.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateStatusReasonArgs']]]]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsReservationActivateStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique name for this zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isReservationActivate:IsReservationActivate")
class IsReservationActivate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 reservation: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateResourceGroupArgs', 'IsReservationActivateResourceGroupArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a IsReservationActivate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] reservation: The unique identifier for this reservation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateResourceGroupArgs', 'IsReservationActivateResourceGroupArgsDict']]]] resource_groups: The committed use configuration to use for this reservation
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsReservationActivateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsReservationActivate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsReservationActivateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsReservationActivateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 reservation: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateResourceGroupArgs', 'IsReservationActivateResourceGroupArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsReservationActivateArgs.__new__(IsReservationActivateArgs)

            if reservation is None and not opts.urn:
                raise TypeError("Missing required property 'reservation'")
            __props__.__dict__["reservation"] = reservation
            __props__.__dict__["resource_groups"] = resource_groups
            __props__.__dict__["affinity_policy"] = None
            __props__.__dict__["capacities"] = None
            __props__.__dict__["committed_uses"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["profiles"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
            __props__.__dict__["zone"] = None
        super(IsReservationActivate, __self__).__init__(
            'ibm:index/isReservationActivate:IsReservationActivate',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
            capacities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateCapacityArgs', 'IsReservationActivateCapacityArgsDict']]]]] = None,
            committed_uses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateCommittedUseArgs', 'IsReservationActivateCommittedUseArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            profiles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateProfileArgs', 'IsReservationActivateProfileArgsDict']]]]] = None,
            reservation: Optional[pulumi.Input[_builtins.str]] = None,
            resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateResourceGroupArgs', 'IsReservationActivateResourceGroupArgsDict']]]]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateStatusReasonArgs', 'IsReservationActivateStatusReasonArgsDict']]]]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsReservationActivate':
        """
        Get an existing IsReservationActivate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] affinity_policy: The affinity policy to use for this reservation
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateCapacityArgs', 'IsReservationActivateCapacityArgsDict']]]] capacities: The capacity reservation configuration to use
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateCommittedUseArgs', 'IsReservationActivateCommittedUseArgsDict']]]] committed_uses: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] created_at: The date and time that the reservation was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this reservation.
        :param pulumi.Input[_builtins.str] href: The URL for this reservation.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of this reservation.
        :param pulumi.Input[_builtins.str] name: Reservation name
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateProfileArgs', 'IsReservationActivateProfileArgsDict']]]] profiles: The profile used for this reservation.
        :param pulumi.Input[_builtins.str] reservation: The unique identifier for this reservation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateResourceGroupArgs', 'IsReservationActivateResourceGroupArgsDict']]]] resource_groups: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] status: The status of the reservation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsReservationActivateStatusReasonArgs', 'IsReservationActivateStatusReasonArgsDict']]]] status_reasons: The committed use configuration to use for this reservation
        :param pulumi.Input[_builtins.str] zone: The globally unique name for this zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsReservationActivateState.__new__(_IsReservationActivateState)

        __props__.__dict__["affinity_policy"] = affinity_policy
        __props__.__dict__["capacities"] = capacities
        __props__.__dict__["committed_uses"] = committed_uses
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["href"] = href
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["profiles"] = profiles
        __props__.__dict__["reservation"] = reservation
        __props__.__dict__["resource_groups"] = resource_groups
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["zone"] = zone
        return IsReservationActivate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="affinityPolicy")
    def affinity_policy(self) -> pulumi.Output[_builtins.str]:
        """
        The affinity policy to use for this reservation
        """
        return pulumi.get(self, "affinity_policy")

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> pulumi.Output[Sequence['outputs.IsReservationActivateCapacity']]:
        """
        The capacity reservation configuration to use
        """
        return pulumi.get(self, "capacities")

    @_builtins.property
    @pulumi.getter(name="committedUses")
    def committed_uses(self) -> pulumi.Output[Sequence['outputs.IsReservationActivateCommittedUse']]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "committed_uses")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the reservation was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this reservation.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this reservation.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of this reservation.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Reservation name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> pulumi.Output[Sequence['outputs.IsReservationActivateProfile']]:
        """
        The profile used for this reservation.
        """
        return pulumi.get(self, "profiles")

    @_builtins.property
    @pulumi.getter
    def reservation(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this reservation.
        """
        return pulumi.get(self, "reservation")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> pulumi.Output[Optional[Sequence['outputs.IsReservationActivateResourceGroup']]]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the reservation.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.IsReservationActivateStatusReason']]:
        """
        The committed use configuration to use for this reservation
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique name for this zone.
        """
        return pulumi.get(self, "zone")

