# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DlRouteReportArgs', 'DlRouteReport']

@pulumi.input_type
class DlRouteReportArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[_builtins.str],
                 dl_route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['DlRouteReportTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a DlRouteReport resource.
        :param pulumi.Input[_builtins.str] gateway: The Direct Link gateway identifier
        """
        pulumi.set(__self__, "gateway", gateway)
        if dl_route_report_id is not None:
            pulumi.set(__self__, "dl_route_report_id", dl_route_report_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[_builtins.str]:
        """
        The Direct Link gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="dlRouteReportId")
    def dl_route_report_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dl_route_report_id")

    @dl_route_report_id.setter
    def dl_route_report_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dl_route_report_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DlRouteReportTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DlRouteReportTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _DlRouteReportState:
    def __init__(__self__, *,
                 advertised_routes: Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportAdvertisedRouteArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 dl_route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_routes: Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportGatewayRouteArgs']]]] = None,
                 on_prem_routes: Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportOnPremRouteArgs']]]] = None,
                 overlapping_routes: Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportOverlappingRouteArgs']]]] = None,
                 route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['DlRouteReportTimeoutsArgs']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_connection_routes: Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportVirtualConnectionRouteArgs']]]] = None):
        """
        Input properties used for looking up and filtering DlRouteReport resources.
        :param pulumi.Input[Sequence[pulumi.Input['DlRouteReportAdvertisedRouteArgs']]] advertised_routes: List of connection prefixes advertised to the on-prem network
        :param pulumi.Input[_builtins.str] created_at: The date and time report was created
        :param pulumi.Input[_builtins.str] gateway: The Direct Link gateway identifier
        :param pulumi.Input[Sequence[pulumi.Input['DlRouteReportGatewayRouteArgs']]] gateway_routes: List of gateway routes
        :param pulumi.Input[Sequence[pulumi.Input['DlRouteReportOnPremRouteArgs']]] on_prem_routes: List of onprem routes
        :param pulumi.Input[Sequence[pulumi.Input['DlRouteReportOverlappingRouteArgs']]] overlapping_routes: List of overlapping routes
        :param pulumi.Input[_builtins.str] route_report_id: Id of the route report
        :param pulumi.Input[_builtins.str] status: Route report status
        :param pulumi.Input[_builtins.str] updated_at: The date and time resource was created
        :param pulumi.Input[Sequence[pulumi.Input['DlRouteReportVirtualConnectionRouteArgs']]] virtual_connection_routes: Virtual Connection Routes
        """
        if advertised_routes is not None:
            pulumi.set(__self__, "advertised_routes", advertised_routes)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dl_route_report_id is not None:
            pulumi.set(__self__, "dl_route_report_id", dl_route_report_id)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway_routes is not None:
            pulumi.set(__self__, "gateway_routes", gateway_routes)
        if on_prem_routes is not None:
            pulumi.set(__self__, "on_prem_routes", on_prem_routes)
        if overlapping_routes is not None:
            pulumi.set(__self__, "overlapping_routes", overlapping_routes)
        if route_report_id is not None:
            pulumi.set(__self__, "route_report_id", route_report_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if virtual_connection_routes is not None:
            pulumi.set(__self__, "virtual_connection_routes", virtual_connection_routes)

    @_builtins.property
    @pulumi.getter(name="advertisedRoutes")
    def advertised_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportAdvertisedRouteArgs']]]]:
        """
        List of connection prefixes advertised to the on-prem network
        """
        return pulumi.get(self, "advertised_routes")

    @advertised_routes.setter
    def advertised_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportAdvertisedRouteArgs']]]]):
        pulumi.set(self, "advertised_routes", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time report was created
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dlRouteReportId")
    def dl_route_report_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dl_route_report_id")

    @dl_route_report_id.setter
    def dl_route_report_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dl_route_report_id", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Direct Link gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="gatewayRoutes")
    def gateway_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportGatewayRouteArgs']]]]:
        """
        List of gateway routes
        """
        return pulumi.get(self, "gateway_routes")

    @gateway_routes.setter
    def gateway_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportGatewayRouteArgs']]]]):
        pulumi.set(self, "gateway_routes", value)

    @_builtins.property
    @pulumi.getter(name="onPremRoutes")
    def on_prem_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportOnPremRouteArgs']]]]:
        """
        List of onprem routes
        """
        return pulumi.get(self, "on_prem_routes")

    @on_prem_routes.setter
    def on_prem_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportOnPremRouteArgs']]]]):
        pulumi.set(self, "on_prem_routes", value)

    @_builtins.property
    @pulumi.getter(name="overlappingRoutes")
    def overlapping_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportOverlappingRouteArgs']]]]:
        """
        List of overlapping routes
        """
        return pulumi.get(self, "overlapping_routes")

    @overlapping_routes.setter
    def overlapping_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportOverlappingRouteArgs']]]]):
        pulumi.set(self, "overlapping_routes", value)

    @_builtins.property
    @pulumi.getter(name="routeReportId")
    def route_report_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Id of the route report
        """
        return pulumi.get(self, "route_report_id")

    @route_report_id.setter
    def route_report_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_report_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Route report status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DlRouteReportTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DlRouteReportTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time resource was created
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="virtualConnectionRoutes")
    def virtual_connection_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportVirtualConnectionRouteArgs']]]]:
        """
        Virtual Connection Routes
        """
        return pulumi.get(self, "virtual_connection_routes")

    @virtual_connection_routes.setter
    def virtual_connection_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlRouteReportVirtualConnectionRouteArgs']]]]):
        pulumi.set(self, "virtual_connection_routes", value)


@pulumi.type_token("ibm:index/dlRouteReport:DlRouteReport")
class DlRouteReport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dl_route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DlRouteReportTimeoutsArgs', 'DlRouteReportTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a DlRouteReport resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] gateway: The Direct Link gateway identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DlRouteReportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DlRouteReport resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DlRouteReportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DlRouteReportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dl_route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DlRouteReportTimeoutsArgs', 'DlRouteReportTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DlRouteReportArgs.__new__(DlRouteReportArgs)

            __props__.__dict__["dl_route_report_id"] = dl_route_report_id
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["advertised_routes"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["gateway_routes"] = None
            __props__.__dict__["on_prem_routes"] = None
            __props__.__dict__["overlapping_routes"] = None
            __props__.__dict__["route_report_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["virtual_connection_routes"] = None
        super(DlRouteReport, __self__).__init__(
            'ibm:index/dlRouteReport:DlRouteReport',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            advertised_routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlRouteReportAdvertisedRouteArgs', 'DlRouteReportAdvertisedRouteArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            dl_route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
            gateway: Optional[pulumi.Input[_builtins.str]] = None,
            gateway_routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlRouteReportGatewayRouteArgs', 'DlRouteReportGatewayRouteArgsDict']]]]] = None,
            on_prem_routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlRouteReportOnPremRouteArgs', 'DlRouteReportOnPremRouteArgsDict']]]]] = None,
            overlapping_routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlRouteReportOverlappingRouteArgs', 'DlRouteReportOverlappingRouteArgsDict']]]]] = None,
            route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['DlRouteReportTimeoutsArgs', 'DlRouteReportTimeoutsArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_connection_routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlRouteReportVirtualConnectionRouteArgs', 'DlRouteReportVirtualConnectionRouteArgsDict']]]]] = None) -> 'DlRouteReport':
        """
        Get an existing DlRouteReport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlRouteReportAdvertisedRouteArgs', 'DlRouteReportAdvertisedRouteArgsDict']]]] advertised_routes: List of connection prefixes advertised to the on-prem network
        :param pulumi.Input[_builtins.str] created_at: The date and time report was created
        :param pulumi.Input[_builtins.str] gateway: The Direct Link gateway identifier
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlRouteReportGatewayRouteArgs', 'DlRouteReportGatewayRouteArgsDict']]]] gateway_routes: List of gateway routes
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlRouteReportOnPremRouteArgs', 'DlRouteReportOnPremRouteArgsDict']]]] on_prem_routes: List of onprem routes
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlRouteReportOverlappingRouteArgs', 'DlRouteReportOverlappingRouteArgsDict']]]] overlapping_routes: List of overlapping routes
        :param pulumi.Input[_builtins.str] route_report_id: Id of the route report
        :param pulumi.Input[_builtins.str] status: Route report status
        :param pulumi.Input[_builtins.str] updated_at: The date and time resource was created
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlRouteReportVirtualConnectionRouteArgs', 'DlRouteReportVirtualConnectionRouteArgsDict']]]] virtual_connection_routes: Virtual Connection Routes
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DlRouteReportState.__new__(_DlRouteReportState)

        __props__.__dict__["advertised_routes"] = advertised_routes
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dl_route_report_id"] = dl_route_report_id
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["gateway_routes"] = gateway_routes
        __props__.__dict__["on_prem_routes"] = on_prem_routes
        __props__.__dict__["overlapping_routes"] = overlapping_routes
        __props__.__dict__["route_report_id"] = route_report_id
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["virtual_connection_routes"] = virtual_connection_routes
        return DlRouteReport(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="advertisedRoutes")
    def advertised_routes(self) -> pulumi.Output[Sequence['outputs.DlRouteReportAdvertisedRoute']]:
        """
        List of connection prefixes advertised to the on-prem network
        """
        return pulumi.get(self, "advertised_routes")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time report was created
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dlRouteReportId")
    def dl_route_report_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dl_route_report_id")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[_builtins.str]:
        """
        The Direct Link gateway identifier
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="gatewayRoutes")
    def gateway_routes(self) -> pulumi.Output[Sequence['outputs.DlRouteReportGatewayRoute']]:
        """
        List of gateway routes
        """
        return pulumi.get(self, "gateway_routes")

    @_builtins.property
    @pulumi.getter(name="onPremRoutes")
    def on_prem_routes(self) -> pulumi.Output[Sequence['outputs.DlRouteReportOnPremRoute']]:
        """
        List of onprem routes
        """
        return pulumi.get(self, "on_prem_routes")

    @_builtins.property
    @pulumi.getter(name="overlappingRoutes")
    def overlapping_routes(self) -> pulumi.Output[Sequence['outputs.DlRouteReportOverlappingRoute']]:
        """
        List of overlapping routes
        """
        return pulumi.get(self, "overlapping_routes")

    @_builtins.property
    @pulumi.getter(name="routeReportId")
    def route_report_id(self) -> pulumi.Output[_builtins.str]:
        """
        Id of the route report
        """
        return pulumi.get(self, "route_report_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Route report status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.DlRouteReportTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time resource was created
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="virtualConnectionRoutes")
    def virtual_connection_routes(self) -> pulumi.Output[Sequence['outputs.DlRouteReportVirtualConnectionRoute']]:
        """
        Virtual Connection Routes
        """
        return pulumi.get(self, "virtual_connection_routes")

