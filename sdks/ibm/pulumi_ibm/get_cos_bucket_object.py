# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCosBucketObjectResult',
    'AwaitableGetCosBucketObjectResult',
    'get_cos_bucket_object',
    'get_cos_bucket_object_output',
]

@pulumi.output_type
class GetCosBucketObjectResult:
    """
    A collection of values returned by getCosBucketObject.
    """
    def __init__(__self__, body=None, bucket_crn=None, bucket_location=None, content_length=None, content_type=None, endpoint_type=None, etag=None, id=None, key=None, last_modified=None, object_lock_legal_hold_status=None, object_lock_mode=None, object_lock_retain_until_date=None, object_sql_url=None, version_id=None, website_redirect=None):
        if body and not isinstance(body, str):
            raise TypeError("Expected argument 'body' to be a str")
        pulumi.set(__self__, "body", body)
        if bucket_crn and not isinstance(bucket_crn, str):
            raise TypeError("Expected argument 'bucket_crn' to be a str")
        pulumi.set(__self__, "bucket_crn", bucket_crn)
        if bucket_location and not isinstance(bucket_location, str):
            raise TypeError("Expected argument 'bucket_location' to be a str")
        pulumi.set(__self__, "bucket_location", bucket_location)
        if content_length and not isinstance(content_length, float):
            raise TypeError("Expected argument 'content_length' to be a float")
        pulumi.set(__self__, "content_length", content_length)
        if content_type and not isinstance(content_type, str):
            raise TypeError("Expected argument 'content_type' to be a str")
        pulumi.set(__self__, "content_type", content_type)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        pulumi.set(__self__, "last_modified", last_modified)
        if object_lock_legal_hold_status and not isinstance(object_lock_legal_hold_status, str):
            raise TypeError("Expected argument 'object_lock_legal_hold_status' to be a str")
        pulumi.set(__self__, "object_lock_legal_hold_status", object_lock_legal_hold_status)
        if object_lock_mode and not isinstance(object_lock_mode, str):
            raise TypeError("Expected argument 'object_lock_mode' to be a str")
        pulumi.set(__self__, "object_lock_mode", object_lock_mode)
        if object_lock_retain_until_date and not isinstance(object_lock_retain_until_date, str):
            raise TypeError("Expected argument 'object_lock_retain_until_date' to be a str")
        pulumi.set(__self__, "object_lock_retain_until_date", object_lock_retain_until_date)
        if object_sql_url and not isinstance(object_sql_url, str):
            raise TypeError("Expected argument 'object_sql_url' to be a str")
        pulumi.set(__self__, "object_sql_url", object_sql_url)
        if version_id and not isinstance(version_id, str):
            raise TypeError("Expected argument 'version_id' to be a str")
        pulumi.set(__self__, "version_id", version_id)
        if website_redirect and not isinstance(website_redirect, str):
            raise TypeError("Expected argument 'website_redirect' to be a str")
        pulumi.set(__self__, "website_redirect", website_redirect)

    @_builtins.property
    @pulumi.getter
    def body(self) -> _builtins.str:
        return pulumi.get(self, "body")

    @_builtins.property
    @pulumi.getter(name="bucketCrn")
    def bucket_crn(self) -> _builtins.str:
        return pulumi.get(self, "bucket_crn")

    @_builtins.property
    @pulumi.getter(name="bucketLocation")
    def bucket_location(self) -> _builtins.str:
        return pulumi.get(self, "bucket_location")

    @_builtins.property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> _builtins.float:
        return pulumi.get(self, "content_length")

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> _builtins.str:
        return pulumi.get(self, "content_type")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> _builtins.str:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> _builtins.str:
        return pulumi.get(self, "last_modified")

    @_builtins.property
    @pulumi.getter(name="objectLockLegalHoldStatus")
    def object_lock_legal_hold_status(self) -> _builtins.str:
        return pulumi.get(self, "object_lock_legal_hold_status")

    @_builtins.property
    @pulumi.getter(name="objectLockMode")
    def object_lock_mode(self) -> _builtins.str:
        return pulumi.get(self, "object_lock_mode")

    @_builtins.property
    @pulumi.getter(name="objectLockRetainUntilDate")
    def object_lock_retain_until_date(self) -> _builtins.str:
        return pulumi.get(self, "object_lock_retain_until_date")

    @_builtins.property
    @pulumi.getter(name="objectSqlUrl")
    def object_sql_url(self) -> _builtins.str:
        return pulumi.get(self, "object_sql_url")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> _builtins.str:
        return pulumi.get(self, "version_id")

    @_builtins.property
    @pulumi.getter(name="websiteRedirect")
    def website_redirect(self) -> _builtins.str:
        return pulumi.get(self, "website_redirect")


class AwaitableGetCosBucketObjectResult(GetCosBucketObjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCosBucketObjectResult(
            body=self.body,
            bucket_crn=self.bucket_crn,
            bucket_location=self.bucket_location,
            content_length=self.content_length,
            content_type=self.content_type,
            endpoint_type=self.endpoint_type,
            etag=self.etag,
            id=self.id,
            key=self.key,
            last_modified=self.last_modified,
            object_lock_legal_hold_status=self.object_lock_legal_hold_status,
            object_lock_mode=self.object_lock_mode,
            object_lock_retain_until_date=self.object_lock_retain_until_date,
            object_sql_url=self.object_sql_url,
            version_id=self.version_id,
            website_redirect=self.website_redirect)


def get_cos_bucket_object(bucket_crn: Optional[_builtins.str] = None,
                          bucket_location: Optional[_builtins.str] = None,
                          endpoint_type: Optional[_builtins.str] = None,
                          id: Optional[_builtins.str] = None,
                          key: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCosBucketObjectResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bucketCrn'] = bucket_crn
    __args__['bucketLocation'] = bucket_location
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['key'] = key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCosBucketObject:getCosBucketObject', __args__, opts=opts, typ=GetCosBucketObjectResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCosBucketObjectResult(
        body=pulumi.get(__ret__, 'body'),
        bucket_crn=pulumi.get(__ret__, 'bucket_crn'),
        bucket_location=pulumi.get(__ret__, 'bucket_location'),
        content_length=pulumi.get(__ret__, 'content_length'),
        content_type=pulumi.get(__ret__, 'content_type'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        last_modified=pulumi.get(__ret__, 'last_modified'),
        object_lock_legal_hold_status=pulumi.get(__ret__, 'object_lock_legal_hold_status'),
        object_lock_mode=pulumi.get(__ret__, 'object_lock_mode'),
        object_lock_retain_until_date=pulumi.get(__ret__, 'object_lock_retain_until_date'),
        object_sql_url=pulumi.get(__ret__, 'object_sql_url'),
        version_id=pulumi.get(__ret__, 'version_id'),
        website_redirect=pulumi.get(__ret__, 'website_redirect'))
def get_cos_bucket_object_output(bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
                                 bucket_location: Optional[pulumi.Input[_builtins.str]] = None,
                                 endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 key: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCosBucketObjectResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bucketCrn'] = bucket_crn
    __args__['bucketLocation'] = bucket_location
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['key'] = key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCosBucketObject:getCosBucketObject', __args__, opts=opts, typ=GetCosBucketObjectResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCosBucketObjectResult(
        body=pulumi.get(__response__, 'body'),
        bucket_crn=pulumi.get(__response__, 'bucket_crn'),
        bucket_location=pulumi.get(__response__, 'bucket_location'),
        content_length=pulumi.get(__response__, 'content_length'),
        content_type=pulumi.get(__response__, 'content_type'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        etag=pulumi.get(__response__, 'etag'),
        id=pulumi.get(__response__, 'id'),
        key=pulumi.get(__response__, 'key'),
        last_modified=pulumi.get(__response__, 'last_modified'),
        object_lock_legal_hold_status=pulumi.get(__response__, 'object_lock_legal_hold_status'),
        object_lock_mode=pulumi.get(__response__, 'object_lock_mode'),
        object_lock_retain_until_date=pulumi.get(__response__, 'object_lock_retain_until_date'),
        object_sql_url=pulumi.get(__response__, 'object_sql_url'),
        version_id=pulumi.get(__response__, 'version_id'),
        website_redirect=pulumi.get(__response__, 'website_redirect')))
