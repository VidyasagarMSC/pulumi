# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsDedicatedHostProfilesResult',
    'AwaitableGetIsDedicatedHostProfilesResult',
    'get_is_dedicated_host_profiles',
    'get_is_dedicated_host_profiles_output',
]

@pulumi.output_type
class GetIsDedicatedHostProfilesResult:
    """
    A collection of values returned by getIsDedicatedHostProfiles.
    """
    def __init__(__self__, id=None, profiles=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if profiles and not isinstance(profiles, list):
            raise TypeError("Expected argument 'profiles' to be a list")
        pulumi.set(__self__, "profiles", profiles)
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetIsDedicatedHostProfilesProfileResult']:
        return pulumi.get(self, "profiles")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.float:
        return pulumi.get(self, "total_count")


class AwaitableGetIsDedicatedHostProfilesResult(GetIsDedicatedHostProfilesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsDedicatedHostProfilesResult(
            id=self.id,
            profiles=self.profiles,
            total_count=self.total_count)


def get_is_dedicated_host_profiles(id: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsDedicatedHostProfilesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsDedicatedHostProfiles:getIsDedicatedHostProfiles', __args__, opts=opts, typ=GetIsDedicatedHostProfilesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsDedicatedHostProfilesResult(
        id=pulumi.get(__ret__, 'id'),
        profiles=pulumi.get(__ret__, 'profiles'),
        total_count=pulumi.get(__ret__, 'total_count'))
def get_is_dedicated_host_profiles_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsDedicatedHostProfilesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsDedicatedHostProfiles:getIsDedicatedHostProfiles', __args__, opts=opts, typ=GetIsDedicatedHostProfilesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsDedicatedHostProfilesResult(
        id=pulumi.get(__response__, 'id'),
        profiles=pulumi.get(__response__, 'profiles'),
        total_count=pulumi.get(__response__, 'total_count')))
