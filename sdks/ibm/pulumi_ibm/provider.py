# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 bluemix_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 bluemix_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 endpoints_file_path: Optional[pulumi.Input[_builtins.str]] = None,
                 function_namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 generation: Optional[pulumi.Input[_builtins.float]] = None,
                 iaas_classic_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 iaas_classic_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 iaas_classic_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 iaas_classic_username: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_refresh_token: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_token: Optional[pulumi.Input[_builtins.str]] = None,
                 ibmcloud_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 ibmcloud_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.float]] = None,
                 private_endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 riaas_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 softlayer_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 softlayer_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 softlayer_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 softlayer_username: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[_builtins.str] bluemix_api_key: The Bluemix API Key
        :param pulumi.Input[_builtins.float] bluemix_timeout: The timeout (in seconds) to set for any Bluemix API calls made.
        :param pulumi.Input[_builtins.str] endpoints_file_path: Path of the file that contains private and public regional endpoints mapping
        :param pulumi.Input[_builtins.str] function_namespace: The IBM Cloud Function namespace
        :param pulumi.Input[_builtins.float] generation: Generation of Virtual Private Cloud. Default is 2
        :param pulumi.Input[_builtins.str] iaas_classic_api_key: The Classic Infrastructure API Key
        :param pulumi.Input[_builtins.str] iaas_classic_endpoint_url: The Classic Infrastructure Endpoint
        :param pulumi.Input[_builtins.float] iaas_classic_timeout: The timeout (in seconds) to set for any Classic Infrastructure API calls made.
        :param pulumi.Input[_builtins.str] iaas_classic_username: The Classic Infrastructure API user name
        :param pulumi.Input[_builtins.str] iam_profile_id: IAM Trusted Profile Authentication token
        :param pulumi.Input[_builtins.str] iam_refresh_token: IAM Authentication refresh token
        :param pulumi.Input[_builtins.str] iam_token: IAM Authentication token
        :param pulumi.Input[_builtins.str] ibmcloud_api_key: The IBM Cloud API Key
        :param pulumi.Input[_builtins.float] ibmcloud_timeout: The timeout (in seconds) to set for any IBM Cloud API calls made.
        :param pulumi.Input[_builtins.float] max_retries: The retry count to set for API calls.
        :param pulumi.Input[_builtins.str] private_endpoint_type: Private Endpoint type used by the service endpoints. Example: vpe.
        :param pulumi.Input[_builtins.str] region: The IBM cloud Region (for example 'us-south').
        :param pulumi.Input[_builtins.str] resource_group: The Resource group id.
        :param pulumi.Input[_builtins.str] riaas_endpoint: The next generation infrastructure service endpoint url.
        :param pulumi.Input[_builtins.str] softlayer_api_key: The SoftLayer API Key
        :param pulumi.Input[_builtins.str] softlayer_endpoint_url: The Softlayer Endpoint
        :param pulumi.Input[_builtins.float] softlayer_timeout: The timeout (in seconds) to set for any SoftLayer API calls made.
        :param pulumi.Input[_builtins.str] softlayer_username: The SoftLayer user name
        :param pulumi.Input[_builtins.str] visibility: Visibility of the provider if it is private or public.
        :param pulumi.Input[_builtins.str] zone: The IBM cloud Region zone (for example 'us-south-1') for power resources.
        """
        if bluemix_api_key is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""bluemix_api_key is deprecated: Deprecated""")
        if bluemix_api_key is not None:
            pulumi.set(__self__, "bluemix_api_key", bluemix_api_key)
        if bluemix_timeout is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""bluemix_timeout is deprecated: Deprecated""")
        if bluemix_timeout is not None:
            pulumi.set(__self__, "bluemix_timeout", bluemix_timeout)
        if endpoints_file_path is not None:
            pulumi.set(__self__, "endpoints_file_path", endpoints_file_path)
        if function_namespace is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""function_namespace is deprecated: Deprecated""")
        if function_namespace is not None:
            pulumi.set(__self__, "function_namespace", function_namespace)
        if generation is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""generation is deprecated: Deprecated""")
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if iaas_classic_api_key is not None:
            pulumi.set(__self__, "iaas_classic_api_key", iaas_classic_api_key)
        if iaas_classic_endpoint_url is not None:
            pulumi.set(__self__, "iaas_classic_endpoint_url", iaas_classic_endpoint_url)
        if iaas_classic_timeout is not None:
            pulumi.set(__self__, "iaas_classic_timeout", iaas_classic_timeout)
        if iaas_classic_username is not None:
            pulumi.set(__self__, "iaas_classic_username", iaas_classic_username)
        if iam_profile_id is not None:
            pulumi.set(__self__, "iam_profile_id", iam_profile_id)
        if iam_refresh_token is not None:
            pulumi.set(__self__, "iam_refresh_token", iam_refresh_token)
        if iam_token is not None:
            pulumi.set(__self__, "iam_token", iam_token)
        if ibmcloud_api_key is not None:
            pulumi.set(__self__, "ibmcloud_api_key", ibmcloud_api_key)
        if ibmcloud_timeout is not None:
            pulumi.set(__self__, "ibmcloud_timeout", ibmcloud_timeout)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if private_endpoint_type is not None:
            pulumi.set(__self__, "private_endpoint_type", private_endpoint_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if riaas_endpoint is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""riaas_endpoint is deprecated: Deprecated""")
        if riaas_endpoint is not None:
            pulumi.set(__self__, "riaas_endpoint", riaas_endpoint)
        if softlayer_api_key is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""softlayer_api_key is deprecated: Deprecated""")
        if softlayer_api_key is not None:
            pulumi.set(__self__, "softlayer_api_key", softlayer_api_key)
        if softlayer_endpoint_url is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""softlayer_endpoint_url is deprecated: Deprecated""")
        if softlayer_endpoint_url is not None:
            pulumi.set(__self__, "softlayer_endpoint_url", softlayer_endpoint_url)
        if softlayer_timeout is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""softlayer_timeout is deprecated: Deprecated""")
        if softlayer_timeout is not None:
            pulumi.set(__self__, "softlayer_timeout", softlayer_timeout)
        if softlayer_username is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""softlayer_username is deprecated: Deprecated""")
        if softlayer_username is not None:
            pulumi.set(__self__, "softlayer_username", softlayer_username)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="bluemixApiKey")
    @_utilities.deprecated("""Deprecated""")
    def bluemix_api_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Bluemix API Key
        """
        return pulumi.get(self, "bluemix_api_key")

    @bluemix_api_key.setter
    def bluemix_api_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bluemix_api_key", value)

    @_builtins.property
    @pulumi.getter(name="bluemixTimeout")
    @_utilities.deprecated("""Deprecated""")
    def bluemix_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The timeout (in seconds) to set for any Bluemix API calls made.
        """
        return pulumi.get(self, "bluemix_timeout")

    @bluemix_timeout.setter
    def bluemix_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bluemix_timeout", value)

    @_builtins.property
    @pulumi.getter(name="endpointsFilePath")
    def endpoints_file_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path of the file that contains private and public regional endpoints mapping
        """
        return pulumi.get(self, "endpoints_file_path")

    @endpoints_file_path.setter
    def endpoints_file_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoints_file_path", value)

    @_builtins.property
    @pulumi.getter(name="functionNamespace")
    @_utilities.deprecated("""Deprecated""")
    def function_namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IBM Cloud Function namespace
        """
        return pulumi.get(self, "function_namespace")

    @function_namespace.setter
    def function_namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_namespace", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def generation(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Generation of Virtual Private Cloud. Default is 2
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "generation", value)

    @_builtins.property
    @pulumi.getter(name="iaasClassicApiKey")
    def iaas_classic_api_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Classic Infrastructure API Key
        """
        return pulumi.get(self, "iaas_classic_api_key")

    @iaas_classic_api_key.setter
    def iaas_classic_api_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iaas_classic_api_key", value)

    @_builtins.property
    @pulumi.getter(name="iaasClassicEndpointUrl")
    def iaas_classic_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Classic Infrastructure Endpoint
        """
        return pulumi.get(self, "iaas_classic_endpoint_url")

    @iaas_classic_endpoint_url.setter
    def iaas_classic_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iaas_classic_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="iaasClassicTimeout")
    def iaas_classic_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The timeout (in seconds) to set for any Classic Infrastructure API calls made.
        """
        return pulumi.get(self, "iaas_classic_timeout")

    @iaas_classic_timeout.setter
    def iaas_classic_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "iaas_classic_timeout", value)

    @_builtins.property
    @pulumi.getter(name="iaasClassicUsername")
    def iaas_classic_username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Classic Infrastructure API user name
        """
        return pulumi.get(self, "iaas_classic_username")

    @iaas_classic_username.setter
    def iaas_classic_username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iaas_classic_username", value)

    @_builtins.property
    @pulumi.getter(name="iamProfileId")
    def iam_profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IAM Trusted Profile Authentication token
        """
        return pulumi.get(self, "iam_profile_id")

    @iam_profile_id.setter
    def iam_profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="iamRefreshToken")
    def iam_refresh_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IAM Authentication refresh token
        """
        return pulumi.get(self, "iam_refresh_token")

    @iam_refresh_token.setter
    def iam_refresh_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_refresh_token", value)

    @_builtins.property
    @pulumi.getter(name="iamToken")
    def iam_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IAM Authentication token
        """
        return pulumi.get(self, "iam_token")

    @iam_token.setter
    def iam_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_token", value)

    @_builtins.property
    @pulumi.getter(name="ibmcloudApiKey")
    def ibmcloud_api_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IBM Cloud API Key
        """
        return pulumi.get(self, "ibmcloud_api_key")

    @ibmcloud_api_key.setter
    def ibmcloud_api_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibmcloud_api_key", value)

    @_builtins.property
    @pulumi.getter(name="ibmcloudTimeout")
    def ibmcloud_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The timeout (in seconds) to set for any IBM Cloud API calls made.
        """
        return pulumi.get(self, "ibmcloud_timeout")

    @ibmcloud_timeout.setter
    def ibmcloud_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ibmcloud_timeout", value)

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The retry count to set for API calls.
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_retries", value)

    @_builtins.property
    @pulumi.getter(name="privateEndpointType")
    def private_endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private Endpoint type used by the service endpoints. Example: vpe.
        """
        return pulumi.get(self, "private_endpoint_type")

    @private_endpoint_type.setter
    def private_endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IBM cloud Region (for example 'us-south').
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Resource group id.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="riaasEndpoint")
    @_utilities.deprecated("""Deprecated""")
    def riaas_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The next generation infrastructure service endpoint url.
        """
        return pulumi.get(self, "riaas_endpoint")

    @riaas_endpoint.setter
    def riaas_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "riaas_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="softlayerApiKey")
    @_utilities.deprecated("""Deprecated""")
    def softlayer_api_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The SoftLayer API Key
        """
        return pulumi.get(self, "softlayer_api_key")

    @softlayer_api_key.setter
    def softlayer_api_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "softlayer_api_key", value)

    @_builtins.property
    @pulumi.getter(name="softlayerEndpointUrl")
    @_utilities.deprecated("""Deprecated""")
    def softlayer_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Softlayer Endpoint
        """
        return pulumi.get(self, "softlayer_endpoint_url")

    @softlayer_endpoint_url.setter
    def softlayer_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "softlayer_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="softlayerTimeout")
    @_utilities.deprecated("""Deprecated""")
    def softlayer_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The timeout (in seconds) to set for any SoftLayer API calls made.
        """
        return pulumi.get(self, "softlayer_timeout")

    @softlayer_timeout.setter
    def softlayer_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "softlayer_timeout", value)

    @_builtins.property
    @pulumi.getter(name="softlayerUsername")
    @_utilities.deprecated("""Deprecated""")
    def softlayer_username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The SoftLayer user name
        """
        return pulumi.get(self, "softlayer_username")

    @softlayer_username.setter
    def softlayer_username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "softlayer_username", value)

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Visibility of the provider if it is private or public.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "visibility", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IBM cloud Region zone (for example 'us-south-1') for power resources.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("pulumi:providers:ibm")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bluemix_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 bluemix_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 endpoints_file_path: Optional[pulumi.Input[_builtins.str]] = None,
                 function_namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 generation: Optional[pulumi.Input[_builtins.float]] = None,
                 iaas_classic_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 iaas_classic_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 iaas_classic_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 iaas_classic_username: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_refresh_token: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_token: Optional[pulumi.Input[_builtins.str]] = None,
                 ibmcloud_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 ibmcloud_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.float]] = None,
                 private_endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 riaas_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 softlayer_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 softlayer_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 softlayer_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 softlayer_username: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        The provider type for the ibm package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bluemix_api_key: The Bluemix API Key
        :param pulumi.Input[_builtins.float] bluemix_timeout: The timeout (in seconds) to set for any Bluemix API calls made.
        :param pulumi.Input[_builtins.str] endpoints_file_path: Path of the file that contains private and public regional endpoints mapping
        :param pulumi.Input[_builtins.str] function_namespace: The IBM Cloud Function namespace
        :param pulumi.Input[_builtins.float] generation: Generation of Virtual Private Cloud. Default is 2
        :param pulumi.Input[_builtins.str] iaas_classic_api_key: The Classic Infrastructure API Key
        :param pulumi.Input[_builtins.str] iaas_classic_endpoint_url: The Classic Infrastructure Endpoint
        :param pulumi.Input[_builtins.float] iaas_classic_timeout: The timeout (in seconds) to set for any Classic Infrastructure API calls made.
        :param pulumi.Input[_builtins.str] iaas_classic_username: The Classic Infrastructure API user name
        :param pulumi.Input[_builtins.str] iam_profile_id: IAM Trusted Profile Authentication token
        :param pulumi.Input[_builtins.str] iam_refresh_token: IAM Authentication refresh token
        :param pulumi.Input[_builtins.str] iam_token: IAM Authentication token
        :param pulumi.Input[_builtins.str] ibmcloud_api_key: The IBM Cloud API Key
        :param pulumi.Input[_builtins.float] ibmcloud_timeout: The timeout (in seconds) to set for any IBM Cloud API calls made.
        :param pulumi.Input[_builtins.float] max_retries: The retry count to set for API calls.
        :param pulumi.Input[_builtins.str] private_endpoint_type: Private Endpoint type used by the service endpoints. Example: vpe.
        :param pulumi.Input[_builtins.str] region: The IBM cloud Region (for example 'us-south').
        :param pulumi.Input[_builtins.str] resource_group: The Resource group id.
        :param pulumi.Input[_builtins.str] riaas_endpoint: The next generation infrastructure service endpoint url.
        :param pulumi.Input[_builtins.str] softlayer_api_key: The SoftLayer API Key
        :param pulumi.Input[_builtins.str] softlayer_endpoint_url: The Softlayer Endpoint
        :param pulumi.Input[_builtins.float] softlayer_timeout: The timeout (in seconds) to set for any SoftLayer API calls made.
        :param pulumi.Input[_builtins.str] softlayer_username: The SoftLayer user name
        :param pulumi.Input[_builtins.str] visibility: Visibility of the provider if it is private or public.
        :param pulumi.Input[_builtins.str] zone: The IBM cloud Region zone (for example 'us-south-1') for power resources.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the ibm package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bluemix_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 bluemix_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 endpoints_file_path: Optional[pulumi.Input[_builtins.str]] = None,
                 function_namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 generation: Optional[pulumi.Input[_builtins.float]] = None,
                 iaas_classic_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 iaas_classic_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 iaas_classic_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 iaas_classic_username: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_refresh_token: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_token: Optional[pulumi.Input[_builtins.str]] = None,
                 ibmcloud_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 ibmcloud_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.float]] = None,
                 private_endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 riaas_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 softlayer_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 softlayer_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 softlayer_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 softlayer_username: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["bluemix_api_key"] = bluemix_api_key
            __props__.__dict__["bluemix_timeout"] = pulumi.Output.from_input(bluemix_timeout).apply(pulumi.runtime.to_json) if bluemix_timeout is not None else None
            __props__.__dict__["endpoints_file_path"] = endpoints_file_path
            __props__.__dict__["function_namespace"] = function_namespace
            __props__.__dict__["generation"] = pulumi.Output.from_input(generation).apply(pulumi.runtime.to_json) if generation is not None else None
            __props__.__dict__["iaas_classic_api_key"] = iaas_classic_api_key
            __props__.__dict__["iaas_classic_endpoint_url"] = iaas_classic_endpoint_url
            __props__.__dict__["iaas_classic_timeout"] = pulumi.Output.from_input(iaas_classic_timeout).apply(pulumi.runtime.to_json) if iaas_classic_timeout is not None else None
            __props__.__dict__["iaas_classic_username"] = iaas_classic_username
            __props__.__dict__["iam_profile_id"] = iam_profile_id
            __props__.__dict__["iam_refresh_token"] = iam_refresh_token
            __props__.__dict__["iam_token"] = iam_token
            __props__.__dict__["ibmcloud_api_key"] = ibmcloud_api_key
            __props__.__dict__["ibmcloud_timeout"] = pulumi.Output.from_input(ibmcloud_timeout).apply(pulumi.runtime.to_json) if ibmcloud_timeout is not None else None
            __props__.__dict__["max_retries"] = pulumi.Output.from_input(max_retries).apply(pulumi.runtime.to_json) if max_retries is not None else None
            __props__.__dict__["private_endpoint_type"] = private_endpoint_type
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["riaas_endpoint"] = riaas_endpoint
            __props__.__dict__["softlayer_api_key"] = softlayer_api_key
            __props__.__dict__["softlayer_endpoint_url"] = softlayer_endpoint_url
            __props__.__dict__["softlayer_timeout"] = pulumi.Output.from_input(softlayer_timeout).apply(pulumi.runtime.to_json) if softlayer_timeout is not None else None
            __props__.__dict__["softlayer_username"] = softlayer_username
            __props__.__dict__["visibility"] = visibility
            __props__.__dict__["zone"] = zone
        super(Provider, __self__).__init__(
            'ibm',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @_builtins.property
    @pulumi.getter(name="bluemixApiKey")
    @_utilities.deprecated("""Deprecated""")
    def bluemix_api_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Bluemix API Key
        """
        return pulumi.get(self, "bluemix_api_key")

    @_builtins.property
    @pulumi.getter(name="endpointsFilePath")
    def endpoints_file_path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Path of the file that contains private and public regional endpoints mapping
        """
        return pulumi.get(self, "endpoints_file_path")

    @_builtins.property
    @pulumi.getter(name="functionNamespace")
    @_utilities.deprecated("""Deprecated""")
    def function_namespace(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The IBM Cloud Function namespace
        """
        return pulumi.get(self, "function_namespace")

    @_builtins.property
    @pulumi.getter(name="iaasClassicApiKey")
    def iaas_classic_api_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Classic Infrastructure API Key
        """
        return pulumi.get(self, "iaas_classic_api_key")

    @_builtins.property
    @pulumi.getter(name="iaasClassicEndpointUrl")
    def iaas_classic_endpoint_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Classic Infrastructure Endpoint
        """
        return pulumi.get(self, "iaas_classic_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="iaasClassicUsername")
    def iaas_classic_username(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Classic Infrastructure API user name
        """
        return pulumi.get(self, "iaas_classic_username")

    @_builtins.property
    @pulumi.getter(name="iamProfileId")
    def iam_profile_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IAM Trusted Profile Authentication token
        """
        return pulumi.get(self, "iam_profile_id")

    @_builtins.property
    @pulumi.getter(name="iamRefreshToken")
    def iam_refresh_token(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IAM Authentication refresh token
        """
        return pulumi.get(self, "iam_refresh_token")

    @_builtins.property
    @pulumi.getter(name="iamToken")
    def iam_token(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IAM Authentication token
        """
        return pulumi.get(self, "iam_token")

    @_builtins.property
    @pulumi.getter(name="ibmcloudApiKey")
    def ibmcloud_api_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The IBM Cloud API Key
        """
        return pulumi.get(self, "ibmcloud_api_key")

    @_builtins.property
    @pulumi.getter(name="privateEndpointType")
    def private_endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Private Endpoint type used by the service endpoints. Example: vpe.
        """
        return pulumi.get(self, "private_endpoint_type")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The IBM cloud Region (for example 'us-south').
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Resource group id.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="riaasEndpoint")
    @_utilities.deprecated("""Deprecated""")
    def riaas_endpoint(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The next generation infrastructure service endpoint url.
        """
        return pulumi.get(self, "riaas_endpoint")

    @_builtins.property
    @pulumi.getter(name="softlayerApiKey")
    @_utilities.deprecated("""Deprecated""")
    def softlayer_api_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The SoftLayer API Key
        """
        return pulumi.get(self, "softlayer_api_key")

    @_builtins.property
    @pulumi.getter(name="softlayerEndpointUrl")
    @_utilities.deprecated("""Deprecated""")
    def softlayer_endpoint_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Softlayer Endpoint
        """
        return pulumi.get(self, "softlayer_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="softlayerUsername")
    @_utilities.deprecated("""Deprecated""")
    def softlayer_username(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The SoftLayer user name
        """
        return pulumi.get(self, "softlayer_username")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Visibility of the provider if it is private or public.
        """
        return pulumi.get(self, "visibility")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The IBM cloud Region zone (for example 'us-south-1') for power resources.
        """
        return pulumi.get(self, "zone")

    @pulumi.output_type
    class TerraformConfigResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, dict):
                raise TypeError("Expected argument 'result' to be a dict")
            pulumi.set(__self__, "result", result)

        @_builtins.property
        @pulumi.getter
        def result(self) -> Mapping[str, Any]:
            return pulumi.get(self, "result")

    def terraform_config(__self__) -> pulumi.Output['Provider.TerraformConfigResult']:
        """
        This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        return pulumi.runtime.call('pulumi:providers:ibm/terraformConfig', __args__, res=__self__, typ=Provider.TerraformConfigResult, package_ref=_utilities.get_package())

