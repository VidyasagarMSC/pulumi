# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsBareMetalServerInitializationArgs', 'IsBareMetalServerInitialization']

@pulumi.input_type
class IsBareMetalServerInitializationArgs:
    def __init__(__self__, *,
                 bare_metal_server: pulumi.Input[_builtins.str],
                 image: pulumi.Input[_builtins.str],
                 keys: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 is_bare_metal_server_initialization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsBareMetalServerInitializationTimeoutsArgs']] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsBareMetalServerInitialization resource.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] image: The image to be used when provisioning the bare metal server.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the bare metal server
        :param pulumi.Input[_builtins.str] user_data: Bare metal server user data to replace initialization
        """
        pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "keys", keys)
        if is_bare_metal_server_initialization_id is not None:
            pulumi.set(__self__, "is_bare_metal_server_initialization_id", is_bare_metal_server_initialization_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> pulumi.Input[_builtins.str]:
        """
        Bare metal server identifier
        """
        return pulumi.get(self, "bare_metal_server")

    @bare_metal_server.setter
    def bare_metal_server(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bare_metal_server", value)

    @_builtins.property
    @pulumi.getter
    def image(self) -> pulumi.Input[_builtins.str]:
        """
        The image to be used when provisioning the bare metal server.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter
    def keys(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        SSH key Ids for the bare metal server
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "keys", value)

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerInitializationId")
    def is_bare_metal_server_initialization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_bare_metal_server_initialization_id")

    @is_bare_metal_server_initialization_id.setter
    def is_bare_metal_server_initialization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_bare_metal_server_initialization_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsBareMetalServerInitializationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsBareMetalServerInitializationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server user data to replace initialization
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class _IsBareMetalServerInitializationState:
    def __init__(__self__, *,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_initialization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsBareMetalServerInitializationTimeoutsArgs']] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsBareMetalServerInitialization resources.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] image: The image to be used when provisioning the bare metal server.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the bare metal server
        :param pulumi.Input[_builtins.str] user_data: Bare metal server user data to replace initialization
        """
        if bare_metal_server is not None:
            pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if is_bare_metal_server_initialization_id is not None:
            pulumi.set(__self__, "is_bare_metal_server_initialization_id", is_bare_metal_server_initialization_id)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server identifier
        """
        return pulumi.get(self, "bare_metal_server")

    @bare_metal_server.setter
    def bare_metal_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bare_metal_server", value)

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image to be used when provisioning the bare metal server.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerInitializationId")
    def is_bare_metal_server_initialization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_bare_metal_server_initialization_id")

    @is_bare_metal_server_initialization_id.setter
    def is_bare_metal_server_initialization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_bare_metal_server_initialization_id", value)

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        SSH key Ids for the bare metal server
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "keys", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsBareMetalServerInitializationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsBareMetalServerInitializationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server user data to replace initialization
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_data", value)


@pulumi.type_token("ibm:index/isBareMetalServerInitialization:IsBareMetalServerInitialization")
class IsBareMetalServerInitialization(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_initialization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsBareMetalServerInitializationTimeoutsArgs', 'IsBareMetalServerInitializationTimeoutsArgsDict']]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsBareMetalServerInitialization resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] image: The image to be used when provisioning the bare metal server.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the bare metal server
        :param pulumi.Input[_builtins.str] user_data: Bare metal server user data to replace initialization
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsBareMetalServerInitializationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsBareMetalServerInitialization resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsBareMetalServerInitializationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsBareMetalServerInitializationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_initialization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsBareMetalServerInitializationTimeoutsArgs', 'IsBareMetalServerInitializationTimeoutsArgsDict']]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsBareMetalServerInitializationArgs.__new__(IsBareMetalServerInitializationArgs)

            if bare_metal_server is None and not opts.urn:
                raise TypeError("Missing required property 'bare_metal_server'")
            __props__.__dict__["bare_metal_server"] = bare_metal_server
            if image is None and not opts.urn:
                raise TypeError("Missing required property 'image'")
            __props__.__dict__["image"] = image
            __props__.__dict__["is_bare_metal_server_initialization_id"] = is_bare_metal_server_initialization_id
            if keys is None and not opts.urn:
                raise TypeError("Missing required property 'keys'")
            __props__.__dict__["keys"] = keys
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["user_data"] = user_data
        super(IsBareMetalServerInitialization, __self__).__init__(
            'ibm:index/isBareMetalServerInitialization:IsBareMetalServerInitialization',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
            image: Optional[pulumi.Input[_builtins.str]] = None,
            is_bare_metal_server_initialization_id: Optional[pulumi.Input[_builtins.str]] = None,
            keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsBareMetalServerInitializationTimeoutsArgs', 'IsBareMetalServerInitializationTimeoutsArgsDict']]] = None,
            user_data: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsBareMetalServerInitialization':
        """
        Get an existing IsBareMetalServerInitialization resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bare_metal_server: Bare metal server identifier
        :param pulumi.Input[_builtins.str] image: The image to be used when provisioning the bare metal server.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the bare metal server
        :param pulumi.Input[_builtins.str] user_data: Bare metal server user data to replace initialization
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsBareMetalServerInitializationState.__new__(_IsBareMetalServerInitializationState)

        __props__.__dict__["bare_metal_server"] = bare_metal_server
        __props__.__dict__["image"] = image
        __props__.__dict__["is_bare_metal_server_initialization_id"] = is_bare_metal_server_initialization_id
        __props__.__dict__["keys"] = keys
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["user_data"] = user_data
        return IsBareMetalServerInitialization(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> pulumi.Output[_builtins.str]:
        """
        Bare metal server identifier
        """
        return pulumi.get(self, "bare_metal_server")

    @_builtins.property
    @pulumi.getter
    def image(self) -> pulumi.Output[_builtins.str]:
        """
        The image to be used when provisioning the bare metal server.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerInitializationId")
    def is_bare_metal_server_initialization_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_bare_metal_server_initialization_id")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        SSH key Ids for the bare metal server
        """
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsBareMetalServerInitializationTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Bare metal server user data to replace initialization
        """
        return pulumi.get(self, "user_data")

