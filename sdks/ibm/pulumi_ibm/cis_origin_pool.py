# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CisOriginPoolArgs', 'CisOriginPool']

@pulumi.input_type
class CisOriginPoolArgs:
    def __init__(__self__, *,
                 check_regions: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 cis_id: pulumi.Input[_builtins.str],
                 enabled: pulumi.Input[_builtins.bool],
                 origins: pulumi.Input[Sequence[pulumi.Input['CisOriginPoolOriginArgs']]],
                 cis_origin_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 minimum_origins: Optional[pulumi.Input[_builtins.float]] = None,
                 monitor: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_email: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisOriginPool resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] check_regions: List of regions
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.bool] enabled: Boolean value set to true if cis origin pool needs to be enabled
        :param pulumi.Input[Sequence[pulumi.Input['CisOriginPoolOriginArgs']]] origins: Origins info
        :param pulumi.Input[_builtins.str] description: Description of the CIS Origin Pool
        :param pulumi.Input[_builtins.float] minimum_origins: Minimum number of Origins
        :param pulumi.Input[_builtins.str] monitor: Monitor value
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[_builtins.str] notification_email: Email address configured to recieve the notifications
        """
        pulumi.set(__self__, "check_regions", check_regions)
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "origins", origins)
        if cis_origin_pool_id is not None:
            pulumi.set(__self__, "cis_origin_pool_id", cis_origin_pool_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if minimum_origins is not None:
            pulumi.set(__self__, "minimum_origins", minimum_origins)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_email is not None:
            pulumi.set(__self__, "notification_email", notification_email)

    @_builtins.property
    @pulumi.getter(name="checkRegions")
    def check_regions(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        List of regions
        """
        return pulumi.get(self, "check_regions")

    @check_regions.setter
    def check_regions(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "check_regions", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        Boolean value set to true if cis origin pool needs to be enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def origins(self) -> pulumi.Input[Sequence[pulumi.Input['CisOriginPoolOriginArgs']]]:
        """
        Origins info
        """
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: pulumi.Input[Sequence[pulumi.Input['CisOriginPoolOriginArgs']]]):
        pulumi.set(self, "origins", value)

    @_builtins.property
    @pulumi.getter(name="cisOriginPoolId")
    def cis_origin_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_origin_pool_id")

    @cis_origin_pool_id.setter
    def cis_origin_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_origin_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the CIS Origin Pool
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="minimumOrigins")
    def minimum_origins(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Minimum number of Origins
        """
        return pulumi.get(self, "minimum_origins")

    @minimum_origins.setter
    def minimum_origins(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "minimum_origins", value)

    @_builtins.property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Monitor value
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "monitor", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notificationEmail")
    def notification_email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Email address configured to recieve the notifications
        """
        return pulumi.get(self, "notification_email")

    @notification_email.setter
    def notification_email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_email", value)


@pulumi.input_type
class _CisOriginPoolState:
    def __init__(__self__, *,
                 check_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_origin_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 health: Optional[pulumi.Input[_builtins.str]] = None,
                 healthy: Optional[pulumi.Input[_builtins.bool]] = None,
                 minimum_origins: Optional[pulumi.Input[_builtins.float]] = None,
                 modified_on: Optional[pulumi.Input[_builtins.str]] = None,
                 monitor: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_email: Optional[pulumi.Input[_builtins.str]] = None,
                 origins: Optional[pulumi.Input[Sequence[pulumi.Input['CisOriginPoolOriginArgs']]]] = None,
                 pool_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisOriginPool resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] check_regions: List of regions
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] created_on: Creation date info
        :param pulumi.Input[_builtins.str] description: Description of the CIS Origin Pool
        :param pulumi.Input[_builtins.bool] enabled: Boolean value set to true if cis origin pool needs to be enabled
        :param pulumi.Input[_builtins.str] health: Health info
        :param pulumi.Input[_builtins.bool] healthy: Health status
        :param pulumi.Input[_builtins.float] minimum_origins: Minimum number of Origins
        :param pulumi.Input[_builtins.str] modified_on: Modified date info
        :param pulumi.Input[_builtins.str] monitor: Monitor value
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[_builtins.str] notification_email: Email address configured to recieve the notifications
        :param pulumi.Input[Sequence[pulumi.Input['CisOriginPoolOriginArgs']]] origins: Origins info
        """
        if check_regions is not None:
            pulumi.set(__self__, "check_regions", check_regions)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if cis_origin_pool_id is not None:
            pulumi.set(__self__, "cis_origin_pool_id", cis_origin_pool_id)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if minimum_origins is not None:
            pulumi.set(__self__, "minimum_origins", minimum_origins)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_email is not None:
            pulumi.set(__self__, "notification_email", notification_email)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)
        if pool_id is not None:
            pulumi.set(__self__, "pool_id", pool_id)

    @_builtins.property
    @pulumi.getter(name="checkRegions")
    def check_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of regions
        """
        return pulumi.get(self, "check_regions")

    @check_regions.setter
    def check_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "check_regions", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cisOriginPoolId")
    def cis_origin_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_origin_pool_id")

    @cis_origin_pool_id.setter
    def cis_origin_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_origin_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation date info
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the CIS Origin Pool
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value set to true if cis origin pool needs to be enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Health info
        """
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health", value)

    @_builtins.property
    @pulumi.getter
    def healthy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Health status
        """
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "healthy", value)

    @_builtins.property
    @pulumi.getter(name="minimumOrigins")
    def minimum_origins(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Minimum number of Origins
        """
        return pulumi.get(self, "minimum_origins")

    @minimum_origins.setter
    def minimum_origins(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "minimum_origins", value)

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Modified date info
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @_builtins.property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Monitor value
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "monitor", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notificationEmail")
    def notification_email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Email address configured to recieve the notifications
        """
        return pulumi.get(self, "notification_email")

    @notification_email.setter
    def notification_email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_email", value)

    @_builtins.property
    @pulumi.getter
    def origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CisOriginPoolOriginArgs']]]]:
        """
        Origins info
        """
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CisOriginPoolOriginArgs']]]]):
        pulumi.set(self, "origins", value)

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pool_id")

    @pool_id.setter
    def pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pool_id", value)


@pulumi.type_token("ibm:index/cisOriginPool:CisOriginPool")
class CisOriginPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 check_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_origin_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 minimum_origins: Optional[pulumi.Input[_builtins.float]] = None,
                 monitor: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_email: Optional[pulumi.Input[_builtins.str]] = None,
                 origins: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisOriginPoolOriginArgs', 'CisOriginPoolOriginArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a CisOriginPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] check_regions: List of regions
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] description: Description of the CIS Origin Pool
        :param pulumi.Input[_builtins.bool] enabled: Boolean value set to true if cis origin pool needs to be enabled
        :param pulumi.Input[_builtins.float] minimum_origins: Minimum number of Origins
        :param pulumi.Input[_builtins.str] monitor: Monitor value
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[_builtins.str] notification_email: Email address configured to recieve the notifications
        :param pulumi.Input[Sequence[pulumi.Input[Union['CisOriginPoolOriginArgs', 'CisOriginPoolOriginArgsDict']]]] origins: Origins info
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisOriginPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisOriginPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisOriginPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisOriginPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 check_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_origin_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 minimum_origins: Optional[pulumi.Input[_builtins.float]] = None,
                 monitor: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_email: Optional[pulumi.Input[_builtins.str]] = None,
                 origins: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisOriginPoolOriginArgs', 'CisOriginPoolOriginArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisOriginPoolArgs.__new__(CisOriginPoolArgs)

            if check_regions is None and not opts.urn:
                raise TypeError("Missing required property 'check_regions'")
            __props__.__dict__["check_regions"] = check_regions
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["cis_origin_pool_id"] = cis_origin_pool_id
            __props__.__dict__["description"] = description
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["minimum_origins"] = minimum_origins
            __props__.__dict__["monitor"] = monitor
            __props__.__dict__["name"] = name
            __props__.__dict__["notification_email"] = notification_email
            if origins is None and not opts.urn:
                raise TypeError("Missing required property 'origins'")
            __props__.__dict__["origins"] = origins
            __props__.__dict__["created_on"] = None
            __props__.__dict__["health"] = None
            __props__.__dict__["healthy"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["pool_id"] = None
        super(CisOriginPool, __self__).__init__(
            'ibm:index/cisOriginPool:CisOriginPool',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            check_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_origin_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            health: Optional[pulumi.Input[_builtins.str]] = None,
            healthy: Optional[pulumi.Input[_builtins.bool]] = None,
            minimum_origins: Optional[pulumi.Input[_builtins.float]] = None,
            modified_on: Optional[pulumi.Input[_builtins.str]] = None,
            monitor: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            notification_email: Optional[pulumi.Input[_builtins.str]] = None,
            origins: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisOriginPoolOriginArgs', 'CisOriginPoolOriginArgsDict']]]]] = None,
            pool_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisOriginPool':
        """
        Get an existing CisOriginPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] check_regions: List of regions
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] created_on: Creation date info
        :param pulumi.Input[_builtins.str] description: Description of the CIS Origin Pool
        :param pulumi.Input[_builtins.bool] enabled: Boolean value set to true if cis origin pool needs to be enabled
        :param pulumi.Input[_builtins.str] health: Health info
        :param pulumi.Input[_builtins.bool] healthy: Health status
        :param pulumi.Input[_builtins.float] minimum_origins: Minimum number of Origins
        :param pulumi.Input[_builtins.str] modified_on: Modified date info
        :param pulumi.Input[_builtins.str] monitor: Monitor value
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[_builtins.str] notification_email: Email address configured to recieve the notifications
        :param pulumi.Input[Sequence[pulumi.Input[Union['CisOriginPoolOriginArgs', 'CisOriginPoolOriginArgsDict']]]] origins: Origins info
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisOriginPoolState.__new__(_CisOriginPoolState)

        __props__.__dict__["check_regions"] = check_regions
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["cis_origin_pool_id"] = cis_origin_pool_id
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["health"] = health
        __props__.__dict__["healthy"] = healthy
        __props__.__dict__["minimum_origins"] = minimum_origins
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["monitor"] = monitor
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_email"] = notification_email
        __props__.__dict__["origins"] = origins
        __props__.__dict__["pool_id"] = pool_id
        return CisOriginPool(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="checkRegions")
    def check_regions(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of regions
        """
        return pulumi.get(self, "check_regions")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cisOriginPoolId")
    def cis_origin_pool_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_origin_pool_id")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        Creation date info
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the CIS Origin Pool
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Boolean value set to true if cis origin pool needs to be enabled
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def health(self) -> pulumi.Output[_builtins.str]:
        """
        Health info
        """
        return pulumi.get(self, "health")

    @_builtins.property
    @pulumi.getter
    def healthy(self) -> pulumi.Output[_builtins.bool]:
        """
        Health status
        """
        return pulumi.get(self, "healthy")

    @_builtins.property
    @pulumi.getter(name="minimumOrigins")
    def minimum_origins(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Minimum number of Origins
        """
        return pulumi.get(self, "minimum_origins")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[_builtins.str]:
        """
        Modified date info
        """
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter
    def monitor(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Monitor value
        """
        return pulumi.get(self, "monitor")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notificationEmail")
    def notification_email(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Email address configured to recieve the notifications
        """
        return pulumi.get(self, "notification_email")

    @_builtins.property
    @pulumi.getter
    def origins(self) -> pulumi.Output[Sequence['outputs.CisOriginPoolOrigin']]:
        """
        Origins info
        """
        return pulumi.get(self, "origins")

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pool_id")

