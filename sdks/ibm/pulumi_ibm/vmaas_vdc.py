# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VmaasVdcArgs', 'VmaasVdc']

@pulumi.input_type
class VmaasVdcArgs:
    def __init__(__self__, *,
                 director_site: pulumi.Input['VmaasVdcDirectorSiteArgs'],
                 accept_language: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 fast_provisioning_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ram: Optional[pulumi.Input[_builtins.float]] = None,
                 rhel_byol: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input['VmaasVdcTimeoutsArgs']] = None,
                 vmaas_vdc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 windows_byol: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a VmaasVdc resource.
        :param pulumi.Input['VmaasVdcDirectorSiteArgs'] director_site: The Cloud Director site in which to deploy the virtual data center (VDC).
        :param pulumi.Input[_builtins.str] accept_language: Language.
        :param pulumi.Input[_builtins.float] cpu: The vCPU usage limit on the virtual data center (VDC). Supported for VDCs deployed on a multitenant Cloud Director site.
               This property is applicable when the resource pool type is reserved.
        :param pulumi.Input[_builtins.bool] fast_provisioning_enabled: Determines whether this virtual data center has fast provisioning enabled or not.
        :param pulumi.Input[_builtins.str] name: A human readable ID for the virtual data center (VDC).
        :param pulumi.Input[_builtins.float] ram: The RAM usage limit on the virtual data center (VDC) in GB (1024^3 bytes). Supported for VDCs deployed on a multitenant
               Cloud Director site. This property is applicable when the resource pool type is reserved.
        :param pulumi.Input[_builtins.bool] rhel_byol: Indicates if the RHEL VMs will be using the license from IBM or the customer will use their own license (BYOL).
        :param pulumi.Input[_builtins.bool] windows_byol: Indicates if the Microsoft Windows VMs will be using the license from IBM or the customer will use their own license
               (BYOL).
        """
        pulumi.set(__self__, "director_site", director_site)
        if accept_language is not None:
            pulumi.set(__self__, "accept_language", accept_language)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if fast_provisioning_enabled is not None:
            pulumi.set(__self__, "fast_provisioning_enabled", fast_provisioning_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if rhel_byol is not None:
            pulumi.set(__self__, "rhel_byol", rhel_byol)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vmaas_vdc_id is not None:
            pulumi.set(__self__, "vmaas_vdc_id", vmaas_vdc_id)
        if windows_byol is not None:
            pulumi.set(__self__, "windows_byol", windows_byol)

    @_builtins.property
    @pulumi.getter(name="directorSite")
    def director_site(self) -> pulumi.Input['VmaasVdcDirectorSiteArgs']:
        """
        The Cloud Director site in which to deploy the virtual data center (VDC).
        """
        return pulumi.get(self, "director_site")

    @director_site.setter
    def director_site(self, value: pulumi.Input['VmaasVdcDirectorSiteArgs']):
        pulumi.set(self, "director_site", value)

    @_builtins.property
    @pulumi.getter(name="acceptLanguage")
    def accept_language(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Language.
        """
        return pulumi.get(self, "accept_language")

    @accept_language.setter
    def accept_language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_language", value)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The vCPU usage limit on the virtual data center (VDC). Supported for VDCs deployed on a multitenant Cloud Director site.
        This property is applicable when the resource pool type is reserved.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu", value)

    @_builtins.property
    @pulumi.getter(name="fastProvisioningEnabled")
    def fast_provisioning_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines whether this virtual data center has fast provisioning enabled or not.
        """
        return pulumi.get(self, "fast_provisioning_enabled")

    @fast_provisioning_enabled.setter
    def fast_provisioning_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fast_provisioning_enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable ID for the virtual data center (VDC).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The RAM usage limit on the virtual data center (VDC) in GB (1024^3 bytes). Supported for VDCs deployed on a multitenant
        Cloud Director site. This property is applicable when the resource pool type is reserved.
        """
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ram", value)

    @_builtins.property
    @pulumi.getter(name="rhelByol")
    def rhel_byol(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the RHEL VMs will be using the license from IBM or the customer will use their own license (BYOL).
        """
        return pulumi.get(self, "rhel_byol")

    @rhel_byol.setter
    def rhel_byol(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "rhel_byol", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['VmaasVdcTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['VmaasVdcTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="vmaasVdcId")
    def vmaas_vdc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vmaas_vdc_id")

    @vmaas_vdc_id.setter
    def vmaas_vdc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vmaas_vdc_id", value)

    @_builtins.property
    @pulumi.getter(name="windowsByol")
    def windows_byol(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the Microsoft Windows VMs will be using the license from IBM or the customer will use their own license
        (BYOL).
        """
        return pulumi.get(self, "windows_byol")

    @windows_byol.setter
    def windows_byol(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "windows_byol", value)


@pulumi.input_type
class _VmaasVdcState:
    def __init__(__self__, *,
                 accept_language: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted_at: Optional[pulumi.Input[_builtins.str]] = None,
                 director_site: Optional[pulumi.Input['VmaasVdcDirectorSiteArgs']] = None,
                 edges: Optional[pulumi.Input[Sequence[pulumi.Input['VmaasVdcEdgeArgs']]]] = None,
                 fast_provisioning_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 ha: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ordered_at: Optional[pulumi.Input[_builtins.str]] = None,
                 org_href: Optional[pulumi.Input[_builtins.str]] = None,
                 org_name: Optional[pulumi.Input[_builtins.str]] = None,
                 provisioned_at: Optional[pulumi.Input[_builtins.str]] = None,
                 ram: Optional[pulumi.Input[_builtins.float]] = None,
                 rhel_byol: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['VmaasVdcStatusReasonArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['VmaasVdcTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vmaas_vdc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 windows_byol: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering VmaasVdc resources.
        :param pulumi.Input[_builtins.str] accept_language: Language.
        :param pulumi.Input[_builtins.float] cpu: The vCPU usage limit on the virtual data center (VDC). Supported for VDCs deployed on a multitenant Cloud Director site.
               This property is applicable when the resource pool type is reserved.
        :param pulumi.Input[_builtins.str] crn: A unique ID for the virtual data center (VDC) in IBM Cloud.
        :param pulumi.Input[_builtins.str] deleted_at: The time that the virtual data center (VDC) is deleted.
        :param pulumi.Input['VmaasVdcDirectorSiteArgs'] director_site: The Cloud Director site in which to deploy the virtual data center (VDC).
        :param pulumi.Input[Sequence[pulumi.Input['VmaasVdcEdgeArgs']]] edges: The VMware NSX-T networking edges deployed on the virtual data center (VDC). NSX-T edges are used for bridging
               virtualization networking to the physical public-internet and IBM private networking.
        :param pulumi.Input[_builtins.bool] fast_provisioning_enabled: Determines whether this virtual data center has fast provisioning enabled or not.
        :param pulumi.Input[_builtins.str] ha: Indicates if the VDC is HA-enabled for compute only, compute and network, or network only. If not present, the VDC is
               not HA-enabled.
        :param pulumi.Input[_builtins.str] href: The URL of this virtual data center (VDC).
        :param pulumi.Input[_builtins.str] name: A human readable ID for the virtual data center (VDC).
        :param pulumi.Input[_builtins.str] ordered_at: The time that the virtual data center (VDC) is ordered.
        :param pulumi.Input[_builtins.str] org_href: The URL of the organization that owns the VDC.
        :param pulumi.Input[_builtins.str] org_name: The name of the VMware Cloud Director organization that contains this virtual data center (VDC). VMware Cloud Director
               organizations are used to create strong boundaries between VDCs. There is a complete isolation of user administration,
               networking, workloads, and VMware Cloud Director catalogs between different Director organizations.
        :param pulumi.Input[_builtins.str] provisioned_at: The time that the virtual data center (VDC) is provisioned and available to use.
        :param pulumi.Input[_builtins.float] ram: The RAM usage limit on the virtual data center (VDC) in GB (1024^3 bytes). Supported for VDCs deployed on a multitenant
               Cloud Director site. This property is applicable when the resource pool type is reserved.
        :param pulumi.Input[_builtins.bool] rhel_byol: Indicates if the RHEL VMs will be using the license from IBM or the customer will use their own license (BYOL).
        :param pulumi.Input[_builtins.str] status: Determines the state of the virtual data center.
        :param pulumi.Input[Sequence[pulumi.Input['VmaasVdcStatusReasonArgs']]] status_reasons: Information about why the request to create the virtual data center (VDC) cannot be completed.
        :param pulumi.Input[_builtins.str] type: Determines whether this virtual data center is in a single-tenant or multitenant Cloud Director site.
        :param pulumi.Input[_builtins.bool] windows_byol: Indicates if the Microsoft Windows VMs will be using the license from IBM or the customer will use their own license
               (BYOL).
        """
        if accept_language is not None:
            pulumi.set(__self__, "accept_language", accept_language)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if deleted_at is not None:
            pulumi.set(__self__, "deleted_at", deleted_at)
        if director_site is not None:
            pulumi.set(__self__, "director_site", director_site)
        if edges is not None:
            pulumi.set(__self__, "edges", edges)
        if fast_provisioning_enabled is not None:
            pulumi.set(__self__, "fast_provisioning_enabled", fast_provisioning_enabled)
        if ha is not None:
            pulumi.set(__self__, "ha", ha)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ordered_at is not None:
            pulumi.set(__self__, "ordered_at", ordered_at)
        if org_href is not None:
            pulumi.set(__self__, "org_href", org_href)
        if org_name is not None:
            pulumi.set(__self__, "org_name", org_name)
        if provisioned_at is not None:
            pulumi.set(__self__, "provisioned_at", provisioned_at)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if rhel_byol is not None:
            pulumi.set(__self__, "rhel_byol", rhel_byol)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vmaas_vdc_id is not None:
            pulumi.set(__self__, "vmaas_vdc_id", vmaas_vdc_id)
        if windows_byol is not None:
            pulumi.set(__self__, "windows_byol", windows_byol)

    @_builtins.property
    @pulumi.getter(name="acceptLanguage")
    def accept_language(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Language.
        """
        return pulumi.get(self, "accept_language")

    @accept_language.setter
    def accept_language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_language", value)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The vCPU usage limit on the virtual data center (VDC). Supported for VDCs deployed on a multitenant Cloud Director site.
        This property is applicable when the resource pool type is reserved.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique ID for the virtual data center (VDC) in IBM Cloud.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time that the virtual data center (VDC) is deleted.
        """
        return pulumi.get(self, "deleted_at")

    @deleted_at.setter
    def deleted_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deleted_at", value)

    @_builtins.property
    @pulumi.getter(name="directorSite")
    def director_site(self) -> Optional[pulumi.Input['VmaasVdcDirectorSiteArgs']]:
        """
        The Cloud Director site in which to deploy the virtual data center (VDC).
        """
        return pulumi.get(self, "director_site")

    @director_site.setter
    def director_site(self, value: Optional[pulumi.Input['VmaasVdcDirectorSiteArgs']]):
        pulumi.set(self, "director_site", value)

    @_builtins.property
    @pulumi.getter
    def edges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmaasVdcEdgeArgs']]]]:
        """
        The VMware NSX-T networking edges deployed on the virtual data center (VDC). NSX-T edges are used for bridging
        virtualization networking to the physical public-internet and IBM private networking.
        """
        return pulumi.get(self, "edges")

    @edges.setter
    def edges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmaasVdcEdgeArgs']]]]):
        pulumi.set(self, "edges", value)

    @_builtins.property
    @pulumi.getter(name="fastProvisioningEnabled")
    def fast_provisioning_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines whether this virtual data center has fast provisioning enabled or not.
        """
        return pulumi.get(self, "fast_provisioning_enabled")

    @fast_provisioning_enabled.setter
    def fast_provisioning_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fast_provisioning_enabled", value)

    @_builtins.property
    @pulumi.getter
    def ha(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates if the VDC is HA-enabled for compute only, compute and network, or network only. If not present, the VDC is
        not HA-enabled.
        """
        return pulumi.get(self, "ha")

    @ha.setter
    def ha(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ha", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of this virtual data center (VDC).
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable ID for the virtual data center (VDC).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orderedAt")
    def ordered_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time that the virtual data center (VDC) is ordered.
        """
        return pulumi.get(self, "ordered_at")

    @ordered_at.setter
    def ordered_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ordered_at", value)

    @_builtins.property
    @pulumi.getter(name="orgHref")
    def org_href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the organization that owns the VDC.
        """
        return pulumi.get(self, "org_href")

    @org_href.setter
    def org_href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org_href", value)

    @_builtins.property
    @pulumi.getter(name="orgName")
    def org_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the VMware Cloud Director organization that contains this virtual data center (VDC). VMware Cloud Director
        organizations are used to create strong boundaries between VDCs. There is a complete isolation of user administration,
        networking, workloads, and VMware Cloud Director catalogs between different Director organizations.
        """
        return pulumi.get(self, "org_name")

    @org_name.setter
    def org_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org_name", value)

    @_builtins.property
    @pulumi.getter(name="provisionedAt")
    def provisioned_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time that the virtual data center (VDC) is provisioned and available to use.
        """
        return pulumi.get(self, "provisioned_at")

    @provisioned_at.setter
    def provisioned_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "provisioned_at", value)

    @_builtins.property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The RAM usage limit on the virtual data center (VDC) in GB (1024^3 bytes). Supported for VDCs deployed on a multitenant
        Cloud Director site. This property is applicable when the resource pool type is reserved.
        """
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ram", value)

    @_builtins.property
    @pulumi.getter(name="rhelByol")
    def rhel_byol(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the RHEL VMs will be using the license from IBM or the customer will use their own license (BYOL).
        """
        return pulumi.get(self, "rhel_byol")

    @rhel_byol.setter
    def rhel_byol(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "rhel_byol", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Determines the state of the virtual data center.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmaasVdcStatusReasonArgs']]]]:
        """
        Information about why the request to create the virtual data center (VDC) cannot be completed.
        """
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmaasVdcStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['VmaasVdcTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['VmaasVdcTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Determines whether this virtual data center is in a single-tenant or multitenant Cloud Director site.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vmaasVdcId")
    def vmaas_vdc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vmaas_vdc_id")

    @vmaas_vdc_id.setter
    def vmaas_vdc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vmaas_vdc_id", value)

    @_builtins.property
    @pulumi.getter(name="windowsByol")
    def windows_byol(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the Microsoft Windows VMs will be using the license from IBM or the customer will use their own license
        (BYOL).
        """
        return pulumi.get(self, "windows_byol")

    @windows_byol.setter
    def windows_byol(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "windows_byol", value)


@pulumi.type_token("ibm:index/vmaasVdc:VmaasVdc")
class VmaasVdc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_language: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 director_site: Optional[pulumi.Input[Union['VmaasVdcDirectorSiteArgs', 'VmaasVdcDirectorSiteArgsDict']]] = None,
                 fast_provisioning_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ram: Optional[pulumi.Input[_builtins.float]] = None,
                 rhel_byol: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input[Union['VmaasVdcTimeoutsArgs', 'VmaasVdcTimeoutsArgsDict']]] = None,
                 vmaas_vdc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 windows_byol: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a VmaasVdc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] accept_language: Language.
        :param pulumi.Input[_builtins.float] cpu: The vCPU usage limit on the virtual data center (VDC). Supported for VDCs deployed on a multitenant Cloud Director site.
               This property is applicable when the resource pool type is reserved.
        :param pulumi.Input[Union['VmaasVdcDirectorSiteArgs', 'VmaasVdcDirectorSiteArgsDict']] director_site: The Cloud Director site in which to deploy the virtual data center (VDC).
        :param pulumi.Input[_builtins.bool] fast_provisioning_enabled: Determines whether this virtual data center has fast provisioning enabled or not.
        :param pulumi.Input[_builtins.str] name: A human readable ID for the virtual data center (VDC).
        :param pulumi.Input[_builtins.float] ram: The RAM usage limit on the virtual data center (VDC) in GB (1024^3 bytes). Supported for VDCs deployed on a multitenant
               Cloud Director site. This property is applicable when the resource pool type is reserved.
        :param pulumi.Input[_builtins.bool] rhel_byol: Indicates if the RHEL VMs will be using the license from IBM or the customer will use their own license (BYOL).
        :param pulumi.Input[_builtins.bool] windows_byol: Indicates if the Microsoft Windows VMs will be using the license from IBM or the customer will use their own license
               (BYOL).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmaasVdcArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VmaasVdc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VmaasVdcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmaasVdcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_language: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 director_site: Optional[pulumi.Input[Union['VmaasVdcDirectorSiteArgs', 'VmaasVdcDirectorSiteArgsDict']]] = None,
                 fast_provisioning_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ram: Optional[pulumi.Input[_builtins.float]] = None,
                 rhel_byol: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input[Union['VmaasVdcTimeoutsArgs', 'VmaasVdcTimeoutsArgsDict']]] = None,
                 vmaas_vdc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 windows_byol: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmaasVdcArgs.__new__(VmaasVdcArgs)

            __props__.__dict__["accept_language"] = accept_language
            __props__.__dict__["cpu"] = cpu
            if director_site is None and not opts.urn:
                raise TypeError("Missing required property 'director_site'")
            __props__.__dict__["director_site"] = director_site
            __props__.__dict__["fast_provisioning_enabled"] = fast_provisioning_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["ram"] = ram
            __props__.__dict__["rhel_byol"] = rhel_byol
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["vmaas_vdc_id"] = vmaas_vdc_id
            __props__.__dict__["windows_byol"] = windows_byol
            __props__.__dict__["crn"] = None
            __props__.__dict__["deleted_at"] = None
            __props__.__dict__["edges"] = None
            __props__.__dict__["ha"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["ordered_at"] = None
            __props__.__dict__["org_href"] = None
            __props__.__dict__["org_name"] = None
            __props__.__dict__["provisioned_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
            __props__.__dict__["type"] = None
        super(VmaasVdc, __self__).__init__(
            'ibm:index/vmaasVdc:VmaasVdc',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accept_language: Optional[pulumi.Input[_builtins.str]] = None,
            cpu: Optional[pulumi.Input[_builtins.float]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            deleted_at: Optional[pulumi.Input[_builtins.str]] = None,
            director_site: Optional[pulumi.Input[Union['VmaasVdcDirectorSiteArgs', 'VmaasVdcDirectorSiteArgsDict']]] = None,
            edges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmaasVdcEdgeArgs', 'VmaasVdcEdgeArgsDict']]]]] = None,
            fast_provisioning_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            ha: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            ordered_at: Optional[pulumi.Input[_builtins.str]] = None,
            org_href: Optional[pulumi.Input[_builtins.str]] = None,
            org_name: Optional[pulumi.Input[_builtins.str]] = None,
            provisioned_at: Optional[pulumi.Input[_builtins.str]] = None,
            ram: Optional[pulumi.Input[_builtins.float]] = None,
            rhel_byol: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmaasVdcStatusReasonArgs', 'VmaasVdcStatusReasonArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['VmaasVdcTimeoutsArgs', 'VmaasVdcTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            vmaas_vdc_id: Optional[pulumi.Input[_builtins.str]] = None,
            windows_byol: Optional[pulumi.Input[_builtins.bool]] = None) -> 'VmaasVdc':
        """
        Get an existing VmaasVdc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] accept_language: Language.
        :param pulumi.Input[_builtins.float] cpu: The vCPU usage limit on the virtual data center (VDC). Supported for VDCs deployed on a multitenant Cloud Director site.
               This property is applicable when the resource pool type is reserved.
        :param pulumi.Input[_builtins.str] crn: A unique ID for the virtual data center (VDC) in IBM Cloud.
        :param pulumi.Input[_builtins.str] deleted_at: The time that the virtual data center (VDC) is deleted.
        :param pulumi.Input[Union['VmaasVdcDirectorSiteArgs', 'VmaasVdcDirectorSiteArgsDict']] director_site: The Cloud Director site in which to deploy the virtual data center (VDC).
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmaasVdcEdgeArgs', 'VmaasVdcEdgeArgsDict']]]] edges: The VMware NSX-T networking edges deployed on the virtual data center (VDC). NSX-T edges are used for bridging
               virtualization networking to the physical public-internet and IBM private networking.
        :param pulumi.Input[_builtins.bool] fast_provisioning_enabled: Determines whether this virtual data center has fast provisioning enabled or not.
        :param pulumi.Input[_builtins.str] ha: Indicates if the VDC is HA-enabled for compute only, compute and network, or network only. If not present, the VDC is
               not HA-enabled.
        :param pulumi.Input[_builtins.str] href: The URL of this virtual data center (VDC).
        :param pulumi.Input[_builtins.str] name: A human readable ID for the virtual data center (VDC).
        :param pulumi.Input[_builtins.str] ordered_at: The time that the virtual data center (VDC) is ordered.
        :param pulumi.Input[_builtins.str] org_href: The URL of the organization that owns the VDC.
        :param pulumi.Input[_builtins.str] org_name: The name of the VMware Cloud Director organization that contains this virtual data center (VDC). VMware Cloud Director
               organizations are used to create strong boundaries between VDCs. There is a complete isolation of user administration,
               networking, workloads, and VMware Cloud Director catalogs between different Director organizations.
        :param pulumi.Input[_builtins.str] provisioned_at: The time that the virtual data center (VDC) is provisioned and available to use.
        :param pulumi.Input[_builtins.float] ram: The RAM usage limit on the virtual data center (VDC) in GB (1024^3 bytes). Supported for VDCs deployed on a multitenant
               Cloud Director site. This property is applicable when the resource pool type is reserved.
        :param pulumi.Input[_builtins.bool] rhel_byol: Indicates if the RHEL VMs will be using the license from IBM or the customer will use their own license (BYOL).
        :param pulumi.Input[_builtins.str] status: Determines the state of the virtual data center.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VmaasVdcStatusReasonArgs', 'VmaasVdcStatusReasonArgsDict']]]] status_reasons: Information about why the request to create the virtual data center (VDC) cannot be completed.
        :param pulumi.Input[_builtins.str] type: Determines whether this virtual data center is in a single-tenant or multitenant Cloud Director site.
        :param pulumi.Input[_builtins.bool] windows_byol: Indicates if the Microsoft Windows VMs will be using the license from IBM or the customer will use their own license
               (BYOL).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmaasVdcState.__new__(_VmaasVdcState)

        __props__.__dict__["accept_language"] = accept_language
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["crn"] = crn
        __props__.__dict__["deleted_at"] = deleted_at
        __props__.__dict__["director_site"] = director_site
        __props__.__dict__["edges"] = edges
        __props__.__dict__["fast_provisioning_enabled"] = fast_provisioning_enabled
        __props__.__dict__["ha"] = ha
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["ordered_at"] = ordered_at
        __props__.__dict__["org_href"] = org_href
        __props__.__dict__["org_name"] = org_name
        __props__.__dict__["provisioned_at"] = provisioned_at
        __props__.__dict__["ram"] = ram
        __props__.__dict__["rhel_byol"] = rhel_byol
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["vmaas_vdc_id"] = vmaas_vdc_id
        __props__.__dict__["windows_byol"] = windows_byol
        return VmaasVdc(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="acceptLanguage")
    def accept_language(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Language.
        """
        return pulumi.get(self, "accept_language")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The vCPU usage limit on the virtual data center (VDC). Supported for VDCs deployed on a multitenant Cloud Director site.
        This property is applicable when the resource pool type is reserved.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        A unique ID for the virtual data center (VDC) in IBM Cloud.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time that the virtual data center (VDC) is deleted.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="directorSite")
    def director_site(self) -> pulumi.Output['outputs.VmaasVdcDirectorSite']:
        """
        The Cloud Director site in which to deploy the virtual data center (VDC).
        """
        return pulumi.get(self, "director_site")

    @_builtins.property
    @pulumi.getter
    def edges(self) -> pulumi.Output[Sequence['outputs.VmaasVdcEdge']]:
        """
        The VMware NSX-T networking edges deployed on the virtual data center (VDC). NSX-T edges are used for bridging
        virtualization networking to the physical public-internet and IBM private networking.
        """
        return pulumi.get(self, "edges")

    @_builtins.property
    @pulumi.getter(name="fastProvisioningEnabled")
    def fast_provisioning_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Determines whether this virtual data center has fast provisioning enabled or not.
        """
        return pulumi.get(self, "fast_provisioning_enabled")

    @_builtins.property
    @pulumi.getter
    def ha(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates if the VDC is HA-enabled for compute only, compute and network, or network only. If not present, the VDC is
        not HA-enabled.
        """
        return pulumi.get(self, "ha")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of this virtual data center (VDC).
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A human readable ID for the virtual data center (VDC).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orderedAt")
    def ordered_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time that the virtual data center (VDC) is ordered.
        """
        return pulumi.get(self, "ordered_at")

    @_builtins.property
    @pulumi.getter(name="orgHref")
    def org_href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the organization that owns the VDC.
        """
        return pulumi.get(self, "org_href")

    @_builtins.property
    @pulumi.getter(name="orgName")
    def org_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the VMware Cloud Director organization that contains this virtual data center (VDC). VMware Cloud Director
        organizations are used to create strong boundaries between VDCs. There is a complete isolation of user administration,
        networking, workloads, and VMware Cloud Director catalogs between different Director organizations.
        """
        return pulumi.get(self, "org_name")

    @_builtins.property
    @pulumi.getter(name="provisionedAt")
    def provisioned_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time that the virtual data center (VDC) is provisioned and available to use.
        """
        return pulumi.get(self, "provisioned_at")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The RAM usage limit on the virtual data center (VDC) in GB (1024^3 bytes). Supported for VDCs deployed on a multitenant
        Cloud Director site. This property is applicable when the resource pool type is reserved.
        """
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter(name="rhelByol")
    def rhel_byol(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates if the RHEL VMs will be using the license from IBM or the customer will use their own license (BYOL).
        """
        return pulumi.get(self, "rhel_byol")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Determines the state of the virtual data center.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.VmaasVdcStatusReason']]:
        """
        Information about why the request to create the virtual data center (VDC) cannot be completed.
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.VmaasVdcTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Determines whether this virtual data center is in a single-tenant or multitenant Cloud Director site.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vmaasVdcId")
    def vmaas_vdc_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "vmaas_vdc_id")

    @_builtins.property
    @pulumi.getter(name="windowsByol")
    def windows_byol(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates if the Microsoft Windows VMs will be using the license from IBM or the customer will use their own license
        (BYOL).
        """
        return pulumi.get(self, "windows_byol")

