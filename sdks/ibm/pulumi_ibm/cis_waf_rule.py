# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CisWafRuleArgs', 'CisWafRule']

@pulumi.input_type
class CisWafRuleArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 mode: pulumi.Input[_builtins.str],
                 package_id: pulumi.Input[_builtins.str],
                 rule_id: pulumi.Input[_builtins.str],
                 cis_waf_rule_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisWafRule resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[_builtins.str] mode: CIS WAF Rule mode
        :param pulumi.Input[_builtins.str] package_id: CIS WAF Rule package id
        :param pulumi.Input[_builtins.str] rule_id: CIS WAF Rule id
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "package_id", package_id)
        pulumi.set(__self__, "rule_id", rule_id)
        if cis_waf_rule_id is not None:
            pulumi.set(__self__, "cis_waf_rule_id", cis_waf_rule_id)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS Intance CRN
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS Domain ID
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Input[_builtins.str]:
        """
        CIS WAF Rule mode
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS WAF Rule package id
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "package_id", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS WAF Rule id
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "rule_id", value)

    @_builtins.property
    @pulumi.getter(name="cisWafRuleId")
    def cis_waf_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_waf_rule_id")

    @cis_waf_rule_id.setter
    def cis_waf_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_waf_rule_id", value)


@pulumi.input_type
class _CisWafRuleState:
    def __init__(__self__, *,
                 allowed_modes: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_waf_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['CisWafRuleGroupArgs']]]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisWafRule resources.
        :param pulumi.Input[_builtins.str] allowed_modes: CIS WAF Rule allowed modes
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] description: CIS WAF Rule descriptions
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[Sequence[pulumi.Input['CisWafRuleGroupArgs']]] groups: CIS WAF Rule group
        :param pulumi.Input[_builtins.str] mode: CIS WAF Rule mode
        :param pulumi.Input[_builtins.str] package_id: CIS WAF Rule package id
        :param pulumi.Input[_builtins.float] priority: CIS WAF Rule Priority
        :param pulumi.Input[_builtins.str] rule_id: CIS WAF Rule id
        """
        if allowed_modes is not None:
            pulumi.set(__self__, "allowed_modes", allowed_modes)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if cis_waf_rule_id is not None:
            pulumi.set(__self__, "cis_waf_rule_id", cis_waf_rule_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if package_id is not None:
            pulumi.set(__self__, "package_id", package_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)

    @_builtins.property
    @pulumi.getter(name="allowedModes")
    def allowed_modes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS WAF Rule allowed modes
        """
        return pulumi.get(self, "allowed_modes")

    @allowed_modes.setter
    def allowed_modes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allowed_modes", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS Intance CRN
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cisWafRuleId")
    def cis_waf_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_waf_rule_id")

    @cis_waf_rule_id.setter
    def cis_waf_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_waf_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS WAF Rule descriptions
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS Domain ID
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CisWafRuleGroupArgs']]]]:
        """
        CIS WAF Rule group
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CisWafRuleGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS WAF Rule mode
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter(name="packageId")
    def package_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS WAF Rule package id
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "package_id", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        CIS WAF Rule Priority
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS WAF Rule id
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_id", value)


@pulumi.type_token("ibm:index/cisWafRule:CisWafRule")
class CisWafRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_waf_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisWafRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[_builtins.str] mode: CIS WAF Rule mode
        :param pulumi.Input[_builtins.str] package_id: CIS WAF Rule package id
        :param pulumi.Input[_builtins.str] rule_id: CIS WAF Rule id
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisWafRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisWafRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisWafRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisWafRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_waf_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisWafRuleArgs.__new__(CisWafRuleArgs)

            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["cis_waf_rule_id"] = cis_waf_rule_id
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            if mode is None and not opts.urn:
                raise TypeError("Missing required property 'mode'")
            __props__.__dict__["mode"] = mode
            if package_id is None and not opts.urn:
                raise TypeError("Missing required property 'package_id'")
            __props__.__dict__["package_id"] = package_id
            if rule_id is None and not opts.urn:
                raise TypeError("Missing required property 'rule_id'")
            __props__.__dict__["rule_id"] = rule_id
            __props__.__dict__["allowed_modes"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["groups"] = None
            __props__.__dict__["priority"] = None
        super(CisWafRule, __self__).__init__(
            'ibm:index/cisWafRule:CisWafRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_modes: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_waf_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisWafRuleGroupArgs', 'CisWafRuleGroupArgsDict']]]]] = None,
            mode: Optional[pulumi.Input[_builtins.str]] = None,
            package_id: Optional[pulumi.Input[_builtins.str]] = None,
            priority: Optional[pulumi.Input[_builtins.float]] = None,
            rule_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisWafRule':
        """
        Get an existing CisWafRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] allowed_modes: CIS WAF Rule allowed modes
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] description: CIS WAF Rule descriptions
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[Sequence[pulumi.Input[Union['CisWafRuleGroupArgs', 'CisWafRuleGroupArgsDict']]]] groups: CIS WAF Rule group
        :param pulumi.Input[_builtins.str] mode: CIS WAF Rule mode
        :param pulumi.Input[_builtins.str] package_id: CIS WAF Rule package id
        :param pulumi.Input[_builtins.float] priority: CIS WAF Rule Priority
        :param pulumi.Input[_builtins.str] rule_id: CIS WAF Rule id
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisWafRuleState.__new__(_CisWafRuleState)

        __props__.__dict__["allowed_modes"] = allowed_modes
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["cis_waf_rule_id"] = cis_waf_rule_id
        __props__.__dict__["description"] = description
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["groups"] = groups
        __props__.__dict__["mode"] = mode
        __props__.__dict__["package_id"] = package_id
        __props__.__dict__["priority"] = priority
        __props__.__dict__["rule_id"] = rule_id
        return CisWafRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowedModes")
    def allowed_modes(self) -> pulumi.Output[_builtins.str]:
        """
        CIS WAF Rule allowed modes
        """
        return pulumi.get(self, "allowed_modes")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS Intance CRN
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cisWafRuleId")
    def cis_waf_rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_waf_rule_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        CIS WAF Rule descriptions
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS Domain ID
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Sequence['outputs.CisWafRuleGroup']]:
        """
        CIS WAF Rule group
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Output[_builtins.str]:
        """
        CIS WAF Rule mode
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS WAF Rule package id
        """
        return pulumi.get(self, "package_id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Output[_builtins.float]:
        """
        CIS WAF Rule Priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS WAF Rule id
        """
        return pulumi.get(self, "rule_id")

