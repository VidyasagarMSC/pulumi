# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IsPrivatePathServiceGatewayAccountPolicyArgs', 'IsPrivatePathServiceGatewayAccountPolicy']

@pulumi.input_type
class IsPrivatePathServiceGatewayAccountPolicyArgs:
    def __init__(__self__, *,
                 access_policy: pulumi.Input[_builtins.str],
                 account: pulumi.Input[_builtins.str],
                 private_path_service_gateway: pulumi.Input[_builtins.str],
                 is_private_path_service_gateway_account_policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsPrivatePathServiceGatewayAccountPolicy resource.
        :param pulumi.Input[_builtins.str] access_policy: The access policy for the account:- permit: access will be permitted- deny: access will be denied- review: access will
               be manually reviewed.
        :param pulumi.Input[_builtins.str] account: The account for this access policy.
        :param pulumi.Input[_builtins.str] private_path_service_gateway: The private path service gateway identifier.
        """
        pulumi.set(__self__, "access_policy", access_policy)
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "private_path_service_gateway", private_path_service_gateway)
        if is_private_path_service_gateway_account_policy_id is not None:
            pulumi.set(__self__, "is_private_path_service_gateway_account_policy_id", is_private_path_service_gateway_account_policy_id)

    @_builtins.property
    @pulumi.getter(name="accessPolicy")
    def access_policy(self) -> pulumi.Input[_builtins.str]:
        """
        The access policy for the account:- permit: access will be permitted- deny: access will be denied- review: access will
        be manually reviewed.
        """
        return pulumi.get(self, "access_policy")

    @access_policy.setter
    def access_policy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "access_policy", value)

    @_builtins.property
    @pulumi.getter
    def account(self) -> pulumi.Input[_builtins.str]:
        """
        The account for this access policy.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account", value)

    @_builtins.property
    @pulumi.getter(name="privatePathServiceGateway")
    def private_path_service_gateway(self) -> pulumi.Input[_builtins.str]:
        """
        The private path service gateway identifier.
        """
        return pulumi.get(self, "private_path_service_gateway")

    @private_path_service_gateway.setter
    def private_path_service_gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "private_path_service_gateway", value)

    @_builtins.property
    @pulumi.getter(name="isPrivatePathServiceGatewayAccountPolicyId")
    def is_private_path_service_gateway_account_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_private_path_service_gateway_account_policy_id")

    @is_private_path_service_gateway_account_policy_id.setter
    def is_private_path_service_gateway_account_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_private_path_service_gateway_account_policy_id", value)


@pulumi.input_type
class _IsPrivatePathServiceGatewayAccountPolicyState:
    def __init__(__self__, *,
                 access_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 account: Optional[pulumi.Input[_builtins.str]] = None,
                 account_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_private_path_service_gateway_account_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_path_service_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsPrivatePathServiceGatewayAccountPolicy resources.
        :param pulumi.Input[_builtins.str] access_policy: The access policy for the account:- permit: access will be permitted- deny: access will be denied- review: access will
               be manually reviewed.
        :param pulumi.Input[_builtins.str] account: The account for this access policy.
        :param pulumi.Input[_builtins.str] account_policy: The unique identifier for this account policy.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the account policy was created.
        :param pulumi.Input[_builtins.str] href: The URL for this account policy.
        :param pulumi.Input[_builtins.str] private_path_service_gateway: The private path service gateway identifier.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] updated_at: The date and time that the account policy was updated.
        """
        if access_policy is not None:
            pulumi.set(__self__, "access_policy", access_policy)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if account_policy is not None:
            pulumi.set(__self__, "account_policy", account_policy)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_private_path_service_gateway_account_policy_id is not None:
            pulumi.set(__self__, "is_private_path_service_gateway_account_policy_id", is_private_path_service_gateway_account_policy_id)
        if private_path_service_gateway is not None:
            pulumi.set(__self__, "private_path_service_gateway", private_path_service_gateway)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="accessPolicy")
    def access_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The access policy for the account:- permit: access will be permitted- deny: access will be denied- review: access will
        be manually reviewed.
        """
        return pulumi.get(self, "access_policy")

    @access_policy.setter
    def access_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_policy", value)

    @_builtins.property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account for this access policy.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account", value)

    @_builtins.property
    @pulumi.getter(name="accountPolicy")
    def account_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this account policy.
        """
        return pulumi.get(self, "account_policy")

    @account_policy.setter
    def account_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_policy", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the account policy was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this account policy.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isPrivatePathServiceGatewayAccountPolicyId")
    def is_private_path_service_gateway_account_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_private_path_service_gateway_account_policy_id")

    @is_private_path_service_gateway_account_policy_id.setter
    def is_private_path_service_gateway_account_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_private_path_service_gateway_account_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="privatePathServiceGateway")
    def private_path_service_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The private path service gateway identifier.
        """
        return pulumi.get(self, "private_path_service_gateway")

    @private_path_service_gateway.setter
    def private_path_service_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_path_service_gateway", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the account policy was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/isPrivatePathServiceGatewayAccountPolicy:IsPrivatePathServiceGatewayAccountPolicy")
class IsPrivatePathServiceGatewayAccountPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 account: Optional[pulumi.Input[_builtins.str]] = None,
                 is_private_path_service_gateway_account_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_path_service_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsPrivatePathServiceGatewayAccountPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_policy: The access policy for the account:- permit: access will be permitted- deny: access will be denied- review: access will
               be manually reviewed.
        :param pulumi.Input[_builtins.str] account: The account for this access policy.
        :param pulumi.Input[_builtins.str] private_path_service_gateway: The private path service gateway identifier.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsPrivatePathServiceGatewayAccountPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsPrivatePathServiceGatewayAccountPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsPrivatePathServiceGatewayAccountPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsPrivatePathServiceGatewayAccountPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 account: Optional[pulumi.Input[_builtins.str]] = None,
                 is_private_path_service_gateway_account_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_path_service_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsPrivatePathServiceGatewayAccountPolicyArgs.__new__(IsPrivatePathServiceGatewayAccountPolicyArgs)

            if access_policy is None and not opts.urn:
                raise TypeError("Missing required property 'access_policy'")
            __props__.__dict__["access_policy"] = access_policy
            if account is None and not opts.urn:
                raise TypeError("Missing required property 'account'")
            __props__.__dict__["account"] = account
            __props__.__dict__["is_private_path_service_gateway_account_policy_id"] = is_private_path_service_gateway_account_policy_id
            if private_path_service_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'private_path_service_gateway'")
            __props__.__dict__["private_path_service_gateway"] = private_path_service_gateway
            __props__.__dict__["account_policy"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["updated_at"] = None
        super(IsPrivatePathServiceGatewayAccountPolicy, __self__).__init__(
            'ibm:index/isPrivatePathServiceGatewayAccountPolicy:IsPrivatePathServiceGatewayAccountPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_policy: Optional[pulumi.Input[_builtins.str]] = None,
            account: Optional[pulumi.Input[_builtins.str]] = None,
            account_policy: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_private_path_service_gateway_account_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            private_path_service_gateway: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsPrivatePathServiceGatewayAccountPolicy':
        """
        Get an existing IsPrivatePathServiceGatewayAccountPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_policy: The access policy for the account:- permit: access will be permitted- deny: access will be denied- review: access will
               be manually reviewed.
        :param pulumi.Input[_builtins.str] account: The account for this access policy.
        :param pulumi.Input[_builtins.str] account_policy: The unique identifier for this account policy.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the account policy was created.
        :param pulumi.Input[_builtins.str] href: The URL for this account policy.
        :param pulumi.Input[_builtins.str] private_path_service_gateway: The private path service gateway identifier.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] updated_at: The date and time that the account policy was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsPrivatePathServiceGatewayAccountPolicyState.__new__(_IsPrivatePathServiceGatewayAccountPolicyState)

        __props__.__dict__["access_policy"] = access_policy
        __props__.__dict__["account"] = account
        __props__.__dict__["account_policy"] = account_policy
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["href"] = href
        __props__.__dict__["is_private_path_service_gateway_account_policy_id"] = is_private_path_service_gateway_account_policy_id
        __props__.__dict__["private_path_service_gateway"] = private_path_service_gateway
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["updated_at"] = updated_at
        return IsPrivatePathServiceGatewayAccountPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessPolicy")
    def access_policy(self) -> pulumi.Output[_builtins.str]:
        """
        The access policy for the account:- permit: access will be permitted- deny: access will be denied- review: access will
        be manually reviewed.
        """
        return pulumi.get(self, "access_policy")

    @_builtins.property
    @pulumi.getter
    def account(self) -> pulumi.Output[_builtins.str]:
        """
        The account for this access policy.
        """
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter(name="accountPolicy")
    def account_policy(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this account policy.
        """
        return pulumi.get(self, "account_policy")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the account policy was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this account policy.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isPrivatePathServiceGatewayAccountPolicyId")
    def is_private_path_service_gateway_account_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_private_path_service_gateway_account_policy_id")

    @_builtins.property
    @pulumi.getter(name="privatePathServiceGateway")
    def private_path_service_gateway(self) -> pulumi.Output[_builtins.str]:
        """
        The private path service gateway identifier.
        """
        return pulumi.get(self, "private_path_service_gateway")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the account policy was updated.
        """
        return pulumi.get(self, "updated_at")

