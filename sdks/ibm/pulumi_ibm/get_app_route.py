# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAppRouteResult',
    'AwaitableGetAppRouteResult',
    'get_app_route',
    'get_app_route_output',
]

@pulumi.output_type
class GetAppRouteResult:
    """
    A collection of values returned by getAppRoute.
    """
    def __init__(__self__, domain_guid=None, host=None, id=None, path=None, port=None, space_guid=None):
        if domain_guid and not isinstance(domain_guid, str):
            raise TypeError("Expected argument 'domain_guid' to be a str")
        pulumi.set(__self__, "domain_guid", domain_guid)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if port and not isinstance(port, str):
            raise TypeError("Expected argument 'port' to be a str")
        pulumi.set(__self__, "port", port)
        if space_guid and not isinstance(space_guid, str):
            raise TypeError("Expected argument 'space_guid' to be a str")
        pulumi.set(__self__, "space_guid", space_guid)

    @_builtins.property
    @pulumi.getter(name="domainGuid")
    def domain_guid(self) -> _builtins.str:
        return pulumi.get(self, "domain_guid")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    def space_guid(self) -> _builtins.str:
        return pulumi.get(self, "space_guid")


class AwaitableGetAppRouteResult(GetAppRouteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppRouteResult(
            domain_guid=self.domain_guid,
            host=self.host,
            id=self.id,
            path=self.path,
            port=self.port,
            space_guid=self.space_guid)


def get_app_route(domain_guid: Optional[_builtins.str] = None,
                  host: Optional[_builtins.str] = None,
                  id: Optional[_builtins.str] = None,
                  path: Optional[_builtins.str] = None,
                  port: Optional[_builtins.str] = None,
                  space_guid: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppRouteResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domainGuid'] = domain_guid
    __args__['host'] = host
    __args__['id'] = id
    __args__['path'] = path
    __args__['port'] = port
    __args__['spaceGuid'] = space_guid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppRoute:getAppRoute', __args__, opts=opts, typ=GetAppRouteResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppRouteResult(
        domain_guid=pulumi.get(__ret__, 'domain_guid'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        path=pulumi.get(__ret__, 'path'),
        port=pulumi.get(__ret__, 'port'),
        space_guid=pulumi.get(__ret__, 'space_guid'))
def get_app_route_output(domain_guid: Optional[pulumi.Input[_builtins.str]] = None,
                         host: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         path: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         port: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppRouteResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domainGuid'] = domain_guid
    __args__['host'] = host
    __args__['id'] = id
    __args__['path'] = path
    __args__['port'] = port
    __args__['spaceGuid'] = space_guid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppRoute:getAppRoute', __args__, opts=opts, typ=GetAppRouteResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppRouteResult(
        domain_guid=pulumi.get(__response__, 'domain_guid'),
        host=pulumi.get(__response__, 'host'),
        id=pulumi.get(__response__, 'id'),
        path=pulumi.get(__response__, 'path'),
        port=pulumi.get(__response__, 'port'),
        space_guid=pulumi.get(__response__, 'space_guid')))
