# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCdTektonPipelineDefinitionResult',
    'AwaitableGetCdTektonPipelineDefinitionResult',
    'get_cd_tekton_pipeline_definition',
    'get_cd_tekton_pipeline_definition_output',
]

@pulumi.output_type
class GetCdTektonPipelineDefinitionResult:
    """
    A collection of values returned by getCdTektonPipelineDefinition.
    """
    def __init__(__self__, definition_id=None, href=None, id=None, pipeline_id=None, sources=None):
        if definition_id and not isinstance(definition_id, str):
            raise TypeError("Expected argument 'definition_id' to be a str")
        pulumi.set(__self__, "definition_id", definition_id)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pipeline_id and not isinstance(pipeline_id, str):
            raise TypeError("Expected argument 'pipeline_id' to be a str")
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        if sources and not isinstance(sources, list):
            raise TypeError("Expected argument 'sources' to be a list")
        pulumi.set(__self__, "sources", sources)

    @_builtins.property
    @pulumi.getter(name="definitionId")
    def definition_id(self) -> _builtins.str:
        return pulumi.get(self, "definition_id")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> _builtins.str:
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetCdTektonPipelineDefinitionSourceResult']:
        return pulumi.get(self, "sources")


class AwaitableGetCdTektonPipelineDefinitionResult(GetCdTektonPipelineDefinitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCdTektonPipelineDefinitionResult(
            definition_id=self.definition_id,
            href=self.href,
            id=self.id,
            pipeline_id=self.pipeline_id,
            sources=self.sources)


def get_cd_tekton_pipeline_definition(definition_id: Optional[_builtins.str] = None,
                                      id: Optional[_builtins.str] = None,
                                      pipeline_id: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCdTektonPipelineDefinitionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['definitionId'] = definition_id
    __args__['id'] = id
    __args__['pipelineId'] = pipeline_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCdTektonPipelineDefinition:getCdTektonPipelineDefinition', __args__, opts=opts, typ=GetCdTektonPipelineDefinitionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCdTektonPipelineDefinitionResult(
        definition_id=pulumi.get(__ret__, 'definition_id'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        pipeline_id=pulumi.get(__ret__, 'pipeline_id'),
        sources=pulumi.get(__ret__, 'sources'))
def get_cd_tekton_pipeline_definition_output(definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                                             id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCdTektonPipelineDefinitionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['definitionId'] = definition_id
    __args__['id'] = id
    __args__['pipelineId'] = pipeline_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCdTektonPipelineDefinition:getCdTektonPipelineDefinition', __args__, opts=opts, typ=GetCdTektonPipelineDefinitionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCdTektonPipelineDefinitionResult(
        definition_id=pulumi.get(__response__, 'definition_id'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        pipeline_id=pulumi.get(__response__, 'pipeline_id'),
        sources=pulumi.get(__response__, 'sources')))
