# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsImageDeprecateArgs', 'IsImageDeprecate']

@pulumi.input_type
class IsImageDeprecateArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[_builtins.str],
                 is_image_deprecate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsImageDeprecateTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsImageDeprecate resource.
        :param pulumi.Input[_builtins.str] image: Image identifier
        """
        pulumi.set(__self__, "image", image)
        if is_image_deprecate_id is not None:
            pulumi.set(__self__, "is_image_deprecate_id", is_image_deprecate_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def image(self) -> pulumi.Input[_builtins.str]:
        """
        Image identifier
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter(name="isImageDeprecateId")
    def is_image_deprecate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_image_deprecate_id")

    @is_image_deprecate_id.setter
    def is_image_deprecate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_image_deprecate_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsImageDeprecateTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsImageDeprecateTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsImageDeprecateState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 checksum: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 deprecation_at: Optional[pulumi.Input[_builtins.str]] = None,
                 encrypted_data_key: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.float]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_image_deprecate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 obsolescence_at: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.float]] = None,
                 source_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsImageDeprecateTimeoutsArgs']] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsImageDeprecate resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] checksum: The SHA256 checksum of this image
        :param pulumi.Input[_builtins.str] created_at: The date and time that the image was created
        :param pulumi.Input[_builtins.str] crn: The crn of the resource
        :param pulumi.Input[_builtins.str] deprecation_at: The deprecation date and time (UTC) for this image. If absent, no deprecation date and time has been set.
        :param pulumi.Input[_builtins.str] encrypted_data_key: A base64-encoded, encrypted representation of the key that was used to encrypt the data for this image
        :param pulumi.Input[_builtins.str] encryption: The type of encryption used on the image
        :param pulumi.Input[_builtins.str] encryption_key: The CRN of the Key Protect Root Key or Hyper Protect Crypto Service Root Key for this resource
        :param pulumi.Input[_builtins.float] file: Details for the stored image file
        :param pulumi.Input[_builtins.str] href: Image Href value
        :param pulumi.Input[_builtins.str] image: Image identifier
        :param pulumi.Input[_builtins.str] name: Image name
        :param pulumi.Input[_builtins.str] obsolescence_at: The obsolescence date and time (UTC) for this image. If absent, no obsolescence date and time has been set.
        :param pulumi.Input[_builtins.str] operating_system: Image Operating system
        :param pulumi.Input[_builtins.str] resource_group: The resource group for this image
        :param pulumi.Input[_builtins.float] size: The minimum size (in gigabytes) of a volume onto which this image may be provisioned
        :param pulumi.Input[_builtins.str] source_volume: Image volume id
        :param pulumi.Input[_builtins.str] status: The status of this image
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the image
        :param pulumi.Input[_builtins.str] visibility: Whether the image is publicly visible or private to the account
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if deprecation_at is not None:
            pulumi.set(__self__, "deprecation_at", deprecation_at)
        if encrypted_data_key is not None:
            pulumi.set(__self__, "encrypted_data_key", encrypted_data_key)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if is_image_deprecate_id is not None:
            pulumi.set(__self__, "is_image_deprecate_id", is_image_deprecate_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if obsolescence_at is not None:
            pulumi.set(__self__, "obsolescence_at", obsolescence_at)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if source_volume is not None:
            pulumi.set(__self__, "source_volume", source_volume)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The SHA256 checksum of this image
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "checksum", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the image was created
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="deprecationAt")
    def deprecation_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The deprecation date and time (UTC) for this image. If absent, no deprecation date and time has been set.
        """
        return pulumi.get(self, "deprecation_at")

    @deprecation_at.setter
    def deprecation_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deprecation_at", value)

    @_builtins.property
    @pulumi.getter(name="encryptedDataKey")
    def encrypted_data_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A base64-encoded, encrypted representation of the key that was used to encrypt the data for this image
        """
        return pulumi.get(self, "encrypted_data_key")

    @encrypted_data_key.setter
    def encrypted_data_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encrypted_data_key", value)

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of encryption used on the image
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption", value)

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of the Key Protect Root Key or Hyper Protect Crypto Service Root Key for this resource
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_key", value)

    @_builtins.property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Details for the stored image file
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "file", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Image Href value
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Image identifier
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter(name="isImageDeprecateId")
    def is_image_deprecate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_image_deprecate_id")

    @is_image_deprecate_id.setter
    def is_image_deprecate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_image_deprecate_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Image name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="obsolescenceAt")
    def obsolescence_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The obsolescence date and time (UTC) for this image. If absent, no obsolescence date and time has been set.
        """
        return pulumi.get(self, "obsolescence_at")

    @obsolescence_at.setter
    def obsolescence_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "obsolescence_at", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Image Operating system
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group for this image
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The minimum size (in gigabytes) of a volume onto which this image may be provisioned
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="sourceVolume")
    def source_volume(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Image volume id
        """
        return pulumi.get(self, "source_volume")

    @source_volume.setter
    def source_volume(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_volume", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of this image
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags for the image
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsImageDeprecateTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsImageDeprecateTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image is publicly visible or private to the account
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "visibility", value)


@pulumi.type_token("ibm:index/isImageDeprecate:IsImageDeprecate")
class IsImageDeprecate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_image_deprecate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsImageDeprecateTimeoutsArgs', 'IsImageDeprecateTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsImageDeprecate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] image: Image identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsImageDeprecateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsImageDeprecate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsImageDeprecateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsImageDeprecateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_image_deprecate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsImageDeprecateTimeoutsArgs', 'IsImageDeprecateTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsImageDeprecateArgs.__new__(IsImageDeprecateArgs)

            if image is None and not opts.urn:
                raise TypeError("Missing required property 'image'")
            __props__.__dict__["image"] = image
            __props__.__dict__["is_image_deprecate_id"] = is_image_deprecate_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["access_tags"] = None
            __props__.__dict__["checksum"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["deprecation_at"] = None
            __props__.__dict__["encrypted_data_key"] = None
            __props__.__dict__["encryption"] = None
            __props__.__dict__["encryption_key"] = None
            __props__.__dict__["file"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["obsolescence_at"] = None
            __props__.__dict__["operating_system"] = None
            __props__.__dict__["resource_group"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["source_volume"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["tags"] = None
            __props__.__dict__["visibility"] = None
        super(IsImageDeprecate, __self__).__init__(
            'ibm:index/isImageDeprecate:IsImageDeprecate',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            checksum: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            deprecation_at: Optional[pulumi.Input[_builtins.str]] = None,
            encrypted_data_key: Optional[pulumi.Input[_builtins.str]] = None,
            encryption: Optional[pulumi.Input[_builtins.str]] = None,
            encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
            file: Optional[pulumi.Input[_builtins.float]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            image: Optional[pulumi.Input[_builtins.str]] = None,
            is_image_deprecate_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            obsolescence_at: Optional[pulumi.Input[_builtins.str]] = None,
            operating_system: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.float]] = None,
            source_volume: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsImageDeprecateTimeoutsArgs', 'IsImageDeprecateTimeoutsArgsDict']]] = None,
            visibility: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsImageDeprecate':
        """
        Get an existing IsImageDeprecate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] checksum: The SHA256 checksum of this image
        :param pulumi.Input[_builtins.str] created_at: The date and time that the image was created
        :param pulumi.Input[_builtins.str] crn: The crn of the resource
        :param pulumi.Input[_builtins.str] deprecation_at: The deprecation date and time (UTC) for this image. If absent, no deprecation date and time has been set.
        :param pulumi.Input[_builtins.str] encrypted_data_key: A base64-encoded, encrypted representation of the key that was used to encrypt the data for this image
        :param pulumi.Input[_builtins.str] encryption: The type of encryption used on the image
        :param pulumi.Input[_builtins.str] encryption_key: The CRN of the Key Protect Root Key or Hyper Protect Crypto Service Root Key for this resource
        :param pulumi.Input[_builtins.float] file: Details for the stored image file
        :param pulumi.Input[_builtins.str] href: Image Href value
        :param pulumi.Input[_builtins.str] image: Image identifier
        :param pulumi.Input[_builtins.str] name: Image name
        :param pulumi.Input[_builtins.str] obsolescence_at: The obsolescence date and time (UTC) for this image. If absent, no obsolescence date and time has been set.
        :param pulumi.Input[_builtins.str] operating_system: Image Operating system
        :param pulumi.Input[_builtins.str] resource_group: The resource group for this image
        :param pulumi.Input[_builtins.float] size: The minimum size (in gigabytes) of a volume onto which this image may be provisioned
        :param pulumi.Input[_builtins.str] source_volume: Image volume id
        :param pulumi.Input[_builtins.str] status: The status of this image
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the image
        :param pulumi.Input[_builtins.str] visibility: Whether the image is publicly visible or private to the account
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsImageDeprecateState.__new__(_IsImageDeprecateState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["checksum"] = checksum
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["deprecation_at"] = deprecation_at
        __props__.__dict__["encrypted_data_key"] = encrypted_data_key
        __props__.__dict__["encryption"] = encryption
        __props__.__dict__["encryption_key"] = encryption_key
        __props__.__dict__["file"] = file
        __props__.__dict__["href"] = href
        __props__.__dict__["image"] = image
        __props__.__dict__["is_image_deprecate_id"] = is_image_deprecate_id
        __props__.__dict__["name"] = name
        __props__.__dict__["obsolescence_at"] = obsolescence_at
        __props__.__dict__["operating_system"] = operating_system
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["size"] = size
        __props__.__dict__["source_volume"] = source_volume
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["visibility"] = visibility
        return IsImageDeprecate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter
    def checksum(self) -> pulumi.Output[_builtins.str]:
        """
        The SHA256 checksum of this image
        """
        return pulumi.get(self, "checksum")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the image was created
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="deprecationAt")
    def deprecation_at(self) -> pulumi.Output[_builtins.str]:
        """
        The deprecation date and time (UTC) for this image. If absent, no deprecation date and time has been set.
        """
        return pulumi.get(self, "deprecation_at")

    @_builtins.property
    @pulumi.getter(name="encryptedDataKey")
    def encrypted_data_key(self) -> pulumi.Output[_builtins.str]:
        """
        A base64-encoded, encrypted representation of the key that was used to encrypt the data for this image
        """
        return pulumi.get(self, "encrypted_data_key")

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> pulumi.Output[_builtins.str]:
        """
        The type of encryption used on the image
        """
        return pulumi.get(self, "encryption")

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of the Key Protect Root Key or Hyper Protect Crypto Service Root Key for this resource
        """
        return pulumi.get(self, "encryption_key")

    @_builtins.property
    @pulumi.getter
    def file(self) -> pulumi.Output[_builtins.float]:
        """
        Details for the stored image file
        """
        return pulumi.get(self, "file")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        Image Href value
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def image(self) -> pulumi.Output[_builtins.str]:
        """
        Image identifier
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="isImageDeprecateId")
    def is_image_deprecate_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_image_deprecate_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Image name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="obsolescenceAt")
    def obsolescence_at(self) -> pulumi.Output[_builtins.str]:
        """
        The obsolescence date and time (UTC) for this image. If absent, no obsolescence date and time has been set.
        """
        return pulumi.get(self, "obsolescence_at")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Output[_builtins.str]:
        """
        Image Operating system
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group for this image
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.float]:
        """
        The minimum size (in gigabytes) of a volume onto which this image may be provisioned
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="sourceVolume")
    def source_volume(self) -> pulumi.Output[_builtins.str]:
        """
        Image volume id
        """
        return pulumi.get(self, "source_volume")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of this image
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Tags for the image
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsImageDeprecateTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image is publicly visible or private to the account
        """
        return pulumi.get(self, "visibility")

