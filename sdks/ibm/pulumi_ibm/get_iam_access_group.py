# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamAccessGroupResult',
    'AwaitableGetIamAccessGroupResult',
    'get_iam_access_group',
    'get_iam_access_group_output',
]

@pulumi.output_type
class GetIamAccessGroupResult:
    """
    A collection of values returned by getIamAccessGroup.
    """
    def __init__(__self__, access_group_name=None, groups=None, id=None):
        if access_group_name and not isinstance(access_group_name, str):
            raise TypeError("Expected argument 'access_group_name' to be a str")
        pulumi.set(__self__, "access_group_name", access_group_name)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="accessGroupName")
    def access_group_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "access_group_name")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetIamAccessGroupGroupResult']:
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")


class AwaitableGetIamAccessGroupResult(GetIamAccessGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamAccessGroupResult(
            access_group_name=self.access_group_name,
            groups=self.groups,
            id=self.id)


def get_iam_access_group(access_group_name: Optional[_builtins.str] = None,
                         id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamAccessGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessGroupName'] = access_group_name
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamAccessGroup:getIamAccessGroup', __args__, opts=opts, typ=GetIamAccessGroupResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamAccessGroupResult(
        access_group_name=pulumi.get(__ret__, 'access_group_name'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'))
def get_iam_access_group_output(access_group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamAccessGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessGroupName'] = access_group_name
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamAccessGroup:getIamAccessGroup', __args__, opts=opts, typ=GetIamAccessGroupResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamAccessGroupResult(
        access_group_name=pulumi.get(__response__, 'access_group_name'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id')))
