# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceInstanceArgs', 'ResourceInstance']

@pulumi.input_type
class ResourceInstanceArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 plan: pulumi.Input[_builtins.str],
                 service: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 parameters_json: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['ResourceInstanceTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ResourceInstance resource.
        :param pulumi.Input[_builtins.str] location: The location where the instance available
        :param pulumi.Input[_builtins.str] plan: The plan type of the service
        :param pulumi.Input[_builtins.str] service: The name of the service offering like cloud-object-storage, kms etc
        :param pulumi.Input[_builtins.str] name: A name for the resource instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass. Must be a JSON object
        :param pulumi.Input[_builtins.str] parameters_json: Arbitrary parameters to pass in Json string format
        :param pulumi.Input[_builtins.str] resource_group_id: The resource group id
        :param pulumi.Input[_builtins.str] service_endpoints: Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "service", service)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if parameters_json is not None:
            pulumi.set(__self__, "parameters_json", parameters_json)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_instance_id is not None:
            pulumi.set(__self__, "resource_instance_id", resource_instance_id)
        if service_endpoints is not None:
            pulumi.set(__self__, "service_endpoints", service_endpoints)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        The location where the instance available
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def plan(self) -> pulumi.Input[_builtins.str]:
        """
        The plan type of the service
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "plan", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the service offering like cloud-object-storage, kms etc
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A name for the resource instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Arbitrary parameters to pass. Must be a JSON object
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter(name="parametersJson")
    def parameters_json(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Arbitrary parameters to pass in Json string format
        """
        return pulumi.get(self, "parameters_json")

    @parameters_json.setter
    def parameters_json(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameters_json", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group id
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_instance_id")

    @resource_instance_id.setter
    def resource_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        """
        return pulumi.get(self, "service_endpoints")

    @service_endpoints.setter
    def service_endpoints(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_endpoints", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ResourceInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ResourceInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ResourceInstanceState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 allow_cleanup: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_url: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted_at: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted_by: Optional[pulumi.Input[_builtins.str]] = None,
                 extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 last_operation: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 onetime_credentials: Optional[pulumi.Input[_builtins.bool]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 parameters_json: Optional[pulumi.Input[_builtins.str]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 plan_histories: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceInstancePlanHistoryArgs']]]] = None,
                 resource_aliases_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_bindings_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_keys_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 restored_at: Optional[pulumi.Input[_builtins.str]] = None,
                 restored_by: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduled_reclaim_at: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduled_reclaim_by: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 sub_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ResourceInstanceTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 update_at: Optional[pulumi.Input[_builtins.str]] = None,
                 update_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ResourceInstance resources.
        :param pulumi.Input[_builtins.str] account_id: An alpha-numeric value identifying the account ID.
        :param pulumi.Input[_builtins.bool] allow_cleanup: A boolean that dictates if the resource instance should be deleted (cleaned up) during the processing of a region
               instance delete call.
        :param pulumi.Input[_builtins.str] created_at: The date when the instance was created.
        :param pulumi.Input[_builtins.str] created_by: The subject who created the instance.
        :param pulumi.Input[_builtins.str] crn: CRN of resource instance
        :param pulumi.Input[_builtins.str] dashboard_url: Dashboard URL to access resource.
        :param pulumi.Input[_builtins.str] deleted_at: The date when the instance was deleted.
        :param pulumi.Input[_builtins.str] deleted_by: The subject who deleted the instance.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] extensions: The extended metadata as a map associated with the resource instance.
        :param pulumi.Input[_builtins.str] guid: Guid of resource instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] last_operation: The status of the last operation requested on the instance
        :param pulumi.Input[_builtins.str] location: The location where the instance available
        :param pulumi.Input[_builtins.bool] locked: A boolean that dictates if the resource instance should be deleted (cleaned up) during the processing of a region
               instance delete call.
        :param pulumi.Input[_builtins.str] name: A name for the resource instance
        :param pulumi.Input[_builtins.bool] onetime_credentials: A boolean that dictates if the onetime_credentials is true or false.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass. Must be a JSON object
        :param pulumi.Input[_builtins.str] parameters_json: Arbitrary parameters to pass in Json string format
        :param pulumi.Input[_builtins.str] plan: The plan type of the service
        :param pulumi.Input[Sequence[pulumi.Input['ResourceInstancePlanHistoryArgs']]] plan_histories: The plan history of the instance.
        :param pulumi.Input[_builtins.str] resource_aliases_url: The relative path to the resource aliases for the instance.
        :param pulumi.Input[_builtins.str] resource_bindings_url: The relative path to the resource bindings for the instance.
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group_crn: The long ID (full CRN) of the resource group
        :param pulumi.Input[_builtins.str] resource_group_id: The resource group id
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_id: The unique ID of the offering
        :param pulumi.Input[_builtins.str] resource_keys_url: The relative path to the resource keys for the instance.
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_plan_id: The unique ID of the plan associated with the offering
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] restored_at: The date when the instance under reclamation was restored.
        :param pulumi.Input[_builtins.str] restored_by: The subject who restored the instance back from reclamation.
        :param pulumi.Input[_builtins.str] scheduled_reclaim_at: The date when the instance was scheduled for reclamation.
        :param pulumi.Input[_builtins.str] scheduled_reclaim_by: The subject who initiated the instance reclamation.
        :param pulumi.Input[_builtins.str] service: The name of the service offering like cloud-object-storage, kms etc
        :param pulumi.Input[_builtins.str] service_endpoints: Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        :param pulumi.Input[_builtins.str] state: The current state of the instance.
        :param pulumi.Input[_builtins.str] status: Status of resource instance
        :param pulumi.Input[_builtins.str] sub_type: The sub-type of instance, e.g. cfaas .
        :param pulumi.Input[_builtins.str] target_crn: The full deployment CRN as defined in the global catalog
        :param pulumi.Input[_builtins.str] type: The type of the instance, e.g. service_instance.
        :param pulumi.Input[_builtins.str] update_at: The date when the instance was last updated.
        :param pulumi.Input[_builtins.str] update_by: The subject who updated the instance.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if allow_cleanup is not None:
            pulumi.set(__self__, "allow_cleanup", allow_cleanup)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if dashboard_url is not None:
            pulumi.set(__self__, "dashboard_url", dashboard_url)
        if deleted_at is not None:
            pulumi.set(__self__, "deleted_at", deleted_at)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if last_operation is not None:
            pulumi.set(__self__, "last_operation", last_operation)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if onetime_credentials is not None:
            pulumi.set(__self__, "onetime_credentials", onetime_credentials)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if parameters_json is not None:
            pulumi.set(__self__, "parameters_json", parameters_json)
        if plan is not None:
            pulumi.set(__self__, "plan", plan)
        if plan_histories is not None:
            pulumi.set(__self__, "plan_histories", plan_histories)
        if resource_aliases_url is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""resource_aliases_url is deprecated: Deprecated""")
        if resource_aliases_url is not None:
            pulumi.set(__self__, "resource_aliases_url", resource_aliases_url)
        if resource_bindings_url is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""resource_bindings_url is deprecated: Deprecated""")
        if resource_bindings_url is not None:
            pulumi.set(__self__, "resource_bindings_url", resource_bindings_url)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn is not None:
            pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group_crn is not None:
            pulumi.set(__self__, "resource_group_crn", resource_group_crn)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_instance_id is not None:
            pulumi.set(__self__, "resource_instance_id", resource_instance_id)
        if resource_keys_url is not None:
            pulumi.set(__self__, "resource_keys_url", resource_keys_url)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_plan_id is not None:
            pulumi.set(__self__, "resource_plan_id", resource_plan_id)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if restored_at is not None:
            pulumi.set(__self__, "restored_at", restored_at)
        if restored_by is not None:
            pulumi.set(__self__, "restored_by", restored_by)
        if scheduled_reclaim_at is not None:
            pulumi.set(__self__, "scheduled_reclaim_at", scheduled_reclaim_at)
        if scheduled_reclaim_by is not None:
            pulumi.set(__self__, "scheduled_reclaim_by", scheduled_reclaim_by)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if service_endpoints is not None:
            pulumi.set(__self__, "service_endpoints", service_endpoints)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sub_type is not None:
            pulumi.set(__self__, "sub_type", sub_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_crn is not None:
            pulumi.set(__self__, "target_crn", target_crn)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_at is not None:
            pulumi.set(__self__, "update_at", update_at)
        if update_by is not None:
            pulumi.set(__self__, "update_by", update_by)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An alpha-numeric value identifying the account ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="allowCleanup")
    def allow_cleanup(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        A boolean that dictates if the resource instance should be deleted (cleaned up) during the processing of a region
        instance delete call.
        """
        return pulumi.get(self, "allow_cleanup")

    @allow_cleanup.setter
    def allow_cleanup(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_cleanup", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the instance was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who created the instance.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of resource instance
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dashboard URL to access resource.
        """
        return pulumi.get(self, "dashboard_url")

    @dashboard_url.setter
    def dashboard_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dashboard_url", value)

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the instance was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @deleted_at.setter
    def deleted_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deleted_at", value)

    @_builtins.property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who deleted the instance.
        """
        return pulumi.get(self, "deleted_by")

    @deleted_by.setter
    def deleted_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deleted_by", value)

    @_builtins.property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The extended metadata as a map associated with the resource instance.
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "extensions", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Guid of resource instance
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter(name="lastOperation")
    def last_operation(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The status of the last operation requested on the instance
        """
        return pulumi.get(self, "last_operation")

    @last_operation.setter
    def last_operation(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "last_operation", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The location where the instance available
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        A boolean that dictates if the resource instance should be deleted (cleaned up) during the processing of a region
        instance delete call.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "locked", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A name for the resource instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="onetimeCredentials")
    def onetime_credentials(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        A boolean that dictates if the onetime_credentials is true or false.
        """
        return pulumi.get(self, "onetime_credentials")

    @onetime_credentials.setter
    def onetime_credentials(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "onetime_credentials", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Arbitrary parameters to pass. Must be a JSON object
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter(name="parametersJson")
    def parameters_json(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Arbitrary parameters to pass in Json string format
        """
        return pulumi.get(self, "parameters_json")

    @parameters_json.setter
    def parameters_json(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameters_json", value)

    @_builtins.property
    @pulumi.getter
    def plan(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The plan type of the service
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plan", value)

    @_builtins.property
    @pulumi.getter(name="planHistories")
    def plan_histories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceInstancePlanHistoryArgs']]]]:
        """
        The plan history of the instance.
        """
        return pulumi.get(self, "plan_histories")

    @plan_histories.setter
    def plan_histories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceInstancePlanHistoryArgs']]]]):
        pulumi.set(self, "plan_histories", value)

    @_builtins.property
    @pulumi.getter(name="resourceAliasesUrl")
    @_utilities.deprecated("""Deprecated""")
    def resource_aliases_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The relative path to the resource aliases for the instance.
        """
        return pulumi.get(self, "resource_aliases_url")

    @resource_aliases_url.setter
    def resource_aliases_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_aliases_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceBindingsUrl")
    @_utilities.deprecated("""Deprecated""")
    def resource_bindings_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The relative path to the resource bindings for the instance.
        """
        return pulumi.get(self, "resource_bindings_url")

    @resource_bindings_url.setter
    def resource_bindings_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_bindings_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @resource_crn.setter
    def resource_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupCrn")
    def resource_group_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The long ID (full CRN) of the resource group
        """
        return pulumi.get(self, "resource_group_crn")

    @resource_group_crn.setter
    def resource_group_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group id
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique ID of the offering
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_instance_id")

    @resource_instance_id.setter
    def resource_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceKeysUrl")
    def resource_keys_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The relative path to the resource keys for the instance.
        """
        return pulumi.get(self, "resource_keys_url")

    @resource_keys_url.setter
    def resource_keys_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_keys_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourcePlanId")
    def resource_plan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique ID of the plan associated with the offering
        """
        return pulumi.get(self, "resource_plan_id")

    @resource_plan_id.setter
    def resource_plan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_plan_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter(name="restoredAt")
    def restored_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the instance under reclamation was restored.
        """
        return pulumi.get(self, "restored_at")

    @restored_at.setter
    def restored_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restored_at", value)

    @_builtins.property
    @pulumi.getter(name="restoredBy")
    def restored_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who restored the instance back from reclamation.
        """
        return pulumi.get(self, "restored_by")

    @restored_by.setter
    def restored_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restored_by", value)

    @_builtins.property
    @pulumi.getter(name="scheduledReclaimAt")
    def scheduled_reclaim_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the instance was scheduled for reclamation.
        """
        return pulumi.get(self, "scheduled_reclaim_at")

    @scheduled_reclaim_at.setter
    def scheduled_reclaim_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheduled_reclaim_at", value)

    @_builtins.property
    @pulumi.getter(name="scheduledReclaimBy")
    def scheduled_reclaim_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who initiated the instance reclamation.
        """
        return pulumi.get(self, "scheduled_reclaim_by")

    @scheduled_reclaim_by.setter
    def scheduled_reclaim_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheduled_reclaim_by", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the service offering like cloud-object-storage, kms etc
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        """
        return pulumi.get(self, "service_endpoints")

    @service_endpoints.setter
    def service_endpoints(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_endpoints", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current state of the instance.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of resource instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subType")
    def sub_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The sub-type of instance, e.g. cfaas .
        """
        return pulumi.get(self, "sub_type")

    @sub_type.setter
    def sub_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sub_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="targetCrn")
    def target_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The full deployment CRN as defined in the global catalog
        """
        return pulumi.get(self, "target_crn")

    @target_crn.setter
    def target_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_crn", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ResourceInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ResourceInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the instance, e.g. service_instance.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the instance was last updated.
        """
        return pulumi.get(self, "update_at")

    @update_at.setter
    def update_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_at", value)

    @_builtins.property
    @pulumi.getter(name="updateBy")
    def update_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who updated the instance.
        """
        return pulumi.get(self, "update_by")

    @update_by.setter
    def update_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_by", value)


@pulumi.type_token("ibm:index/resourceInstance:ResourceInstance")
class ResourceInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 parameters_json: Optional[pulumi.Input[_builtins.str]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ResourceInstanceTimeoutsArgs', 'ResourceInstanceTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a ResourceInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] location: The location where the instance available
        :param pulumi.Input[_builtins.str] name: A name for the resource instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass. Must be a JSON object
        :param pulumi.Input[_builtins.str] parameters_json: Arbitrary parameters to pass in Json string format
        :param pulumi.Input[_builtins.str] plan: The plan type of the service
        :param pulumi.Input[_builtins.str] resource_group_id: The resource group id
        :param pulumi.Input[_builtins.str] service: The name of the service offering like cloud-object-storage, kms etc
        :param pulumi.Input[_builtins.str] service_endpoints: Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ResourceInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ResourceInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 parameters_json: Optional[pulumi.Input[_builtins.str]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ResourceInstanceTimeoutsArgs', 'ResourceInstanceTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceInstanceArgs.__new__(ResourceInstanceArgs)

            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["parameters_json"] = parameters_json
            if plan is None and not opts.urn:
                raise TypeError("Missing required property 'plan'")
            __props__.__dict__["plan"] = plan
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["resource_instance_id"] = resource_instance_id
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
            __props__.__dict__["service_endpoints"] = service_endpoints
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["account_id"] = None
            __props__.__dict__["allow_cleanup"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["dashboard_url"] = None
            __props__.__dict__["deleted_at"] = None
            __props__.__dict__["deleted_by"] = None
            __props__.__dict__["extensions"] = None
            __props__.__dict__["guid"] = None
            __props__.__dict__["last_operation"] = None
            __props__.__dict__["locked"] = None
            __props__.__dict__["onetime_credentials"] = None
            __props__.__dict__["plan_histories"] = None
            __props__.__dict__["resource_aliases_url"] = None
            __props__.__dict__["resource_bindings_url"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_crn"] = None
            __props__.__dict__["resource_group_crn"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_id"] = None
            __props__.__dict__["resource_keys_url"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_plan_id"] = None
            __props__.__dict__["resource_status"] = None
            __props__.__dict__["restored_at"] = None
            __props__.__dict__["restored_by"] = None
            __props__.__dict__["scheduled_reclaim_at"] = None
            __props__.__dict__["scheduled_reclaim_by"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["sub_type"] = None
            __props__.__dict__["target_crn"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["update_at"] = None
            __props__.__dict__["update_by"] = None
        super(ResourceInstance, __self__).__init__(
            'ibm:index/resourceInstance:ResourceInstance',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            allow_cleanup: Optional[pulumi.Input[_builtins.bool]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            dashboard_url: Optional[pulumi.Input[_builtins.str]] = None,
            deleted_at: Optional[pulumi.Input[_builtins.str]] = None,
            deleted_by: Optional[pulumi.Input[_builtins.str]] = None,
            extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            guid: Optional[pulumi.Input[_builtins.str]] = None,
            last_operation: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            locked: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            onetime_credentials: Optional[pulumi.Input[_builtins.bool]] = None,
            parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            parameters_json: Optional[pulumi.Input[_builtins.str]] = None,
            plan: Optional[pulumi.Input[_builtins.str]] = None,
            plan_histories: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ResourceInstancePlanHistoryArgs', 'ResourceInstancePlanHistoryArgsDict']]]]] = None,
            resource_aliases_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_bindings_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_keys_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_plan_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            restored_at: Optional[pulumi.Input[_builtins.str]] = None,
            restored_by: Optional[pulumi.Input[_builtins.str]] = None,
            scheduled_reclaim_at: Optional[pulumi.Input[_builtins.str]] = None,
            scheduled_reclaim_by: Optional[pulumi.Input[_builtins.str]] = None,
            service: Optional[pulumi.Input[_builtins.str]] = None,
            service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            sub_type: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            target_crn: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['ResourceInstanceTimeoutsArgs', 'ResourceInstanceTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            update_at: Optional[pulumi.Input[_builtins.str]] = None,
            update_by: Optional[pulumi.Input[_builtins.str]] = None) -> 'ResourceInstance':
        """
        Get an existing ResourceInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: An alpha-numeric value identifying the account ID.
        :param pulumi.Input[_builtins.bool] allow_cleanup: A boolean that dictates if the resource instance should be deleted (cleaned up) during the processing of a region
               instance delete call.
        :param pulumi.Input[_builtins.str] created_at: The date when the instance was created.
        :param pulumi.Input[_builtins.str] created_by: The subject who created the instance.
        :param pulumi.Input[_builtins.str] crn: CRN of resource instance
        :param pulumi.Input[_builtins.str] dashboard_url: Dashboard URL to access resource.
        :param pulumi.Input[_builtins.str] deleted_at: The date when the instance was deleted.
        :param pulumi.Input[_builtins.str] deleted_by: The subject who deleted the instance.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] extensions: The extended metadata as a map associated with the resource instance.
        :param pulumi.Input[_builtins.str] guid: Guid of resource instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] last_operation: The status of the last operation requested on the instance
        :param pulumi.Input[_builtins.str] location: The location where the instance available
        :param pulumi.Input[_builtins.bool] locked: A boolean that dictates if the resource instance should be deleted (cleaned up) during the processing of a region
               instance delete call.
        :param pulumi.Input[_builtins.str] name: A name for the resource instance
        :param pulumi.Input[_builtins.bool] onetime_credentials: A boolean that dictates if the onetime_credentials is true or false.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass. Must be a JSON object
        :param pulumi.Input[_builtins.str] parameters_json: Arbitrary parameters to pass in Json string format
        :param pulumi.Input[_builtins.str] plan: The plan type of the service
        :param pulumi.Input[Sequence[pulumi.Input[Union['ResourceInstancePlanHistoryArgs', 'ResourceInstancePlanHistoryArgsDict']]]] plan_histories: The plan history of the instance.
        :param pulumi.Input[_builtins.str] resource_aliases_url: The relative path to the resource aliases for the instance.
        :param pulumi.Input[_builtins.str] resource_bindings_url: The relative path to the resource bindings for the instance.
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group_crn: The long ID (full CRN) of the resource group
        :param pulumi.Input[_builtins.str] resource_group_id: The resource group id
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_id: The unique ID of the offering
        :param pulumi.Input[_builtins.str] resource_keys_url: The relative path to the resource keys for the instance.
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_plan_id: The unique ID of the plan associated with the offering
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] restored_at: The date when the instance under reclamation was restored.
        :param pulumi.Input[_builtins.str] restored_by: The subject who restored the instance back from reclamation.
        :param pulumi.Input[_builtins.str] scheduled_reclaim_at: The date when the instance was scheduled for reclamation.
        :param pulumi.Input[_builtins.str] scheduled_reclaim_by: The subject who initiated the instance reclamation.
        :param pulumi.Input[_builtins.str] service: The name of the service offering like cloud-object-storage, kms etc
        :param pulumi.Input[_builtins.str] service_endpoints: Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        :param pulumi.Input[_builtins.str] state: The current state of the instance.
        :param pulumi.Input[_builtins.str] status: Status of resource instance
        :param pulumi.Input[_builtins.str] sub_type: The sub-type of instance, e.g. cfaas .
        :param pulumi.Input[_builtins.str] target_crn: The full deployment CRN as defined in the global catalog
        :param pulumi.Input[_builtins.str] type: The type of the instance, e.g. service_instance.
        :param pulumi.Input[_builtins.str] update_at: The date when the instance was last updated.
        :param pulumi.Input[_builtins.str] update_by: The subject who updated the instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceInstanceState.__new__(_ResourceInstanceState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["allow_cleanup"] = allow_cleanup
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["crn"] = crn
        __props__.__dict__["dashboard_url"] = dashboard_url
        __props__.__dict__["deleted_at"] = deleted_at
        __props__.__dict__["deleted_by"] = deleted_by
        __props__.__dict__["extensions"] = extensions
        __props__.__dict__["guid"] = guid
        __props__.__dict__["last_operation"] = last_operation
        __props__.__dict__["location"] = location
        __props__.__dict__["locked"] = locked
        __props__.__dict__["name"] = name
        __props__.__dict__["onetime_credentials"] = onetime_credentials
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["parameters_json"] = parameters_json
        __props__.__dict__["plan"] = plan
        __props__.__dict__["plan_histories"] = plan_histories
        __props__.__dict__["resource_aliases_url"] = resource_aliases_url
        __props__.__dict__["resource_bindings_url"] = resource_bindings_url
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_crn"] = resource_crn
        __props__.__dict__["resource_group_crn"] = resource_group_crn
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_instance_id"] = resource_instance_id
        __props__.__dict__["resource_keys_url"] = resource_keys_url
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_plan_id"] = resource_plan_id
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["restored_at"] = restored_at
        __props__.__dict__["restored_by"] = restored_by
        __props__.__dict__["scheduled_reclaim_at"] = scheduled_reclaim_at
        __props__.__dict__["scheduled_reclaim_by"] = scheduled_reclaim_by
        __props__.__dict__["service"] = service
        __props__.__dict__["service_endpoints"] = service_endpoints
        __props__.__dict__["state"] = state
        __props__.__dict__["status"] = status
        __props__.__dict__["sub_type"] = sub_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["target_crn"] = target_crn
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["update_at"] = update_at
        __props__.__dict__["update_by"] = update_by
        return ResourceInstance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        An alpha-numeric value identifying the account ID.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="allowCleanup")
    def allow_cleanup(self) -> pulumi.Output[_builtins.bool]:
        """
        A boolean that dictates if the resource instance should be deleted (cleaned up) during the processing of a region
        instance delete call.
        """
        return pulumi.get(self, "allow_cleanup")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the instance was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who created the instance.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        CRN of resource instance
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> pulumi.Output[_builtins.str]:
        """
        Dashboard URL to access resource.
        """
        return pulumi.get(self, "dashboard_url")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the instance was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who deleted the instance.
        """
        return pulumi.get(self, "deleted_by")

    @_builtins.property
    @pulumi.getter
    def extensions(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The extended metadata as a map associated with the resource instance.
        """
        return pulumi.get(self, "extensions")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Output[_builtins.str]:
        """
        Guid of resource instance
        """
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter(name="lastOperation")
    def last_operation(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The status of the last operation requested on the instance
        """
        return pulumi.get(self, "last_operation")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        The location where the instance available
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> pulumi.Output[_builtins.bool]:
        """
        A boolean that dictates if the resource instance should be deleted (cleaned up) during the processing of a region
        instance delete call.
        """
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A name for the resource instance
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="onetimeCredentials")
    def onetime_credentials(self) -> pulumi.Output[_builtins.bool]:
        """
        A boolean that dictates if the onetime_credentials is true or false.
        """
        return pulumi.get(self, "onetime_credentials")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Arbitrary parameters to pass. Must be a JSON object
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter(name="parametersJson")
    def parameters_json(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Arbitrary parameters to pass in Json string format
        """
        return pulumi.get(self, "parameters_json")

    @_builtins.property
    @pulumi.getter
    def plan(self) -> pulumi.Output[_builtins.str]:
        """
        The plan type of the service
        """
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter(name="planHistories")
    def plan_histories(self) -> pulumi.Output[Sequence['outputs.ResourceInstancePlanHistory']]:
        """
        The plan history of the instance.
        """
        return pulumi.get(self, "plan_histories")

    @_builtins.property
    @pulumi.getter(name="resourceAliasesUrl")
    @_utilities.deprecated("""Deprecated""")
    def resource_aliases_url(self) -> pulumi.Output[_builtins.str]:
        """
        The relative path to the resource aliases for the instance.
        """
        return pulumi.get(self, "resource_aliases_url")

    @_builtins.property
    @pulumi.getter(name="resourceBindingsUrl")
    @_utilities.deprecated("""Deprecated""")
    def resource_bindings_url(self) -> pulumi.Output[_builtins.str]:
        """
        The relative path to the resource bindings for the instance.
        """
        return pulumi.get(self, "resource_bindings_url")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroupCrn")
    def resource_group_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The long ID (full CRN) of the resource group
        """
        return pulumi.get(self, "resource_group_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group id
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique ID of the offering
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "resource_instance_id")

    @_builtins.property
    @pulumi.getter(name="resourceKeysUrl")
    def resource_keys_url(self) -> pulumi.Output[_builtins.str]:
        """
        The relative path to the resource keys for the instance.
        """
        return pulumi.get(self, "resource_keys_url")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourcePlanId")
    def resource_plan_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique ID of the plan associated with the offering
        """
        return pulumi.get(self, "resource_plan_id")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="restoredAt")
    def restored_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the instance under reclamation was restored.
        """
        return pulumi.get(self, "restored_at")

    @_builtins.property
    @pulumi.getter(name="restoredBy")
    def restored_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who restored the instance back from reclamation.
        """
        return pulumi.get(self, "restored_by")

    @_builtins.property
    @pulumi.getter(name="scheduledReclaimAt")
    def scheduled_reclaim_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the instance was scheduled for reclamation.
        """
        return pulumi.get(self, "scheduled_reclaim_at")

    @_builtins.property
    @pulumi.getter(name="scheduledReclaimBy")
    def scheduled_reclaim_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who initiated the instance reclamation.
        """
        return pulumi.get(self, "scheduled_reclaim_by")

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the service offering like cloud-object-storage, kms etc
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> pulumi.Output[_builtins.str]:
        """
        Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        """
        return pulumi.get(self, "service_endpoints")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The current state of the instance.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of resource instance
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subType")
    def sub_type(self) -> pulumi.Output[_builtins.str]:
        """
        The sub-type of instance, e.g. cfaas .
        """
        return pulumi.get(self, "sub_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="targetCrn")
    def target_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The full deployment CRN as defined in the global catalog
        """
        return pulumi.get(self, "target_crn")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ResourceInstanceTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the instance, e.g. service_instance.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the instance was last updated.
        """
        return pulumi.get(self, "update_at")

    @_builtins.property
    @pulumi.getter(name="updateBy")
    def update_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who updated the instance.
        """
        return pulumi.get(self, "update_by")

