# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsFloatingIpResult',
    'AwaitableGetIsFloatingIpResult',
    'get_is_floating_ip',
    'get_is_floating_ip_output',
]

@pulumi.output_type
class GetIsFloatingIpResult:
    """
    A collection of values returned by getIsFloatingIp.
    """
    def __init__(__self__, access_tags=None, address=None, crn=None, id=None, name=None, status=None, tags=None, target=None, target_lists=None, zone=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if address and not isinstance(address, str):
            raise TypeError("Expected argument 'address' to be a str")
        pulumi.set(__self__, "address", address)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if target and not isinstance(target, str):
            raise TypeError("Expected argument 'target' to be a str")
        pulumi.set(__self__, "target", target)
        if target_lists and not isinstance(target_lists, list):
            raise TypeError("Expected argument 'target_lists' to be a list")
        pulumi.set(__self__, "target_lists", target_lists)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.str:
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter(name="targetLists")
    def target_lists(self) -> Sequence['outputs.GetIsFloatingIpTargetListResult']:
        return pulumi.get(self, "target_lists")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetIsFloatingIpResult(GetIsFloatingIpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsFloatingIpResult(
            access_tags=self.access_tags,
            address=self.address,
            crn=self.crn,
            id=self.id,
            name=self.name,
            status=self.status,
            tags=self.tags,
            target=self.target,
            target_lists=self.target_lists,
            zone=self.zone)


def get_is_floating_ip(id: Optional[_builtins.str] = None,
                       name: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsFloatingIpResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsFloatingIp:getIsFloatingIp', __args__, opts=opts, typ=GetIsFloatingIpResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsFloatingIpResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        address=pulumi.get(__ret__, 'address'),
        crn=pulumi.get(__ret__, 'crn'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        target=pulumi.get(__ret__, 'target'),
        target_lists=pulumi.get(__ret__, 'target_lists'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_floating_ip_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsFloatingIpResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsFloatingIp:getIsFloatingIp', __args__, opts=opts, typ=GetIsFloatingIpResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsFloatingIpResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        address=pulumi.get(__response__, 'address'),
        crn=pulumi.get(__response__, 'crn'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        target=pulumi.get(__response__, 'target'),
        target_lists=pulumi.get(__response__, 'target_lists'),
        zone=pulumi.get(__response__, 'zone')))
