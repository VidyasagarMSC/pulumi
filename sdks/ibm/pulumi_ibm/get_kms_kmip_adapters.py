# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetKmsKmipAdaptersResult',
    'AwaitableGetKmsKmipAdaptersResult',
    'get_kms_kmip_adapters',
    'get_kms_kmip_adapters_output',
]

@pulumi.output_type
class GetKmsKmipAdaptersResult:
    """
    A collection of values returned by getKmsKmipAdapters.
    """
    def __init__(__self__, adapters=None, endpoint_type=None, id=None, instance_id=None, limit=None, offset=None, show_total_count=None, total_count=None):
        if adapters and not isinstance(adapters, list):
            raise TypeError("Expected argument 'adapters' to be a list")
        pulumi.set(__self__, "adapters", adapters)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if limit and not isinstance(limit, float):
            raise TypeError("Expected argument 'limit' to be a float")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, float):
            raise TypeError("Expected argument 'offset' to be a float")
        pulumi.set(__self__, "offset", offset)
        if show_total_count and not isinstance(show_total_count, bool):
            raise TypeError("Expected argument 'show_total_count' to be a bool")
        pulumi.set(__self__, "show_total_count", show_total_count)
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter
    def adapters(self) -> Sequence['outputs.GetKmsKmipAdaptersAdapterResult']:
        return pulumi.get(self, "adapters")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> _builtins.str:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def offset(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "offset")

    @_builtins.property
    @pulumi.getter(name="showTotalCount")
    def show_total_count(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "show_total_count")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.float:
        return pulumi.get(self, "total_count")


class AwaitableGetKmsKmipAdaptersResult(GetKmsKmipAdaptersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKmsKmipAdaptersResult(
            adapters=self.adapters,
            endpoint_type=self.endpoint_type,
            id=self.id,
            instance_id=self.instance_id,
            limit=self.limit,
            offset=self.offset,
            show_total_count=self.show_total_count,
            total_count=self.total_count)


def get_kms_kmip_adapters(endpoint_type: Optional[_builtins.str] = None,
                          id: Optional[_builtins.str] = None,
                          instance_id: Optional[_builtins.str] = None,
                          limit: Optional[_builtins.float] = None,
                          offset: Optional[_builtins.float] = None,
                          show_total_count: Optional[_builtins.bool] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKmsKmipAdaptersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['showTotalCount'] = show_total_count
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getKmsKmipAdapters:getKmsKmipAdapters', __args__, opts=opts, typ=GetKmsKmipAdaptersResult, package_ref=_utilities.get_package()).value

    return AwaitableGetKmsKmipAdaptersResult(
        adapters=pulumi.get(__ret__, 'adapters'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        show_total_count=pulumi.get(__ret__, 'show_total_count'),
        total_count=pulumi.get(__ret__, 'total_count'))
def get_kms_kmip_adapters_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 limit: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                 offset: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                 show_total_count: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKmsKmipAdaptersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['showTotalCount'] = show_total_count
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getKmsKmipAdapters:getKmsKmipAdapters', __args__, opts=opts, typ=GetKmsKmipAdaptersResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetKmsKmipAdaptersResult(
        adapters=pulumi.get(__response__, 'adapters'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        limit=pulumi.get(__response__, 'limit'),
        offset=pulumi.get(__response__, 'offset'),
        show_total_count=pulumi.get(__response__, 'show_total_count'),
        total_count=pulumi.get(__response__, 'total_count')))
