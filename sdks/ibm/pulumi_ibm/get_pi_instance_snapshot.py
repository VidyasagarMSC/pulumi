# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiInstanceSnapshotResult',
    'AwaitableGetPiInstanceSnapshotResult',
    'get_pi_instance_snapshot',
    'get_pi_instance_snapshot_output',
]

@pulumi.output_type
class GetPiInstanceSnapshotResult:
    """
    A collection of values returned by getPiInstanceSnapshot.
    """
    def __init__(__self__, action=None, creation_date=None, crn=None, description=None, id=None, last_updated_date=None, name=None, percent_complete=None, pi_cloud_instance_id=None, pi_snapshot_id=None, status=None, status_detail=None, user_tags=None, volume_snapshots=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_updated_date and not isinstance(last_updated_date, str):
            raise TypeError("Expected argument 'last_updated_date' to be a str")
        pulumi.set(__self__, "last_updated_date", last_updated_date)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if percent_complete and not isinstance(percent_complete, float):
            raise TypeError("Expected argument 'percent_complete' to be a float")
        pulumi.set(__self__, "percent_complete", percent_complete)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_snapshot_id and not isinstance(pi_snapshot_id, str):
            raise TypeError("Expected argument 'pi_snapshot_id' to be a str")
        pulumi.set(__self__, "pi_snapshot_id", pi_snapshot_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_detail and not isinstance(status_detail, str):
            raise TypeError("Expected argument 'status_detail' to be a str")
        pulumi.set(__self__, "status_detail", status_detail)
        if user_tags and not isinstance(user_tags, list):
            raise TypeError("Expected argument 'user_tags' to be a list")
        pulumi.set(__self__, "user_tags", user_tags)
        if volume_snapshots and not isinstance(volume_snapshots, dict):
            raise TypeError("Expected argument 'volume_snapshots' to be a dict")
        pulumi.set(__self__, "volume_snapshots", volume_snapshots)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedDate")
    def last_updated_date(self) -> _builtins.str:
        return pulumi.get(self, "last_updated_date")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> _builtins.float:
        return pulumi.get(self, "percent_complete")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piSnapshotId")
    def pi_snapshot_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_snapshot_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDetail")
    def status_detail(self) -> _builtins.str:
        return pulumi.get(self, "status_detail")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "user_tags")

    @_builtins.property
    @pulumi.getter(name="volumeSnapshots")
    def volume_snapshots(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "volume_snapshots")


class AwaitableGetPiInstanceSnapshotResult(GetPiInstanceSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiInstanceSnapshotResult(
            action=self.action,
            creation_date=self.creation_date,
            crn=self.crn,
            description=self.description,
            id=self.id,
            last_updated_date=self.last_updated_date,
            name=self.name,
            percent_complete=self.percent_complete,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_snapshot_id=self.pi_snapshot_id,
            status=self.status,
            status_detail=self.status_detail,
            user_tags=self.user_tags,
            volume_snapshots=self.volume_snapshots)


def get_pi_instance_snapshot(id: Optional[_builtins.str] = None,
                             pi_cloud_instance_id: Optional[_builtins.str] = None,
                             pi_snapshot_id: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiInstanceSnapshotResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piSnapshotId'] = pi_snapshot_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiInstanceSnapshot:getPiInstanceSnapshot', __args__, opts=opts, typ=GetPiInstanceSnapshotResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiInstanceSnapshotResult(
        action=pulumi.get(__ret__, 'action'),
        creation_date=pulumi.get(__ret__, 'creation_date'),
        crn=pulumi.get(__ret__, 'crn'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        last_updated_date=pulumi.get(__ret__, 'last_updated_date'),
        name=pulumi.get(__ret__, 'name'),
        percent_complete=pulumi.get(__ret__, 'percent_complete'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_snapshot_id=pulumi.get(__ret__, 'pi_snapshot_id'),
        status=pulumi.get(__ret__, 'status'),
        status_detail=pulumi.get(__ret__, 'status_detail'),
        user_tags=pulumi.get(__ret__, 'user_tags'),
        volume_snapshots=pulumi.get(__ret__, 'volume_snapshots'))
def get_pi_instance_snapshot_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    pi_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiInstanceSnapshotResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piSnapshotId'] = pi_snapshot_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiInstanceSnapshot:getPiInstanceSnapshot', __args__, opts=opts, typ=GetPiInstanceSnapshotResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiInstanceSnapshotResult(
        action=pulumi.get(__response__, 'action'),
        creation_date=pulumi.get(__response__, 'creation_date'),
        crn=pulumi.get(__response__, 'crn'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        last_updated_date=pulumi.get(__response__, 'last_updated_date'),
        name=pulumi.get(__response__, 'name'),
        percent_complete=pulumi.get(__response__, 'percent_complete'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_snapshot_id=pulumi.get(__response__, 'pi_snapshot_id'),
        status=pulumi.get(__response__, 'status'),
        status_detail=pulumi.get(__response__, 'status_detail'),
        user_tags=pulumi.get(__response__, 'user_tags'),
        volume_snapshots=pulumi.get(__response__, 'volume_snapshots')))
