# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetResourceQuotaResult',
    'AwaitableGetResourceQuotaResult',
    'get_resource_quota',
    'get_resource_quota_output',
]

@pulumi.output_type
class GetResourceQuotaResult:
    """
    A collection of values returned by getResourceQuota.
    """
    def __init__(__self__, id=None, max_app_instance_memory=None, max_apps=None, max_instances_per_app=None, max_service_instances=None, name=None, total_app_memory=None, type=None, vsi_limit=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_app_instance_memory and not isinstance(max_app_instance_memory, str):
            raise TypeError("Expected argument 'max_app_instance_memory' to be a str")
        pulumi.set(__self__, "max_app_instance_memory", max_app_instance_memory)
        if max_apps and not isinstance(max_apps, float):
            raise TypeError("Expected argument 'max_apps' to be a float")
        pulumi.set(__self__, "max_apps", max_apps)
        if max_instances_per_app and not isinstance(max_instances_per_app, float):
            raise TypeError("Expected argument 'max_instances_per_app' to be a float")
        pulumi.set(__self__, "max_instances_per_app", max_instances_per_app)
        if max_service_instances and not isinstance(max_service_instances, float):
            raise TypeError("Expected argument 'max_service_instances' to be a float")
        pulumi.set(__self__, "max_service_instances", max_service_instances)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if total_app_memory and not isinstance(total_app_memory, str):
            raise TypeError("Expected argument 'total_app_memory' to be a str")
        pulumi.set(__self__, "total_app_memory", total_app_memory)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vsi_limit and not isinstance(vsi_limit, float):
            raise TypeError("Expected argument 'vsi_limit' to be a float")
        pulumi.set(__self__, "vsi_limit", vsi_limit)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxAppInstanceMemory")
    def max_app_instance_memory(self) -> _builtins.str:
        return pulumi.get(self, "max_app_instance_memory")

    @_builtins.property
    @pulumi.getter(name="maxApps")
    def max_apps(self) -> _builtins.float:
        return pulumi.get(self, "max_apps")

    @_builtins.property
    @pulumi.getter(name="maxInstancesPerApp")
    def max_instances_per_app(self) -> _builtins.float:
        return pulumi.get(self, "max_instances_per_app")

    @_builtins.property
    @pulumi.getter(name="maxServiceInstances")
    def max_service_instances(self) -> _builtins.float:
        return pulumi.get(self, "max_service_instances")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="totalAppMemory")
    def total_app_memory(self) -> _builtins.str:
        return pulumi.get(self, "total_app_memory")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vsiLimit")
    def vsi_limit(self) -> _builtins.float:
        return pulumi.get(self, "vsi_limit")


class AwaitableGetResourceQuotaResult(GetResourceQuotaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceQuotaResult(
            id=self.id,
            max_app_instance_memory=self.max_app_instance_memory,
            max_apps=self.max_apps,
            max_instances_per_app=self.max_instances_per_app,
            max_service_instances=self.max_service_instances,
            name=self.name,
            total_app_memory=self.total_app_memory,
            type=self.type,
            vsi_limit=self.vsi_limit)


def get_resource_quota(id: Optional[_builtins.str] = None,
                       name: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceQuotaResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getResourceQuota:getResourceQuota', __args__, opts=opts, typ=GetResourceQuotaResult, package_ref=_utilities.get_package()).value

    return AwaitableGetResourceQuotaResult(
        id=pulumi.get(__ret__, 'id'),
        max_app_instance_memory=pulumi.get(__ret__, 'max_app_instance_memory'),
        max_apps=pulumi.get(__ret__, 'max_apps'),
        max_instances_per_app=pulumi.get(__ret__, 'max_instances_per_app'),
        max_service_instances=pulumi.get(__ret__, 'max_service_instances'),
        name=pulumi.get(__ret__, 'name'),
        total_app_memory=pulumi.get(__ret__, 'total_app_memory'),
        type=pulumi.get(__ret__, 'type'),
        vsi_limit=pulumi.get(__ret__, 'vsi_limit'))
def get_resource_quota_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceQuotaResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getResourceQuota:getResourceQuota', __args__, opts=opts, typ=GetResourceQuotaResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetResourceQuotaResult(
        id=pulumi.get(__response__, 'id'),
        max_app_instance_memory=pulumi.get(__response__, 'max_app_instance_memory'),
        max_apps=pulumi.get(__response__, 'max_apps'),
        max_instances_per_app=pulumi.get(__response__, 'max_instances_per_app'),
        max_service_instances=pulumi.get(__response__, 'max_service_instances'),
        name=pulumi.get(__response__, 'name'),
        total_app_memory=pulumi.get(__response__, 'total_app_memory'),
        type=pulumi.get(__response__, 'type'),
        vsi_limit=pulumi.get(__response__, 'vsi_limit')))
