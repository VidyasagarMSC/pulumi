# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiVolumeCloneArgs', 'PiVolumeClone']

@pulumi.input_type
class PiVolumeCloneArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_volume_clone_name: pulumi.Input[_builtins.str],
                 pi_volume_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 pi_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_target_storage_tier: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_volume_clone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiVolumeCloneTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiVolumeClone resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_volume_clone_name: The base name of the newly cloned volume(s).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_volume_ids: List of volumes to be cloned.
        :param pulumi.Input[_builtins.bool] pi_replication_enabled: Indicates whether the cloned volume should have replication enabled. If no value is provided, it will default to the
               replication status of the source volume(s).
        :param pulumi.Input[_builtins.str] pi_target_storage_tier: The storage tier for the cloned volume(s).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_volume_clone_name", pi_volume_clone_name)
        pulumi.set(__self__, "pi_volume_ids", pi_volume_ids)
        if pi_replication_enabled is not None:
            pulumi.set(__self__, "pi_replication_enabled", pi_replication_enabled)
        if pi_target_storage_tier is not None:
            pulumi.set(__self__, "pi_target_storage_tier", pi_target_storage_tier)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if pi_volume_clone_id is not None:
            pulumi.set(__self__, "pi_volume_clone_id", pi_volume_clone_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeCloneName")
    def pi_volume_clone_name(self) -> pulumi.Input[_builtins.str]:
        """
        The base name of the newly cloned volume(s).
        """
        return pulumi.get(self, "pi_volume_clone_name")

    @pi_volume_clone_name.setter
    def pi_volume_clone_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_volume_clone_name", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeIds")
    def pi_volume_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        List of volumes to be cloned.
        """
        return pulumi.get(self, "pi_volume_ids")

    @pi_volume_ids.setter
    def pi_volume_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "pi_volume_ids", value)

    @_builtins.property
    @pulumi.getter(name="piReplicationEnabled")
    def pi_replication_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the cloned volume should have replication enabled. If no value is provided, it will default to the
        replication status of the source volume(s).
        """
        return pulumi.get(self, "pi_replication_enabled")

    @pi_replication_enabled.setter
    def pi_replication_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_replication_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piTargetStorageTier")
    def pi_target_storage_tier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The storage tier for the cloned volume(s).
        """
        return pulumi.get(self, "pi_target_storage_tier")

    @pi_target_storage_tier.setter
    def pi_target_storage_tier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_target_storage_tier", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeCloneId")
    def pi_volume_clone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_volume_clone_id")

    @pi_volume_clone_id.setter
    def pi_volume_clone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_clone_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiVolumeCloneTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiVolumeCloneTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiVolumeCloneState:
    def __init__(__self__, *,
                 clone_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['PiVolumeCloneCloneVolumeArgs']]]] = None,
                 failure_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 percent_complete: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_target_storage_tier: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_volume_clone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_clone_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiVolumeCloneTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiVolumeClone resources.
        :param pulumi.Input[Sequence[pulumi.Input['PiVolumeCloneCloneVolumeArgs']]] clone_volumes: The List of cloned volumes.
        :param pulumi.Input[_builtins.str] failure_reason: The reason the clone volumes task has failed.
        :param pulumi.Input[_builtins.float] percent_complete: The completion percentage of the volume clone task.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.bool] pi_replication_enabled: Indicates whether the cloned volume should have replication enabled. If no value is provided, it will default to the
               replication status of the source volume(s).
        :param pulumi.Input[_builtins.str] pi_target_storage_tier: The storage tier for the cloned volume(s).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.str] pi_volume_clone_name: The base name of the newly cloned volume(s).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_volume_ids: List of volumes to be cloned.
        :param pulumi.Input[_builtins.str] status: The status of the volume clone task.
        :param pulumi.Input[_builtins.str] task_id: The ID of the volume clone task.
        """
        if clone_volumes is not None:
            pulumi.set(__self__, "clone_volumes", clone_volumes)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if percent_complete is not None:
            pulumi.set(__self__, "percent_complete", percent_complete)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_replication_enabled is not None:
            pulumi.set(__self__, "pi_replication_enabled", pi_replication_enabled)
        if pi_target_storage_tier is not None:
            pulumi.set(__self__, "pi_target_storage_tier", pi_target_storage_tier)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if pi_volume_clone_id is not None:
            pulumi.set(__self__, "pi_volume_clone_id", pi_volume_clone_id)
        if pi_volume_clone_name is not None:
            pulumi.set(__self__, "pi_volume_clone_name", pi_volume_clone_name)
        if pi_volume_ids is not None:
            pulumi.set(__self__, "pi_volume_ids", pi_volume_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="cloneVolumes")
    def clone_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PiVolumeCloneCloneVolumeArgs']]]]:
        """
        The List of cloned volumes.
        """
        return pulumi.get(self, "clone_volumes")

    @clone_volumes.setter
    def clone_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PiVolumeCloneCloneVolumeArgs']]]]):
        pulumi.set(self, "clone_volumes", value)

    @_builtins.property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The reason the clone volumes task has failed.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "failure_reason", value)

    @_builtins.property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The completion percentage of the volume clone task.
        """
        return pulumi.get(self, "percent_complete")

    @percent_complete.setter
    def percent_complete(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "percent_complete", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piReplicationEnabled")
    def pi_replication_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the cloned volume should have replication enabled. If no value is provided, it will default to the
        replication status of the source volume(s).
        """
        return pulumi.get(self, "pi_replication_enabled")

    @pi_replication_enabled.setter
    def pi_replication_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_replication_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piTargetStorageTier")
    def pi_target_storage_tier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The storage tier for the cloned volume(s).
        """
        return pulumi.get(self, "pi_target_storage_tier")

    @pi_target_storage_tier.setter
    def pi_target_storage_tier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_target_storage_tier", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeCloneId")
    def pi_volume_clone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_volume_clone_id")

    @pi_volume_clone_id.setter
    def pi_volume_clone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_clone_id", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeCloneName")
    def pi_volume_clone_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The base name of the newly cloned volume(s).
        """
        return pulumi.get(self, "pi_volume_clone_name")

    @pi_volume_clone_name.setter
    def pi_volume_clone_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_clone_name", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeIds")
    def pi_volume_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of volumes to be cloned.
        """
        return pulumi.get(self, "pi_volume_ids")

    @pi_volume_ids.setter
    def pi_volume_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_volume_ids", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the volume clone task.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the volume clone task.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiVolumeCloneTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiVolumeCloneTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piVolumeClone:PiVolumeClone")
class PiVolumeClone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_target_storage_tier: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_volume_clone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_clone_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiVolumeCloneTimeoutsArgs', 'PiVolumeCloneTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiVolumeClone resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.bool] pi_replication_enabled: Indicates whether the cloned volume should have replication enabled. If no value is provided, it will default to the
               replication status of the source volume(s).
        :param pulumi.Input[_builtins.str] pi_target_storage_tier: The storage tier for the cloned volume(s).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.str] pi_volume_clone_name: The base name of the newly cloned volume(s).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_volume_ids: List of volumes to be cloned.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiVolumeCloneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiVolumeClone resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiVolumeCloneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiVolumeCloneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_target_storage_tier: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_volume_clone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_clone_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiVolumeCloneTimeoutsArgs', 'PiVolumeCloneTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiVolumeCloneArgs.__new__(PiVolumeCloneArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_replication_enabled"] = pi_replication_enabled
            __props__.__dict__["pi_target_storage_tier"] = pi_target_storage_tier
            __props__.__dict__["pi_user_tags"] = pi_user_tags
            __props__.__dict__["pi_volume_clone_id"] = pi_volume_clone_id
            if pi_volume_clone_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_volume_clone_name'")
            __props__.__dict__["pi_volume_clone_name"] = pi_volume_clone_name
            if pi_volume_ids is None and not opts.urn:
                raise TypeError("Missing required property 'pi_volume_ids'")
            __props__.__dict__["pi_volume_ids"] = pi_volume_ids
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["clone_volumes"] = None
            __props__.__dict__["failure_reason"] = None
            __props__.__dict__["percent_complete"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["task_id"] = None
        super(PiVolumeClone, __self__).__init__(
            'ibm:index/piVolumeClone:PiVolumeClone',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            clone_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiVolumeCloneCloneVolumeArgs', 'PiVolumeCloneCloneVolumeArgsDict']]]]] = None,
            failure_reason: Optional[pulumi.Input[_builtins.str]] = None,
            percent_complete: Optional[pulumi.Input[_builtins.float]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_target_storage_tier: Optional[pulumi.Input[_builtins.str]] = None,
            pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_volume_clone_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_volume_clone_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            task_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiVolumeCloneTimeoutsArgs', 'PiVolumeCloneTimeoutsArgsDict']]] = None) -> 'PiVolumeClone':
        """
        Get an existing PiVolumeClone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiVolumeCloneCloneVolumeArgs', 'PiVolumeCloneCloneVolumeArgsDict']]]] clone_volumes: The List of cloned volumes.
        :param pulumi.Input[_builtins.str] failure_reason: The reason the clone volumes task has failed.
        :param pulumi.Input[_builtins.float] percent_complete: The completion percentage of the volume clone task.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.bool] pi_replication_enabled: Indicates whether the cloned volume should have replication enabled. If no value is provided, it will default to the
               replication status of the source volume(s).
        :param pulumi.Input[_builtins.str] pi_target_storage_tier: The storage tier for the cloned volume(s).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.str] pi_volume_clone_name: The base name of the newly cloned volume(s).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_volume_ids: List of volumes to be cloned.
        :param pulumi.Input[_builtins.str] status: The status of the volume clone task.
        :param pulumi.Input[_builtins.str] task_id: The ID of the volume clone task.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiVolumeCloneState.__new__(_PiVolumeCloneState)

        __props__.__dict__["clone_volumes"] = clone_volumes
        __props__.__dict__["failure_reason"] = failure_reason
        __props__.__dict__["percent_complete"] = percent_complete
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_replication_enabled"] = pi_replication_enabled
        __props__.__dict__["pi_target_storage_tier"] = pi_target_storage_tier
        __props__.__dict__["pi_user_tags"] = pi_user_tags
        __props__.__dict__["pi_volume_clone_id"] = pi_volume_clone_id
        __props__.__dict__["pi_volume_clone_name"] = pi_volume_clone_name
        __props__.__dict__["pi_volume_ids"] = pi_volume_ids
        __props__.__dict__["status"] = status
        __props__.__dict__["task_id"] = task_id
        __props__.__dict__["timeouts"] = timeouts
        return PiVolumeClone(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cloneVolumes")
    def clone_volumes(self) -> pulumi.Output[Sequence['outputs.PiVolumeCloneCloneVolume']]:
        """
        The List of cloned volumes.
        """
        return pulumi.get(self, "clone_volumes")

    @_builtins.property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> pulumi.Output[_builtins.str]:
        """
        The reason the clone volumes task has failed.
        """
        return pulumi.get(self, "failure_reason")

    @_builtins.property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> pulumi.Output[_builtins.float]:
        """
        The completion percentage of the volume clone task.
        """
        return pulumi.get(self, "percent_complete")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piReplicationEnabled")
    def pi_replication_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates whether the cloned volume should have replication enabled. If no value is provided, it will default to the
        replication status of the source volume(s).
        """
        return pulumi.get(self, "pi_replication_enabled")

    @_builtins.property
    @pulumi.getter(name="piTargetStorageTier")
    def pi_target_storage_tier(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The storage tier for the cloned volume(s).
        """
        return pulumi.get(self, "pi_target_storage_tier")

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @_builtins.property
    @pulumi.getter(name="piVolumeCloneId")
    def pi_volume_clone_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_volume_clone_id")

    @_builtins.property
    @pulumi.getter(name="piVolumeCloneName")
    def pi_volume_clone_name(self) -> pulumi.Output[_builtins.str]:
        """
        The base name of the newly cloned volume(s).
        """
        return pulumi.get(self, "pi_volume_clone_name")

    @_builtins.property
    @pulumi.getter(name="piVolumeIds")
    def pi_volume_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of volumes to be cloned.
        """
        return pulumi.get(self, "pi_volume_ids")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the volume clone task.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the volume clone task.
        """
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiVolumeCloneTimeouts']]:
        return pulumi.get(self, "timeouts")

