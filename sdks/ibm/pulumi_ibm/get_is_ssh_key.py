# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsSshKeyResult',
    'AwaitableGetIsSshKeyResult',
    'get_is_ssh_key',
    'get_is_ssh_key_output',
]

@pulumi.output_type
class GetIsSshKeyResult:
    """
    A collection of values returned by getIsSshKey.
    """
    def __init__(__self__, access_tags=None, created_at=None, crn=None, fingerprint=None, href=None, id=None, length=None, name=None, public_key=None, resource_controller_url=None, resource_crn=None, resource_group=None, resource_group_name=None, resource_name=None, tags=None, type=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if fingerprint and not isinstance(fingerprint, str):
            raise TypeError("Expected argument 'fingerprint' to be a str")
        pulumi.set(__self__, "fingerprint", fingerprint)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if length and not isinstance(length, float):
            raise TypeError("Expected argument 'length' to be a float")
        pulumi.set(__self__, "length", length)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if public_key and not isinstance(public_key, str):
            raise TypeError("Expected argument 'public_key' to be a str")
        pulumi.set(__self__, "public_key", public_key)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn and not isinstance(resource_crn, str):
            raise TypeError("Expected argument 'resource_crn' to be a str")
        pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> _builtins.str:
        return pulumi.get(self, "fingerprint")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def length(self) -> _builtins.float:
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> _builtins.str:
        return pulumi.get(self, "public_key")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> _builtins.str:
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetIsSshKeyResult(GetIsSshKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsSshKeyResult(
            access_tags=self.access_tags,
            created_at=self.created_at,
            crn=self.crn,
            fingerprint=self.fingerprint,
            href=self.href,
            id=self.id,
            length=self.length,
            name=self.name,
            public_key=self.public_key,
            resource_controller_url=self.resource_controller_url,
            resource_crn=self.resource_crn,
            resource_group=self.resource_group,
            resource_group_name=self.resource_group_name,
            resource_name=self.resource_name,
            tags=self.tags,
            type=self.type)


def get_is_ssh_key(id: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   resource_group: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsSshKeyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsSshKey:getIsSshKey', __args__, opts=opts, typ=GetIsSshKeyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsSshKeyResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        fingerprint=pulumi.get(__ret__, 'fingerprint'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        length=pulumi.get(__ret__, 'length'),
        name=pulumi.get(__ret__, 'name'),
        public_key=pulumi.get(__ret__, 'public_key'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        resource_crn=pulumi.get(__ret__, 'resource_crn'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))
def get_is_ssh_key_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsSshKeyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsSshKey:getIsSshKey', __args__, opts=opts, typ=GetIsSshKeyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsSshKeyResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        fingerprint=pulumi.get(__response__, 'fingerprint'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        length=pulumi.get(__response__, 'length'),
        name=pulumi.get(__response__, 'name'),
        public_key=pulumi.get(__response__, 'public_key'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        resource_crn=pulumi.get(__response__, 'resource_crn'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_group_name=pulumi.get(__response__, 'resource_group_name'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type')))
