# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAppidPasswordRegexResult',
    'AwaitableGetAppidPasswordRegexResult',
    'get_appid_password_regex',
    'get_appid_password_regex_output',
]

@pulumi.output_type
class GetAppidPasswordRegexResult:
    """
    A collection of values returned by getAppidPasswordRegex.
    """
    def __init__(__self__, base64_encoded_regex=None, error_message=None, id=None, regex=None, tenant_id=None):
        if base64_encoded_regex and not isinstance(base64_encoded_regex, str):
            raise TypeError("Expected argument 'base64_encoded_regex' to be a str")
        pulumi.set(__self__, "base64_encoded_regex", base64_encoded_regex)
        if error_message and not isinstance(error_message, str):
            raise TypeError("Expected argument 'error_message' to be a str")
        pulumi.set(__self__, "error_message", error_message)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if regex and not isinstance(regex, str):
            raise TypeError("Expected argument 'regex' to be a str")
        pulumi.set(__self__, "regex", regex)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="base64EncodedRegex")
    def base64_encoded_regex(self) -> _builtins.str:
        return pulumi.get(self, "base64_encoded_regex")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> _builtins.str:
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> _builtins.str:
        return pulumi.get(self, "regex")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetAppidPasswordRegexResult(GetAppidPasswordRegexResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppidPasswordRegexResult(
            base64_encoded_regex=self.base64_encoded_regex,
            error_message=self.error_message,
            id=self.id,
            regex=self.regex,
            tenant_id=self.tenant_id)


def get_appid_password_regex(id: Optional[_builtins.str] = None,
                             tenant_id: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppidPasswordRegexResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppidPasswordRegex:getAppidPasswordRegex', __args__, opts=opts, typ=GetAppidPasswordRegexResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppidPasswordRegexResult(
        base64_encoded_regex=pulumi.get(__ret__, 'base64_encoded_regex'),
        error_message=pulumi.get(__ret__, 'error_message'),
        id=pulumi.get(__ret__, 'id'),
        regex=pulumi.get(__ret__, 'regex'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_appid_password_regex_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppidPasswordRegexResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppidPasswordRegex:getAppidPasswordRegex', __args__, opts=opts, typ=GetAppidPasswordRegexResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppidPasswordRegexResult(
        base64_encoded_regex=pulumi.get(__response__, 'base64_encoded_regex'),
        error_message=pulumi.get(__response__, 'error_message'),
        id=pulumi.get(__response__, 'id'),
        regex=pulumi.get(__response__, 'regex'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
