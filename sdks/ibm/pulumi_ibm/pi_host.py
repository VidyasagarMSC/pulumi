# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiHostArgs', 'PiHost']

@pulumi.input_type
class PiHostArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_host: pulumi.Input['PiHostPiHostArgs'],
                 pi_host_group_id: pulumi.Input[_builtins.str],
                 pi_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiHostTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiHost resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input['PiHostPiHostArgs'] pi_host: Host to add to a host group.
        :param pulumi.Input[_builtins.str] pi_host_group_id: ID of the host group to which the host should be added.
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_host", pi_host)
        pulumi.set(__self__, "pi_host_group_id", pi_host_group_id)
        if pi_host_id is not None:
            pulumi.set(__self__, "pi_host_id", pi_host_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piHost")
    def pi_host(self) -> pulumi.Input['PiHostPiHostArgs']:
        """
        Host to add to a host group.
        """
        return pulumi.get(self, "pi_host")

    @pi_host.setter
    def pi_host(self, value: pulumi.Input['PiHostPiHostArgs']):
        pulumi.set(self, "pi_host", value)

    @_builtins.property
    @pulumi.getter(name="piHostGroupId")
    def pi_host_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the host group to which the host should be added.
        """
        return pulumi.get(self, "pi_host_group_id")

    @pi_host_group_id.setter
    def pi_host_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_host_group_id", value)

    @_builtins.property
    @pulumi.getter(name="piHostId")
    def pi_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_host_id")

    @pi_host_id.setter
    def pi_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_host_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiHostTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiHostTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiHostState:
    def __init__(__self__, *,
                 capacities: Optional[pulumi.Input[Sequence[pulumi.Input['PiHostCapacityArgs']]]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 host_group: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_host: Optional[pulumi.Input['PiHostPiHostArgs']] = None,
                 pi_host_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 sys_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiHostTimeoutsArgs']] = None,
                 user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering PiHost resources.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[_builtins.str] display_name: Name of the host (chosen by the user).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] host_group: Link to host group resource.
        :param pulumi.Input[_builtins.str] host_id: ID of the host.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input['PiHostPiHostArgs'] pi_host: Host to add to a host group.
        :param pulumi.Input[_builtins.str] pi_host_group_id: ID of the host group to which the host should be added.
        :param pulumi.Input[_builtins.str] state: State of the host (up/down).
        :param pulumi.Input[_builtins.str] status: Status of the host (enabled/disabled).
        :param pulumi.Input[_builtins.str] sys_type: System type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_tags: List of user tags attached to the resource.
        """
        if capacities is not None:
            pulumi.set(__self__, "capacities", capacities)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if host_group is not None:
            pulumi.set(__self__, "host_group", host_group)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_host is not None:
            pulumi.set(__self__, "pi_host", pi_host)
        if pi_host_group_id is not None:
            pulumi.set(__self__, "pi_host_group_id", pi_host_group_id)
        if pi_host_id is not None:
            pulumi.set(__self__, "pi_host_id", pi_host_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sys_type is not None:
            pulumi.set(__self__, "sys_type", sys_type)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if user_tags is not None:
            pulumi.set(__self__, "user_tags", user_tags)

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PiHostCapacityArgs']]]]:
        return pulumi.get(self, "capacities")

    @capacities.setter
    def capacities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PiHostCapacityArgs']]]]):
        pulumi.set(self, "capacities", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the host (chosen by the user).
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter(name="hostGroup")
    def host_group(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Link to host group resource.
        """
        return pulumi.get(self, "host_group")

    @host_group.setter
    def host_group(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_group", value)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the host.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piHost")
    def pi_host(self) -> Optional[pulumi.Input['PiHostPiHostArgs']]:
        """
        Host to add to a host group.
        """
        return pulumi.get(self, "pi_host")

    @pi_host.setter
    def pi_host(self, value: Optional[pulumi.Input['PiHostPiHostArgs']]):
        pulumi.set(self, "pi_host", value)

    @_builtins.property
    @pulumi.getter(name="piHostGroupId")
    def pi_host_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the host group to which the host should be added.
        """
        return pulumi.get(self, "pi_host_group_id")

    @pi_host_group_id.setter
    def pi_host_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_host_group_id", value)

    @_builtins.property
    @pulumi.getter(name="piHostId")
    def pi_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_host_id")

    @pi_host_id.setter
    def pi_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_host_id", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        State of the host (up/down).
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the host (enabled/disabled).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="sysType")
    def sys_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        System type.
        """
        return pulumi.get(self, "sys_type")

    @sys_type.setter
    def sys_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sys_type", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiHostTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiHostTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "user_tags")

    @user_tags.setter
    def user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "user_tags", value)


@pulumi.type_token("ibm:index/piHost:PiHost")
class PiHost(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_host: Optional[pulumi.Input[Union['PiHostPiHostArgs', 'PiHostPiHostArgsDict']]] = None,
                 pi_host_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiHostTimeoutsArgs', 'PiHostTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[Union['PiHostPiHostArgs', 'PiHostPiHostArgsDict']] pi_host: Host to add to a host group.
        :param pulumi.Input[_builtins.str] pi_host_group_id: ID of the host group to which the host should be added.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiHostArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiHostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiHostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_host: Optional[pulumi.Input[Union['PiHostPiHostArgs', 'PiHostPiHostArgsDict']]] = None,
                 pi_host_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiHostTimeoutsArgs', 'PiHostTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiHostArgs.__new__(PiHostArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            if pi_host is None and not opts.urn:
                raise TypeError("Missing required property 'pi_host'")
            __props__.__dict__["pi_host"] = pi_host
            if pi_host_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_host_group_id'")
            __props__.__dict__["pi_host_group_id"] = pi_host_group_id
            __props__.__dict__["pi_host_id"] = pi_host_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["capacities"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["display_name"] = None
            __props__.__dict__["host_group"] = None
            __props__.__dict__["host_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["sys_type"] = None
            __props__.__dict__["user_tags"] = None
        super(PiHost, __self__).__init__(
            'ibm:index/piHost:PiHost',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capacities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiHostCapacityArgs', 'PiHostCapacityArgsDict']]]]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            display_name: Optional[pulumi.Input[_builtins.str]] = None,
            host_group: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            host_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_host: Optional[pulumi.Input[Union['PiHostPiHostArgs', 'PiHostPiHostArgsDict']]] = None,
            pi_host_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_host_id: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            sys_type: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiHostTimeoutsArgs', 'PiHostTimeoutsArgsDict']]] = None,
            user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'PiHost':
        """
        Get an existing PiHost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[_builtins.str] display_name: Name of the host (chosen by the user).
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] host_group: Link to host group resource.
        :param pulumi.Input[_builtins.str] host_id: ID of the host.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[Union['PiHostPiHostArgs', 'PiHostPiHostArgsDict']] pi_host: Host to add to a host group.
        :param pulumi.Input[_builtins.str] pi_host_group_id: ID of the host group to which the host should be added.
        :param pulumi.Input[_builtins.str] state: State of the host (up/down).
        :param pulumi.Input[_builtins.str] status: Status of the host (enabled/disabled).
        :param pulumi.Input[_builtins.str] sys_type: System type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_tags: List of user tags attached to the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiHostState.__new__(_PiHostState)

        __props__.__dict__["capacities"] = capacities
        __props__.__dict__["crn"] = crn
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["host_group"] = host_group
        __props__.__dict__["host_id"] = host_id
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_host"] = pi_host
        __props__.__dict__["pi_host_group_id"] = pi_host_group_id
        __props__.__dict__["pi_host_id"] = pi_host_id
        __props__.__dict__["state"] = state
        __props__.__dict__["status"] = status
        __props__.__dict__["sys_type"] = sys_type
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["user_tags"] = user_tags
        return PiHost(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> pulumi.Output[Sequence['outputs.PiHostCapacity']]:
        return pulumi.get(self, "capacities")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the host (chosen by the user).
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="hostGroup")
    def host_group(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Link to host group resource.
        """
        return pulumi.get(self, "host_group")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the host.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piHost")
    def pi_host(self) -> pulumi.Output['outputs.PiHostPiHost']:
        """
        Host to add to a host group.
        """
        return pulumi.get(self, "pi_host")

    @_builtins.property
    @pulumi.getter(name="piHostGroupId")
    def pi_host_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the host group to which the host should be added.
        """
        return pulumi.get(self, "pi_host_group_id")

    @_builtins.property
    @pulumi.getter(name="piHostId")
    def pi_host_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_host_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        State of the host (up/down).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the host (enabled/disabled).
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="sysType")
    def sys_type(self) -> pulumi.Output[_builtins.str]:
        """
        System type.
        """
        return pulumi.get(self, "sys_type")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiHostTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "user_tags")

