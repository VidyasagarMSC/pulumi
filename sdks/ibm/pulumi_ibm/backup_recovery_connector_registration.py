# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['BackupRecoveryConnectorRegistrationArgs', 'BackupRecoveryConnectorRegistration']

@pulumi.input_type
class BackupRecoveryConnectorRegistrationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[_builtins.str],
                 registration_token: pulumi.Input[_builtins.str],
                 backup_recovery_connector_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a BackupRecoveryConnectorRegistration resource.
        :param pulumi.Input[_builtins.str] access_token: Token required to authenticate to the connector. Token can be obtained using ibm.BackupRecoveryConnectorAccessToken
               resource
        :param pulumi.Input[_builtins.str] registration_token: The registration token.
        :param pulumi.Input[_builtins.float] connector_id: The connector's ID to be used for registration. Two connectors belonging to the same tenant are guaranteed to have
               different IDs.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "registration_token", registration_token)
        if backup_recovery_connector_registration_id is not None:
            pulumi.set(__self__, "backup_recovery_connector_registration_id", backup_recovery_connector_registration_id)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[_builtins.str]:
        """
        Token required to authenticate to the connector. Token can be obtained using ibm.BackupRecoveryConnectorAccessToken
        resource
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "access_token", value)

    @_builtins.property
    @pulumi.getter(name="registrationToken")
    def registration_token(self) -> pulumi.Input[_builtins.str]:
        """
        The registration token.
        """
        return pulumi.get(self, "registration_token")

    @registration_token.setter
    def registration_token(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "registration_token", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryConnectorRegistrationId")
    def backup_recovery_connector_registration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_connector_registration_id")

    @backup_recovery_connector_registration_id.setter
    def backup_recovery_connector_registration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_connector_registration_id", value)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The connector's ID to be used for registration. Two connectors belonging to the same tenant are guaranteed to have
        different IDs.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "connector_id", value)


@pulumi.input_type
class _BackupRecoveryConnectorRegistrationState:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_recovery_connector_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_id: Optional[pulumi.Input[_builtins.float]] = None,
                 registration_token: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupRecoveryConnectorRegistration resources.
        :param pulumi.Input[_builtins.str] access_token: Token required to authenticate to the connector. Token can be obtained using ibm.BackupRecoveryConnectorAccessToken
               resource
        :param pulumi.Input[_builtins.float] connector_id: The connector's ID to be used for registration. Two connectors belonging to the same tenant are guaranteed to have
               different IDs.
        :param pulumi.Input[_builtins.str] registration_token: The registration token.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if backup_recovery_connector_registration_id is not None:
            pulumi.set(__self__, "backup_recovery_connector_registration_id", backup_recovery_connector_registration_id)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if registration_token is not None:
            pulumi.set(__self__, "registration_token", registration_token)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Token required to authenticate to the connector. Token can be obtained using ibm.BackupRecoveryConnectorAccessToken
        resource
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_token", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryConnectorRegistrationId")
    def backup_recovery_connector_registration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_connector_registration_id")

    @backup_recovery_connector_registration_id.setter
    def backup_recovery_connector_registration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_connector_registration_id", value)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The connector's ID to be used for registration. Two connectors belonging to the same tenant are guaranteed to have
        different IDs.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "connector_id", value)

    @_builtins.property
    @pulumi.getter(name="registrationToken")
    def registration_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The registration token.
        """
        return pulumi.get(self, "registration_token")

    @registration_token.setter
    def registration_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "registration_token", value)


@pulumi.type_token("ibm:index/backupRecoveryConnectorRegistration:BackupRecoveryConnectorRegistration")
class BackupRecoveryConnectorRegistration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_recovery_connector_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_id: Optional[pulumi.Input[_builtins.float]] = None,
                 registration_token: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BackupRecoveryConnectorRegistration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_token: Token required to authenticate to the connector. Token can be obtained using ibm.BackupRecoveryConnectorAccessToken
               resource
        :param pulumi.Input[_builtins.float] connector_id: The connector's ID to be used for registration. Two connectors belonging to the same tenant are guaranteed to have
               different IDs.
        :param pulumi.Input[_builtins.str] registration_token: The registration token.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupRecoveryConnectorRegistrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupRecoveryConnectorRegistration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupRecoveryConnectorRegistrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupRecoveryConnectorRegistrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_recovery_connector_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_id: Optional[pulumi.Input[_builtins.float]] = None,
                 registration_token: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupRecoveryConnectorRegistrationArgs.__new__(BackupRecoveryConnectorRegistrationArgs)

            if access_token is None and not opts.urn:
                raise TypeError("Missing required property 'access_token'")
            __props__.__dict__["access_token"] = None if access_token is None else pulumi.Output.secret(access_token)
            __props__.__dict__["backup_recovery_connector_registration_id"] = backup_recovery_connector_registration_id
            __props__.__dict__["connector_id"] = connector_id
            if registration_token is None and not opts.urn:
                raise TypeError("Missing required property 'registration_token'")
            __props__.__dict__["registration_token"] = registration_token
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(BackupRecoveryConnectorRegistration, __self__).__init__(
            'ibm:index/backupRecoveryConnectorRegistration:BackupRecoveryConnectorRegistration',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_token: Optional[pulumi.Input[_builtins.str]] = None,
            backup_recovery_connector_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
            connector_id: Optional[pulumi.Input[_builtins.float]] = None,
            registration_token: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupRecoveryConnectorRegistration':
        """
        Get an existing BackupRecoveryConnectorRegistration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_token: Token required to authenticate to the connector. Token can be obtained using ibm.BackupRecoveryConnectorAccessToken
               resource
        :param pulumi.Input[_builtins.float] connector_id: The connector's ID to be used for registration. Two connectors belonging to the same tenant are guaranteed to have
               different IDs.
        :param pulumi.Input[_builtins.str] registration_token: The registration token.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupRecoveryConnectorRegistrationState.__new__(_BackupRecoveryConnectorRegistrationState)

        __props__.__dict__["access_token"] = access_token
        __props__.__dict__["backup_recovery_connector_registration_id"] = backup_recovery_connector_registration_id
        __props__.__dict__["connector_id"] = connector_id
        __props__.__dict__["registration_token"] = registration_token
        return BackupRecoveryConnectorRegistration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Output[_builtins.str]:
        """
        Token required to authenticate to the connector. Token can be obtained using ibm.BackupRecoveryConnectorAccessToken
        resource
        """
        return pulumi.get(self, "access_token")

    @_builtins.property
    @pulumi.getter(name="backupRecoveryConnectorRegistrationId")
    def backup_recovery_connector_registration_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "backup_recovery_connector_registration_id")

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The connector's ID to be used for registration. Two connectors belonging to the same tenant are guaranteed to have
        different IDs.
        """
        return pulumi.get(self, "connector_id")

    @_builtins.property
    @pulumi.getter(name="registrationToken")
    def registration_token(self) -> pulumi.Output[_builtins.str]:
        """
        The registration token.
        """
        return pulumi.get(self, "registration_token")

