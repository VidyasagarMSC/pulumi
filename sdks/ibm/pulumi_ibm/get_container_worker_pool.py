# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetContainerWorkerPoolResult',
    'AwaitableGetContainerWorkerPoolResult',
    'get_container_worker_pool',
    'get_container_worker_pool_output',
]

@pulumi.output_type
class GetContainerWorkerPoolResult:
    """
    A collection of values returned by getContainerWorkerPool.
    """
    def __init__(__self__, autoscale_enabled=None, cluster=None, disk_encryption=None, hardware=None, id=None, labels=None, machine_type=None, operating_system=None, resource_group_id=None, size_per_zone=None, state=None, worker_pool_name=None, zones=None):
        if autoscale_enabled and not isinstance(autoscale_enabled, bool):
            raise TypeError("Expected argument 'autoscale_enabled' to be a bool")
        pulumi.set(__self__, "autoscale_enabled", autoscale_enabled)
        if cluster and not isinstance(cluster, str):
            raise TypeError("Expected argument 'cluster' to be a str")
        pulumi.set(__self__, "cluster", cluster)
        if disk_encryption and not isinstance(disk_encryption, bool):
            raise TypeError("Expected argument 'disk_encryption' to be a bool")
        pulumi.set(__self__, "disk_encryption", disk_encryption)
        if hardware and not isinstance(hardware, str):
            raise TypeError("Expected argument 'hardware' to be a str")
        pulumi.set(__self__, "hardware", hardware)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if machine_type and not isinstance(machine_type, str):
            raise TypeError("Expected argument 'machine_type' to be a str")
        pulumi.set(__self__, "machine_type", machine_type)
        if operating_system and not isinstance(operating_system, str):
            raise TypeError("Expected argument 'operating_system' to be a str")
        pulumi.set(__self__, "operating_system", operating_system)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if size_per_zone and not isinstance(size_per_zone, float):
            raise TypeError("Expected argument 'size_per_zone' to be a float")
        pulumi.set(__self__, "size_per_zone", size_per_zone)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if worker_pool_name and not isinstance(worker_pool_name, str):
            raise TypeError("Expected argument 'worker_pool_name' to be a str")
        pulumi.set(__self__, "worker_pool_name", worker_pool_name)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="autoscaleEnabled")
    def autoscale_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "autoscale_enabled")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> _builtins.str:
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> _builtins.bool:
        return pulumi.get(self, "disk_encryption")

    @_builtins.property
    @pulumi.getter
    def hardware(self) -> _builtins.str:
        return pulumi.get(self, "hardware")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> _builtins.str:
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> _builtins.str:
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="sizePerZone")
    def size_per_zone(self) -> _builtins.float:
        return pulumi.get(self, "size_per_zone")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="workerPoolName")
    def worker_pool_name(self) -> _builtins.str:
        return pulumi.get(self, "worker_pool_name")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetContainerWorkerPoolZoneResult']:
        return pulumi.get(self, "zones")


class AwaitableGetContainerWorkerPoolResult(GetContainerWorkerPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerWorkerPoolResult(
            autoscale_enabled=self.autoscale_enabled,
            cluster=self.cluster,
            disk_encryption=self.disk_encryption,
            hardware=self.hardware,
            id=self.id,
            labels=self.labels,
            machine_type=self.machine_type,
            operating_system=self.operating_system,
            resource_group_id=self.resource_group_id,
            size_per_zone=self.size_per_zone,
            state=self.state,
            worker_pool_name=self.worker_pool_name,
            zones=self.zones)


def get_container_worker_pool(cluster: Optional[_builtins.str] = None,
                              id: Optional[_builtins.str] = None,
                              worker_pool_name: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerWorkerPoolResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['workerPoolName'] = worker_pool_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerWorkerPool:getContainerWorkerPool', __args__, opts=opts, typ=GetContainerWorkerPoolResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerWorkerPoolResult(
        autoscale_enabled=pulumi.get(__ret__, 'autoscale_enabled'),
        cluster=pulumi.get(__ret__, 'cluster'),
        disk_encryption=pulumi.get(__ret__, 'disk_encryption'),
        hardware=pulumi.get(__ret__, 'hardware'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        machine_type=pulumi.get(__ret__, 'machine_type'),
        operating_system=pulumi.get(__ret__, 'operating_system'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        size_per_zone=pulumi.get(__ret__, 'size_per_zone'),
        state=pulumi.get(__ret__, 'state'),
        worker_pool_name=pulumi.get(__ret__, 'worker_pool_name'),
        zones=pulumi.get(__ret__, 'zones'))
def get_container_worker_pool_output(cluster: Optional[pulumi.Input[_builtins.str]] = None,
                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     worker_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerWorkerPoolResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['workerPoolName'] = worker_pool_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerWorkerPool:getContainerWorkerPool', __args__, opts=opts, typ=GetContainerWorkerPoolResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerWorkerPoolResult(
        autoscale_enabled=pulumi.get(__response__, 'autoscale_enabled'),
        cluster=pulumi.get(__response__, 'cluster'),
        disk_encryption=pulumi.get(__response__, 'disk_encryption'),
        hardware=pulumi.get(__response__, 'hardware'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        machine_type=pulumi.get(__response__, 'machine_type'),
        operating_system=pulumi.get(__response__, 'operating_system'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        size_per_zone=pulumi.get(__response__, 'size_per_zone'),
        state=pulumi.get(__response__, 'state'),
        worker_pool_name=pulumi.get(__response__, 'worker_pool_name'),
        zones=pulumi.get(__response__, 'zones')))
