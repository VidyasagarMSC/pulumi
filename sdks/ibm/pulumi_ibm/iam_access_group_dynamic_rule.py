# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IamAccessGroupDynamicRuleArgs', 'IamAccessGroupDynamicRule']

@pulumi.input_type
class IamAccessGroupDynamicRuleArgs:
    def __init__(__self__, *,
                 access_group_id: pulumi.Input[_builtins.str],
                 conditions: pulumi.Input[Sequence[pulumi.Input['IamAccessGroupDynamicRuleConditionArgs']]],
                 expiration: pulumi.Input[_builtins.float],
                 identity_provider: pulumi.Input[_builtins.str],
                 iam_access_group_dynamic_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamAccessGroupDynamicRule resource.
        :param pulumi.Input[_builtins.str] access_group_id: Unique identifier of the access group
        :param pulumi.Input[Sequence[pulumi.Input['IamAccessGroupDynamicRuleConditionArgs']]] conditions: conditions info
        :param pulumi.Input[_builtins.float] expiration: The expiration in hours
        :param pulumi.Input[_builtins.str] identity_provider: The realm name or identity proivider url
        :param pulumi.Input[_builtins.str] name: The name of the Rule
        """
        pulumi.set(__self__, "access_group_id", access_group_id)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "expiration", expiration)
        pulumi.set(__self__, "identity_provider", identity_provider)
        if iam_access_group_dynamic_rule_id is not None:
            pulumi.set(__self__, "iam_access_group_dynamic_rule_id", iam_access_group_dynamic_rule_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="accessGroupId")
    def access_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Unique identifier of the access group
        """
        return pulumi.get(self, "access_group_id")

    @access_group_id.setter
    def access_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "access_group_id", value)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['IamAccessGroupDynamicRuleConditionArgs']]]:
        """
        conditions info
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['IamAccessGroupDynamicRuleConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def expiration(self) -> pulumi.Input[_builtins.float]:
        """
        The expiration in hours
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "expiration", value)

    @_builtins.property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> pulumi.Input[_builtins.str]:
        """
        The realm name or identity proivider url
        """
        return pulumi.get(self, "identity_provider")

    @identity_provider.setter
    def identity_provider(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "identity_provider", value)

    @_builtins.property
    @pulumi.getter(name="iamAccessGroupDynamicRuleId")
    def iam_access_group_dynamic_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_access_group_dynamic_rule_id")

    @iam_access_group_dynamic_rule_id.setter
    def iam_access_group_dynamic_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_access_group_dynamic_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _IamAccessGroupDynamicRuleState:
    def __init__(__self__, *,
                 access_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['IamAccessGroupDynamicRuleConditionArgs']]]] = None,
                 expiration: Optional[pulumi.Input[_builtins.float]] = None,
                 iam_access_group_dynamic_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamAccessGroupDynamicRule resources.
        :param pulumi.Input[_builtins.str] access_group_id: Unique identifier of the access group
        :param pulumi.Input[Sequence[pulumi.Input['IamAccessGroupDynamicRuleConditionArgs']]] conditions: conditions info
        :param pulumi.Input[_builtins.float] expiration: The expiration in hours
        :param pulumi.Input[_builtins.str] identity_provider: The realm name or identity proivider url
        :param pulumi.Input[_builtins.str] name: The name of the Rule
        :param pulumi.Input[_builtins.str] rule_id: id of the rule
        """
        if access_group_id is not None:
            pulumi.set(__self__, "access_group_id", access_group_id)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if iam_access_group_dynamic_rule_id is not None:
            pulumi.set(__self__, "iam_access_group_dynamic_rule_id", iam_access_group_dynamic_rule_id)
        if identity_provider is not None:
            pulumi.set(__self__, "identity_provider", identity_provider)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)

    @_builtins.property
    @pulumi.getter(name="accessGroupId")
    def access_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier of the access group
        """
        return pulumi.get(self, "access_group_id")

    @access_group_id.setter
    def access_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_group_id", value)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamAccessGroupDynamicRuleConditionArgs']]]]:
        """
        conditions info
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamAccessGroupDynamicRuleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The expiration in hours
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "expiration", value)

    @_builtins.property
    @pulumi.getter(name="iamAccessGroupDynamicRuleId")
    def iam_access_group_dynamic_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_access_group_dynamic_rule_id")

    @iam_access_group_dynamic_rule_id.setter
    def iam_access_group_dynamic_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_access_group_dynamic_rule_id", value)

    @_builtins.property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The realm name or identity proivider url
        """
        return pulumi.get(self, "identity_provider")

    @identity_provider.setter
    def identity_provider(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identity_provider", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        id of the rule
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_id", value)


@pulumi.type_token("ibm:index/iamAccessGroupDynamicRule:IamAccessGroupDynamicRule")
class IamAccessGroupDynamicRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAccessGroupDynamicRuleConditionArgs', 'IamAccessGroupDynamicRuleConditionArgsDict']]]]] = None,
                 expiration: Optional[pulumi.Input[_builtins.float]] = None,
                 iam_access_group_dynamic_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IamAccessGroupDynamicRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_group_id: Unique identifier of the access group
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamAccessGroupDynamicRuleConditionArgs', 'IamAccessGroupDynamicRuleConditionArgsDict']]]] conditions: conditions info
        :param pulumi.Input[_builtins.float] expiration: The expiration in hours
        :param pulumi.Input[_builtins.str] identity_provider: The realm name or identity proivider url
        :param pulumi.Input[_builtins.str] name: The name of the Rule
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamAccessGroupDynamicRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamAccessGroupDynamicRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamAccessGroupDynamicRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamAccessGroupDynamicRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAccessGroupDynamicRuleConditionArgs', 'IamAccessGroupDynamicRuleConditionArgsDict']]]]] = None,
                 expiration: Optional[pulumi.Input[_builtins.float]] = None,
                 iam_access_group_dynamic_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamAccessGroupDynamicRuleArgs.__new__(IamAccessGroupDynamicRuleArgs)

            if access_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'access_group_id'")
            __props__.__dict__["access_group_id"] = access_group_id
            if conditions is None and not opts.urn:
                raise TypeError("Missing required property 'conditions'")
            __props__.__dict__["conditions"] = conditions
            if expiration is None and not opts.urn:
                raise TypeError("Missing required property 'expiration'")
            __props__.__dict__["expiration"] = expiration
            __props__.__dict__["iam_access_group_dynamic_rule_id"] = iam_access_group_dynamic_rule_id
            if identity_provider is None and not opts.urn:
                raise TypeError("Missing required property 'identity_provider'")
            __props__.__dict__["identity_provider"] = identity_provider
            __props__.__dict__["name"] = name
            __props__.__dict__["rule_id"] = None
        super(IamAccessGroupDynamicRule, __self__).__init__(
            'ibm:index/iamAccessGroupDynamicRule:IamAccessGroupDynamicRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAccessGroupDynamicRuleConditionArgs', 'IamAccessGroupDynamicRuleConditionArgsDict']]]]] = None,
            expiration: Optional[pulumi.Input[_builtins.float]] = None,
            iam_access_group_dynamic_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            identity_provider: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            rule_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamAccessGroupDynamicRule':
        """
        Get an existing IamAccessGroupDynamicRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_group_id: Unique identifier of the access group
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamAccessGroupDynamicRuleConditionArgs', 'IamAccessGroupDynamicRuleConditionArgsDict']]]] conditions: conditions info
        :param pulumi.Input[_builtins.float] expiration: The expiration in hours
        :param pulumi.Input[_builtins.str] identity_provider: The realm name or identity proivider url
        :param pulumi.Input[_builtins.str] name: The name of the Rule
        :param pulumi.Input[_builtins.str] rule_id: id of the rule
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamAccessGroupDynamicRuleState.__new__(_IamAccessGroupDynamicRuleState)

        __props__.__dict__["access_group_id"] = access_group_id
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["expiration"] = expiration
        __props__.__dict__["iam_access_group_dynamic_rule_id"] = iam_access_group_dynamic_rule_id
        __props__.__dict__["identity_provider"] = identity_provider
        __props__.__dict__["name"] = name
        __props__.__dict__["rule_id"] = rule_id
        return IamAccessGroupDynamicRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessGroupId")
    def access_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier of the access group
        """
        return pulumi.get(self, "access_group_id")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Sequence['outputs.IamAccessGroupDynamicRuleCondition']]:
        """
        conditions info
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter
    def expiration(self) -> pulumi.Output[_builtins.float]:
        """
        The expiration in hours
        """
        return pulumi.get(self, "expiration")

    @_builtins.property
    @pulumi.getter(name="iamAccessGroupDynamicRuleId")
    def iam_access_group_dynamic_rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_access_group_dynamic_rule_id")

    @_builtins.property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> pulumi.Output[_builtins.str]:
        """
        The realm name or identity proivider url
        """
        return pulumi.get(self, "identity_provider")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the Rule
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[_builtins.str]:
        """
        id of the rule
        """
        return pulumi.get(self, "rule_id")

