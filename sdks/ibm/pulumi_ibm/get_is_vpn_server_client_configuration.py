# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsVpnServerClientConfigurationResult',
    'AwaitableGetIsVpnServerClientConfigurationResult',
    'get_is_vpn_server_client_configuration',
    'get_is_vpn_server_client_configuration_output',
]

@pulumi.output_type
class GetIsVpnServerClientConfigurationResult:
    """
    A collection of values returned by getIsVpnServerClientConfiguration.
    """
    def __init__(__self__, file_path=None, id=None, vpn_server=None, vpn_server_client_configuration=None):
        if file_path and not isinstance(file_path, str):
            raise TypeError("Expected argument 'file_path' to be a str")
        pulumi.set(__self__, "file_path", file_path)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if vpn_server and not isinstance(vpn_server, str):
            raise TypeError("Expected argument 'vpn_server' to be a str")
        pulumi.set(__self__, "vpn_server", vpn_server)
        if vpn_server_client_configuration and not isinstance(vpn_server_client_configuration, str):
            raise TypeError("Expected argument 'vpn_server_client_configuration' to be a str")
        pulumi.set(__self__, "vpn_server_client_configuration", vpn_server_client_configuration)

    @_builtins.property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "file_path")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="vpnServer")
    def vpn_server(self) -> _builtins.str:
        return pulumi.get(self, "vpn_server")

    @_builtins.property
    @pulumi.getter(name="vpnServerClientConfiguration")
    def vpn_server_client_configuration(self) -> _builtins.str:
        return pulumi.get(self, "vpn_server_client_configuration")


class AwaitableGetIsVpnServerClientConfigurationResult(GetIsVpnServerClientConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpnServerClientConfigurationResult(
            file_path=self.file_path,
            id=self.id,
            vpn_server=self.vpn_server,
            vpn_server_client_configuration=self.vpn_server_client_configuration)


def get_is_vpn_server_client_configuration(file_path: Optional[_builtins.str] = None,
                                           id: Optional[_builtins.str] = None,
                                           vpn_server: Optional[_builtins.str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpnServerClientConfigurationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filePath'] = file_path
    __args__['id'] = id
    __args__['vpnServer'] = vpn_server
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpnServerClientConfiguration:getIsVpnServerClientConfiguration', __args__, opts=opts, typ=GetIsVpnServerClientConfigurationResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpnServerClientConfigurationResult(
        file_path=pulumi.get(__ret__, 'file_path'),
        id=pulumi.get(__ret__, 'id'),
        vpn_server=pulumi.get(__ret__, 'vpn_server'),
        vpn_server_client_configuration=pulumi.get(__ret__, 'vpn_server_client_configuration'))
def get_is_vpn_server_client_configuration_output(file_path: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  vpn_server: Optional[pulumi.Input[_builtins.str]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpnServerClientConfigurationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filePath'] = file_path
    __args__['id'] = id
    __args__['vpnServer'] = vpn_server
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpnServerClientConfiguration:getIsVpnServerClientConfiguration', __args__, opts=opts, typ=GetIsVpnServerClientConfigurationResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpnServerClientConfigurationResult(
        file_path=pulumi.get(__response__, 'file_path'),
        id=pulumi.get(__response__, 'id'),
        vpn_server=pulumi.get(__response__, 'vpn_server'),
        vpn_server_client_configuration=pulumi.get(__response__, 'vpn_server_client_configuration')))
