# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsLbListenerPolicyRuleResult',
    'AwaitableGetIsLbListenerPolicyRuleResult',
    'get_is_lb_listener_policy_rule',
    'get_is_lb_listener_policy_rule_output',
]

@pulumi.output_type
class GetIsLbListenerPolicyRuleResult:
    """
    A collection of values returned by getIsLbListenerPolicyRule.
    """
    def __init__(__self__, condition=None, created_at=None, field=None, href=None, id=None, lb=None, listener=None, policy=None, provisioning_status=None, rule=None, type=None, value=None):
        if condition and not isinstance(condition, str):
            raise TypeError("Expected argument 'condition' to be a str")
        pulumi.set(__self__, "condition", condition)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if field and not isinstance(field, str):
            raise TypeError("Expected argument 'field' to be a str")
        pulumi.set(__self__, "field", field)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lb and not isinstance(lb, str):
            raise TypeError("Expected argument 'lb' to be a str")
        pulumi.set(__self__, "lb", lb)
        if listener and not isinstance(listener, str):
            raise TypeError("Expected argument 'listener' to be a str")
        pulumi.set(__self__, "listener", listener)
        if policy and not isinstance(policy, str):
            raise TypeError("Expected argument 'policy' to be a str")
        pulumi.set(__self__, "policy", policy)
        if provisioning_status and not isinstance(provisioning_status, str):
            raise TypeError("Expected argument 'provisioning_status' to be a str")
        pulumi.set(__self__, "provisioning_status", provisioning_status)
        if rule and not isinstance(rule, str):
            raise TypeError("Expected argument 'rule' to be a str")
        pulumi.set(__self__, "rule", rule)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> _builtins.str:
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def field(self) -> _builtins.str:
        return pulumi.get(self, "field")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lb(self) -> _builtins.str:
        return pulumi.get(self, "lb")

    @_builtins.property
    @pulumi.getter
    def listener(self) -> _builtins.str:
        return pulumi.get(self, "listener")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> _builtins.str:
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> _builtins.str:
        return pulumi.get(self, "provisioning_status")

    @_builtins.property
    @pulumi.getter
    def rule(self) -> _builtins.str:
        return pulumi.get(self, "rule")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


class AwaitableGetIsLbListenerPolicyRuleResult(GetIsLbListenerPolicyRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsLbListenerPolicyRuleResult(
            condition=self.condition,
            created_at=self.created_at,
            field=self.field,
            href=self.href,
            id=self.id,
            lb=self.lb,
            listener=self.listener,
            policy=self.policy,
            provisioning_status=self.provisioning_status,
            rule=self.rule,
            type=self.type,
            value=self.value)


def get_is_lb_listener_policy_rule(id: Optional[_builtins.str] = None,
                                   lb: Optional[_builtins.str] = None,
                                   listener: Optional[_builtins.str] = None,
                                   policy: Optional[_builtins.str] = None,
                                   rule: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsLbListenerPolicyRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    __args__['listener'] = listener
    __args__['policy'] = policy
    __args__['rule'] = rule
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsLbListenerPolicyRule:getIsLbListenerPolicyRule', __args__, opts=opts, typ=GetIsLbListenerPolicyRuleResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsLbListenerPolicyRuleResult(
        condition=pulumi.get(__ret__, 'condition'),
        created_at=pulumi.get(__ret__, 'created_at'),
        field=pulumi.get(__ret__, 'field'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        lb=pulumi.get(__ret__, 'lb'),
        listener=pulumi.get(__ret__, 'listener'),
        policy=pulumi.get(__ret__, 'policy'),
        provisioning_status=pulumi.get(__ret__, 'provisioning_status'),
        rule=pulumi.get(__ret__, 'rule'),
        type=pulumi.get(__ret__, 'type'),
        value=pulumi.get(__ret__, 'value'))
def get_is_lb_listener_policy_rule_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          lb: Optional[pulumi.Input[_builtins.str]] = None,
                                          listener: Optional[pulumi.Input[_builtins.str]] = None,
                                          policy: Optional[pulumi.Input[_builtins.str]] = None,
                                          rule: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsLbListenerPolicyRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    __args__['listener'] = listener
    __args__['policy'] = policy
    __args__['rule'] = rule
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsLbListenerPolicyRule:getIsLbListenerPolicyRule', __args__, opts=opts, typ=GetIsLbListenerPolicyRuleResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsLbListenerPolicyRuleResult(
        condition=pulumi.get(__response__, 'condition'),
        created_at=pulumi.get(__response__, 'created_at'),
        field=pulumi.get(__response__, 'field'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        lb=pulumi.get(__response__, 'lb'),
        listener=pulumi.get(__response__, 'listener'),
        policy=pulumi.get(__response__, 'policy'),
        provisioning_status=pulumi.get(__response__, 'provisioning_status'),
        rule=pulumi.get(__response__, 'rule'),
        type=pulumi.get(__response__, 'type'),
        value=pulumi.get(__response__, 'value')))
