# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsSubnetRoutingTableAttachmentArgs', 'IsSubnetRoutingTableAttachment']

@pulumi.input_type
class IsSubnetRoutingTableAttachmentArgs:
    def __init__(__self__, *,
                 subnet: pulumi.Input[_builtins.str],
                 is_subnet_routing_table_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsSubnetRoutingTableAttachmentTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsSubnetRoutingTableAttachment resource.
        :param pulumi.Input[_builtins.str] subnet: The subnet identifier
        :param pulumi.Input[_builtins.str] routing_table: The unique identifier of routing table
        :param pulumi.Input[_builtins.str] routing_table_crn: The crn of routing table
        """
        pulumi.set(__self__, "subnet", subnet)
        if is_subnet_routing_table_attachment_id is not None:
            pulumi.set(__self__, "is_subnet_routing_table_attachment_id", is_subnet_routing_table_attachment_id)
        if routing_table is not None:
            pulumi.set(__self__, "routing_table", routing_table)
        if routing_table_crn is not None:
            pulumi.set(__self__, "routing_table_crn", routing_table_crn)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[_builtins.str]:
        """
        The subnet identifier
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter(name="isSubnetRoutingTableAttachmentId")
    def is_subnet_routing_table_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_subnet_routing_table_attachment_id")

    @is_subnet_routing_table_attachment_id.setter
    def is_subnet_routing_table_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_subnet_routing_table_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of routing table
        """
        return pulumi.get(self, "routing_table")

    @routing_table.setter
    def routing_table(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_table", value)

    @_builtins.property
    @pulumi.getter(name="routingTableCrn")
    def routing_table_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of routing table
        """
        return pulumi.get(self, "routing_table_crn")

    @routing_table_crn.setter
    def routing_table_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_table_crn", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsSubnetRoutingTableAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsSubnetRoutingTableAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsSubnetRoutingTableAttachmentState:
    def __init__(__self__, *,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_subnet_routing_table_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input['IsSubnetRoutingTableAttachmentResourceGroupArgs']]]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 route_direct_link_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_transit_gateway_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_vpc_zone_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['IsSubnetRoutingTableAttachmentRouteArgs']]]] = None,
                 routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['IsSubnetRoutingTableAttachmentSubnetArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['IsSubnetRoutingTableAttachmentTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering IsSubnetRoutingTableAttachment resources.
        :param pulumi.Input[_builtins.bool] is_default: Indicates whether this is the default routing table for this VPC
        :param pulumi.Input[_builtins.str] lifecycle_state: he lifecycle state of the routing table [ deleting, failed, pending, stable, suspended, updating, waiting ]
        :param pulumi.Input[_builtins.str] name: The name of the routing table
        :param pulumi.Input[Sequence[pulumi.Input['IsSubnetRoutingTableAttachmentResourceGroupArgs']]] resource_groups: The resource group for this volume.
        :param pulumi.Input[_builtins.str] resource_type: The resource type
        :param pulumi.Input[_builtins.bool] route_direct_link_ingress: If true, this routing table will be used to route traffic that originates from Direct Link to this VPC.
        :param pulumi.Input[_builtins.bool] route_transit_gateway_ingress: If true, this routing table will be used to route traffic that originates from Transit Gateway to this VPC.
        :param pulumi.Input[_builtins.bool] route_vpc_zone_ingress: If true, this routing table will be used to route traffic that originates from subnets in other zones in this VPC.
        :param pulumi.Input[_builtins.str] routing_table: The unique identifier of routing table
        :param pulumi.Input[_builtins.str] routing_table_crn: The crn of routing table
        :param pulumi.Input[_builtins.str] subnet: The subnet identifier
        """
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_subnet_routing_table_attachment_id is not None:
            pulumi.set(__self__, "is_subnet_routing_table_attachment_id", is_subnet_routing_table_attachment_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_groups is not None:
            pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if route_direct_link_ingress is not None:
            pulumi.set(__self__, "route_direct_link_ingress", route_direct_link_ingress)
        if route_transit_gateway_ingress is not None:
            pulumi.set(__self__, "route_transit_gateway_ingress", route_transit_gateway_ingress)
        if route_vpc_zone_ingress is not None:
            pulumi.set(__self__, "route_vpc_zone_ingress", route_vpc_zone_ingress)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if routing_table is not None:
            pulumi.set(__self__, "routing_table", routing_table)
        if routing_table_crn is not None:
            pulumi.set(__self__, "routing_table_crn", routing_table_crn)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether this is the default routing table for this VPC
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter(name="isSubnetRoutingTableAttachmentId")
    def is_subnet_routing_table_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_subnet_routing_table_attachment_id")

    @is_subnet_routing_table_attachment_id.setter
    def is_subnet_routing_table_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_subnet_routing_table_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        he lifecycle state of the routing table [ deleting, failed, pending, stable, suspended, updating, waiting ]
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the routing table
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsSubnetRoutingTableAttachmentResourceGroupArgs']]]]:
        """
        The resource group for this volume.
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsSubnetRoutingTableAttachmentResourceGroupArgs']]]]):
        pulumi.set(self, "resource_groups", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="routeDirectLinkIngress")
    def route_direct_link_ingress(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, this routing table will be used to route traffic that originates from Direct Link to this VPC.
        """
        return pulumi.get(self, "route_direct_link_ingress")

    @route_direct_link_ingress.setter
    def route_direct_link_ingress(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_direct_link_ingress", value)

    @_builtins.property
    @pulumi.getter(name="routeTransitGatewayIngress")
    def route_transit_gateway_ingress(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, this routing table will be used to route traffic that originates from Transit Gateway to this VPC.
        """
        return pulumi.get(self, "route_transit_gateway_ingress")

    @route_transit_gateway_ingress.setter
    def route_transit_gateway_ingress(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_transit_gateway_ingress", value)

    @_builtins.property
    @pulumi.getter(name="routeVpcZoneIngress")
    def route_vpc_zone_ingress(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, this routing table will be used to route traffic that originates from subnets in other zones in this VPC.
        """
        return pulumi.get(self, "route_vpc_zone_ingress")

    @route_vpc_zone_ingress.setter
    def route_vpc_zone_ingress(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_vpc_zone_ingress", value)

    @_builtins.property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsSubnetRoutingTableAttachmentRouteArgs']]]]:
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsSubnetRoutingTableAttachmentRouteArgs']]]]):
        pulumi.set(self, "routes", value)

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of routing table
        """
        return pulumi.get(self, "routing_table")

    @routing_table.setter
    def routing_table(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_table", value)

    @_builtins.property
    @pulumi.getter(name="routingTableCrn")
    def routing_table_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of routing table
        """
        return pulumi.get(self, "routing_table_crn")

    @routing_table_crn.setter
    def routing_table_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_table_crn", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subnet identifier
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsSubnetRoutingTableAttachmentSubnetArgs']]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsSubnetRoutingTableAttachmentSubnetArgs']]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsSubnetRoutingTableAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsSubnetRoutingTableAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/isSubnetRoutingTableAttachment:IsSubnetRoutingTableAttachment")
class IsSubnetRoutingTableAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_subnet_routing_table_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsSubnetRoutingTableAttachmentTimeoutsArgs', 'IsSubnetRoutingTableAttachmentTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsSubnetRoutingTableAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] routing_table: The unique identifier of routing table
        :param pulumi.Input[_builtins.str] routing_table_crn: The crn of routing table
        :param pulumi.Input[_builtins.str] subnet: The subnet identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsSubnetRoutingTableAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsSubnetRoutingTableAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsSubnetRoutingTableAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsSubnetRoutingTableAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_subnet_routing_table_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsSubnetRoutingTableAttachmentTimeoutsArgs', 'IsSubnetRoutingTableAttachmentTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsSubnetRoutingTableAttachmentArgs.__new__(IsSubnetRoutingTableAttachmentArgs)

            __props__.__dict__["is_subnet_routing_table_attachment_id"] = is_subnet_routing_table_attachment_id
            __props__.__dict__["routing_table"] = routing_table
            __props__.__dict__["routing_table_crn"] = routing_table_crn
            if subnet is None and not opts.urn:
                raise TypeError("Missing required property 'subnet'")
            __props__.__dict__["subnet"] = subnet
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["is_default"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["resource_groups"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["route_direct_link_ingress"] = None
            __props__.__dict__["route_transit_gateway_ingress"] = None
            __props__.__dict__["route_vpc_zone_ingress"] = None
            __props__.__dict__["routes"] = None
            __props__.__dict__["subnets"] = None
        super(IsSubnetRoutingTableAttachment, __self__).__init__(
            'ibm:index/isSubnetRoutingTableAttachment:IsSubnetRoutingTableAttachment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            is_default: Optional[pulumi.Input[_builtins.bool]] = None,
            is_subnet_routing_table_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSubnetRoutingTableAttachmentResourceGroupArgs', 'IsSubnetRoutingTableAttachmentResourceGroupArgsDict']]]]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            route_direct_link_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
            route_transit_gateway_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
            route_vpc_zone_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
            routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSubnetRoutingTableAttachmentRouteArgs', 'IsSubnetRoutingTableAttachmentRouteArgsDict']]]]] = None,
            routing_table: Optional[pulumi.Input[_builtins.str]] = None,
            routing_table_crn: Optional[pulumi.Input[_builtins.str]] = None,
            subnet: Optional[pulumi.Input[_builtins.str]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSubnetRoutingTableAttachmentSubnetArgs', 'IsSubnetRoutingTableAttachmentSubnetArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsSubnetRoutingTableAttachmentTimeoutsArgs', 'IsSubnetRoutingTableAttachmentTimeoutsArgsDict']]] = None) -> 'IsSubnetRoutingTableAttachment':
        """
        Get an existing IsSubnetRoutingTableAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] is_default: Indicates whether this is the default routing table for this VPC
        :param pulumi.Input[_builtins.str] lifecycle_state: he lifecycle state of the routing table [ deleting, failed, pending, stable, suspended, updating, waiting ]
        :param pulumi.Input[_builtins.str] name: The name of the routing table
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsSubnetRoutingTableAttachmentResourceGroupArgs', 'IsSubnetRoutingTableAttachmentResourceGroupArgsDict']]]] resource_groups: The resource group for this volume.
        :param pulumi.Input[_builtins.str] resource_type: The resource type
        :param pulumi.Input[_builtins.bool] route_direct_link_ingress: If true, this routing table will be used to route traffic that originates from Direct Link to this VPC.
        :param pulumi.Input[_builtins.bool] route_transit_gateway_ingress: If true, this routing table will be used to route traffic that originates from Transit Gateway to this VPC.
        :param pulumi.Input[_builtins.bool] route_vpc_zone_ingress: If true, this routing table will be used to route traffic that originates from subnets in other zones in this VPC.
        :param pulumi.Input[_builtins.str] routing_table: The unique identifier of routing table
        :param pulumi.Input[_builtins.str] routing_table_crn: The crn of routing table
        :param pulumi.Input[_builtins.str] subnet: The subnet identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsSubnetRoutingTableAttachmentState.__new__(_IsSubnetRoutingTableAttachmentState)

        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["is_subnet_routing_table_attachment_id"] = is_subnet_routing_table_attachment_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_groups"] = resource_groups
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["route_direct_link_ingress"] = route_direct_link_ingress
        __props__.__dict__["route_transit_gateway_ingress"] = route_transit_gateway_ingress
        __props__.__dict__["route_vpc_zone_ingress"] = route_vpc_zone_ingress
        __props__.__dict__["routes"] = routes
        __props__.__dict__["routing_table"] = routing_table
        __props__.__dict__["routing_table_crn"] = routing_table_crn
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["timeouts"] = timeouts
        return IsSubnetRoutingTableAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether this is the default routing table for this VPC
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter(name="isSubnetRoutingTableAttachmentId")
    def is_subnet_routing_table_attachment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_subnet_routing_table_attachment_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        he lifecycle state of the routing table [ deleting, failed, pending, stable, suspended, updating, waiting ]
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the routing table
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> pulumi.Output[Sequence['outputs.IsSubnetRoutingTableAttachmentResourceGroup']]:
        """
        The resource group for this volume.
        """
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="routeDirectLinkIngress")
    def route_direct_link_ingress(self) -> pulumi.Output[_builtins.bool]:
        """
        If true, this routing table will be used to route traffic that originates from Direct Link to this VPC.
        """
        return pulumi.get(self, "route_direct_link_ingress")

    @_builtins.property
    @pulumi.getter(name="routeTransitGatewayIngress")
    def route_transit_gateway_ingress(self) -> pulumi.Output[_builtins.bool]:
        """
        If true, this routing table will be used to route traffic that originates from Transit Gateway to this VPC.
        """
        return pulumi.get(self, "route_transit_gateway_ingress")

    @_builtins.property
    @pulumi.getter(name="routeVpcZoneIngress")
    def route_vpc_zone_ingress(self) -> pulumi.Output[_builtins.bool]:
        """
        If true, this routing table will be used to route traffic that originates from subnets in other zones in this VPC.
        """
        return pulumi.get(self, "route_vpc_zone_ingress")

    @_builtins.property
    @pulumi.getter
    def routes(self) -> pulumi.Output[Sequence['outputs.IsSubnetRoutingTableAttachmentRoute']]:
        return pulumi.get(self, "routes")

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of routing table
        """
        return pulumi.get(self, "routing_table")

    @_builtins.property
    @pulumi.getter(name="routingTableCrn")
    def routing_table_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of routing table
        """
        return pulumi.get(self, "routing_table_crn")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[_builtins.str]:
        """
        The subnet identifier
        """
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence['outputs.IsSubnetRoutingTableAttachmentSubnet']]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsSubnetRoutingTableAttachmentTimeouts']]:
        return pulumi.get(self, "timeouts")

