import pulumi
import pulumi_ibm as ibm


def _create_advanced_openvpn_config(hostname, ca_cert, intermediate_cert, client_cert, client_key):
    return f"""# OpenVPN Client Configuration - IBM Cloud VPN
# Generated by Pulumi with IBM Cloud Secrets Manager integration
# Three-tier PKI: Root CA -> Intermediate CA -> End Entity Certificates

client
dev tun
proto udp
remote {hostname} 443
resolv-retry infinite
nobind
persist-key
persist-tun

remote-cert-tls server
verify-x509-name vpn-server name-prefix

cipher AES-256-GCM
auth SHA256
tls-version-min 1.2
tls-cipher TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384:TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256

keepalive 10 120
ping-timer-rem
ping-exit 60

verb 3
mute 20

compress lz4-v2
push-peer-info

<ca>
{ca_cert}
</ca>

<cert>
{client_cert}
</cert>

<key>
{client_key}
</key>

<extra-certs>
{intermediate_cert}
</extra-certs>
"""


def _create_simple_openvpn_config(hostname, ca_cert, intermediate_cert, client_cert, client_key):
    complete_ca_chain = f"{intermediate_cert.strip()}\n{ca_cert.strip()}"
    return f"""# OpenVPN Client Configuration - IBM Cloud VPN (Certificate Chain Fix)
client
dev tun
proto udp
remote {hostname} 443
resolv-retry infinite
nobind
persist-key
persist-tun

remote-cert-tls server

cipher AES-256-GCM
auth SHA256
tls-version-min 1.2

keepalive 10 120
verb 4
mute 10

<ca>
{complete_ca_chain}
</ca>

<cert>
{client_cert}
</cert>

<key>
{client_key}
</key>
"""


def _create_rootca_only_config(hostname, ca_cert, client_cert, client_key):
    return f"""# OpenVPN Client Configuration - IBM Cloud VPN (Root CA Only)
client
dev tun
proto udp
remote {hostname} 443
resolv-retry infinite
nobind
persist-key
persist-tun

remote-cert-tls server

cipher AES-256-GCM
auth SHA256

keepalive 10 120
verb 4
mute 10

<ca>
{ca_cert}
</ca>

<cert>
{client_cert}
</cert>

<key>
{client_key}
</key>
"""


def create_client_configs(instance_id, client_group, vpn_server, pki, cert_secrets):
    client_config = pulumi.Output.all(
        vpn_server.hostname,
        pki["ca_cert"].cert_pem,
        pki["intermediate_cert"].cert_pem,
        pki["client_cert"].cert_pem,
        pki["client_private_key"].private_key_pem,
    ).apply(lambda args: _create_advanced_openvpn_config(*args))

    simple_client_config = pulumi.Output.all(
        vpn_server.hostname,
        pki["ca_cert"].cert_pem,
        pki["intermediate_cert"].cert_pem,
        pki["client_cert"].cert_pem,
        pki["client_private_key"].private_key_pem,
    ).apply(lambda args: _create_simple_openvpn_config(*args))

    rootca_only_config = pulumi.Output.all(
        vpn_server.hostname,
        pki["ca_cert"].cert_pem,
        pki["client_cert"].cert_pem,
        pki["client_private_key"].private_key_pem,
    ).apply(lambda args: _create_rootca_only_config(*args))

    client_config_secret = ibm.SmArbitrarySecret(
        "client-config-secret",
        instance_id=instance_id,
        name="advanced-openvpn-client-config",
        description="Advanced OpenVPN client configuration with PKI certificate chain",
        secret_group_id=client_group.secret_group_id,
        payload=client_config,
        labels=["client-config", "openvpn", "advanced", "pki"],
    )

    simple_client_config_secret = ibm.SmArbitrarySecret(
        "simple-client-config-secret",
        instance_id=instance_id,
        name="simple-openvpn-client-config",
        description="Simple OpenVPN client configuration without hostname verification",
        secret_group_id=client_group.secret_group_id,
        payload=simple_client_config,
        labels=["client-config", "openvpn", "simple", "no-hostname-check"],
    )

    rootca_only_config_secret = ibm.SmArbitrarySecret(
        "rootca-only-config-secret",
        instance_id=instance_id,
        name="rootca-only-openvpn-client-config",
        description="Root CA only OpenVPN client configuration for maximum compatibility",
        secret_group_id=client_group.secret_group_id,
        payload=rootca_only_config,
        labels=["client-config", "openvpn", "rootca-only", "compatibility"],
    )

    return {
        "client_config": client_config,
        "simple_client_config": simple_client_config,
        "rootca_only_config": rootca_only_config,
        "client_config_secret": client_config_secret,
        "simple_client_config_secret": simple_client_config_secret,
        "rootca_only_config_secret": rootca_only_config_secret,
    }

