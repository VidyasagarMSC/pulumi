# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppConfigSnapshotsResult',
    'AwaitableGetAppConfigSnapshotsResult',
    'get_app_config_snapshots',
    'get_app_config_snapshots_output',
]

@pulumi.output_type
class GetAppConfigSnapshotsResult:
    """
    A collection of values returned by getAppConfigSnapshots.
    """
    def __init__(__self__, collection_id=None, environment_id=None, git_configs=None, guid=None, id=None, limit=None, offset=None, total_count=None):
        if collection_id and not isinstance(collection_id, str):
            raise TypeError("Expected argument 'collection_id' to be a str")
        pulumi.set(__self__, "collection_id", collection_id)
        if environment_id and not isinstance(environment_id, str):
            raise TypeError("Expected argument 'environment_id' to be a str")
        pulumi.set(__self__, "environment_id", environment_id)
        if git_configs and not isinstance(git_configs, list):
            raise TypeError("Expected argument 'git_configs' to be a list")
        pulumi.set(__self__, "git_configs", git_configs)
        if guid and not isinstance(guid, str):
            raise TypeError("Expected argument 'guid' to be a str")
        pulumi.set(__self__, "guid", guid)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, float):
            raise TypeError("Expected argument 'limit' to be a float")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, float):
            raise TypeError("Expected argument 'offset' to be a float")
        pulumi.set(__self__, "offset", offset)
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter(name="collectionId")
    def collection_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "collection_id")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter(name="gitConfigs")
    def git_configs(self) -> Sequence['outputs.GetAppConfigSnapshotsGitConfigResult']:
        return pulumi.get(self, "git_configs")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> _builtins.str:
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def offset(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "offset")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.float:
        return pulumi.get(self, "total_count")


class AwaitableGetAppConfigSnapshotsResult(GetAppConfigSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppConfigSnapshotsResult(
            collection_id=self.collection_id,
            environment_id=self.environment_id,
            git_configs=self.git_configs,
            guid=self.guid,
            id=self.id,
            limit=self.limit,
            offset=self.offset,
            total_count=self.total_count)


def get_app_config_snapshots(collection_id: Optional[_builtins.str] = None,
                             environment_id: Optional[_builtins.str] = None,
                             guid: Optional[_builtins.str] = None,
                             id: Optional[_builtins.str] = None,
                             limit: Optional[_builtins.float] = None,
                             offset: Optional[_builtins.float] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppConfigSnapshotsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['collectionId'] = collection_id
    __args__['environmentId'] = environment_id
    __args__['guid'] = guid
    __args__['id'] = id
    __args__['limit'] = limit
    __args__['offset'] = offset
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppConfigSnapshots:getAppConfigSnapshots', __args__, opts=opts, typ=GetAppConfigSnapshotsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppConfigSnapshotsResult(
        collection_id=pulumi.get(__ret__, 'collection_id'),
        environment_id=pulumi.get(__ret__, 'environment_id'),
        git_configs=pulumi.get(__ret__, 'git_configs'),
        guid=pulumi.get(__ret__, 'guid'),
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        total_count=pulumi.get(__ret__, 'total_count'))
def get_app_config_snapshots_output(collection_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    environment_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    guid: Optional[pulumi.Input[_builtins.str]] = None,
                                    id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    limit: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                    offset: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppConfigSnapshotsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['collectionId'] = collection_id
    __args__['environmentId'] = environment_id
    __args__['guid'] = guid
    __args__['id'] = id
    __args__['limit'] = limit
    __args__['offset'] = offset
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppConfigSnapshots:getAppConfigSnapshots', __args__, opts=opts, typ=GetAppConfigSnapshotsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppConfigSnapshotsResult(
        collection_id=pulumi.get(__response__, 'collection_id'),
        environment_id=pulumi.get(__response__, 'environment_id'),
        git_configs=pulumi.get(__response__, 'git_configs'),
        guid=pulumi.get(__response__, 'guid'),
        id=pulumi.get(__response__, 'id'),
        limit=pulumi.get(__response__, 'limit'),
        offset=pulumi.get(__response__, 'offset'),
        total_count=pulumi.get(__response__, 'total_count')))
