# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIamAccessTagResult',
    'AwaitableGetIamAccessTagResult',
    'get_iam_access_tag',
    'get_iam_access_tag_output',
]

@pulumi.output_type
class GetIamAccessTagResult:
    """
    A collection of values returned by getIamAccessTag.
    """
    def __init__(__self__, id=None, name=None, tag_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tag_type and not isinstance(tag_type, str):
            raise TypeError("Expected argument 'tag_type' to be a str")
        pulumi.set(__self__, "tag_type", tag_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> _builtins.str:
        return pulumi.get(self, "tag_type")


class AwaitableGetIamAccessTagResult(GetIamAccessTagResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamAccessTagResult(
            id=self.id,
            name=self.name,
            tag_type=self.tag_type)


def get_iam_access_tag(id: Optional[_builtins.str] = None,
                       name: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamAccessTagResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamAccessTag:getIamAccessTag', __args__, opts=opts, typ=GetIamAccessTagResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamAccessTagResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        tag_type=pulumi.get(__ret__, 'tag_type'))
def get_iam_access_tag_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamAccessTagResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamAccessTag:getIamAccessTag', __args__, opts=opts, typ=GetIamAccessTagResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamAccessTagResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        tag_type=pulumi.get(__response__, 'tag_type')))
