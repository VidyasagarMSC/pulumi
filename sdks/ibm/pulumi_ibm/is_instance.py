# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsInstanceArgs', 'IsInstance']

@pulumi.input_type
class IsInstanceArgs:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_delete_volume: Optional[pulumi.Input[_builtins.bool]] = None,
                 availability_policy_host_failure: Optional[pulumi.Input[_builtins.str]] = None,
                 boot_volume: Optional[pulumi.Input['IsInstanceBootVolumeArgs']] = None,
                 catalog_offering: Optional[pulumi.Input['IsInstanceCatalogOfferingArgs']] = None,
                 cluster_network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceClusterNetworkAttachmentArgs']]]] = None,
                 confidential_compute_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host_group: Optional[pulumi.Input[_builtins.str]] = None,
                 default_trusted_profile_auto_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_trusted_profile_target: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
                 force_action: Optional[pulumi.Input[_builtins.bool]] = None,
                 force_recovery_time: Optional[pulumi.Input[_builtins.float]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_template: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 metadata_service: Optional[pulumi.Input['IsInstanceMetadataServiceArgs']] = None,
                 metadata_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkAttachmentArgs']]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkInterfaceArgs']]]] = None,
                 placement_group: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_network_attachment: Optional[pulumi.Input['IsInstancePrimaryNetworkAttachmentArgs']] = None,
                 primary_network_interface: Optional[pulumi.Input['IsInstancePrimaryNetworkInterfaceArgs']] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceReservationAffinityArgs']]]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsInstanceTimeoutsArgs']] = None,
                 total_volume_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_prototypes: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceVolumePrototypeArgs']]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_before_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsInstance resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: list of access tags for the instance
        :param pulumi.Input[_builtins.str] action: Enables stopping of instance before deleting and waits till deletion is complete
        :param pulumi.Input[_builtins.bool] auto_delete_volume: Auto delete volume along with instance
        :param pulumi.Input[_builtins.str] availability_policy_host_failure: The availability policy to use for this virtual server instance
        :param pulumi.Input['IsInstanceCatalogOfferingArgs'] catalog_offering: The catalog offering or offering version to use when provisioning this virtual server instance. If an offering is
               specified, the latest version of that offering will be used. The specified offering or offering version may be in a
               different account in the same enterprise, subject to IAM policies.
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceClusterNetworkAttachmentArgs']]] cluster_network_attachments: The cluster network attachments for this virtual server instance.The cluster network attachments are ordered for
               consistent instance configuration.
        :param pulumi.Input[_builtins.str] confidential_compute_mode: The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
               mode from the profile will be used.
        :param pulumi.Input[_builtins.str] dedicated_host: Unique Identifier of the Dedicated Host where the instance will be placed
        :param pulumi.Input[_builtins.str] dedicated_host_group: Unique Identifier of the Dedicated Host Group where the instance will be placed
        :param pulumi.Input[_builtins.bool] default_trusted_profile_auto_link: If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
               Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
               automatically deleted when the instance is deleted.
        :param pulumi.Input[_builtins.str] default_trusted_profile_target: The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        :param pulumi.Input[_builtins.bool] enable_secure_boot: Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
               from the profile will be used.
        :param pulumi.Input[_builtins.bool] force_action: If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        :param pulumi.Input[_builtins.float] force_recovery_time: Define timeout to force the instances to start/stop in minutes.
        :param pulumi.Input[_builtins.str] image: image id
        :param pulumi.Input[_builtins.str] instance_template: Id of the instance template
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the instance
        :param pulumi.Input['IsInstanceMetadataServiceArgs'] metadata_service: The metadata service configuration
        :param pulumi.Input[_builtins.bool] metadata_service_enabled: Indicates whether the metadata service endpoint is available to the virtual server instance
        :param pulumi.Input[_builtins.str] name: Instance name
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkAttachmentArgs']]] network_attachments: The network attachments for this virtual server instance, including the primary network attachment.
        :param pulumi.Input[_builtins.str] placement_group: Unique Identifier of the Placement Group for restricting the placement of the instance
        :param pulumi.Input['IsInstancePrimaryNetworkAttachmentArgs'] primary_network_attachment: The primary network attachment for this virtual server instance.
        :param pulumi.Input['IsInstancePrimaryNetworkInterfaceArgs'] primary_network_interface: Primary Network interface info
        :param pulumi.Input[_builtins.str] profile: Profile info
        :param pulumi.Input[_builtins.str] resource_group: Instance resource group
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: list of tags for the instance
        :param pulumi.Input[_builtins.float] total_volume_bandwidth: The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        :param pulumi.Input[_builtins.str] user_data: User data given for the instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] volumes: List of volumes
        :param pulumi.Input[_builtins.str] vpc: VPC id
        :param pulumi.Input[_builtins.bool] wait_before_delete: Enables stopping of instance before deleting and waits till deletion is complete
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auto_delete_volume is not None:
            pulumi.set(__self__, "auto_delete_volume", auto_delete_volume)
        if availability_policy_host_failure is not None:
            pulumi.set(__self__, "availability_policy_host_failure", availability_policy_host_failure)
        if boot_volume is not None:
            pulumi.set(__self__, "boot_volume", boot_volume)
        if catalog_offering is not None:
            pulumi.set(__self__, "catalog_offering", catalog_offering)
        if cluster_network_attachments is not None:
            pulumi.set(__self__, "cluster_network_attachments", cluster_network_attachments)
        if confidential_compute_mode is not None:
            pulumi.set(__self__, "confidential_compute_mode", confidential_compute_mode)
        if dedicated_host is not None:
            pulumi.set(__self__, "dedicated_host", dedicated_host)
        if dedicated_host_group is not None:
            pulumi.set(__self__, "dedicated_host_group", dedicated_host_group)
        if default_trusted_profile_auto_link is not None:
            pulumi.set(__self__, "default_trusted_profile_auto_link", default_trusted_profile_auto_link)
        if default_trusted_profile_target is not None:
            pulumi.set(__self__, "default_trusted_profile_target", default_trusted_profile_target)
        if enable_secure_boot is not None:
            pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)
        if force_action is not None:
            pulumi.set(__self__, "force_action", force_action)
        if force_recovery_time is not None:
            pulumi.set(__self__, "force_recovery_time", force_recovery_time)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if instance_template is not None:
            pulumi.set(__self__, "instance_template", instance_template)
        if is_instance_id is not None:
            pulumi.set(__self__, "is_instance_id", is_instance_id)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if metadata_service is not None:
            pulumi.set(__self__, "metadata_service", metadata_service)
        if metadata_service_enabled is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""metadata_service_enabled is deprecated: Deprecated""")
        if metadata_service_enabled is not None:
            pulumi.set(__self__, "metadata_service_enabled", metadata_service_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_attachments is not None:
            pulumi.set(__self__, "network_attachments", network_attachments)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if placement_group is not None:
            pulumi.set(__self__, "placement_group", placement_group)
        if primary_network_attachment is not None:
            pulumi.set(__self__, "primary_network_attachment", primary_network_attachment)
        if primary_network_interface is not None:
            pulumi.set(__self__, "primary_network_interface", primary_network_interface)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if reservation_affinities is not None:
            pulumi.set(__self__, "reservation_affinities", reservation_affinities)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if total_volume_bandwidth is not None:
            pulumi.set(__self__, "total_volume_bandwidth", total_volume_bandwidth)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if volume_prototypes is not None:
            pulumi.set(__self__, "volume_prototypes", volume_prototypes)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if wait_before_delete is not None:
            pulumi.set(__self__, "wait_before_delete", wait_before_delete)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        list of access tags for the instance
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enables stopping of instance before deleting and waits till deletion is complete
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="autoDeleteVolume")
    def auto_delete_volume(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Auto delete volume along with instance
        """
        return pulumi.get(self, "auto_delete_volume")

    @auto_delete_volume.setter
    def auto_delete_volume(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_delete_volume", value)

    @_builtins.property
    @pulumi.getter(name="availabilityPolicyHostFailure")
    def availability_policy_host_failure(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The availability policy to use for this virtual server instance
        """
        return pulumi.get(self, "availability_policy_host_failure")

    @availability_policy_host_failure.setter
    def availability_policy_host_failure(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_policy_host_failure", value)

    @_builtins.property
    @pulumi.getter(name="bootVolume")
    def boot_volume(self) -> Optional[pulumi.Input['IsInstanceBootVolumeArgs']]:
        return pulumi.get(self, "boot_volume")

    @boot_volume.setter
    def boot_volume(self, value: Optional[pulumi.Input['IsInstanceBootVolumeArgs']]):
        pulumi.set(self, "boot_volume", value)

    @_builtins.property
    @pulumi.getter(name="catalogOffering")
    def catalog_offering(self) -> Optional[pulumi.Input['IsInstanceCatalogOfferingArgs']]:
        """
        The catalog offering or offering version to use when provisioning this virtual server instance. If an offering is
        specified, the latest version of that offering will be used. The specified offering or offering version may be in a
        different account in the same enterprise, subject to IAM policies.
        """
        return pulumi.get(self, "catalog_offering")

    @catalog_offering.setter
    def catalog_offering(self, value: Optional[pulumi.Input['IsInstanceCatalogOfferingArgs']]):
        pulumi.set(self, "catalog_offering", value)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkAttachments")
    def cluster_network_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceClusterNetworkAttachmentArgs']]]]:
        """
        The cluster network attachments for this virtual server instance.The cluster network attachments are ordered for
        consistent instance configuration.
        """
        return pulumi.get(self, "cluster_network_attachments")

    @cluster_network_attachments.setter
    def cluster_network_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceClusterNetworkAttachmentArgs']]]]):
        pulumi.set(self, "cluster_network_attachments", value)

    @_builtins.property
    @pulumi.getter(name="confidentialComputeMode")
    def confidential_compute_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
        mode from the profile will be used.
        """
        return pulumi.get(self, "confidential_compute_mode")

    @confidential_compute_mode.setter
    def confidential_compute_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "confidential_compute_mode", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHost")
    def dedicated_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique Identifier of the Dedicated Host where the instance will be placed
        """
        return pulumi.get(self, "dedicated_host")

    @dedicated_host.setter
    def dedicated_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_host", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHostGroup")
    def dedicated_host_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique Identifier of the Dedicated Host Group where the instance will be placed
        """
        return pulumi.get(self, "dedicated_host_group")

    @dedicated_host_group.setter
    def dedicated_host_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_host_group", value)

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileAutoLink")
    def default_trusted_profile_auto_link(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
        Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
        automatically deleted when the instance is deleted.
        """
        return pulumi.get(self, "default_trusted_profile_auto_link")

    @default_trusted_profile_auto_link.setter
    def default_trusted_profile_auto_link(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_trusted_profile_auto_link", value)

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileTarget")
    def default_trusted_profile_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        """
        return pulumi.get(self, "default_trusted_profile_target")

    @default_trusted_profile_target.setter
    def default_trusted_profile_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_trusted_profile_target", value)

    @_builtins.property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
        from the profile will be used.
        """
        return pulumi.get(self, "enable_secure_boot")

    @enable_secure_boot.setter
    def enable_secure_boot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_secure_boot", value)

    @_builtins.property
    @pulumi.getter(name="forceAction")
    def force_action(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        """
        return pulumi.get(self, "force_action")

    @force_action.setter
    def force_action(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_action", value)

    @_builtins.property
    @pulumi.getter(name="forceRecoveryTime")
    def force_recovery_time(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Define timeout to force the instances to start/stop in minutes.
        """
        return pulumi.get(self, "force_recovery_time")

    @force_recovery_time.setter
    def force_recovery_time(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "force_recovery_time", value)

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        image id
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter(name="instanceTemplate")
    def instance_template(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Id of the instance template
        """
        return pulumi.get(self, "instance_template")

    @instance_template.setter
    def instance_template(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_template", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceId")
    def is_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_id")

    @is_instance_id.setter
    def is_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        SSH key Ids for the instance
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "keys", value)

    @_builtins.property
    @pulumi.getter(name="metadataService")
    def metadata_service(self) -> Optional[pulumi.Input['IsInstanceMetadataServiceArgs']]:
        """
        The metadata service configuration
        """
        return pulumi.get(self, "metadata_service")

    @metadata_service.setter
    def metadata_service(self, value: Optional[pulumi.Input['IsInstanceMetadataServiceArgs']]):
        pulumi.set(self, "metadata_service", value)

    @_builtins.property
    @pulumi.getter(name="metadataServiceEnabled")
    @_utilities.deprecated("""Deprecated""")
    def metadata_service_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the metadata service endpoint is available to the virtual server instance
        """
        return pulumi.get(self, "metadata_service_enabled")

    @metadata_service_enabled.setter
    def metadata_service_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "metadata_service_enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkAttachmentArgs']]]]:
        """
        The network attachments for this virtual server instance, including the primary network attachment.
        """
        return pulumi.get(self, "network_attachments")

    @network_attachments.setter
    def network_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkAttachmentArgs']]]]):
        pulumi.set(self, "network_attachments", value)

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkInterfaceArgs']]]]:
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @_builtins.property
    @pulumi.getter(name="placementGroup")
    def placement_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique Identifier of the Placement Group for restricting the placement of the instance
        """
        return pulumi.get(self, "placement_group")

    @placement_group.setter
    def placement_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "placement_group", value)

    @_builtins.property
    @pulumi.getter(name="primaryNetworkAttachment")
    def primary_network_attachment(self) -> Optional[pulumi.Input['IsInstancePrimaryNetworkAttachmentArgs']]:
        """
        The primary network attachment for this virtual server instance.
        """
        return pulumi.get(self, "primary_network_attachment")

    @primary_network_attachment.setter
    def primary_network_attachment(self, value: Optional[pulumi.Input['IsInstancePrimaryNetworkAttachmentArgs']]):
        pulumi.set(self, "primary_network_attachment", value)

    @_builtins.property
    @pulumi.getter(name="primaryNetworkInterface")
    def primary_network_interface(self) -> Optional[pulumi.Input['IsInstancePrimaryNetworkInterfaceArgs']]:
        """
        Primary Network interface info
        """
        return pulumi.get(self, "primary_network_interface")

    @primary_network_interface.setter
    def primary_network_interface(self, value: Optional[pulumi.Input['IsInstancePrimaryNetworkInterfaceArgs']]):
        pulumi.set(self, "primary_network_interface", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Profile info
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="reservationAffinities")
    def reservation_affinities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceReservationAffinityArgs']]]]:
        return pulumi.get(self, "reservation_affinities")

    @reservation_affinities.setter
    def reservation_affinities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceReservationAffinityArgs']]]]):
        pulumi.set(self, "reservation_affinities", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance resource group
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        list of tags for the instance
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="totalVolumeBandwidth")
    def total_volume_bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        """
        return pulumi.get(self, "total_volume_bandwidth")

    @total_volume_bandwidth.setter
    def total_volume_bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "total_volume_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User data given for the instance
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_data", value)

    @_builtins.property
    @pulumi.getter(name="volumePrototypes")
    def volume_prototypes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceVolumePrototypeArgs']]]]:
        return pulumi.get(self, "volume_prototypes")

    @volume_prototypes.setter
    def volume_prototypes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceVolumePrototypeArgs']]]]):
        pulumi.set(self, "volume_prototypes", value)

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of volumes
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "volumes", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPC id
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter(name="waitBeforeDelete")
    def wait_before_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables stopping of instance before deleting and waits till deletion is complete
        """
        return pulumi.get(self, "wait_before_delete")

    @wait_before_delete.setter
    def wait_before_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_before_delete", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class _IsInstanceState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_delete_volume: Optional[pulumi.Input[_builtins.bool]] = None,
                 availability_policy_host_failure: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 boot_volume: Optional[pulumi.Input['IsInstanceBootVolumeArgs']] = None,
                 catalog_offering: Optional[pulumi.Input['IsInstanceCatalogOfferingArgs']] = None,
                 cluster_network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceClusterNetworkAttachmentArgs']]]] = None,
                 cluster_networks: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceClusterNetworkArgs']]]] = None,
                 confidential_compute_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host_group: Optional[pulumi.Input[_builtins.str]] = None,
                 default_trusted_profile_auto_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_trusted_profile_target: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceDiskArgs']]]] = None,
                 enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
                 force_action: Optional[pulumi.Input[_builtins.bool]] = None,
                 force_recovery_time: Optional[pulumi.Input[_builtins.float]] = None,
                 gpus: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceGpusArgs']]]] = None,
                 health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceHealthReasonArgs']]]] = None,
                 health_state: Optional[pulumi.Input[_builtins.str]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_template: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceLifecycleReasonArgs']]]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 metadata_service: Optional[pulumi.Input['IsInstanceMetadataServiceArgs']] = None,
                 metadata_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkAttachmentArgs']]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkInterfaceArgs']]]] = None,
                 numa_count: Optional[pulumi.Input[_builtins.float]] = None,
                 placement_group: Optional[pulumi.Input[_builtins.str]] = None,
                 placement_targets: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstancePlacementTargetArgs']]]] = None,
                 primary_network_attachment: Optional[pulumi.Input['IsInstancePrimaryNetworkAttachmentArgs']] = None,
                 primary_network_interface: Optional[pulumi.Input['IsInstancePrimaryNetworkInterfaceArgs']] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceReservationAffinityArgs']]]] = None,
                 reservations: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceReservationArgs']]]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceStatusReasonArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsInstanceTimeoutsArgs']] = None,
                 total_network_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 total_volume_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 vcpus: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceVcpusArgs']]]] = None,
                 volume_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceVolumeAttachmentArgs']]]] = None,
                 volume_prototypes: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceVolumePrototypeArgs']]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_before_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsInstance resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: list of access tags for the instance
        :param pulumi.Input[_builtins.str] action: Enables stopping of instance before deleting and waits till deletion is complete
        :param pulumi.Input[_builtins.bool] auto_delete_volume: Auto delete volume along with instance
        :param pulumi.Input[_builtins.str] availability_policy_host_failure: The availability policy to use for this virtual server instance
        :param pulumi.Input[_builtins.float] bandwidth: The total bandwidth (in megabits per second) shared across the instance's network interfaces and storage volumes
        :param pulumi.Input['IsInstanceCatalogOfferingArgs'] catalog_offering: The catalog offering or offering version to use when provisioning this virtual server instance. If an offering is
               specified, the latest version of that offering will be used. The specified offering or offering version may be in a
               different account in the same enterprise, subject to IAM policies.
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceClusterNetworkAttachmentArgs']]] cluster_network_attachments: The cluster network attachments for this virtual server instance.The cluster network attachments are ordered for
               consistent instance configuration.
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceClusterNetworkArgs']]] cluster_networks: If present, the cluster network that this virtual server instance resides in.
        :param pulumi.Input[_builtins.str] confidential_compute_mode: The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
               mode from the profile will be used.
        :param pulumi.Input[_builtins.str] crn: Crn for this Instance
        :param pulumi.Input[_builtins.str] dedicated_host: Unique Identifier of the Dedicated Host where the instance will be placed
        :param pulumi.Input[_builtins.str] dedicated_host_group: Unique Identifier of the Dedicated Host Group where the instance will be placed
        :param pulumi.Input[_builtins.bool] default_trusted_profile_auto_link: If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
               Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
               automatically deleted when the instance is deleted.
        :param pulumi.Input[_builtins.str] default_trusted_profile_target: The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceDiskArgs']]] disks: Collection of the instance's disks.
        :param pulumi.Input[_builtins.bool] enable_secure_boot: Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
               from the profile will be used.
        :param pulumi.Input[_builtins.bool] force_action: If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        :param pulumi.Input[_builtins.float] force_recovery_time: Define timeout to force the instances to start/stop in minutes.
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceGpusArgs']]] gpus: The virtual server instance GPU configuration
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceHealthReasonArgs']]] health_reasons: The reasons for the current health_state (if any).
        :param pulumi.Input[_builtins.str] health_state: The health of this resource
        :param pulumi.Input[_builtins.str] image: image id
        :param pulumi.Input[_builtins.str] instance_template: Id of the instance template
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the instance
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceLifecycleReasonArgs']]] lifecycle_reasons: The reasons for the current lifecycle_state (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the virtual server instance.
        :param pulumi.Input[_builtins.float] memory: Instance memory
        :param pulumi.Input['IsInstanceMetadataServiceArgs'] metadata_service: The metadata service configuration
        :param pulumi.Input[_builtins.bool] metadata_service_enabled: Indicates whether the metadata service endpoint is available to the virtual server instance
        :param pulumi.Input[_builtins.str] name: Instance name
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkAttachmentArgs']]] network_attachments: The network attachments for this virtual server instance, including the primary network attachment.
        :param pulumi.Input[_builtins.float] numa_count: The number of NUMA nodes this virtual server instance is provisioned on. This property may be absent if the instance's
               `status` is not `running`.
        :param pulumi.Input[_builtins.str] placement_group: Unique Identifier of the Placement Group for restricting the placement of the instance
        :param pulumi.Input[Sequence[pulumi.Input['IsInstancePlacementTargetArgs']]] placement_targets: The placement restrictions for the virtual server instance.
        :param pulumi.Input['IsInstancePrimaryNetworkAttachmentArgs'] primary_network_attachment: The primary network attachment for this virtual server instance.
        :param pulumi.Input['IsInstancePrimaryNetworkInterfaceArgs'] primary_network_interface: Primary Network interface info
        :param pulumi.Input[_builtins.str] profile: Profile info
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceReservationArgs']]] reservations: The reservation used by this virtual server instance
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: Instance resource group
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] status: instance status
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceStatusReasonArgs']]] status_reasons: The reasons for the current status (if any).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: list of tags for the instance
        :param pulumi.Input[_builtins.float] total_network_bandwidth: The amount of bandwidth (in megabits per second) allocated exclusively to instance network interfaces.
        :param pulumi.Input[_builtins.float] total_volume_bandwidth: The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        :param pulumi.Input[_builtins.str] user_data: User data given for the instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] volumes: List of volumes
        :param pulumi.Input[_builtins.str] vpc: VPC id
        :param pulumi.Input[_builtins.bool] wait_before_delete: Enables stopping of instance before deleting and waits till deletion is complete
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auto_delete_volume is not None:
            pulumi.set(__self__, "auto_delete_volume", auto_delete_volume)
        if availability_policy_host_failure is not None:
            pulumi.set(__self__, "availability_policy_host_failure", availability_policy_host_failure)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if boot_volume is not None:
            pulumi.set(__self__, "boot_volume", boot_volume)
        if catalog_offering is not None:
            pulumi.set(__self__, "catalog_offering", catalog_offering)
        if cluster_network_attachments is not None:
            pulumi.set(__self__, "cluster_network_attachments", cluster_network_attachments)
        if cluster_networks is not None:
            pulumi.set(__self__, "cluster_networks", cluster_networks)
        if confidential_compute_mode is not None:
            pulumi.set(__self__, "confidential_compute_mode", confidential_compute_mode)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if dedicated_host is not None:
            pulumi.set(__self__, "dedicated_host", dedicated_host)
        if dedicated_host_group is not None:
            pulumi.set(__self__, "dedicated_host_group", dedicated_host_group)
        if default_trusted_profile_auto_link is not None:
            pulumi.set(__self__, "default_trusted_profile_auto_link", default_trusted_profile_auto_link)
        if default_trusted_profile_target is not None:
            pulumi.set(__self__, "default_trusted_profile_target", default_trusted_profile_target)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if enable_secure_boot is not None:
            pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)
        if force_action is not None:
            pulumi.set(__self__, "force_action", force_action)
        if force_recovery_time is not None:
            pulumi.set(__self__, "force_recovery_time", force_recovery_time)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)
        if health_reasons is not None:
            pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state is not None:
            pulumi.set(__self__, "health_state", health_state)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if instance_template is not None:
            pulumi.set(__self__, "instance_template", instance_template)
        if is_instance_id is not None:
            pulumi.set(__self__, "is_instance_id", is_instance_id)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if lifecycle_reasons is not None:
            pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if metadata_service is not None:
            pulumi.set(__self__, "metadata_service", metadata_service)
        if metadata_service_enabled is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""metadata_service_enabled is deprecated: Deprecated""")
        if metadata_service_enabled is not None:
            pulumi.set(__self__, "metadata_service_enabled", metadata_service_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_attachments is not None:
            pulumi.set(__self__, "network_attachments", network_attachments)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if numa_count is not None:
            pulumi.set(__self__, "numa_count", numa_count)
        if placement_group is not None:
            pulumi.set(__self__, "placement_group", placement_group)
        if placement_targets is not None:
            pulumi.set(__self__, "placement_targets", placement_targets)
        if primary_network_attachment is not None:
            pulumi.set(__self__, "primary_network_attachment", primary_network_attachment)
        if primary_network_interface is not None:
            pulumi.set(__self__, "primary_network_interface", primary_network_interface)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if reservation_affinities is not None:
            pulumi.set(__self__, "reservation_affinities", reservation_affinities)
        if reservations is not None:
            pulumi.set(__self__, "reservations", reservations)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn is not None:
            pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if total_network_bandwidth is not None:
            pulumi.set(__self__, "total_network_bandwidth", total_network_bandwidth)
        if total_volume_bandwidth is not None:
            pulumi.set(__self__, "total_volume_bandwidth", total_volume_bandwidth)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)
        if volume_attachments is not None:
            pulumi.set(__self__, "volume_attachments", volume_attachments)
        if volume_prototypes is not None:
            pulumi.set(__self__, "volume_prototypes", volume_prototypes)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if wait_before_delete is not None:
            pulumi.set(__self__, "wait_before_delete", wait_before_delete)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        list of access tags for the instance
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enables stopping of instance before deleting and waits till deletion is complete
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="autoDeleteVolume")
    def auto_delete_volume(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Auto delete volume along with instance
        """
        return pulumi.get(self, "auto_delete_volume")

    @auto_delete_volume.setter
    def auto_delete_volume(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_delete_volume", value)

    @_builtins.property
    @pulumi.getter(name="availabilityPolicyHostFailure")
    def availability_policy_host_failure(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The availability policy to use for this virtual server instance
        """
        return pulumi.get(self, "availability_policy_host_failure")

    @availability_policy_host_failure.setter
    def availability_policy_host_failure(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_policy_host_failure", value)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total bandwidth (in megabits per second) shared across the instance's network interfaces and storage volumes
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="bootVolume")
    def boot_volume(self) -> Optional[pulumi.Input['IsInstanceBootVolumeArgs']]:
        return pulumi.get(self, "boot_volume")

    @boot_volume.setter
    def boot_volume(self, value: Optional[pulumi.Input['IsInstanceBootVolumeArgs']]):
        pulumi.set(self, "boot_volume", value)

    @_builtins.property
    @pulumi.getter(name="catalogOffering")
    def catalog_offering(self) -> Optional[pulumi.Input['IsInstanceCatalogOfferingArgs']]:
        """
        The catalog offering or offering version to use when provisioning this virtual server instance. If an offering is
        specified, the latest version of that offering will be used. The specified offering or offering version may be in a
        different account in the same enterprise, subject to IAM policies.
        """
        return pulumi.get(self, "catalog_offering")

    @catalog_offering.setter
    def catalog_offering(self, value: Optional[pulumi.Input['IsInstanceCatalogOfferingArgs']]):
        pulumi.set(self, "catalog_offering", value)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkAttachments")
    def cluster_network_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceClusterNetworkAttachmentArgs']]]]:
        """
        The cluster network attachments for this virtual server instance.The cluster network attachments are ordered for
        consistent instance configuration.
        """
        return pulumi.get(self, "cluster_network_attachments")

    @cluster_network_attachments.setter
    def cluster_network_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceClusterNetworkAttachmentArgs']]]]):
        pulumi.set(self, "cluster_network_attachments", value)

    @_builtins.property
    @pulumi.getter(name="clusterNetworks")
    def cluster_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceClusterNetworkArgs']]]]:
        """
        If present, the cluster network that this virtual server instance resides in.
        """
        return pulumi.get(self, "cluster_networks")

    @cluster_networks.setter
    def cluster_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceClusterNetworkArgs']]]]):
        pulumi.set(self, "cluster_networks", value)

    @_builtins.property
    @pulumi.getter(name="confidentialComputeMode")
    def confidential_compute_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
        mode from the profile will be used.
        """
        return pulumi.get(self, "confidential_compute_mode")

    @confidential_compute_mode.setter
    def confidential_compute_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "confidential_compute_mode", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Crn for this Instance
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHost")
    def dedicated_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique Identifier of the Dedicated Host where the instance will be placed
        """
        return pulumi.get(self, "dedicated_host")

    @dedicated_host.setter
    def dedicated_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_host", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHostGroup")
    def dedicated_host_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique Identifier of the Dedicated Host Group where the instance will be placed
        """
        return pulumi.get(self, "dedicated_host_group")

    @dedicated_host_group.setter
    def dedicated_host_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_host_group", value)

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileAutoLink")
    def default_trusted_profile_auto_link(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
        Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
        automatically deleted when the instance is deleted.
        """
        return pulumi.get(self, "default_trusted_profile_auto_link")

    @default_trusted_profile_auto_link.setter
    def default_trusted_profile_auto_link(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_trusted_profile_auto_link", value)

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileTarget")
    def default_trusted_profile_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        """
        return pulumi.get(self, "default_trusted_profile_target")

    @default_trusted_profile_target.setter
    def default_trusted_profile_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_trusted_profile_target", value)

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceDiskArgs']]]]:
        """
        Collection of the instance's disks.
        """
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceDiskArgs']]]]):
        pulumi.set(self, "disks", value)

    @_builtins.property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
        from the profile will be used.
        """
        return pulumi.get(self, "enable_secure_boot")

    @enable_secure_boot.setter
    def enable_secure_boot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_secure_boot", value)

    @_builtins.property
    @pulumi.getter(name="forceAction")
    def force_action(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        """
        return pulumi.get(self, "force_action")

    @force_action.setter
    def force_action(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_action", value)

    @_builtins.property
    @pulumi.getter(name="forceRecoveryTime")
    def force_recovery_time(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Define timeout to force the instances to start/stop in minutes.
        """
        return pulumi.get(self, "force_recovery_time")

    @force_recovery_time.setter
    def force_recovery_time(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "force_recovery_time", value)

    @_builtins.property
    @pulumi.getter
    def gpus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceGpusArgs']]]]:
        """
        The virtual server instance GPU configuration
        """
        return pulumi.get(self, "gpus")

    @gpus.setter
    def gpus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceGpusArgs']]]]):
        pulumi.set(self, "gpus", value)

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceHealthReasonArgs']]]]:
        """
        The reasons for the current health_state (if any).
        """
        return pulumi.get(self, "health_reasons")

    @health_reasons.setter
    def health_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceHealthReasonArgs']]]]):
        pulumi.set(self, "health_reasons", value)

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The health of this resource
        """
        return pulumi.get(self, "health_state")

    @health_state.setter
    def health_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_state", value)

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        image id
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter(name="instanceTemplate")
    def instance_template(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Id of the instance template
        """
        return pulumi.get(self, "instance_template")

    @instance_template.setter
    def instance_template(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_template", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceId")
    def is_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_id")

    @is_instance_id.setter
    def is_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        SSH key Ids for the instance
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "keys", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceLifecycleReasonArgs']]]]:
        """
        The reasons for the current lifecycle_state (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @lifecycle_reasons.setter
    def lifecycle_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceLifecycleReasonArgs']]]]):
        pulumi.set(self, "lifecycle_reasons", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the virtual server instance.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Instance memory
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter(name="metadataService")
    def metadata_service(self) -> Optional[pulumi.Input['IsInstanceMetadataServiceArgs']]:
        """
        The metadata service configuration
        """
        return pulumi.get(self, "metadata_service")

    @metadata_service.setter
    def metadata_service(self, value: Optional[pulumi.Input['IsInstanceMetadataServiceArgs']]):
        pulumi.set(self, "metadata_service", value)

    @_builtins.property
    @pulumi.getter(name="metadataServiceEnabled")
    @_utilities.deprecated("""Deprecated""")
    def metadata_service_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the metadata service endpoint is available to the virtual server instance
        """
        return pulumi.get(self, "metadata_service_enabled")

    @metadata_service_enabled.setter
    def metadata_service_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "metadata_service_enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkAttachmentArgs']]]]:
        """
        The network attachments for this virtual server instance, including the primary network attachment.
        """
        return pulumi.get(self, "network_attachments")

    @network_attachments.setter
    def network_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkAttachmentArgs']]]]):
        pulumi.set(self, "network_attachments", value)

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkInterfaceArgs']]]]:
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @_builtins.property
    @pulumi.getter(name="numaCount")
    def numa_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of NUMA nodes this virtual server instance is provisioned on. This property may be absent if the instance's
        `status` is not `running`.
        """
        return pulumi.get(self, "numa_count")

    @numa_count.setter
    def numa_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "numa_count", value)

    @_builtins.property
    @pulumi.getter(name="placementGroup")
    def placement_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique Identifier of the Placement Group for restricting the placement of the instance
        """
        return pulumi.get(self, "placement_group")

    @placement_group.setter
    def placement_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "placement_group", value)

    @_builtins.property
    @pulumi.getter(name="placementTargets")
    def placement_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstancePlacementTargetArgs']]]]:
        """
        The placement restrictions for the virtual server instance.
        """
        return pulumi.get(self, "placement_targets")

    @placement_targets.setter
    def placement_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstancePlacementTargetArgs']]]]):
        pulumi.set(self, "placement_targets", value)

    @_builtins.property
    @pulumi.getter(name="primaryNetworkAttachment")
    def primary_network_attachment(self) -> Optional[pulumi.Input['IsInstancePrimaryNetworkAttachmentArgs']]:
        """
        The primary network attachment for this virtual server instance.
        """
        return pulumi.get(self, "primary_network_attachment")

    @primary_network_attachment.setter
    def primary_network_attachment(self, value: Optional[pulumi.Input['IsInstancePrimaryNetworkAttachmentArgs']]):
        pulumi.set(self, "primary_network_attachment", value)

    @_builtins.property
    @pulumi.getter(name="primaryNetworkInterface")
    def primary_network_interface(self) -> Optional[pulumi.Input['IsInstancePrimaryNetworkInterfaceArgs']]:
        """
        Primary Network interface info
        """
        return pulumi.get(self, "primary_network_interface")

    @primary_network_interface.setter
    def primary_network_interface(self, value: Optional[pulumi.Input['IsInstancePrimaryNetworkInterfaceArgs']]):
        pulumi.set(self, "primary_network_interface", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Profile info
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="reservationAffinities")
    def reservation_affinities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceReservationAffinityArgs']]]]:
        return pulumi.get(self, "reservation_affinities")

    @reservation_affinities.setter
    def reservation_affinities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceReservationAffinityArgs']]]]):
        pulumi.set(self, "reservation_affinities", value)

    @_builtins.property
    @pulumi.getter
    def reservations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceReservationArgs']]]]:
        """
        The reservation used by this virtual server instance
        """
        return pulumi.get(self, "reservations")

    @reservations.setter
    def reservations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceReservationArgs']]]]):
        pulumi.set(self, "reservations", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @resource_crn.setter
    def resource_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance resource group
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        instance status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceStatusReasonArgs']]]]:
        """
        The reasons for the current status (if any).
        """
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        list of tags for the instance
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="totalNetworkBandwidth")
    def total_network_bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The amount of bandwidth (in megabits per second) allocated exclusively to instance network interfaces.
        """
        return pulumi.get(self, "total_network_bandwidth")

    @total_network_bandwidth.setter
    def total_network_bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "total_network_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="totalVolumeBandwidth")
    def total_volume_bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        """
        return pulumi.get(self, "total_volume_bandwidth")

    @total_volume_bandwidth.setter
    def total_volume_bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "total_volume_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User data given for the instance
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_data", value)

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceVcpusArgs']]]]:
        return pulumi.get(self, "vcpus")

    @vcpus.setter
    def vcpus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceVcpusArgs']]]]):
        pulumi.set(self, "vcpus", value)

    @_builtins.property
    @pulumi.getter(name="volumeAttachments")
    def volume_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceVolumeAttachmentArgs']]]]:
        return pulumi.get(self, "volume_attachments")

    @volume_attachments.setter
    def volume_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceVolumeAttachmentArgs']]]]):
        pulumi.set(self, "volume_attachments", value)

    @_builtins.property
    @pulumi.getter(name="volumePrototypes")
    def volume_prototypes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceVolumePrototypeArgs']]]]:
        return pulumi.get(self, "volume_prototypes")

    @volume_prototypes.setter
    def volume_prototypes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceVolumePrototypeArgs']]]]):
        pulumi.set(self, "volume_prototypes", value)

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of volumes
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "volumes", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPC id
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter(name="waitBeforeDelete")
    def wait_before_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables stopping of instance before deleting and waits till deletion is complete
        """
        return pulumi.get(self, "wait_before_delete")

    @wait_before_delete.setter
    def wait_before_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_before_delete", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isInstance:IsInstance")
class IsInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_delete_volume: Optional[pulumi.Input[_builtins.bool]] = None,
                 availability_policy_host_failure: Optional[pulumi.Input[_builtins.str]] = None,
                 boot_volume: Optional[pulumi.Input[Union['IsInstanceBootVolumeArgs', 'IsInstanceBootVolumeArgsDict']]] = None,
                 catalog_offering: Optional[pulumi.Input[Union['IsInstanceCatalogOfferingArgs', 'IsInstanceCatalogOfferingArgsDict']]] = None,
                 cluster_network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceClusterNetworkAttachmentArgs', 'IsInstanceClusterNetworkAttachmentArgsDict']]]]] = None,
                 confidential_compute_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host_group: Optional[pulumi.Input[_builtins.str]] = None,
                 default_trusted_profile_auto_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_trusted_profile_target: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
                 force_action: Optional[pulumi.Input[_builtins.bool]] = None,
                 force_recovery_time: Optional[pulumi.Input[_builtins.float]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_template: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 metadata_service: Optional[pulumi.Input[Union['IsInstanceMetadataServiceArgs', 'IsInstanceMetadataServiceArgsDict']]] = None,
                 metadata_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceNetworkAttachmentArgs', 'IsInstanceNetworkAttachmentArgsDict']]]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceNetworkInterfaceArgs', 'IsInstanceNetworkInterfaceArgsDict']]]]] = None,
                 placement_group: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_network_attachment: Optional[pulumi.Input[Union['IsInstancePrimaryNetworkAttachmentArgs', 'IsInstancePrimaryNetworkAttachmentArgsDict']]] = None,
                 primary_network_interface: Optional[pulumi.Input[Union['IsInstancePrimaryNetworkInterfaceArgs', 'IsInstancePrimaryNetworkInterfaceArgsDict']]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceReservationAffinityArgs', 'IsInstanceReservationAffinityArgsDict']]]]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsInstanceTimeoutsArgs', 'IsInstanceTimeoutsArgsDict']]] = None,
                 total_volume_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_prototypes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceVolumePrototypeArgs', 'IsInstanceVolumePrototypeArgsDict']]]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_before_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: list of access tags for the instance
        :param pulumi.Input[_builtins.str] action: Enables stopping of instance before deleting and waits till deletion is complete
        :param pulumi.Input[_builtins.bool] auto_delete_volume: Auto delete volume along with instance
        :param pulumi.Input[_builtins.str] availability_policy_host_failure: The availability policy to use for this virtual server instance
        :param pulumi.Input[Union['IsInstanceCatalogOfferingArgs', 'IsInstanceCatalogOfferingArgsDict']] catalog_offering: The catalog offering or offering version to use when provisioning this virtual server instance. If an offering is
               specified, the latest version of that offering will be used. The specified offering or offering version may be in a
               different account in the same enterprise, subject to IAM policies.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceClusterNetworkAttachmentArgs', 'IsInstanceClusterNetworkAttachmentArgsDict']]]] cluster_network_attachments: The cluster network attachments for this virtual server instance.The cluster network attachments are ordered for
               consistent instance configuration.
        :param pulumi.Input[_builtins.str] confidential_compute_mode: The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
               mode from the profile will be used.
        :param pulumi.Input[_builtins.str] dedicated_host: Unique Identifier of the Dedicated Host where the instance will be placed
        :param pulumi.Input[_builtins.str] dedicated_host_group: Unique Identifier of the Dedicated Host Group where the instance will be placed
        :param pulumi.Input[_builtins.bool] default_trusted_profile_auto_link: If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
               Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
               automatically deleted when the instance is deleted.
        :param pulumi.Input[_builtins.str] default_trusted_profile_target: The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        :param pulumi.Input[_builtins.bool] enable_secure_boot: Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
               from the profile will be used.
        :param pulumi.Input[_builtins.bool] force_action: If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        :param pulumi.Input[_builtins.float] force_recovery_time: Define timeout to force the instances to start/stop in minutes.
        :param pulumi.Input[_builtins.str] image: image id
        :param pulumi.Input[_builtins.str] instance_template: Id of the instance template
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the instance
        :param pulumi.Input[Union['IsInstanceMetadataServiceArgs', 'IsInstanceMetadataServiceArgsDict']] metadata_service: The metadata service configuration
        :param pulumi.Input[_builtins.bool] metadata_service_enabled: Indicates whether the metadata service endpoint is available to the virtual server instance
        :param pulumi.Input[_builtins.str] name: Instance name
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceNetworkAttachmentArgs', 'IsInstanceNetworkAttachmentArgsDict']]]] network_attachments: The network attachments for this virtual server instance, including the primary network attachment.
        :param pulumi.Input[_builtins.str] placement_group: Unique Identifier of the Placement Group for restricting the placement of the instance
        :param pulumi.Input[Union['IsInstancePrimaryNetworkAttachmentArgs', 'IsInstancePrimaryNetworkAttachmentArgsDict']] primary_network_attachment: The primary network attachment for this virtual server instance.
        :param pulumi.Input[Union['IsInstancePrimaryNetworkInterfaceArgs', 'IsInstancePrimaryNetworkInterfaceArgsDict']] primary_network_interface: Primary Network interface info
        :param pulumi.Input[_builtins.str] profile: Profile info
        :param pulumi.Input[_builtins.str] resource_group: Instance resource group
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: list of tags for the instance
        :param pulumi.Input[_builtins.float] total_volume_bandwidth: The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        :param pulumi.Input[_builtins.str] user_data: User data given for the instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] volumes: List of volumes
        :param pulumi.Input[_builtins.str] vpc: VPC id
        :param pulumi.Input[_builtins.bool] wait_before_delete: Enables stopping of instance before deleting and waits till deletion is complete
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IsInstanceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_delete_volume: Optional[pulumi.Input[_builtins.bool]] = None,
                 availability_policy_host_failure: Optional[pulumi.Input[_builtins.str]] = None,
                 boot_volume: Optional[pulumi.Input[Union['IsInstanceBootVolumeArgs', 'IsInstanceBootVolumeArgsDict']]] = None,
                 catalog_offering: Optional[pulumi.Input[Union['IsInstanceCatalogOfferingArgs', 'IsInstanceCatalogOfferingArgsDict']]] = None,
                 cluster_network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceClusterNetworkAttachmentArgs', 'IsInstanceClusterNetworkAttachmentArgsDict']]]]] = None,
                 confidential_compute_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host_group: Optional[pulumi.Input[_builtins.str]] = None,
                 default_trusted_profile_auto_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_trusted_profile_target: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
                 force_action: Optional[pulumi.Input[_builtins.bool]] = None,
                 force_recovery_time: Optional[pulumi.Input[_builtins.float]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_template: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 metadata_service: Optional[pulumi.Input[Union['IsInstanceMetadataServiceArgs', 'IsInstanceMetadataServiceArgsDict']]] = None,
                 metadata_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceNetworkAttachmentArgs', 'IsInstanceNetworkAttachmentArgsDict']]]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceNetworkInterfaceArgs', 'IsInstanceNetworkInterfaceArgsDict']]]]] = None,
                 placement_group: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_network_attachment: Optional[pulumi.Input[Union['IsInstancePrimaryNetworkAttachmentArgs', 'IsInstancePrimaryNetworkAttachmentArgsDict']]] = None,
                 primary_network_interface: Optional[pulumi.Input[Union['IsInstancePrimaryNetworkInterfaceArgs', 'IsInstancePrimaryNetworkInterfaceArgsDict']]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceReservationAffinityArgs', 'IsInstanceReservationAffinityArgsDict']]]]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsInstanceTimeoutsArgs', 'IsInstanceTimeoutsArgsDict']]] = None,
                 total_volume_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_prototypes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceVolumePrototypeArgs', 'IsInstanceVolumePrototypeArgsDict']]]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_before_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsInstanceArgs.__new__(IsInstanceArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["action"] = action
            __props__.__dict__["auto_delete_volume"] = auto_delete_volume
            __props__.__dict__["availability_policy_host_failure"] = availability_policy_host_failure
            __props__.__dict__["boot_volume"] = boot_volume
            __props__.__dict__["catalog_offering"] = catalog_offering
            __props__.__dict__["cluster_network_attachments"] = cluster_network_attachments
            __props__.__dict__["confidential_compute_mode"] = confidential_compute_mode
            __props__.__dict__["dedicated_host"] = dedicated_host
            __props__.__dict__["dedicated_host_group"] = dedicated_host_group
            __props__.__dict__["default_trusted_profile_auto_link"] = default_trusted_profile_auto_link
            __props__.__dict__["default_trusted_profile_target"] = default_trusted_profile_target
            __props__.__dict__["enable_secure_boot"] = enable_secure_boot
            __props__.__dict__["force_action"] = force_action
            __props__.__dict__["force_recovery_time"] = force_recovery_time
            __props__.__dict__["image"] = image
            __props__.__dict__["instance_template"] = instance_template
            __props__.__dict__["is_instance_id"] = is_instance_id
            __props__.__dict__["keys"] = keys
            __props__.__dict__["metadata_service"] = metadata_service
            __props__.__dict__["metadata_service_enabled"] = metadata_service_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["network_attachments"] = network_attachments
            __props__.__dict__["network_interfaces"] = network_interfaces
            __props__.__dict__["placement_group"] = placement_group
            __props__.__dict__["primary_network_attachment"] = primary_network_attachment
            __props__.__dict__["primary_network_interface"] = primary_network_interface
            __props__.__dict__["profile"] = profile
            __props__.__dict__["reservation_affinities"] = reservation_affinities
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["total_volume_bandwidth"] = total_volume_bandwidth
            __props__.__dict__["user_data"] = user_data
            __props__.__dict__["volume_prototypes"] = volume_prototypes
            __props__.__dict__["volumes"] = volumes
            __props__.__dict__["vpc"] = vpc
            __props__.__dict__["wait_before_delete"] = wait_before_delete
            __props__.__dict__["zone"] = zone
            __props__.__dict__["bandwidth"] = None
            __props__.__dict__["cluster_networks"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["disks"] = None
            __props__.__dict__["gpus"] = None
            __props__.__dict__["health_reasons"] = None
            __props__.__dict__["health_state"] = None
            __props__.__dict__["lifecycle_reasons"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["memory"] = None
            __props__.__dict__["numa_count"] = None
            __props__.__dict__["placement_targets"] = None
            __props__.__dict__["reservations"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_crn"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_status"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
            __props__.__dict__["total_network_bandwidth"] = None
            __props__.__dict__["vcpus"] = None
            __props__.__dict__["volume_attachments"] = None
        super(IsInstance, __self__).__init__(
            'ibm:index/isInstance:IsInstance',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            auto_delete_volume: Optional[pulumi.Input[_builtins.bool]] = None,
            availability_policy_host_failure: Optional[pulumi.Input[_builtins.str]] = None,
            bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
            boot_volume: Optional[pulumi.Input[Union['IsInstanceBootVolumeArgs', 'IsInstanceBootVolumeArgsDict']]] = None,
            catalog_offering: Optional[pulumi.Input[Union['IsInstanceCatalogOfferingArgs', 'IsInstanceCatalogOfferingArgsDict']]] = None,
            cluster_network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceClusterNetworkAttachmentArgs', 'IsInstanceClusterNetworkAttachmentArgsDict']]]]] = None,
            cluster_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceClusterNetworkArgs', 'IsInstanceClusterNetworkArgsDict']]]]] = None,
            confidential_compute_mode: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
            dedicated_host_group: Optional[pulumi.Input[_builtins.str]] = None,
            default_trusted_profile_auto_link: Optional[pulumi.Input[_builtins.bool]] = None,
            default_trusted_profile_target: Optional[pulumi.Input[_builtins.str]] = None,
            disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceDiskArgs', 'IsInstanceDiskArgsDict']]]]] = None,
            enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
            force_action: Optional[pulumi.Input[_builtins.bool]] = None,
            force_recovery_time: Optional[pulumi.Input[_builtins.float]] = None,
            gpus: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceGpusArgs', 'IsInstanceGpusArgsDict']]]]] = None,
            health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceHealthReasonArgs', 'IsInstanceHealthReasonArgsDict']]]]] = None,
            health_state: Optional[pulumi.Input[_builtins.str]] = None,
            image: Optional[pulumi.Input[_builtins.str]] = None,
            instance_template: Optional[pulumi.Input[_builtins.str]] = None,
            is_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceLifecycleReasonArgs', 'IsInstanceLifecycleReasonArgsDict']]]]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            memory: Optional[pulumi.Input[_builtins.float]] = None,
            metadata_service: Optional[pulumi.Input[Union['IsInstanceMetadataServiceArgs', 'IsInstanceMetadataServiceArgsDict']]] = None,
            metadata_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceNetworkAttachmentArgs', 'IsInstanceNetworkAttachmentArgsDict']]]]] = None,
            network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceNetworkInterfaceArgs', 'IsInstanceNetworkInterfaceArgsDict']]]]] = None,
            numa_count: Optional[pulumi.Input[_builtins.float]] = None,
            placement_group: Optional[pulumi.Input[_builtins.str]] = None,
            placement_targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstancePlacementTargetArgs', 'IsInstancePlacementTargetArgsDict']]]]] = None,
            primary_network_attachment: Optional[pulumi.Input[Union['IsInstancePrimaryNetworkAttachmentArgs', 'IsInstancePrimaryNetworkAttachmentArgsDict']]] = None,
            primary_network_interface: Optional[pulumi.Input[Union['IsInstancePrimaryNetworkInterfaceArgs', 'IsInstancePrimaryNetworkInterfaceArgsDict']]] = None,
            profile: Optional[pulumi.Input[_builtins.str]] = None,
            reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceReservationAffinityArgs', 'IsInstanceReservationAffinityArgsDict']]]]] = None,
            reservations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceReservationArgs', 'IsInstanceReservationArgsDict']]]]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceStatusReasonArgs', 'IsInstanceStatusReasonArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsInstanceTimeoutsArgs', 'IsInstanceTimeoutsArgsDict']]] = None,
            total_network_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
            total_volume_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
            user_data: Optional[pulumi.Input[_builtins.str]] = None,
            vcpus: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceVcpusArgs', 'IsInstanceVcpusArgsDict']]]]] = None,
            volume_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceVolumeAttachmentArgs', 'IsInstanceVolumeAttachmentArgsDict']]]]] = None,
            volume_prototypes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceVolumePrototypeArgs', 'IsInstanceVolumePrototypeArgsDict']]]]] = None,
            volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            vpc: Optional[pulumi.Input[_builtins.str]] = None,
            wait_before_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsInstance':
        """
        Get an existing IsInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: list of access tags for the instance
        :param pulumi.Input[_builtins.str] action: Enables stopping of instance before deleting and waits till deletion is complete
        :param pulumi.Input[_builtins.bool] auto_delete_volume: Auto delete volume along with instance
        :param pulumi.Input[_builtins.str] availability_policy_host_failure: The availability policy to use for this virtual server instance
        :param pulumi.Input[_builtins.float] bandwidth: The total bandwidth (in megabits per second) shared across the instance's network interfaces and storage volumes
        :param pulumi.Input[Union['IsInstanceCatalogOfferingArgs', 'IsInstanceCatalogOfferingArgsDict']] catalog_offering: The catalog offering or offering version to use when provisioning this virtual server instance. If an offering is
               specified, the latest version of that offering will be used. The specified offering or offering version may be in a
               different account in the same enterprise, subject to IAM policies.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceClusterNetworkAttachmentArgs', 'IsInstanceClusterNetworkAttachmentArgsDict']]]] cluster_network_attachments: The cluster network attachments for this virtual server instance.The cluster network attachments are ordered for
               consistent instance configuration.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceClusterNetworkArgs', 'IsInstanceClusterNetworkArgsDict']]]] cluster_networks: If present, the cluster network that this virtual server instance resides in.
        :param pulumi.Input[_builtins.str] confidential_compute_mode: The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
               mode from the profile will be used.
        :param pulumi.Input[_builtins.str] crn: Crn for this Instance
        :param pulumi.Input[_builtins.str] dedicated_host: Unique Identifier of the Dedicated Host where the instance will be placed
        :param pulumi.Input[_builtins.str] dedicated_host_group: Unique Identifier of the Dedicated Host Group where the instance will be placed
        :param pulumi.Input[_builtins.bool] default_trusted_profile_auto_link: If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
               Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
               automatically deleted when the instance is deleted.
        :param pulumi.Input[_builtins.str] default_trusted_profile_target: The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceDiskArgs', 'IsInstanceDiskArgsDict']]]] disks: Collection of the instance's disks.
        :param pulumi.Input[_builtins.bool] enable_secure_boot: Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
               from the profile will be used.
        :param pulumi.Input[_builtins.bool] force_action: If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        :param pulumi.Input[_builtins.float] force_recovery_time: Define timeout to force the instances to start/stop in minutes.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceGpusArgs', 'IsInstanceGpusArgsDict']]]] gpus: The virtual server instance GPU configuration
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceHealthReasonArgs', 'IsInstanceHealthReasonArgsDict']]]] health_reasons: The reasons for the current health_state (if any).
        :param pulumi.Input[_builtins.str] health_state: The health of this resource
        :param pulumi.Input[_builtins.str] image: image id
        :param pulumi.Input[_builtins.str] instance_template: Id of the instance template
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the instance
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceLifecycleReasonArgs', 'IsInstanceLifecycleReasonArgsDict']]]] lifecycle_reasons: The reasons for the current lifecycle_state (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the virtual server instance.
        :param pulumi.Input[_builtins.float] memory: Instance memory
        :param pulumi.Input[Union['IsInstanceMetadataServiceArgs', 'IsInstanceMetadataServiceArgsDict']] metadata_service: The metadata service configuration
        :param pulumi.Input[_builtins.bool] metadata_service_enabled: Indicates whether the metadata service endpoint is available to the virtual server instance
        :param pulumi.Input[_builtins.str] name: Instance name
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceNetworkAttachmentArgs', 'IsInstanceNetworkAttachmentArgsDict']]]] network_attachments: The network attachments for this virtual server instance, including the primary network attachment.
        :param pulumi.Input[_builtins.float] numa_count: The number of NUMA nodes this virtual server instance is provisioned on. This property may be absent if the instance's
               `status` is not `running`.
        :param pulumi.Input[_builtins.str] placement_group: Unique Identifier of the Placement Group for restricting the placement of the instance
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstancePlacementTargetArgs', 'IsInstancePlacementTargetArgsDict']]]] placement_targets: The placement restrictions for the virtual server instance.
        :param pulumi.Input[Union['IsInstancePrimaryNetworkAttachmentArgs', 'IsInstancePrimaryNetworkAttachmentArgsDict']] primary_network_attachment: The primary network attachment for this virtual server instance.
        :param pulumi.Input[Union['IsInstancePrimaryNetworkInterfaceArgs', 'IsInstancePrimaryNetworkInterfaceArgsDict']] primary_network_interface: Primary Network interface info
        :param pulumi.Input[_builtins.str] profile: Profile info
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceReservationArgs', 'IsInstanceReservationArgsDict']]]] reservations: The reservation used by this virtual server instance
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: Instance resource group
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] status: instance status
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceStatusReasonArgs', 'IsInstanceStatusReasonArgsDict']]]] status_reasons: The reasons for the current status (if any).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: list of tags for the instance
        :param pulumi.Input[_builtins.float] total_network_bandwidth: The amount of bandwidth (in megabits per second) allocated exclusively to instance network interfaces.
        :param pulumi.Input[_builtins.float] total_volume_bandwidth: The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        :param pulumi.Input[_builtins.str] user_data: User data given for the instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] volumes: List of volumes
        :param pulumi.Input[_builtins.str] vpc: VPC id
        :param pulumi.Input[_builtins.bool] wait_before_delete: Enables stopping of instance before deleting and waits till deletion is complete
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsInstanceState.__new__(_IsInstanceState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["action"] = action
        __props__.__dict__["auto_delete_volume"] = auto_delete_volume
        __props__.__dict__["availability_policy_host_failure"] = availability_policy_host_failure
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["boot_volume"] = boot_volume
        __props__.__dict__["catalog_offering"] = catalog_offering
        __props__.__dict__["cluster_network_attachments"] = cluster_network_attachments
        __props__.__dict__["cluster_networks"] = cluster_networks
        __props__.__dict__["confidential_compute_mode"] = confidential_compute_mode
        __props__.__dict__["crn"] = crn
        __props__.__dict__["dedicated_host"] = dedicated_host
        __props__.__dict__["dedicated_host_group"] = dedicated_host_group
        __props__.__dict__["default_trusted_profile_auto_link"] = default_trusted_profile_auto_link
        __props__.__dict__["default_trusted_profile_target"] = default_trusted_profile_target
        __props__.__dict__["disks"] = disks
        __props__.__dict__["enable_secure_boot"] = enable_secure_boot
        __props__.__dict__["force_action"] = force_action
        __props__.__dict__["force_recovery_time"] = force_recovery_time
        __props__.__dict__["gpus"] = gpus
        __props__.__dict__["health_reasons"] = health_reasons
        __props__.__dict__["health_state"] = health_state
        __props__.__dict__["image"] = image
        __props__.__dict__["instance_template"] = instance_template
        __props__.__dict__["is_instance_id"] = is_instance_id
        __props__.__dict__["keys"] = keys
        __props__.__dict__["lifecycle_reasons"] = lifecycle_reasons
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["memory"] = memory
        __props__.__dict__["metadata_service"] = metadata_service
        __props__.__dict__["metadata_service_enabled"] = metadata_service_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["network_attachments"] = network_attachments
        __props__.__dict__["network_interfaces"] = network_interfaces
        __props__.__dict__["numa_count"] = numa_count
        __props__.__dict__["placement_group"] = placement_group
        __props__.__dict__["placement_targets"] = placement_targets
        __props__.__dict__["primary_network_attachment"] = primary_network_attachment
        __props__.__dict__["primary_network_interface"] = primary_network_interface
        __props__.__dict__["profile"] = profile
        __props__.__dict__["reservation_affinities"] = reservation_affinities
        __props__.__dict__["reservations"] = reservations
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_crn"] = resource_crn
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["total_network_bandwidth"] = total_network_bandwidth
        __props__.__dict__["total_volume_bandwidth"] = total_volume_bandwidth
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["vcpus"] = vcpus
        __props__.__dict__["volume_attachments"] = volume_attachments
        __props__.__dict__["volume_prototypes"] = volume_prototypes
        __props__.__dict__["volumes"] = volumes
        __props__.__dict__["vpc"] = vpc
        __props__.__dict__["wait_before_delete"] = wait_before_delete
        __props__.__dict__["zone"] = zone
        return IsInstance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        list of access tags for the instance
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Enables stopping of instance before deleting and waits till deletion is complete
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="autoDeleteVolume")
    def auto_delete_volume(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Auto delete volume along with instance
        """
        return pulumi.get(self, "auto_delete_volume")

    @_builtins.property
    @pulumi.getter(name="availabilityPolicyHostFailure")
    def availability_policy_host_failure(self) -> pulumi.Output[_builtins.str]:
        """
        The availability policy to use for this virtual server instance
        """
        return pulumi.get(self, "availability_policy_host_failure")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[_builtins.float]:
        """
        The total bandwidth (in megabits per second) shared across the instance's network interfaces and storage volumes
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="bootVolume")
    def boot_volume(self) -> pulumi.Output[Optional['outputs.IsInstanceBootVolume']]:
        return pulumi.get(self, "boot_volume")

    @_builtins.property
    @pulumi.getter(name="catalogOffering")
    def catalog_offering(self) -> pulumi.Output[Optional['outputs.IsInstanceCatalogOffering']]:
        """
        The catalog offering or offering version to use when provisioning this virtual server instance. If an offering is
        specified, the latest version of that offering will be used. The specified offering or offering version may be in a
        different account in the same enterprise, subject to IAM policies.
        """
        return pulumi.get(self, "catalog_offering")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkAttachments")
    def cluster_network_attachments(self) -> pulumi.Output[Optional[Sequence['outputs.IsInstanceClusterNetworkAttachment']]]:
        """
        The cluster network attachments for this virtual server instance.The cluster network attachments are ordered for
        consistent instance configuration.
        """
        return pulumi.get(self, "cluster_network_attachments")

    @_builtins.property
    @pulumi.getter(name="clusterNetworks")
    def cluster_networks(self) -> pulumi.Output[Sequence['outputs.IsInstanceClusterNetwork']]:
        """
        If present, the cluster network that this virtual server instance resides in.
        """
        return pulumi.get(self, "cluster_networks")

    @_builtins.property
    @pulumi.getter(name="confidentialComputeMode")
    def confidential_compute_mode(self) -> pulumi.Output[_builtins.str]:
        """
        The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
        mode from the profile will be used.
        """
        return pulumi.get(self, "confidential_compute_mode")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        Crn for this Instance
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="dedicatedHost")
    def dedicated_host(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Unique Identifier of the Dedicated Host where the instance will be placed
        """
        return pulumi.get(self, "dedicated_host")

    @_builtins.property
    @pulumi.getter(name="dedicatedHostGroup")
    def dedicated_host_group(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Unique Identifier of the Dedicated Host Group where the instance will be placed
        """
        return pulumi.get(self, "dedicated_host_group")

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileAutoLink")
    def default_trusted_profile_auto_link(self) -> pulumi.Output[_builtins.bool]:
        """
        If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
        Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
        automatically deleted when the instance is deleted.
        """
        return pulumi.get(self, "default_trusted_profile_auto_link")

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileTarget")
    def default_trusted_profile_target(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        """
        return pulumi.get(self, "default_trusted_profile_target")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> pulumi.Output[Sequence['outputs.IsInstanceDisk']]:
        """
        Collection of the instance's disks.
        """
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
        from the profile will be used.
        """
        return pulumi.get(self, "enable_secure_boot")

    @_builtins.property
    @pulumi.getter(name="forceAction")
    def force_action(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        """
        return pulumi.get(self, "force_action")

    @_builtins.property
    @pulumi.getter(name="forceRecoveryTime")
    def force_recovery_time(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Define timeout to force the instances to start/stop in minutes.
        """
        return pulumi.get(self, "force_recovery_time")

    @_builtins.property
    @pulumi.getter
    def gpus(self) -> pulumi.Output[Sequence['outputs.IsInstanceGpus']]:
        """
        The virtual server instance GPU configuration
        """
        return pulumi.get(self, "gpus")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> pulumi.Output[Sequence['outputs.IsInstanceHealthReason']]:
        """
        The reasons for the current health_state (if any).
        """
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> pulumi.Output[_builtins.str]:
        """
        The health of this resource
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def image(self) -> pulumi.Output[_builtins.str]:
        """
        image id
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="instanceTemplate")
    def instance_template(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Id of the instance template
        """
        return pulumi.get(self, "instance_template")

    @_builtins.property
    @pulumi.getter(name="isInstanceId")
    def is_instance_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_instance_id")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        SSH key Ids for the instance
        """
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> pulumi.Output[Sequence['outputs.IsInstanceLifecycleReason']]:
        """
        The reasons for the current lifecycle_state (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the virtual server instance.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> pulumi.Output[_builtins.float]:
        """
        Instance memory
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="metadataService")
    def metadata_service(self) -> pulumi.Output[Optional['outputs.IsInstanceMetadataService']]:
        """
        The metadata service configuration
        """
        return pulumi.get(self, "metadata_service")

    @_builtins.property
    @pulumi.getter(name="metadataServiceEnabled")
    @_utilities.deprecated("""Deprecated""")
    def metadata_service_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the metadata service endpoint is available to the virtual server instance
        """
        return pulumi.get(self, "metadata_service_enabled")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Instance name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> pulumi.Output[Optional[Sequence['outputs.IsInstanceNetworkAttachment']]]:
        """
        The network attachments for this virtual server instance, including the primary network attachment.
        """
        return pulumi.get(self, "network_attachments")

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.IsInstanceNetworkInterface']]]:
        return pulumi.get(self, "network_interfaces")

    @_builtins.property
    @pulumi.getter(name="numaCount")
    def numa_count(self) -> pulumi.Output[_builtins.float]:
        """
        The number of NUMA nodes this virtual server instance is provisioned on. This property may be absent if the instance's
        `status` is not `running`.
        """
        return pulumi.get(self, "numa_count")

    @_builtins.property
    @pulumi.getter(name="placementGroup")
    def placement_group(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Unique Identifier of the Placement Group for restricting the placement of the instance
        """
        return pulumi.get(self, "placement_group")

    @_builtins.property
    @pulumi.getter(name="placementTargets")
    def placement_targets(self) -> pulumi.Output[Sequence['outputs.IsInstancePlacementTarget']]:
        """
        The placement restrictions for the virtual server instance.
        """
        return pulumi.get(self, "placement_targets")

    @_builtins.property
    @pulumi.getter(name="primaryNetworkAttachment")
    def primary_network_attachment(self) -> pulumi.Output[Optional['outputs.IsInstancePrimaryNetworkAttachment']]:
        """
        The primary network attachment for this virtual server instance.
        """
        return pulumi.get(self, "primary_network_attachment")

    @_builtins.property
    @pulumi.getter(name="primaryNetworkInterface")
    def primary_network_interface(self) -> pulumi.Output[Optional['outputs.IsInstancePrimaryNetworkInterface']]:
        """
        Primary Network interface info
        """
        return pulumi.get(self, "primary_network_interface")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Output[_builtins.str]:
        """
        Profile info
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="reservationAffinities")
    def reservation_affinities(self) -> pulumi.Output[Optional[Sequence['outputs.IsInstanceReservationAffinity']]]:
        return pulumi.get(self, "reservation_affinities")

    @_builtins.property
    @pulumi.getter
    def reservations(self) -> pulumi.Output[Sequence['outputs.IsInstanceReservation']]:
        """
        The reservation used by this virtual server instance
        """
        return pulumi.get(self, "reservations")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Instance resource group
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        instance status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.IsInstanceStatusReason']]:
        """
        The reasons for the current status (if any).
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        list of tags for the instance
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsInstanceTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="totalNetworkBandwidth")
    def total_network_bandwidth(self) -> pulumi.Output[_builtins.float]:
        """
        The amount of bandwidth (in megabits per second) allocated exclusively to instance network interfaces.
        """
        return pulumi.get(self, "total_network_bandwidth")

    @_builtins.property
    @pulumi.getter(name="totalVolumeBandwidth")
    def total_volume_bandwidth(self) -> pulumi.Output[_builtins.float]:
        """
        The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        """
        return pulumi.get(self, "total_volume_bandwidth")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        User data given for the instance
        """
        return pulumi.get(self, "user_data")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> pulumi.Output[Sequence['outputs.IsInstanceVcpus']]:
        return pulumi.get(self, "vcpus")

    @_builtins.property
    @pulumi.getter(name="volumeAttachments")
    def volume_attachments(self) -> pulumi.Output[Sequence['outputs.IsInstanceVolumeAttachment']]:
        return pulumi.get(self, "volume_attachments")

    @_builtins.property
    @pulumi.getter(name="volumePrototypes")
    def volume_prototypes(self) -> pulumi.Output[Optional[Sequence['outputs.IsInstanceVolumePrototype']]]:
        return pulumi.get(self, "volume_prototypes")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of volumes
        """
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[_builtins.str]:
        """
        VPC id
        """
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter(name="waitBeforeDelete")
    def wait_before_delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enables stopping of instance before deleting and waits till deletion is complete
        """
        return pulumi.get(self, "wait_before_delete")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

