# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpcsResult',
    'AwaitableGetIsVpcsResult',
    'get_is_vpcs',
    'get_is_vpcs_output',
]

@pulumi.output_type
class GetIsVpcsResult:
    """
    A collection of values returned by getIsVpcs.
    """
    def __init__(__self__, classic_access=None, id=None, resource_group=None, vpcs=None):
        if classic_access and not isinstance(classic_access, bool):
            raise TypeError("Expected argument 'classic_access' to be a bool")
        pulumi.set(__self__, "classic_access", classic_access)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if vpcs and not isinstance(vpcs, list):
            raise TypeError("Expected argument 'vpcs' to be a list")
        pulumi.set(__self__, "vpcs", vpcs)

    @_builtins.property
    @pulumi.getter(name="classicAccess")
    def classic_access(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "classic_access")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetIsVpcsVpcResult']:
        return pulumi.get(self, "vpcs")


class AwaitableGetIsVpcsResult(GetIsVpcsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpcsResult(
            classic_access=self.classic_access,
            id=self.id,
            resource_group=self.resource_group,
            vpcs=self.vpcs)


def get_is_vpcs(classic_access: Optional[_builtins.bool] = None,
                id: Optional[_builtins.str] = None,
                resource_group: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpcsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['classicAccess'] = classic_access
    __args__['id'] = id
    __args__['resourceGroup'] = resource_group
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpcs:getIsVpcs', __args__, opts=opts, typ=GetIsVpcsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpcsResult(
        classic_access=pulumi.get(__ret__, 'classic_access'),
        id=pulumi.get(__ret__, 'id'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        vpcs=pulumi.get(__ret__, 'vpcs'))
def get_is_vpcs_output(classic_access: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                       id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpcsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['classicAccess'] = classic_access
    __args__['id'] = id
    __args__['resourceGroup'] = resource_group
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpcs:getIsVpcs', __args__, opts=opts, typ=GetIsVpcsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpcsResult(
        classic_access=pulumi.get(__response__, 'classic_access'),
        id=pulumi.get(__response__, 'id'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        vpcs=pulumi.get(__response__, 'vpcs')))
