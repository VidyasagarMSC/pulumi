# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSchematicsAgentResult',
    'AwaitableGetSchematicsAgentResult',
    'get_schematics_agent',
    'get_schematics_agent_output',
]

@pulumi.output_type
class GetSchematicsAgentResult:
    """
    A collection of values returned by getSchematicsAgent.
    """
    def __init__(__self__, agent_crn=None, agent_id=None, agent_infrastructures=None, agent_inputs=None, agent_kpis=None, agent_location=None, agent_metadatas=None, created_at=None, creation_by=None, description=None, id=None, name=None, recent_deploy_jobs=None, recent_health_jobs=None, recent_prs_jobs=None, resource_group=None, schematics_location=None, system_states=None, tags=None, updated_at=None, updated_by=None, user_states=None, version=None):
        if agent_crn and not isinstance(agent_crn, str):
            raise TypeError("Expected argument 'agent_crn' to be a str")
        pulumi.set(__self__, "agent_crn", agent_crn)
        if agent_id and not isinstance(agent_id, str):
            raise TypeError("Expected argument 'agent_id' to be a str")
        pulumi.set(__self__, "agent_id", agent_id)
        if agent_infrastructures and not isinstance(agent_infrastructures, list):
            raise TypeError("Expected argument 'agent_infrastructures' to be a list")
        pulumi.set(__self__, "agent_infrastructures", agent_infrastructures)
        if agent_inputs and not isinstance(agent_inputs, list):
            raise TypeError("Expected argument 'agent_inputs' to be a list")
        pulumi.set(__self__, "agent_inputs", agent_inputs)
        if agent_kpis and not isinstance(agent_kpis, list):
            raise TypeError("Expected argument 'agent_kpis' to be a list")
        pulumi.set(__self__, "agent_kpis", agent_kpis)
        if agent_location and not isinstance(agent_location, str):
            raise TypeError("Expected argument 'agent_location' to be a str")
        pulumi.set(__self__, "agent_location", agent_location)
        if agent_metadatas and not isinstance(agent_metadatas, list):
            raise TypeError("Expected argument 'agent_metadatas' to be a list")
        pulumi.set(__self__, "agent_metadatas", agent_metadatas)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if creation_by and not isinstance(creation_by, str):
            raise TypeError("Expected argument 'creation_by' to be a str")
        pulumi.set(__self__, "creation_by", creation_by)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if recent_deploy_jobs and not isinstance(recent_deploy_jobs, list):
            raise TypeError("Expected argument 'recent_deploy_jobs' to be a list")
        pulumi.set(__self__, "recent_deploy_jobs", recent_deploy_jobs)
        if recent_health_jobs and not isinstance(recent_health_jobs, list):
            raise TypeError("Expected argument 'recent_health_jobs' to be a list")
        pulumi.set(__self__, "recent_health_jobs", recent_health_jobs)
        if recent_prs_jobs and not isinstance(recent_prs_jobs, list):
            raise TypeError("Expected argument 'recent_prs_jobs' to be a list")
        pulumi.set(__self__, "recent_prs_jobs", recent_prs_jobs)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if schematics_location and not isinstance(schematics_location, str):
            raise TypeError("Expected argument 'schematics_location' to be a str")
        pulumi.set(__self__, "schematics_location", schematics_location)
        if system_states and not isinstance(system_states, list):
            raise TypeError("Expected argument 'system_states' to be a list")
        pulumi.set(__self__, "system_states", system_states)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)
        if user_states and not isinstance(user_states, list):
            raise TypeError("Expected argument 'user_states' to be a list")
        pulumi.set(__self__, "user_states", user_states)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="agentCrn")
    def agent_crn(self) -> _builtins.str:
        return pulumi.get(self, "agent_crn")

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="agentInfrastructures")
    def agent_infrastructures(self) -> Sequence['outputs.GetSchematicsAgentAgentInfrastructureResult']:
        return pulumi.get(self, "agent_infrastructures")

    @_builtins.property
    @pulumi.getter(name="agentInputs")
    def agent_inputs(self) -> Sequence['outputs.GetSchematicsAgentAgentInputResult']:
        return pulumi.get(self, "agent_inputs")

    @_builtins.property
    @pulumi.getter(name="agentKpis")
    def agent_kpis(self) -> Sequence['outputs.GetSchematicsAgentAgentKpiResult']:
        return pulumi.get(self, "agent_kpis")

    @_builtins.property
    @pulumi.getter(name="agentLocation")
    def agent_location(self) -> _builtins.str:
        return pulumi.get(self, "agent_location")

    @_builtins.property
    @pulumi.getter(name="agentMetadatas")
    def agent_metadatas(self) -> Sequence['outputs.GetSchematicsAgentAgentMetadataResult']:
        return pulumi.get(self, "agent_metadatas")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="creationBy")
    def creation_by(self) -> _builtins.str:
        return pulumi.get(self, "creation_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="recentDeployJobs")
    def recent_deploy_jobs(self) -> Sequence['outputs.GetSchematicsAgentRecentDeployJobResult']:
        return pulumi.get(self, "recent_deploy_jobs")

    @_builtins.property
    @pulumi.getter(name="recentHealthJobs")
    def recent_health_jobs(self) -> Sequence['outputs.GetSchematicsAgentRecentHealthJobResult']:
        return pulumi.get(self, "recent_health_jobs")

    @_builtins.property
    @pulumi.getter(name="recentPrsJobs")
    def recent_prs_jobs(self) -> Sequence['outputs.GetSchematicsAgentRecentPrsJobResult']:
        return pulumi.get(self, "recent_prs_jobs")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="schematicsLocation")
    def schematics_location(self) -> _builtins.str:
        return pulumi.get(self, "schematics_location")

    @_builtins.property
    @pulumi.getter(name="systemStates")
    def system_states(self) -> Sequence['outputs.GetSchematicsAgentSystemStateResult']:
        return pulumi.get(self, "system_states")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="userStates")
    def user_states(self) -> Sequence['outputs.GetSchematicsAgentUserStateResult']:
        return pulumi.get(self, "user_states")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetSchematicsAgentResult(GetSchematicsAgentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchematicsAgentResult(
            agent_crn=self.agent_crn,
            agent_id=self.agent_id,
            agent_infrastructures=self.agent_infrastructures,
            agent_inputs=self.agent_inputs,
            agent_kpis=self.agent_kpis,
            agent_location=self.agent_location,
            agent_metadatas=self.agent_metadatas,
            created_at=self.created_at,
            creation_by=self.creation_by,
            description=self.description,
            id=self.id,
            name=self.name,
            recent_deploy_jobs=self.recent_deploy_jobs,
            recent_health_jobs=self.recent_health_jobs,
            recent_prs_jobs=self.recent_prs_jobs,
            resource_group=self.resource_group,
            schematics_location=self.schematics_location,
            system_states=self.system_states,
            tags=self.tags,
            updated_at=self.updated_at,
            updated_by=self.updated_by,
            user_states=self.user_states,
            version=self.version)


def get_schematics_agent(agent_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchematicsAgentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['agentId'] = agent_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSchematicsAgent:getSchematicsAgent', __args__, opts=opts, typ=GetSchematicsAgentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSchematicsAgentResult(
        agent_crn=pulumi.get(__ret__, 'agent_crn'),
        agent_id=pulumi.get(__ret__, 'agent_id'),
        agent_infrastructures=pulumi.get(__ret__, 'agent_infrastructures'),
        agent_inputs=pulumi.get(__ret__, 'agent_inputs'),
        agent_kpis=pulumi.get(__ret__, 'agent_kpis'),
        agent_location=pulumi.get(__ret__, 'agent_location'),
        agent_metadatas=pulumi.get(__ret__, 'agent_metadatas'),
        created_at=pulumi.get(__ret__, 'created_at'),
        creation_by=pulumi.get(__ret__, 'creation_by'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        recent_deploy_jobs=pulumi.get(__ret__, 'recent_deploy_jobs'),
        recent_health_jobs=pulumi.get(__ret__, 'recent_health_jobs'),
        recent_prs_jobs=pulumi.get(__ret__, 'recent_prs_jobs'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        schematics_location=pulumi.get(__ret__, 'schematics_location'),
        system_states=pulumi.get(__ret__, 'system_states'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        user_states=pulumi.get(__ret__, 'user_states'),
        version=pulumi.get(__ret__, 'version'))
def get_schematics_agent_output(agent_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSchematicsAgentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['agentId'] = agent_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSchematicsAgent:getSchematicsAgent', __args__, opts=opts, typ=GetSchematicsAgentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSchematicsAgentResult(
        agent_crn=pulumi.get(__response__, 'agent_crn'),
        agent_id=pulumi.get(__response__, 'agent_id'),
        agent_infrastructures=pulumi.get(__response__, 'agent_infrastructures'),
        agent_inputs=pulumi.get(__response__, 'agent_inputs'),
        agent_kpis=pulumi.get(__response__, 'agent_kpis'),
        agent_location=pulumi.get(__response__, 'agent_location'),
        agent_metadatas=pulumi.get(__response__, 'agent_metadatas'),
        created_at=pulumi.get(__response__, 'created_at'),
        creation_by=pulumi.get(__response__, 'creation_by'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        recent_deploy_jobs=pulumi.get(__response__, 'recent_deploy_jobs'),
        recent_health_jobs=pulumi.get(__response__, 'recent_health_jobs'),
        recent_prs_jobs=pulumi.get(__response__, 'recent_prs_jobs'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        schematics_location=pulumi.get(__response__, 'schematics_location'),
        system_states=pulumi.get(__response__, 'system_states'),
        tags=pulumi.get(__response__, 'tags'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        updated_by=pulumi.get(__response__, 'updated_by'),
        user_states=pulumi.get(__response__, 'user_states'),
        version=pulumi.get(__response__, 'version')))
