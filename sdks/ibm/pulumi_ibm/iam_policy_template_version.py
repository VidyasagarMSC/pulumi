# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IamPolicyTemplateVersionArgs', 'IamPolicyTemplateVersion']

@pulumi.input_type
class IamPolicyTemplateVersionArgs:
    def __init__(__self__, *,
                 policy: pulumi.Input['IamPolicyTemplateVersionPolicyArgs'],
                 template_id: pulumi.Input[_builtins.str],
                 committed: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_policy_template_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamPolicyTemplateVersion resource.
        :param pulumi.Input['IamPolicyTemplateVersionPolicyArgs'] policy: The core set of properties associated with the template's policy objet.
        :param pulumi.Input[_builtins.str] template_id: The policy template ID and Version.
        :param pulumi.Input[_builtins.bool] committed: Template version committed status.
        :param pulumi.Input[_builtins.str] description: description of template purpose.
        """
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "template_id", template_id)
        if committed is not None:
            pulumi.set(__self__, "committed", committed)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iam_policy_template_version_id is not None:
            pulumi.set(__self__, "iam_policy_template_version_id", iam_policy_template_version_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def policy(self) -> pulumi.Input['IamPolicyTemplateVersionPolicyArgs']:
        """
        The core set of properties associated with the template's policy objet.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: pulumi.Input['IamPolicyTemplateVersionPolicyArgs']):
        pulumi.set(self, "policy", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Input[_builtins.str]:
        """
        The policy template ID and Version.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter
    def committed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Template version committed status.
        """
        return pulumi.get(self, "committed")

    @committed.setter
    def committed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "committed", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        description of template purpose.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="iamPolicyTemplateVersionId")
    def iam_policy_template_version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_policy_template_version_id")

    @iam_policy_template_version_id.setter
    def iam_policy_template_version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_policy_template_version_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _IamPolicyTemplateVersionState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 committed: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_policy_template_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input['IamPolicyTemplateVersionPolicyArgs']] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamPolicyTemplateVersion resources.
        :param pulumi.Input[_builtins.bool] committed: Template version committed status.
        :param pulumi.Input[_builtins.str] description: description of template purpose.
        :param pulumi.Input['IamPolicyTemplateVersionPolicyArgs'] policy: The core set of properties associated with the template's policy objet.
        :param pulumi.Input[_builtins.str] template_id: The policy template ID and Version.
        :param pulumi.Input[_builtins.str] version: Template Version.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if committed is not None:
            pulumi.set(__self__, "committed", committed)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iam_policy_template_version_id is not None:
            pulumi.set(__self__, "iam_policy_template_version_id", iam_policy_template_version_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter
    def committed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Template version committed status.
        """
        return pulumi.get(self, "committed")

    @committed.setter
    def committed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "committed", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        description of template purpose.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="iamPolicyTemplateVersionId")
    def iam_policy_template_version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_policy_template_version_id")

    @iam_policy_template_version_id.setter
    def iam_policy_template_version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_policy_template_version_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input['IamPolicyTemplateVersionPolicyArgs']]:
        """
        The core set of properties associated with the template's policy objet.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input['IamPolicyTemplateVersionPolicyArgs']]):
        pulumi.set(self, "policy", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The policy template ID and Version.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Template Version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/iamPolicyTemplateVersion:IamPolicyTemplateVersion")
class IamPolicyTemplateVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 committed: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_policy_template_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input[Union['IamPolicyTemplateVersionPolicyArgs', 'IamPolicyTemplateVersionPolicyArgsDict']]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IamPolicyTemplateVersion resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] committed: Template version committed status.
        :param pulumi.Input[_builtins.str] description: description of template purpose.
        :param pulumi.Input[Union['IamPolicyTemplateVersionPolicyArgs', 'IamPolicyTemplateVersionPolicyArgsDict']] policy: The core set of properties associated with the template's policy objet.
        :param pulumi.Input[_builtins.str] template_id: The policy template ID and Version.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamPolicyTemplateVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamPolicyTemplateVersion resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamPolicyTemplateVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamPolicyTemplateVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 committed: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_policy_template_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input[Union['IamPolicyTemplateVersionPolicyArgs', 'IamPolicyTemplateVersionPolicyArgsDict']]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamPolicyTemplateVersionArgs.__new__(IamPolicyTemplateVersionArgs)

            __props__.__dict__["committed"] = committed
            __props__.__dict__["description"] = description
            __props__.__dict__["iam_policy_template_version_id"] = iam_policy_template_version_id
            __props__.__dict__["name"] = name
            if policy is None and not opts.urn:
                raise TypeError("Missing required property 'policy'")
            __props__.__dict__["policy"] = policy
            if template_id is None and not opts.urn:
                raise TypeError("Missing required property 'template_id'")
            __props__.__dict__["template_id"] = template_id
            __props__.__dict__["account_id"] = None
            __props__.__dict__["version"] = None
        super(IamPolicyTemplateVersion, __self__).__init__(
            'ibm:index/iamPolicyTemplateVersion:IamPolicyTemplateVersion',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            committed: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            iam_policy_template_version_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            policy: Optional[pulumi.Input[Union['IamPolicyTemplateVersionPolicyArgs', 'IamPolicyTemplateVersionPolicyArgsDict']]] = None,
            template_id: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamPolicyTemplateVersion':
        """
        Get an existing IamPolicyTemplateVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] committed: Template version committed status.
        :param pulumi.Input[_builtins.str] description: description of template purpose.
        :param pulumi.Input[Union['IamPolicyTemplateVersionPolicyArgs', 'IamPolicyTemplateVersionPolicyArgsDict']] policy: The core set of properties associated with the template's policy objet.
        :param pulumi.Input[_builtins.str] template_id: The policy template ID and Version.
        :param pulumi.Input[_builtins.str] version: Template Version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamPolicyTemplateVersionState.__new__(_IamPolicyTemplateVersionState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["committed"] = committed
        __props__.__dict__["description"] = description
        __props__.__dict__["iam_policy_template_version_id"] = iam_policy_template_version_id
        __props__.__dict__["name"] = name
        __props__.__dict__["policy"] = policy
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["version"] = version
        return IamPolicyTemplateVersion(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def committed(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Template version committed status.
        """
        return pulumi.get(self, "committed")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        description of template purpose.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="iamPolicyTemplateVersionId")
    def iam_policy_template_version_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_policy_template_version_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> pulumi.Output['outputs.IamPolicyTemplateVersionPolicy']:
        """
        The core set of properties associated with the template's policy objet.
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[_builtins.str]:
        """
        The policy template ID and Version.
        """
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Template Version.
        """
        return pulumi.get(self, "version")

