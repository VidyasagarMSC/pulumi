# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogsRouterTenantArgs', 'LogsRouterTenant']

@pulumi.input_type
class LogsRouterTenantArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[_builtins.str],
                 targets: pulumi.Input[Sequence[pulumi.Input['LogsRouterTenantTargetArgs']]],
                 logs_router_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LogsRouterTenant resource.
        :param pulumi.Input[_builtins.str] region: The region where this tenant exists.
        :param pulumi.Input[Sequence[pulumi.Input['LogsRouterTenantTargetArgs']]] targets: List of targets
        :param pulumi.Input[_builtins.str] name: The name for this tenant. The name is regionally unique across all tenants in the account.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "targets", targets)
        if logs_router_tenant_id is not None:
            pulumi.set(__self__, "logs_router_tenant_id", logs_router_tenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        The region where this tenant exists.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Input[Sequence[pulumi.Input['LogsRouterTenantTargetArgs']]]:
        """
        List of targets
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: pulumi.Input[Sequence[pulumi.Input['LogsRouterTenantTargetArgs']]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter(name="logsRouterTenantId")
    def logs_router_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_router_tenant_id")

    @logs_router_tenant_id.setter
    def logs_router_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_router_tenant_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this tenant. The name is regionally unique across all tenants in the account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _LogsRouterTenantState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_router_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['LogsRouterTenantTargetArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogsRouterTenant resources.
        :param pulumi.Input[_builtins.str] created_at: Time stamp the tenant was originally created.
        :param pulumi.Input[_builtins.str] crn: Cloud resource name of the tenant.
        :param pulumi.Input[_builtins.str] etag: Resource version identifier.
        :param pulumi.Input[_builtins.str] name: The name for this tenant. The name is regionally unique across all tenants in the account.
        :param pulumi.Input[_builtins.str] region: The region where this tenant exists.
        :param pulumi.Input[Sequence[pulumi.Input['LogsRouterTenantTargetArgs']]] targets: List of targets
        :param pulumi.Input[_builtins.str] updated_at: Time stamp the tenant was last updated.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if logs_router_tenant_id is not None:
            pulumi.set(__self__, "logs_router_tenant_id", logs_router_tenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time stamp the tenant was originally created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud resource name of the tenant.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource version identifier.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter(name="logsRouterTenantId")
    def logs_router_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_router_tenant_id")

    @logs_router_tenant_id.setter
    def logs_router_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_router_tenant_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this tenant. The name is regionally unique across all tenants in the account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where this tenant exists.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsRouterTenantTargetArgs']]]]:
        """
        List of targets
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsRouterTenantTargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time stamp the tenant was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/logsRouterTenant:LogsRouterTenant")
class LogsRouterTenant(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 logs_router_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsRouterTenantTargetArgs', 'LogsRouterTenantTargetArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a LogsRouterTenant resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name for this tenant. The name is regionally unique across all tenants in the account.
        :param pulumi.Input[_builtins.str] region: The region where this tenant exists.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsRouterTenantTargetArgs', 'LogsRouterTenantTargetArgsDict']]]] targets: List of targets
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogsRouterTenantArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogsRouterTenant resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogsRouterTenantArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogsRouterTenantArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 logs_router_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsRouterTenantTargetArgs', 'LogsRouterTenantTargetArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogsRouterTenantArgs.__new__(LogsRouterTenantArgs)

            __props__.__dict__["logs_router_tenant_id"] = logs_router_tenant_id
            __props__.__dict__["name"] = name
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if targets is None and not opts.urn:
                raise TypeError("Missing required property 'targets'")
            __props__.__dict__["targets"] = targets
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["updated_at"] = None
        super(LogsRouterTenant, __self__).__init__(
            'ibm:index/logsRouterTenant:LogsRouterTenant',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            logs_router_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsRouterTenantTargetArgs', 'LogsRouterTenantTargetArgsDict']]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogsRouterTenant':
        """
        Get an existing LogsRouterTenant resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Time stamp the tenant was originally created.
        :param pulumi.Input[_builtins.str] crn: Cloud resource name of the tenant.
        :param pulumi.Input[_builtins.str] etag: Resource version identifier.
        :param pulumi.Input[_builtins.str] name: The name for this tenant. The name is regionally unique across all tenants in the account.
        :param pulumi.Input[_builtins.str] region: The region where this tenant exists.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsRouterTenantTargetArgs', 'LogsRouterTenantTargetArgsDict']]]] targets: List of targets
        :param pulumi.Input[_builtins.str] updated_at: Time stamp the tenant was last updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogsRouterTenantState.__new__(_LogsRouterTenantState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["etag"] = etag
        __props__.__dict__["logs_router_tenant_id"] = logs_router_tenant_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["targets"] = targets
        __props__.__dict__["updated_at"] = updated_at
        return LogsRouterTenant(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Time stamp the tenant was originally created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        Cloud resource name of the tenant.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        """
        Resource version identifier.
        """
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter(name="logsRouterTenantId")
    def logs_router_tenant_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "logs_router_tenant_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for this tenant. The name is regionally unique across all tenants in the account.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region where this tenant exists.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Sequence['outputs.LogsRouterTenantTarget']]:
        """
        List of targets
        """
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Time stamp the tenant was last updated.
        """
        return pulumi.get(self, "updated_at")

