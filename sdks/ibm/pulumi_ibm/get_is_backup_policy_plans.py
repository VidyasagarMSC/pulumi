# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBackupPolicyPlansResult',
    'AwaitableGetIsBackupPolicyPlansResult',
    'get_is_backup_policy_plans',
    'get_is_backup_policy_plans_output',
]

@pulumi.output_type
class GetIsBackupPolicyPlansResult:
    """
    A collection of values returned by getIsBackupPolicyPlans.
    """
    def __init__(__self__, backup_policy_id=None, id=None, name=None, plans=None):
        if backup_policy_id and not isinstance(backup_policy_id, str):
            raise TypeError("Expected argument 'backup_policy_id' to be a str")
        pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plans and not isinstance(plans, list):
            raise TypeError("Expected argument 'plans' to be a list")
        pulumi.set(__self__, "plans", plans)

    @_builtins.property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "backup_policy_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def plans(self) -> Sequence['outputs.GetIsBackupPolicyPlansPlanResult']:
        return pulumi.get(self, "plans")


class AwaitableGetIsBackupPolicyPlansResult(GetIsBackupPolicyPlansResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBackupPolicyPlansResult(
            backup_policy_id=self.backup_policy_id,
            id=self.id,
            name=self.name,
            plans=self.plans)


def get_is_backup_policy_plans(backup_policy_id: Optional[_builtins.str] = None,
                               id: Optional[_builtins.str] = None,
                               name: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBackupPolicyPlansResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyId'] = backup_policy_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBackupPolicyPlans:getIsBackupPolicyPlans', __args__, opts=opts, typ=GetIsBackupPolicyPlansResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBackupPolicyPlansResult(
        backup_policy_id=pulumi.get(__ret__, 'backup_policy_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        plans=pulumi.get(__ret__, 'plans'))
def get_is_backup_policy_plans_output(backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBackupPolicyPlansResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyId'] = backup_policy_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBackupPolicyPlans:getIsBackupPolicyPlans', __args__, opts=opts, typ=GetIsBackupPolicyPlansResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBackupPolicyPlansResult(
        backup_policy_id=pulumi.get(__response__, 'backup_policy_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        plans=pulumi.get(__response__, 'plans')))
