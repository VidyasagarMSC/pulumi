# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBareMetalServerDiskResult',
    'AwaitableGetIsBareMetalServerDiskResult',
    'get_is_bare_metal_server_disk',
    'get_is_bare_metal_server_disk_output',
]

@pulumi.output_type
class GetIsBareMetalServerDiskResult:
    """
    A collection of values returned by getIsBareMetalServerDisk.
    """
    def __init__(__self__, allowed_uses=None, bare_metal_server=None, disk=None, href=None, id=None, interface_type=None, name=None, resource_type=None, size=None):
        if allowed_uses and not isinstance(allowed_uses, list):
            raise TypeError("Expected argument 'allowed_uses' to be a list")
        pulumi.set(__self__, "allowed_uses", allowed_uses)
        if bare_metal_server and not isinstance(bare_metal_server, str):
            raise TypeError("Expected argument 'bare_metal_server' to be a str")
        pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        if disk and not isinstance(disk, str):
            raise TypeError("Expected argument 'disk' to be a str")
        pulumi.set(__self__, "disk", disk)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_type and not isinstance(interface_type, str):
            raise TypeError("Expected argument 'interface_type' to be a str")
        pulumi.set(__self__, "interface_type", interface_type)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if size and not isinstance(size, float):
            raise TypeError("Expected argument 'size' to be a float")
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="allowedUses")
    def allowed_uses(self) -> Sequence['outputs.GetIsBareMetalServerDiskAllowedUseResult']:
        return pulumi.get(self, "allowed_uses")

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> _builtins.str:
        return pulumi.get(self, "bare_metal_server")

    @_builtins.property
    @pulumi.getter
    def disk(self) -> _builtins.str:
        return pulumi.get(self, "disk")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> _builtins.str:
        return pulumi.get(self, "interface_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.float:
        return pulumi.get(self, "size")


class AwaitableGetIsBareMetalServerDiskResult(GetIsBareMetalServerDiskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBareMetalServerDiskResult(
            allowed_uses=self.allowed_uses,
            bare_metal_server=self.bare_metal_server,
            disk=self.disk,
            href=self.href,
            id=self.id,
            interface_type=self.interface_type,
            name=self.name,
            resource_type=self.resource_type,
            size=self.size)


def get_is_bare_metal_server_disk(bare_metal_server: Optional[_builtins.str] = None,
                                  disk: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBareMetalServerDiskResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bareMetalServer'] = bare_metal_server
    __args__['disk'] = disk
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBareMetalServerDisk:getIsBareMetalServerDisk', __args__, opts=opts, typ=GetIsBareMetalServerDiskResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBareMetalServerDiskResult(
        allowed_uses=pulumi.get(__ret__, 'allowed_uses'),
        bare_metal_server=pulumi.get(__ret__, 'bare_metal_server'),
        disk=pulumi.get(__ret__, 'disk'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        interface_type=pulumi.get(__ret__, 'interface_type'),
        name=pulumi.get(__ret__, 'name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        size=pulumi.get(__ret__, 'size'))
def get_is_bare_metal_server_disk_output(bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                                         disk: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBareMetalServerDiskResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bareMetalServer'] = bare_metal_server
    __args__['disk'] = disk
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBareMetalServerDisk:getIsBareMetalServerDisk', __args__, opts=opts, typ=GetIsBareMetalServerDiskResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBareMetalServerDiskResult(
        allowed_uses=pulumi.get(__response__, 'allowed_uses'),
        bare_metal_server=pulumi.get(__response__, 'bare_metal_server'),
        disk=pulumi.get(__response__, 'disk'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        interface_type=pulumi.get(__response__, 'interface_type'),
        name=pulumi.get(__response__, 'name'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        size=pulumi.get(__response__, 'size')))
