# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetEnIntegrationsResult',
    'AwaitableGetEnIntegrationsResult',
    'get_en_integrations',
    'get_en_integrations_output',
]

@pulumi.output_type
class GetEnIntegrationsResult:
    """
    A collection of values returned by getEnIntegrations.
    """
    def __init__(__self__, id=None, instance_guid=None, integrations=None, search_key=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_guid and not isinstance(instance_guid, str):
            raise TypeError("Expected argument 'instance_guid' to be a str")
        pulumi.set(__self__, "instance_guid", instance_guid)
        if integrations and not isinstance(integrations, list):
            raise TypeError("Expected argument 'integrations' to be a list")
        pulumi.set(__self__, "integrations", integrations)
        if search_key and not isinstance(search_key, str):
            raise TypeError("Expected argument 'search_key' to be a str")
        pulumi.set(__self__, "search_key", search_key)
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceGuid")
    def instance_guid(self) -> _builtins.str:
        return pulumi.get(self, "instance_guid")

    @_builtins.property
    @pulumi.getter
    def integrations(self) -> Sequence['outputs.GetEnIntegrationsIntegrationResult']:
        return pulumi.get(self, "integrations")

    @_builtins.property
    @pulumi.getter(name="searchKey")
    def search_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "search_key")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.float:
        return pulumi.get(self, "total_count")


class AwaitableGetEnIntegrationsResult(GetEnIntegrationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnIntegrationsResult(
            id=self.id,
            instance_guid=self.instance_guid,
            integrations=self.integrations,
            search_key=self.search_key,
            total_count=self.total_count)


def get_en_integrations(id: Optional[_builtins.str] = None,
                        instance_guid: Optional[_builtins.str] = None,
                        search_key: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnIntegrationsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGuid'] = instance_guid
    __args__['searchKey'] = search_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEnIntegrations:getEnIntegrations', __args__, opts=opts, typ=GetEnIntegrationsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEnIntegrationsResult(
        id=pulumi.get(__ret__, 'id'),
        instance_guid=pulumi.get(__ret__, 'instance_guid'),
        integrations=pulumi.get(__ret__, 'integrations'),
        search_key=pulumi.get(__ret__, 'search_key'),
        total_count=pulumi.get(__ret__, 'total_count'))
def get_en_integrations_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                               search_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnIntegrationsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGuid'] = instance_guid
    __args__['searchKey'] = search_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEnIntegrations:getEnIntegrations', __args__, opts=opts, typ=GetEnIntegrationsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEnIntegrationsResult(
        id=pulumi.get(__response__, 'id'),
        instance_guid=pulumi.get(__response__, 'instance_guid'),
        integrations=pulumi.get(__response__, 'integrations'),
        search_key=pulumi.get(__response__, 'search_key'),
        total_count=pulumi.get(__response__, 'total_count')))
