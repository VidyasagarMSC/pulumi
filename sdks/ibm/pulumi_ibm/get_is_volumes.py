# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVolumesResult',
    'AwaitableGetIsVolumesResult',
    'get_is_volumes',
    'get_is_volumes_output',
]

@pulumi.output_type
class GetIsVolumesResult:
    """
    A collection of values returned by getIsVolumes.
    """
    def __init__(__self__, attachment_state=None, encryption=None, id=None, operating_system_architecture=None, operating_system_family=None, volume_name=None, volumes=None, zone_name=None):
        if attachment_state and not isinstance(attachment_state, str):
            raise TypeError("Expected argument 'attachment_state' to be a str")
        pulumi.set(__self__, "attachment_state", attachment_state)
        if encryption and not isinstance(encryption, str):
            raise TypeError("Expected argument 'encryption' to be a str")
        pulumi.set(__self__, "encryption", encryption)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if operating_system_architecture and not isinstance(operating_system_architecture, str):
            raise TypeError("Expected argument 'operating_system_architecture' to be a str")
        pulumi.set(__self__, "operating_system_architecture", operating_system_architecture)
        if operating_system_family and not isinstance(operating_system_family, str):
            raise TypeError("Expected argument 'operating_system_family' to be a str")
        pulumi.set(__self__, "operating_system_family", operating_system_family)
        if volume_name and not isinstance(volume_name, str):
            raise TypeError("Expected argument 'volume_name' to be a str")
        pulumi.set(__self__, "volume_name", volume_name)
        if volumes and not isinstance(volumes, list):
            raise TypeError("Expected argument 'volumes' to be a list")
        pulumi.set(__self__, "volumes", volumes)
        if zone_name and not isinstance(zone_name, str):
            raise TypeError("Expected argument 'zone_name' to be a str")
        pulumi.set(__self__, "zone_name", zone_name)

    @_builtins.property
    @pulumi.getter(name="attachmentState")
    def attachment_state(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "attachment_state")

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "encryption")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="operatingSystemArchitecture")
    def operating_system_architecture(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operating_system_architecture")

    @_builtins.property
    @pulumi.getter(name="operatingSystemFamily")
    def operating_system_family(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operating_system_family")

    @_builtins.property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "volume_name")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetIsVolumesVolumeResult']:
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "zone_name")


class AwaitableGetIsVolumesResult(GetIsVolumesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVolumesResult(
            attachment_state=self.attachment_state,
            encryption=self.encryption,
            id=self.id,
            operating_system_architecture=self.operating_system_architecture,
            operating_system_family=self.operating_system_family,
            volume_name=self.volume_name,
            volumes=self.volumes,
            zone_name=self.zone_name)


def get_is_volumes(attachment_state: Optional[_builtins.str] = None,
                   encryption: Optional[_builtins.str] = None,
                   id: Optional[_builtins.str] = None,
                   operating_system_architecture: Optional[_builtins.str] = None,
                   operating_system_family: Optional[_builtins.str] = None,
                   volume_name: Optional[_builtins.str] = None,
                   zone_name: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVolumesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attachmentState'] = attachment_state
    __args__['encryption'] = encryption
    __args__['id'] = id
    __args__['operatingSystemArchitecture'] = operating_system_architecture
    __args__['operatingSystemFamily'] = operating_system_family
    __args__['volumeName'] = volume_name
    __args__['zoneName'] = zone_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVolumes:getIsVolumes', __args__, opts=opts, typ=GetIsVolumesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVolumesResult(
        attachment_state=pulumi.get(__ret__, 'attachment_state'),
        encryption=pulumi.get(__ret__, 'encryption'),
        id=pulumi.get(__ret__, 'id'),
        operating_system_architecture=pulumi.get(__ret__, 'operating_system_architecture'),
        operating_system_family=pulumi.get(__ret__, 'operating_system_family'),
        volume_name=pulumi.get(__ret__, 'volume_name'),
        volumes=pulumi.get(__ret__, 'volumes'),
        zone_name=pulumi.get(__ret__, 'zone_name'))
def get_is_volumes_output(attachment_state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          encryption: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          operating_system_architecture: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          operating_system_family: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          volume_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          zone_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVolumesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attachmentState'] = attachment_state
    __args__['encryption'] = encryption
    __args__['id'] = id
    __args__['operatingSystemArchitecture'] = operating_system_architecture
    __args__['operatingSystemFamily'] = operating_system_family
    __args__['volumeName'] = volume_name
    __args__['zoneName'] = zone_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVolumes:getIsVolumes', __args__, opts=opts, typ=GetIsVolumesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVolumesResult(
        attachment_state=pulumi.get(__response__, 'attachment_state'),
        encryption=pulumi.get(__response__, 'encryption'),
        id=pulumi.get(__response__, 'id'),
        operating_system_architecture=pulumi.get(__response__, 'operating_system_architecture'),
        operating_system_family=pulumi.get(__response__, 'operating_system_family'),
        volume_name=pulumi.get(__response__, 'volume_name'),
        volumes=pulumi.get(__response__, 'volumes'),
        zone_name=pulumi.get(__response__, 'zone_name')))
