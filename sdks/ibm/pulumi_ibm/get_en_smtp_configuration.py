# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetEnSmtpConfigurationResult',
    'AwaitableGetEnSmtpConfigurationResult',
    'get_en_smtp_configuration',
    'get_en_smtp_configuration_output',
]

@pulumi.output_type
class GetEnSmtpConfigurationResult:
    """
    A collection of values returned by getEnSmtpConfiguration.
    """
    def __init__(__self__, configs=None, description=None, domain=None, en_smtp_configuration_id=None, id=None, instance_id=None, name=None, updated_at=None):
        if configs and not isinstance(configs, list):
            raise TypeError("Expected argument 'configs' to be a list")
        pulumi.set(__self__, "configs", configs)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if en_smtp_configuration_id and not isinstance(en_smtp_configuration_id, str):
            raise TypeError("Expected argument 'en_smtp_configuration_id' to be a str")
        pulumi.set(__self__, "en_smtp_configuration_id", en_smtp_configuration_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetEnSmtpConfigurationConfigResult']:
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="enSmtpConfigurationId")
    def en_smtp_configuration_id(self) -> _builtins.str:
        return pulumi.get(self, "en_smtp_configuration_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetEnSmtpConfigurationResult(GetEnSmtpConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnSmtpConfigurationResult(
            configs=self.configs,
            description=self.description,
            domain=self.domain,
            en_smtp_configuration_id=self.en_smtp_configuration_id,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            updated_at=self.updated_at)


def get_en_smtp_configuration(en_smtp_configuration_id: Optional[_builtins.str] = None,
                              id: Optional[_builtins.str] = None,
                              instance_id: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnSmtpConfigurationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enSmtpConfigurationId'] = en_smtp_configuration_id
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEnSmtpConfiguration:getEnSmtpConfiguration', __args__, opts=opts, typ=GetEnSmtpConfigurationResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEnSmtpConfigurationResult(
        configs=pulumi.get(__ret__, 'configs'),
        description=pulumi.get(__ret__, 'description'),
        domain=pulumi.get(__ret__, 'domain'),
        en_smtp_configuration_id=pulumi.get(__ret__, 'en_smtp_configuration_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_en_smtp_configuration_output(en_smtp_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnSmtpConfigurationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enSmtpConfigurationId'] = en_smtp_configuration_id
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEnSmtpConfiguration:getEnSmtpConfiguration', __args__, opts=opts, typ=GetEnSmtpConfigurationResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEnSmtpConfigurationResult(
        configs=pulumi.get(__response__, 'configs'),
        description=pulumi.get(__response__, 'description'),
        domain=pulumi.get(__response__, 'domain'),
        en_smtp_configuration_id=pulumi.get(__response__, 'en_smtp_configuration_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        updated_at=pulumi.get(__response__, 'updated_at')))
