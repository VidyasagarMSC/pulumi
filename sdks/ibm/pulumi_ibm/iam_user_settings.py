# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IamUserSettingsArgs', 'IamUserSettings']

@pulumi.input_type
class IamUserSettingsArgs:
    def __init__(__self__, *,
                 iam_id: pulumi.Input[_builtins.str],
                 allowed_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 iam_user_settings_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamUserSettings resource.
        :param pulumi.Input[_builtins.str] iam_id: User's IAM ID or or email of user
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_ip_addresses: List of allowed IPv4 or IPv6 addresses
        """
        pulumi.set(__self__, "iam_id", iam_id)
        if allowed_ip_addresses is not None:
            pulumi.set(__self__, "allowed_ip_addresses", allowed_ip_addresses)
        if iam_user_settings_id is not None:
            pulumi.set(__self__, "iam_user_settings_id", iam_user_settings_id)

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> pulumi.Input[_builtins.str]:
        """
        User's IAM ID or or email of user
        """
        return pulumi.get(self, "iam_id")

    @iam_id.setter
    def iam_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "iam_id", value)

    @_builtins.property
    @pulumi.getter(name="allowedIpAddresses")
    def allowed_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of allowed IPv4 or IPv6 addresses
        """
        return pulumi.get(self, "allowed_ip_addresses")

    @allowed_ip_addresses.setter
    def allowed_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="iamUserSettingsId")
    def iam_user_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_user_settings_id")

    @iam_user_settings_id.setter
    def iam_user_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_user_settings_id", value)


@pulumi.input_type
class _IamUserSettingsState:
    def __init__(__self__, *,
                 allowed_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 iam_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_user_settings_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamUserSettings resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_ip_addresses: List of allowed IPv4 or IPv6 addresses
        :param pulumi.Input[_builtins.str] iam_id: User's IAM ID or or email of user
        """
        if allowed_ip_addresses is not None:
            pulumi.set(__self__, "allowed_ip_addresses", allowed_ip_addresses)
        if iam_id is not None:
            pulumi.set(__self__, "iam_id", iam_id)
        if iam_user_settings_id is not None:
            pulumi.set(__self__, "iam_user_settings_id", iam_user_settings_id)

    @_builtins.property
    @pulumi.getter(name="allowedIpAddresses")
    def allowed_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of allowed IPv4 or IPv6 addresses
        """
        return pulumi.get(self, "allowed_ip_addresses")

    @allowed_ip_addresses.setter
    def allowed_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User's IAM ID or or email of user
        """
        return pulumi.get(self, "iam_id")

    @iam_id.setter
    def iam_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_id", value)

    @_builtins.property
    @pulumi.getter(name="iamUserSettingsId")
    def iam_user_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_user_settings_id")

    @iam_user_settings_id.setter
    def iam_user_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_user_settings_id", value)


@pulumi.type_token("ibm:index/iamUserSettings:IamUserSettings")
class IamUserSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 iam_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_user_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IamUserSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_ip_addresses: List of allowed IPv4 or IPv6 addresses
        :param pulumi.Input[_builtins.str] iam_id: User's IAM ID or or email of user
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamUserSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamUserSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamUserSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamUserSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 iam_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_user_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamUserSettingsArgs.__new__(IamUserSettingsArgs)

            __props__.__dict__["allowed_ip_addresses"] = allowed_ip_addresses
            if iam_id is None and not opts.urn:
                raise TypeError("Missing required property 'iam_id'")
            __props__.__dict__["iam_id"] = iam_id
            __props__.__dict__["iam_user_settings_id"] = iam_user_settings_id
        super(IamUserSettings, __self__).__init__(
            'ibm:index/iamUserSettings:IamUserSettings',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            iam_id: Optional[pulumi.Input[_builtins.str]] = None,
            iam_user_settings_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamUserSettings':
        """
        Get an existing IamUserSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_ip_addresses: List of allowed IPv4 or IPv6 addresses
        :param pulumi.Input[_builtins.str] iam_id: User's IAM ID or or email of user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamUserSettingsState.__new__(_IamUserSettingsState)

        __props__.__dict__["allowed_ip_addresses"] = allowed_ip_addresses
        __props__.__dict__["iam_id"] = iam_id
        __props__.__dict__["iam_user_settings_id"] = iam_user_settings_id
        return IamUserSettings(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowedIpAddresses")
    def allowed_ip_addresses(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of allowed IPv4 or IPv6 addresses
        """
        return pulumi.get(self, "allowed_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> pulumi.Output[_builtins.str]:
        """
        User's IAM ID or or email of user
        """
        return pulumi.get(self, "iam_id")

    @_builtins.property
    @pulumi.getter(name="iamUserSettingsId")
    def iam_user_settings_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_user_settings_id")

