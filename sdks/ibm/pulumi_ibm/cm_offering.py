# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CmOfferingArgs', 'CmOffering']

@pulumi.input_type
class CmOfferingArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[_builtins.str],
                 cm_offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 deprecate: Optional[pulumi.Input[_builtins.bool]] = None,
                 disclaimer: Optional[pulumi.Input[_builtins.str]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingFeatureArgs']]]] = None,
                 hidden: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_pull_keys: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingImagePullKeyArgs']]]] = None,
                 keywords: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 label_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 long_description: Optional[pulumi.Input[_builtins.str]] = None,
                 long_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 media: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingMediaArgs']]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_docs_url: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_support_url: Optional[pulumi.Input[_builtins.str]] = None,
                 portal_approval_record: Optional[pulumi.Input[_builtins.str]] = None,
                 portal_ui_url: Optional[pulumi.Input[_builtins.str]] = None,
                 product_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_info: Optional[pulumi.Input['CmOfferingProviderInfoArgs']] = None,
                 public_original_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 publish_public_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 share_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 share_with_access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 share_with_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 share_with_ibm: Optional[pulumi.Input[_builtins.bool]] = None,
                 short_description: Optional[pulumi.Input[_builtins.str]] = None,
                 short_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a CmOffering resource.
        :param pulumi.Input[_builtins.str] catalog_id: Catalog identifier.
        :param pulumi.Input[_builtins.bool] deprecate: Deprecate this offering.
        :param pulumi.Input[_builtins.str] disclaimer: A disclaimer for this offering.
        :param pulumi.Input[Sequence[pulumi.Input['CmOfferingFeatureArgs']]] features: list of features associated with this offering.
        :param pulumi.Input[_builtins.bool] hidden: Determine if this offering should be displayed in the Consumption UI.
        :param pulumi.Input[Sequence[pulumi.Input['CmOfferingImagePullKeyArgs']]] image_pull_keys: Image pull keys for this offering.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keywords: List of keywords associated with offering, typically used to search for it.
        :param pulumi.Input[_builtins.str] label: Display Name in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] label_i18n: A map of translated strings, by language code.
        :param pulumi.Input[_builtins.str] long_description: Long description in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] long_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input['CmOfferingMediaArgs']]] media: A list of media items related to this offering.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Map of metadata values for this offering.
        :param pulumi.Input[_builtins.str] name: The programmatic name of this offering.
        :param pulumi.Input[_builtins.str] offering_docs_url: URL for an additional docs with this offering.
        :param pulumi.Input[_builtins.str] offering_icon_url: URL for an icon associated with this offering.
        :param pulumi.Input[_builtins.str] offering_support_url: [deprecated] - Use offering.support instead. URL to be displayed in the Consumption UI for getting support on this
               offering.
        :param pulumi.Input[_builtins.str] portal_approval_record: The portal's approval record ID.
        :param pulumi.Input[_builtins.str] portal_ui_url: The portal UI URL.
        :param pulumi.Input[_builtins.str] product_kind: The product kind. Valid values are module, solution, or empty string.
        :param pulumi.Input['CmOfferingProviderInfoArgs'] provider_info: Information on the provider for this offering, or omitted if no provider information is given.
        :param pulumi.Input[_builtins.str] public_original_crn: The original offering CRN that this publish entry came from.
        :param pulumi.Input[_builtins.str] publish_public_crn: The crn of the public catalog entry of this offering.
        :param pulumi.Input[_builtins.bool] share_enabled: Denotes sharing including access list availability of an Offering is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] share_with_access_lists: A list of account IDs to add to this offering's access list.
        :param pulumi.Input[_builtins.bool] share_with_all: Denotes public availability of an Offering - if share_enabled is true.
        :param pulumi.Input[_builtins.bool] share_with_ibm: Denotes IBM employee availability of an Offering - if share_enabled is true.
        :param pulumi.Input[_builtins.str] short_description: Short description in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] short_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with this catalog.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        if cm_offering_id is not None:
            pulumi.set(__self__, "cm_offering_id", cm_offering_id)
        if deprecate is not None:
            pulumi.set(__self__, "deprecate", deprecate)
        if disclaimer is not None:
            pulumi.set(__self__, "disclaimer", disclaimer)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if image_pull_keys is not None:
            pulumi.set(__self__, "image_pull_keys", image_pull_keys)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if label_i18n is not None:
            pulumi.set(__self__, "label_i18n", label_i18n)
        if long_description is not None:
            pulumi.set(__self__, "long_description", long_description)
        if long_description_i18n is not None:
            pulumi.set(__self__, "long_description_i18n", long_description_i18n)
        if media is not None:
            pulumi.set(__self__, "media", media)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if offering_docs_url is not None:
            pulumi.set(__self__, "offering_docs_url", offering_docs_url)
        if offering_icon_url is not None:
            pulumi.set(__self__, "offering_icon_url", offering_icon_url)
        if offering_id is not None:
            pulumi.set(__self__, "offering_id", offering_id)
        if offering_support_url is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""offering_support_url is deprecated: Deprecated""")
        if offering_support_url is not None:
            pulumi.set(__self__, "offering_support_url", offering_support_url)
        if portal_approval_record is not None:
            pulumi.set(__self__, "portal_approval_record", portal_approval_record)
        if portal_ui_url is not None:
            pulumi.set(__self__, "portal_ui_url", portal_ui_url)
        if product_kind is not None:
            pulumi.set(__self__, "product_kind", product_kind)
        if provider_info is not None:
            pulumi.set(__self__, "provider_info", provider_info)
        if public_original_crn is not None:
            pulumi.set(__self__, "public_original_crn", public_original_crn)
        if publish_public_crn is not None:
            pulumi.set(__self__, "publish_public_crn", publish_public_crn)
        if share_enabled is not None:
            pulumi.set(__self__, "share_enabled", share_enabled)
        if share_with_access_lists is not None:
            pulumi.set(__self__, "share_with_access_lists", share_with_access_lists)
        if share_with_all is not None:
            pulumi.set(__self__, "share_with_all", share_with_all)
        if share_with_ibm is not None:
            pulumi.set(__self__, "share_with_ibm", share_with_ibm)
        if short_description is not None:
            pulumi.set(__self__, "short_description", short_description)
        if short_description_i18n is not None:
            pulumi.set(__self__, "short_description_i18n", short_description_i18n)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[_builtins.str]:
        """
        Catalog identifier.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "catalog_id", value)

    @_builtins.property
    @pulumi.getter(name="cmOfferingId")
    def cm_offering_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cm_offering_id")

    @cm_offering_id.setter
    def cm_offering_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cm_offering_id", value)

    @_builtins.property
    @pulumi.getter
    def deprecate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deprecate this offering.
        """
        return pulumi.get(self, "deprecate")

    @deprecate.setter
    def deprecate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deprecate", value)

    @_builtins.property
    @pulumi.getter
    def disclaimer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A disclaimer for this offering.
        """
        return pulumi.get(self, "disclaimer")

    @disclaimer.setter
    def disclaimer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disclaimer", value)

    @_builtins.property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingFeatureArgs']]]]:
        """
        list of features associated with this offering.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingFeatureArgs']]]]):
        pulumi.set(self, "features", value)

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determine if this offering should be displayed in the Consumption UI.
        """
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hidden", value)

    @_builtins.property
    @pulumi.getter(name="imagePullKeys")
    def image_pull_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingImagePullKeyArgs']]]]:
        """
        Image pull keys for this offering.
        """
        return pulumi.get(self, "image_pull_keys")

    @image_pull_keys.setter
    def image_pull_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingImagePullKeyArgs']]]]):
        pulumi.set(self, "image_pull_keys", value)

    @_builtins.property
    @pulumi.getter
    def keywords(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of keywords associated with offering, typically used to search for it.
        """
        return pulumi.get(self, "keywords")

    @keywords.setter
    def keywords(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "keywords", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Display Name in the requested language.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="labelI18n")
    def label_i18n(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "label_i18n")

    @label_i18n.setter
    def label_i18n(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "label_i18n", value)

    @_builtins.property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Long description in the requested language.
        """
        return pulumi.get(self, "long_description")

    @long_description.setter
    def long_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "long_description", value)

    @_builtins.property
    @pulumi.getter(name="longDescriptionI18n")
    def long_description_i18n(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "long_description_i18n")

    @long_description_i18n.setter
    def long_description_i18n(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "long_description_i18n", value)

    @_builtins.property
    @pulumi.getter
    def media(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingMediaArgs']]]]:
        """
        A list of media items related to this offering.
        """
        return pulumi.get(self, "media")

    @media.setter
    def media(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingMediaArgs']]]]):
        pulumi.set(self, "media", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of metadata values for this offering.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The programmatic name of this offering.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="offeringDocsUrl")
    def offering_docs_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL for an additional docs with this offering.
        """
        return pulumi.get(self, "offering_docs_url")

    @offering_docs_url.setter
    def offering_docs_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offering_docs_url", value)

    @_builtins.property
    @pulumi.getter(name="offeringIconUrl")
    def offering_icon_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL for an icon associated with this offering.
        """
        return pulumi.get(self, "offering_icon_url")

    @offering_icon_url.setter
    def offering_icon_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offering_icon_url", value)

    @_builtins.property
    @pulumi.getter(name="offeringId")
    def offering_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "offering_id")

    @offering_id.setter
    def offering_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offering_id", value)

    @_builtins.property
    @pulumi.getter(name="offeringSupportUrl")
    @_utilities.deprecated("""Deprecated""")
    def offering_support_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        [deprecated] - Use offering.support instead. URL to be displayed in the Consumption UI for getting support on this
        offering.
        """
        return pulumi.get(self, "offering_support_url")

    @offering_support_url.setter
    def offering_support_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offering_support_url", value)

    @_builtins.property
    @pulumi.getter(name="portalApprovalRecord")
    def portal_approval_record(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The portal's approval record ID.
        """
        return pulumi.get(self, "portal_approval_record")

    @portal_approval_record.setter
    def portal_approval_record(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "portal_approval_record", value)

    @_builtins.property
    @pulumi.getter(name="portalUiUrl")
    def portal_ui_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The portal UI URL.
        """
        return pulumi.get(self, "portal_ui_url")

    @portal_ui_url.setter
    def portal_ui_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "portal_ui_url", value)

    @_builtins.property
    @pulumi.getter(name="productKind")
    def product_kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The product kind. Valid values are module, solution, or empty string.
        """
        return pulumi.get(self, "product_kind")

    @product_kind.setter
    def product_kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_kind", value)

    @_builtins.property
    @pulumi.getter(name="providerInfo")
    def provider_info(self) -> Optional[pulumi.Input['CmOfferingProviderInfoArgs']]:
        """
        Information on the provider for this offering, or omitted if no provider information is given.
        """
        return pulumi.get(self, "provider_info")

    @provider_info.setter
    def provider_info(self, value: Optional[pulumi.Input['CmOfferingProviderInfoArgs']]):
        pulumi.set(self, "provider_info", value)

    @_builtins.property
    @pulumi.getter(name="publicOriginalCrn")
    def public_original_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The original offering CRN that this publish entry came from.
        """
        return pulumi.get(self, "public_original_crn")

    @public_original_crn.setter
    def public_original_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_original_crn", value)

    @_builtins.property
    @pulumi.getter(name="publishPublicCrn")
    def publish_public_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the public catalog entry of this offering.
        """
        return pulumi.get(self, "publish_public_crn")

    @publish_public_crn.setter
    def publish_public_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "publish_public_crn", value)

    @_builtins.property
    @pulumi.getter(name="shareEnabled")
    def share_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Denotes sharing including access list availability of an Offering is enabled.
        """
        return pulumi.get(self, "share_enabled")

    @share_enabled.setter
    def share_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "share_enabled", value)

    @_builtins.property
    @pulumi.getter(name="shareWithAccessLists")
    def share_with_access_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of account IDs to add to this offering's access list.
        """
        return pulumi.get(self, "share_with_access_lists")

    @share_with_access_lists.setter
    def share_with_access_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "share_with_access_lists", value)

    @_builtins.property
    @pulumi.getter(name="shareWithAll")
    def share_with_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Denotes public availability of an Offering - if share_enabled is true.
        """
        return pulumi.get(self, "share_with_all")

    @share_with_all.setter
    def share_with_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "share_with_all", value)

    @_builtins.property
    @pulumi.getter(name="shareWithIbm")
    def share_with_ibm(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Denotes IBM employee availability of an Offering - if share_enabled is true.
        """
        return pulumi.get(self, "share_with_ibm")

    @share_with_ibm.setter
    def share_with_ibm(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "share_with_ibm", value)

    @_builtins.property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Short description in the requested language.
        """
        return pulumi.get(self, "short_description")

    @short_description.setter
    def short_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "short_description", value)

    @_builtins.property
    @pulumi.getter(name="shortDescriptionI18n")
    def short_description_i18n(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "short_description_i18n")

    @short_description_i18n.setter
    def short_description_i18n(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "short_description_i18n", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags associated with this catalog.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _CmOfferingState:
    def __init__(__self__, *,
                 badges: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingBadgeArgs']]]] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 deprecate: Optional[pulumi.Input[_builtins.bool]] = None,
                 deprecate_pendings: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingDeprecatePendingArgs']]]] = None,
                 disclaimer: Optional[pulumi.Input[_builtins.str]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingFeatureArgs']]]] = None,
                 hidden: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_pull_keys: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingImagePullKeyArgs']]]] = None,
                 keywords: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 kinds: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingKindArgs']]]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 label_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 long_description: Optional[pulumi.Input[_builtins.str]] = None,
                 long_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 media: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingMediaArgs']]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_docs_url: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_support_url: Optional[pulumi.Input[_builtins.str]] = None,
                 pc_managed: Optional[pulumi.Input[_builtins.bool]] = None,
                 portal_approval_record: Optional[pulumi.Input[_builtins.str]] = None,
                 portal_ui_url: Optional[pulumi.Input[_builtins.str]] = None,
                 product_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_info: Optional[pulumi.Input['CmOfferingProviderInfoArgs']] = None,
                 public_original_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 publish_approved: Optional[pulumi.Input[_builtins.bool]] = None,
                 publish_public_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 ratings: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingRatingArgs']]]] = None,
                 repo_infos: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingRepoInfoArgs']]]] = None,
                 rev: Optional[pulumi.Input[_builtins.str]] = None,
                 share_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 share_with_access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 share_with_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 share_with_ibm: Optional[pulumi.Input[_builtins.bool]] = None,
                 short_description: Optional[pulumi.Input[_builtins.str]] = None,
                 short_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 supports: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingSupportArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 updated: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CmOffering resources.
        :param pulumi.Input[Sequence[pulumi.Input['CmOfferingBadgeArgs']]] badges: A list of badges for this offering.
        :param pulumi.Input[_builtins.str] catalog_id: Catalog identifier.
        :param pulumi.Input[_builtins.str] catalog_name: The name of the catalog.
        :param pulumi.Input[_builtins.str] created: The date and time this catalog was created.
        :param pulumi.Input[_builtins.str] crn: The crn for this specific offering.
        :param pulumi.Input[_builtins.bool] deprecate: Deprecate this offering.
        :param pulumi.Input[Sequence[pulumi.Input['CmOfferingDeprecatePendingArgs']]] deprecate_pendings: Deprecation information for an Offering.
        :param pulumi.Input[_builtins.str] disclaimer: A disclaimer for this offering.
        :param pulumi.Input[Sequence[pulumi.Input['CmOfferingFeatureArgs']]] features: list of features associated with this offering.
        :param pulumi.Input[_builtins.bool] hidden: Determine if this offering should be displayed in the Consumption UI.
        :param pulumi.Input[Sequence[pulumi.Input['CmOfferingImagePullKeyArgs']]] image_pull_keys: Image pull keys for this offering.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keywords: List of keywords associated with offering, typically used to search for it.
        :param pulumi.Input[Sequence[pulumi.Input['CmOfferingKindArgs']]] kinds: Array of kind.
        :param pulumi.Input[_builtins.str] label: Display Name in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] label_i18n: A map of translated strings, by language code.
        :param pulumi.Input[_builtins.str] long_description: Long description in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] long_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input['CmOfferingMediaArgs']]] media: A list of media items related to this offering.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Map of metadata values for this offering.
        :param pulumi.Input[_builtins.str] name: The programmatic name of this offering.
        :param pulumi.Input[_builtins.str] offering_docs_url: URL for an additional docs with this offering.
        :param pulumi.Input[_builtins.str] offering_icon_url: URL for an icon associated with this offering.
        :param pulumi.Input[_builtins.str] offering_identifier: Computed Offering ID.
        :param pulumi.Input[_builtins.str] offering_support_url: [deprecated] - Use offering.support instead. URL to be displayed in the Consumption UI for getting support on this
               offering.
        :param pulumi.Input[_builtins.bool] pc_managed: Offering is managed by Partner Center.
        :param pulumi.Input[_builtins.str] portal_approval_record: The portal's approval record ID.
        :param pulumi.Input[_builtins.str] portal_ui_url: The portal UI URL.
        :param pulumi.Input[_builtins.str] product_kind: The product kind. Valid values are module, solution, or empty string.
        :param pulumi.Input['CmOfferingProviderInfoArgs'] provider_info: Information on the provider for this offering, or omitted if no provider information is given.
        :param pulumi.Input[_builtins.str] public_original_crn: The original offering CRN that this publish entry came from.
        :param pulumi.Input[_builtins.bool] publish_approved: Offering has been approved to publish to permitted to IBM or Public Catalog.
        :param pulumi.Input[_builtins.str] publish_public_crn: The crn of the public catalog entry of this offering.
        :param pulumi.Input[Sequence[pulumi.Input['CmOfferingRatingArgs']]] ratings: Repository info for offerings.
        :param pulumi.Input[Sequence[pulumi.Input['CmOfferingRepoInfoArgs']]] repo_infos: Repository info for offerings.
        :param pulumi.Input[_builtins.str] rev: Cloudant revision.
        :param pulumi.Input[_builtins.bool] share_enabled: Denotes sharing including access list availability of an Offering is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] share_with_access_lists: A list of account IDs to add to this offering's access list.
        :param pulumi.Input[_builtins.bool] share_with_all: Denotes public availability of an Offering - if share_enabled is true.
        :param pulumi.Input[_builtins.bool] share_with_ibm: Denotes IBM employee availability of an Offering - if share_enabled is true.
        :param pulumi.Input[_builtins.str] short_description: Short description in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] short_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input['CmOfferingSupportArgs']]] supports: Offering Support information.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with this catalog.
        :param pulumi.Input[_builtins.str] updated: The date and time this catalog was last updated.
        :param pulumi.Input[_builtins.str] url: The url for this specific offering.
        """
        if badges is not None:
            pulumi.set(__self__, "badges", badges)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if cm_offering_id is not None:
            pulumi.set(__self__, "cm_offering_id", cm_offering_id)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if deprecate is not None:
            pulumi.set(__self__, "deprecate", deprecate)
        if deprecate_pendings is not None:
            pulumi.set(__self__, "deprecate_pendings", deprecate_pendings)
        if disclaimer is not None:
            pulumi.set(__self__, "disclaimer", disclaimer)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if image_pull_keys is not None:
            pulumi.set(__self__, "image_pull_keys", image_pull_keys)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if kinds is not None:
            pulumi.set(__self__, "kinds", kinds)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if label_i18n is not None:
            pulumi.set(__self__, "label_i18n", label_i18n)
        if long_description is not None:
            pulumi.set(__self__, "long_description", long_description)
        if long_description_i18n is not None:
            pulumi.set(__self__, "long_description_i18n", long_description_i18n)
        if media is not None:
            pulumi.set(__self__, "media", media)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if offering_docs_url is not None:
            pulumi.set(__self__, "offering_docs_url", offering_docs_url)
        if offering_icon_url is not None:
            pulumi.set(__self__, "offering_icon_url", offering_icon_url)
        if offering_id is not None:
            pulumi.set(__self__, "offering_id", offering_id)
        if offering_identifier is not None:
            pulumi.set(__self__, "offering_identifier", offering_identifier)
        if offering_support_url is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""offering_support_url is deprecated: Deprecated""")
        if offering_support_url is not None:
            pulumi.set(__self__, "offering_support_url", offering_support_url)
        if pc_managed is not None:
            pulumi.set(__self__, "pc_managed", pc_managed)
        if portal_approval_record is not None:
            pulumi.set(__self__, "portal_approval_record", portal_approval_record)
        if portal_ui_url is not None:
            pulumi.set(__self__, "portal_ui_url", portal_ui_url)
        if product_kind is not None:
            pulumi.set(__self__, "product_kind", product_kind)
        if provider_info is not None:
            pulumi.set(__self__, "provider_info", provider_info)
        if public_original_crn is not None:
            pulumi.set(__self__, "public_original_crn", public_original_crn)
        if publish_approved is not None:
            pulumi.set(__self__, "publish_approved", publish_approved)
        if publish_public_crn is not None:
            pulumi.set(__self__, "publish_public_crn", publish_public_crn)
        if ratings is not None:
            pulumi.set(__self__, "ratings", ratings)
        if repo_infos is not None:
            pulumi.set(__self__, "repo_infos", repo_infos)
        if rev is not None:
            pulumi.set(__self__, "rev", rev)
        if share_enabled is not None:
            pulumi.set(__self__, "share_enabled", share_enabled)
        if share_with_access_lists is not None:
            pulumi.set(__self__, "share_with_access_lists", share_with_access_lists)
        if share_with_all is not None:
            pulumi.set(__self__, "share_with_all", share_with_all)
        if share_with_ibm is not None:
            pulumi.set(__self__, "share_with_ibm", share_with_ibm)
        if short_description is not None:
            pulumi.set(__self__, "short_description", short_description)
        if short_description_i18n is not None:
            pulumi.set(__self__, "short_description_i18n", short_description_i18n)
        if supports is not None:
            pulumi.set(__self__, "supports", supports)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated is not None:
            pulumi.set(__self__, "updated", updated)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def badges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingBadgeArgs']]]]:
        """
        A list of badges for this offering.
        """
        return pulumi.get(self, "badges")

    @badges.setter
    def badges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingBadgeArgs']]]]):
        pulumi.set(self, "badges", value)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Catalog identifier.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_id", value)

    @_builtins.property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the catalog.
        """
        return pulumi.get(self, "catalog_name")

    @catalog_name.setter
    def catalog_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_name", value)

    @_builtins.property
    @pulumi.getter(name="cmOfferingId")
    def cm_offering_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cm_offering_id")

    @cm_offering_id.setter
    def cm_offering_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cm_offering_id", value)

    @_builtins.property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time this catalog was created.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn for this specific offering.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def deprecate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deprecate this offering.
        """
        return pulumi.get(self, "deprecate")

    @deprecate.setter
    def deprecate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deprecate", value)

    @_builtins.property
    @pulumi.getter(name="deprecatePendings")
    def deprecate_pendings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingDeprecatePendingArgs']]]]:
        """
        Deprecation information for an Offering.
        """
        return pulumi.get(self, "deprecate_pendings")

    @deprecate_pendings.setter
    def deprecate_pendings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingDeprecatePendingArgs']]]]):
        pulumi.set(self, "deprecate_pendings", value)

    @_builtins.property
    @pulumi.getter
    def disclaimer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A disclaimer for this offering.
        """
        return pulumi.get(self, "disclaimer")

    @disclaimer.setter
    def disclaimer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disclaimer", value)

    @_builtins.property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingFeatureArgs']]]]:
        """
        list of features associated with this offering.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingFeatureArgs']]]]):
        pulumi.set(self, "features", value)

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determine if this offering should be displayed in the Consumption UI.
        """
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hidden", value)

    @_builtins.property
    @pulumi.getter(name="imagePullKeys")
    def image_pull_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingImagePullKeyArgs']]]]:
        """
        Image pull keys for this offering.
        """
        return pulumi.get(self, "image_pull_keys")

    @image_pull_keys.setter
    def image_pull_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingImagePullKeyArgs']]]]):
        pulumi.set(self, "image_pull_keys", value)

    @_builtins.property
    @pulumi.getter
    def keywords(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of keywords associated with offering, typically used to search for it.
        """
        return pulumi.get(self, "keywords")

    @keywords.setter
    def keywords(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "keywords", value)

    @_builtins.property
    @pulumi.getter
    def kinds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingKindArgs']]]]:
        """
        Array of kind.
        """
        return pulumi.get(self, "kinds")

    @kinds.setter
    def kinds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingKindArgs']]]]):
        pulumi.set(self, "kinds", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Display Name in the requested language.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="labelI18n")
    def label_i18n(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "label_i18n")

    @label_i18n.setter
    def label_i18n(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "label_i18n", value)

    @_builtins.property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Long description in the requested language.
        """
        return pulumi.get(self, "long_description")

    @long_description.setter
    def long_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "long_description", value)

    @_builtins.property
    @pulumi.getter(name="longDescriptionI18n")
    def long_description_i18n(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "long_description_i18n")

    @long_description_i18n.setter
    def long_description_i18n(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "long_description_i18n", value)

    @_builtins.property
    @pulumi.getter
    def media(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingMediaArgs']]]]:
        """
        A list of media items related to this offering.
        """
        return pulumi.get(self, "media")

    @media.setter
    def media(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingMediaArgs']]]]):
        pulumi.set(self, "media", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of metadata values for this offering.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The programmatic name of this offering.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="offeringDocsUrl")
    def offering_docs_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL for an additional docs with this offering.
        """
        return pulumi.get(self, "offering_docs_url")

    @offering_docs_url.setter
    def offering_docs_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offering_docs_url", value)

    @_builtins.property
    @pulumi.getter(name="offeringIconUrl")
    def offering_icon_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL for an icon associated with this offering.
        """
        return pulumi.get(self, "offering_icon_url")

    @offering_icon_url.setter
    def offering_icon_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offering_icon_url", value)

    @_builtins.property
    @pulumi.getter(name="offeringId")
    def offering_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "offering_id")

    @offering_id.setter
    def offering_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offering_id", value)

    @_builtins.property
    @pulumi.getter(name="offeringIdentifier")
    def offering_identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Computed Offering ID.
        """
        return pulumi.get(self, "offering_identifier")

    @offering_identifier.setter
    def offering_identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offering_identifier", value)

    @_builtins.property
    @pulumi.getter(name="offeringSupportUrl")
    @_utilities.deprecated("""Deprecated""")
    def offering_support_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        [deprecated] - Use offering.support instead. URL to be displayed in the Consumption UI for getting support on this
        offering.
        """
        return pulumi.get(self, "offering_support_url")

    @offering_support_url.setter
    def offering_support_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offering_support_url", value)

    @_builtins.property
    @pulumi.getter(name="pcManaged")
    def pc_managed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Offering is managed by Partner Center.
        """
        return pulumi.get(self, "pc_managed")

    @pc_managed.setter
    def pc_managed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pc_managed", value)

    @_builtins.property
    @pulumi.getter(name="portalApprovalRecord")
    def portal_approval_record(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The portal's approval record ID.
        """
        return pulumi.get(self, "portal_approval_record")

    @portal_approval_record.setter
    def portal_approval_record(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "portal_approval_record", value)

    @_builtins.property
    @pulumi.getter(name="portalUiUrl")
    def portal_ui_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The portal UI URL.
        """
        return pulumi.get(self, "portal_ui_url")

    @portal_ui_url.setter
    def portal_ui_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "portal_ui_url", value)

    @_builtins.property
    @pulumi.getter(name="productKind")
    def product_kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The product kind. Valid values are module, solution, or empty string.
        """
        return pulumi.get(self, "product_kind")

    @product_kind.setter
    def product_kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_kind", value)

    @_builtins.property
    @pulumi.getter(name="providerInfo")
    def provider_info(self) -> Optional[pulumi.Input['CmOfferingProviderInfoArgs']]:
        """
        Information on the provider for this offering, or omitted if no provider information is given.
        """
        return pulumi.get(self, "provider_info")

    @provider_info.setter
    def provider_info(self, value: Optional[pulumi.Input['CmOfferingProviderInfoArgs']]):
        pulumi.set(self, "provider_info", value)

    @_builtins.property
    @pulumi.getter(name="publicOriginalCrn")
    def public_original_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The original offering CRN that this publish entry came from.
        """
        return pulumi.get(self, "public_original_crn")

    @public_original_crn.setter
    def public_original_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_original_crn", value)

    @_builtins.property
    @pulumi.getter(name="publishApproved")
    def publish_approved(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Offering has been approved to publish to permitted to IBM or Public Catalog.
        """
        return pulumi.get(self, "publish_approved")

    @publish_approved.setter
    def publish_approved(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "publish_approved", value)

    @_builtins.property
    @pulumi.getter(name="publishPublicCrn")
    def publish_public_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the public catalog entry of this offering.
        """
        return pulumi.get(self, "publish_public_crn")

    @publish_public_crn.setter
    def publish_public_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "publish_public_crn", value)

    @_builtins.property
    @pulumi.getter
    def ratings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingRatingArgs']]]]:
        """
        Repository info for offerings.
        """
        return pulumi.get(self, "ratings")

    @ratings.setter
    def ratings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingRatingArgs']]]]):
        pulumi.set(self, "ratings", value)

    @_builtins.property
    @pulumi.getter(name="repoInfos")
    def repo_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingRepoInfoArgs']]]]:
        """
        Repository info for offerings.
        """
        return pulumi.get(self, "repo_infos")

    @repo_infos.setter
    def repo_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingRepoInfoArgs']]]]):
        pulumi.set(self, "repo_infos", value)

    @_builtins.property
    @pulumi.getter
    def rev(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloudant revision.
        """
        return pulumi.get(self, "rev")

    @rev.setter
    def rev(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rev", value)

    @_builtins.property
    @pulumi.getter(name="shareEnabled")
    def share_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Denotes sharing including access list availability of an Offering is enabled.
        """
        return pulumi.get(self, "share_enabled")

    @share_enabled.setter
    def share_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "share_enabled", value)

    @_builtins.property
    @pulumi.getter(name="shareWithAccessLists")
    def share_with_access_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of account IDs to add to this offering's access list.
        """
        return pulumi.get(self, "share_with_access_lists")

    @share_with_access_lists.setter
    def share_with_access_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "share_with_access_lists", value)

    @_builtins.property
    @pulumi.getter(name="shareWithAll")
    def share_with_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Denotes public availability of an Offering - if share_enabled is true.
        """
        return pulumi.get(self, "share_with_all")

    @share_with_all.setter
    def share_with_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "share_with_all", value)

    @_builtins.property
    @pulumi.getter(name="shareWithIbm")
    def share_with_ibm(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Denotes IBM employee availability of an Offering - if share_enabled is true.
        """
        return pulumi.get(self, "share_with_ibm")

    @share_with_ibm.setter
    def share_with_ibm(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "share_with_ibm", value)

    @_builtins.property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Short description in the requested language.
        """
        return pulumi.get(self, "short_description")

    @short_description.setter
    def short_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "short_description", value)

    @_builtins.property
    @pulumi.getter(name="shortDescriptionI18n")
    def short_description_i18n(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "short_description_i18n")

    @short_description_i18n.setter
    def short_description_i18n(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "short_description_i18n", value)

    @_builtins.property
    @pulumi.getter
    def supports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingSupportArgs']]]]:
        """
        Offering Support information.
        """
        return pulumi.get(self, "supports")

    @supports.setter
    def supports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmOfferingSupportArgs']]]]):
        pulumi.set(self, "supports", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags associated with this catalog.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time this catalog was last updated.
        """
        return pulumi.get(self, "updated")

    @updated.setter
    def updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The url for this specific offering.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


@pulumi.type_token("ibm:index/cmOffering:CmOffering")
class CmOffering(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 deprecate: Optional[pulumi.Input[_builtins.bool]] = None,
                 disclaimer: Optional[pulumi.Input[_builtins.str]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingFeatureArgs', 'CmOfferingFeatureArgsDict']]]]] = None,
                 hidden: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_pull_keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingImagePullKeyArgs', 'CmOfferingImagePullKeyArgsDict']]]]] = None,
                 keywords: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 label_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 long_description: Optional[pulumi.Input[_builtins.str]] = None,
                 long_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 media: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingMediaArgs', 'CmOfferingMediaArgsDict']]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_docs_url: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_support_url: Optional[pulumi.Input[_builtins.str]] = None,
                 portal_approval_record: Optional[pulumi.Input[_builtins.str]] = None,
                 portal_ui_url: Optional[pulumi.Input[_builtins.str]] = None,
                 product_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_info: Optional[pulumi.Input[Union['CmOfferingProviderInfoArgs', 'CmOfferingProviderInfoArgsDict']]] = None,
                 public_original_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 publish_public_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 share_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 share_with_access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 share_with_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 share_with_ibm: Optional[pulumi.Input[_builtins.bool]] = None,
                 short_description: Optional[pulumi.Input[_builtins.str]] = None,
                 short_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a CmOffering resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] catalog_id: Catalog identifier.
        :param pulumi.Input[_builtins.bool] deprecate: Deprecate this offering.
        :param pulumi.Input[_builtins.str] disclaimer: A disclaimer for this offering.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingFeatureArgs', 'CmOfferingFeatureArgsDict']]]] features: list of features associated with this offering.
        :param pulumi.Input[_builtins.bool] hidden: Determine if this offering should be displayed in the Consumption UI.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingImagePullKeyArgs', 'CmOfferingImagePullKeyArgsDict']]]] image_pull_keys: Image pull keys for this offering.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keywords: List of keywords associated with offering, typically used to search for it.
        :param pulumi.Input[_builtins.str] label: Display Name in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] label_i18n: A map of translated strings, by language code.
        :param pulumi.Input[_builtins.str] long_description: Long description in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] long_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingMediaArgs', 'CmOfferingMediaArgsDict']]]] media: A list of media items related to this offering.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Map of metadata values for this offering.
        :param pulumi.Input[_builtins.str] name: The programmatic name of this offering.
        :param pulumi.Input[_builtins.str] offering_docs_url: URL for an additional docs with this offering.
        :param pulumi.Input[_builtins.str] offering_icon_url: URL for an icon associated with this offering.
        :param pulumi.Input[_builtins.str] offering_support_url: [deprecated] - Use offering.support instead. URL to be displayed in the Consumption UI for getting support on this
               offering.
        :param pulumi.Input[_builtins.str] portal_approval_record: The portal's approval record ID.
        :param pulumi.Input[_builtins.str] portal_ui_url: The portal UI URL.
        :param pulumi.Input[_builtins.str] product_kind: The product kind. Valid values are module, solution, or empty string.
        :param pulumi.Input[Union['CmOfferingProviderInfoArgs', 'CmOfferingProviderInfoArgsDict']] provider_info: Information on the provider for this offering, or omitted if no provider information is given.
        :param pulumi.Input[_builtins.str] public_original_crn: The original offering CRN that this publish entry came from.
        :param pulumi.Input[_builtins.str] publish_public_crn: The crn of the public catalog entry of this offering.
        :param pulumi.Input[_builtins.bool] share_enabled: Denotes sharing including access list availability of an Offering is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] share_with_access_lists: A list of account IDs to add to this offering's access list.
        :param pulumi.Input[_builtins.bool] share_with_all: Denotes public availability of an Offering - if share_enabled is true.
        :param pulumi.Input[_builtins.bool] share_with_ibm: Denotes IBM employee availability of an Offering - if share_enabled is true.
        :param pulumi.Input[_builtins.str] short_description: Short description in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] short_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with this catalog.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CmOfferingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CmOffering resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CmOfferingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CmOfferingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 deprecate: Optional[pulumi.Input[_builtins.bool]] = None,
                 disclaimer: Optional[pulumi.Input[_builtins.str]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingFeatureArgs', 'CmOfferingFeatureArgsDict']]]]] = None,
                 hidden: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_pull_keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingImagePullKeyArgs', 'CmOfferingImagePullKeyArgsDict']]]]] = None,
                 keywords: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 label_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 long_description: Optional[pulumi.Input[_builtins.str]] = None,
                 long_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 media: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingMediaArgs', 'CmOfferingMediaArgsDict']]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_docs_url: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_support_url: Optional[pulumi.Input[_builtins.str]] = None,
                 portal_approval_record: Optional[pulumi.Input[_builtins.str]] = None,
                 portal_ui_url: Optional[pulumi.Input[_builtins.str]] = None,
                 product_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_info: Optional[pulumi.Input[Union['CmOfferingProviderInfoArgs', 'CmOfferingProviderInfoArgsDict']]] = None,
                 public_original_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 publish_public_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 share_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 share_with_access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 share_with_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 share_with_ibm: Optional[pulumi.Input[_builtins.bool]] = None,
                 short_description: Optional[pulumi.Input[_builtins.str]] = None,
                 short_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CmOfferingArgs.__new__(CmOfferingArgs)

            if catalog_id is None and not opts.urn:
                raise TypeError("Missing required property 'catalog_id'")
            __props__.__dict__["catalog_id"] = catalog_id
            __props__.__dict__["cm_offering_id"] = cm_offering_id
            __props__.__dict__["deprecate"] = deprecate
            __props__.__dict__["disclaimer"] = disclaimer
            __props__.__dict__["features"] = features
            __props__.__dict__["hidden"] = hidden
            __props__.__dict__["image_pull_keys"] = image_pull_keys
            __props__.__dict__["keywords"] = keywords
            __props__.__dict__["label"] = label
            __props__.__dict__["label_i18n"] = label_i18n
            __props__.__dict__["long_description"] = long_description
            __props__.__dict__["long_description_i18n"] = long_description_i18n
            __props__.__dict__["media"] = media
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            __props__.__dict__["offering_docs_url"] = offering_docs_url
            __props__.__dict__["offering_icon_url"] = offering_icon_url
            __props__.__dict__["offering_id"] = offering_id
            __props__.__dict__["offering_support_url"] = offering_support_url
            __props__.__dict__["portal_approval_record"] = portal_approval_record
            __props__.__dict__["portal_ui_url"] = portal_ui_url
            __props__.__dict__["product_kind"] = product_kind
            __props__.__dict__["provider_info"] = provider_info
            __props__.__dict__["public_original_crn"] = public_original_crn
            __props__.__dict__["publish_public_crn"] = publish_public_crn
            __props__.__dict__["share_enabled"] = share_enabled
            __props__.__dict__["share_with_access_lists"] = share_with_access_lists
            __props__.__dict__["share_with_all"] = share_with_all
            __props__.__dict__["share_with_ibm"] = share_with_ibm
            __props__.__dict__["short_description"] = short_description
            __props__.__dict__["short_description_i18n"] = short_description_i18n
            __props__.__dict__["tags"] = tags
            __props__.__dict__["badges"] = None
            __props__.__dict__["catalog_name"] = None
            __props__.__dict__["created"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["deprecate_pendings"] = None
            __props__.__dict__["kinds"] = None
            __props__.__dict__["offering_identifier"] = None
            __props__.__dict__["pc_managed"] = None
            __props__.__dict__["publish_approved"] = None
            __props__.__dict__["ratings"] = None
            __props__.__dict__["repo_infos"] = None
            __props__.__dict__["rev"] = None
            __props__.__dict__["supports"] = None
            __props__.__dict__["updated"] = None
            __props__.__dict__["url"] = None
        super(CmOffering, __self__).__init__(
            'ibm:index/cmOffering:CmOffering',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            badges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingBadgeArgs', 'CmOfferingBadgeArgsDict']]]]] = None,
            catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
            catalog_name: Optional[pulumi.Input[_builtins.str]] = None,
            cm_offering_id: Optional[pulumi.Input[_builtins.str]] = None,
            created: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            deprecate: Optional[pulumi.Input[_builtins.bool]] = None,
            deprecate_pendings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingDeprecatePendingArgs', 'CmOfferingDeprecatePendingArgsDict']]]]] = None,
            disclaimer: Optional[pulumi.Input[_builtins.str]] = None,
            features: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingFeatureArgs', 'CmOfferingFeatureArgsDict']]]]] = None,
            hidden: Optional[pulumi.Input[_builtins.bool]] = None,
            image_pull_keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingImagePullKeyArgs', 'CmOfferingImagePullKeyArgsDict']]]]] = None,
            keywords: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            kinds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingKindArgs', 'CmOfferingKindArgsDict']]]]] = None,
            label: Optional[pulumi.Input[_builtins.str]] = None,
            label_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            long_description: Optional[pulumi.Input[_builtins.str]] = None,
            long_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            media: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingMediaArgs', 'CmOfferingMediaArgsDict']]]]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            offering_docs_url: Optional[pulumi.Input[_builtins.str]] = None,
            offering_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
            offering_id: Optional[pulumi.Input[_builtins.str]] = None,
            offering_identifier: Optional[pulumi.Input[_builtins.str]] = None,
            offering_support_url: Optional[pulumi.Input[_builtins.str]] = None,
            pc_managed: Optional[pulumi.Input[_builtins.bool]] = None,
            portal_approval_record: Optional[pulumi.Input[_builtins.str]] = None,
            portal_ui_url: Optional[pulumi.Input[_builtins.str]] = None,
            product_kind: Optional[pulumi.Input[_builtins.str]] = None,
            provider_info: Optional[pulumi.Input[Union['CmOfferingProviderInfoArgs', 'CmOfferingProviderInfoArgsDict']]] = None,
            public_original_crn: Optional[pulumi.Input[_builtins.str]] = None,
            publish_approved: Optional[pulumi.Input[_builtins.bool]] = None,
            publish_public_crn: Optional[pulumi.Input[_builtins.str]] = None,
            ratings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingRatingArgs', 'CmOfferingRatingArgsDict']]]]] = None,
            repo_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingRepoInfoArgs', 'CmOfferingRepoInfoArgsDict']]]]] = None,
            rev: Optional[pulumi.Input[_builtins.str]] = None,
            share_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            share_with_access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            share_with_all: Optional[pulumi.Input[_builtins.bool]] = None,
            share_with_ibm: Optional[pulumi.Input[_builtins.bool]] = None,
            short_description: Optional[pulumi.Input[_builtins.str]] = None,
            short_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            supports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingSupportArgs', 'CmOfferingSupportArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            updated: Optional[pulumi.Input[_builtins.str]] = None,
            url: Optional[pulumi.Input[_builtins.str]] = None) -> 'CmOffering':
        """
        Get an existing CmOffering resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingBadgeArgs', 'CmOfferingBadgeArgsDict']]]] badges: A list of badges for this offering.
        :param pulumi.Input[_builtins.str] catalog_id: Catalog identifier.
        :param pulumi.Input[_builtins.str] catalog_name: The name of the catalog.
        :param pulumi.Input[_builtins.str] created: The date and time this catalog was created.
        :param pulumi.Input[_builtins.str] crn: The crn for this specific offering.
        :param pulumi.Input[_builtins.bool] deprecate: Deprecate this offering.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingDeprecatePendingArgs', 'CmOfferingDeprecatePendingArgsDict']]]] deprecate_pendings: Deprecation information for an Offering.
        :param pulumi.Input[_builtins.str] disclaimer: A disclaimer for this offering.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingFeatureArgs', 'CmOfferingFeatureArgsDict']]]] features: list of features associated with this offering.
        :param pulumi.Input[_builtins.bool] hidden: Determine if this offering should be displayed in the Consumption UI.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingImagePullKeyArgs', 'CmOfferingImagePullKeyArgsDict']]]] image_pull_keys: Image pull keys for this offering.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keywords: List of keywords associated with offering, typically used to search for it.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingKindArgs', 'CmOfferingKindArgsDict']]]] kinds: Array of kind.
        :param pulumi.Input[_builtins.str] label: Display Name in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] label_i18n: A map of translated strings, by language code.
        :param pulumi.Input[_builtins.str] long_description: Long description in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] long_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingMediaArgs', 'CmOfferingMediaArgsDict']]]] media: A list of media items related to this offering.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Map of metadata values for this offering.
        :param pulumi.Input[_builtins.str] name: The programmatic name of this offering.
        :param pulumi.Input[_builtins.str] offering_docs_url: URL for an additional docs with this offering.
        :param pulumi.Input[_builtins.str] offering_icon_url: URL for an icon associated with this offering.
        :param pulumi.Input[_builtins.str] offering_identifier: Computed Offering ID.
        :param pulumi.Input[_builtins.str] offering_support_url: [deprecated] - Use offering.support instead. URL to be displayed in the Consumption UI for getting support on this
               offering.
        :param pulumi.Input[_builtins.bool] pc_managed: Offering is managed by Partner Center.
        :param pulumi.Input[_builtins.str] portal_approval_record: The portal's approval record ID.
        :param pulumi.Input[_builtins.str] portal_ui_url: The portal UI URL.
        :param pulumi.Input[_builtins.str] product_kind: The product kind. Valid values are module, solution, or empty string.
        :param pulumi.Input[Union['CmOfferingProviderInfoArgs', 'CmOfferingProviderInfoArgsDict']] provider_info: Information on the provider for this offering, or omitted if no provider information is given.
        :param pulumi.Input[_builtins.str] public_original_crn: The original offering CRN that this publish entry came from.
        :param pulumi.Input[_builtins.bool] publish_approved: Offering has been approved to publish to permitted to IBM or Public Catalog.
        :param pulumi.Input[_builtins.str] publish_public_crn: The crn of the public catalog entry of this offering.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingRatingArgs', 'CmOfferingRatingArgsDict']]]] ratings: Repository info for offerings.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingRepoInfoArgs', 'CmOfferingRepoInfoArgsDict']]]] repo_infos: Repository info for offerings.
        :param pulumi.Input[_builtins.str] rev: Cloudant revision.
        :param pulumi.Input[_builtins.bool] share_enabled: Denotes sharing including access list availability of an Offering is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] share_with_access_lists: A list of account IDs to add to this offering's access list.
        :param pulumi.Input[_builtins.bool] share_with_all: Denotes public availability of an Offering - if share_enabled is true.
        :param pulumi.Input[_builtins.bool] share_with_ibm: Denotes IBM employee availability of an Offering - if share_enabled is true.
        :param pulumi.Input[_builtins.str] short_description: Short description in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] short_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmOfferingSupportArgs', 'CmOfferingSupportArgsDict']]]] supports: Offering Support information.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with this catalog.
        :param pulumi.Input[_builtins.str] updated: The date and time this catalog was last updated.
        :param pulumi.Input[_builtins.str] url: The url for this specific offering.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CmOfferingState.__new__(_CmOfferingState)

        __props__.__dict__["badges"] = badges
        __props__.__dict__["catalog_id"] = catalog_id
        __props__.__dict__["catalog_name"] = catalog_name
        __props__.__dict__["cm_offering_id"] = cm_offering_id
        __props__.__dict__["created"] = created
        __props__.__dict__["crn"] = crn
        __props__.__dict__["deprecate"] = deprecate
        __props__.__dict__["deprecate_pendings"] = deprecate_pendings
        __props__.__dict__["disclaimer"] = disclaimer
        __props__.__dict__["features"] = features
        __props__.__dict__["hidden"] = hidden
        __props__.__dict__["image_pull_keys"] = image_pull_keys
        __props__.__dict__["keywords"] = keywords
        __props__.__dict__["kinds"] = kinds
        __props__.__dict__["label"] = label
        __props__.__dict__["label_i18n"] = label_i18n
        __props__.__dict__["long_description"] = long_description
        __props__.__dict__["long_description_i18n"] = long_description_i18n
        __props__.__dict__["media"] = media
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["offering_docs_url"] = offering_docs_url
        __props__.__dict__["offering_icon_url"] = offering_icon_url
        __props__.__dict__["offering_id"] = offering_id
        __props__.__dict__["offering_identifier"] = offering_identifier
        __props__.__dict__["offering_support_url"] = offering_support_url
        __props__.__dict__["pc_managed"] = pc_managed
        __props__.__dict__["portal_approval_record"] = portal_approval_record
        __props__.__dict__["portal_ui_url"] = portal_ui_url
        __props__.__dict__["product_kind"] = product_kind
        __props__.__dict__["provider_info"] = provider_info
        __props__.__dict__["public_original_crn"] = public_original_crn
        __props__.__dict__["publish_approved"] = publish_approved
        __props__.__dict__["publish_public_crn"] = publish_public_crn
        __props__.__dict__["ratings"] = ratings
        __props__.__dict__["repo_infos"] = repo_infos
        __props__.__dict__["rev"] = rev
        __props__.__dict__["share_enabled"] = share_enabled
        __props__.__dict__["share_with_access_lists"] = share_with_access_lists
        __props__.__dict__["share_with_all"] = share_with_all
        __props__.__dict__["share_with_ibm"] = share_with_ibm
        __props__.__dict__["short_description"] = short_description
        __props__.__dict__["short_description_i18n"] = short_description_i18n
        __props__.__dict__["supports"] = supports
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated"] = updated
        __props__.__dict__["url"] = url
        return CmOffering(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def badges(self) -> pulumi.Output[Sequence['outputs.CmOfferingBadge']]:
        """
        A list of badges for this offering.
        """
        return pulumi.get(self, "badges")

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Output[_builtins.str]:
        """
        Catalog identifier.
        """
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the catalog.
        """
        return pulumi.get(self, "catalog_name")

    @_builtins.property
    @pulumi.getter(name="cmOfferingId")
    def cm_offering_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cm_offering_id")

    @_builtins.property
    @pulumi.getter
    def created(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time this catalog was created.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn for this specific offering.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def deprecate(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Deprecate this offering.
        """
        return pulumi.get(self, "deprecate")

    @_builtins.property
    @pulumi.getter(name="deprecatePendings")
    def deprecate_pendings(self) -> pulumi.Output[Sequence['outputs.CmOfferingDeprecatePending']]:
        """
        Deprecation information for an Offering.
        """
        return pulumi.get(self, "deprecate_pendings")

    @_builtins.property
    @pulumi.getter
    def disclaimer(self) -> pulumi.Output[_builtins.str]:
        """
        A disclaimer for this offering.
        """
        return pulumi.get(self, "disclaimer")

    @_builtins.property
    @pulumi.getter
    def features(self) -> pulumi.Output[Optional[Sequence['outputs.CmOfferingFeature']]]:
        """
        list of features associated with this offering.
        """
        return pulumi.get(self, "features")

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> pulumi.Output[_builtins.bool]:
        """
        Determine if this offering should be displayed in the Consumption UI.
        """
        return pulumi.get(self, "hidden")

    @_builtins.property
    @pulumi.getter(name="imagePullKeys")
    def image_pull_keys(self) -> pulumi.Output[Optional[Sequence['outputs.CmOfferingImagePullKey']]]:
        """
        Image pull keys for this offering.
        """
        return pulumi.get(self, "image_pull_keys")

    @_builtins.property
    @pulumi.getter
    def keywords(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of keywords associated with offering, typically used to search for it.
        """
        return pulumi.get(self, "keywords")

    @_builtins.property
    @pulumi.getter
    def kinds(self) -> pulumi.Output[Sequence['outputs.CmOfferingKind']]:
        """
        Array of kind.
        """
        return pulumi.get(self, "kinds")

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Output[_builtins.str]:
        """
        Display Name in the requested language.
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="labelI18n")
    def label_i18n(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "label_i18n")

    @_builtins.property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> pulumi.Output[_builtins.str]:
        """
        Long description in the requested language.
        """
        return pulumi.get(self, "long_description")

    @_builtins.property
    @pulumi.getter(name="longDescriptionI18n")
    def long_description_i18n(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "long_description_i18n")

    @_builtins.property
    @pulumi.getter
    def media(self) -> pulumi.Output[Optional[Sequence['outputs.CmOfferingMedia']]]:
        """
        A list of media items related to this offering.
        """
        return pulumi.get(self, "media")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Map of metadata values for this offering.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The programmatic name of this offering.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="offeringDocsUrl")
    def offering_docs_url(self) -> pulumi.Output[_builtins.str]:
        """
        URL for an additional docs with this offering.
        """
        return pulumi.get(self, "offering_docs_url")

    @_builtins.property
    @pulumi.getter(name="offeringIconUrl")
    def offering_icon_url(self) -> pulumi.Output[_builtins.str]:
        """
        URL for an icon associated with this offering.
        """
        return pulumi.get(self, "offering_icon_url")

    @_builtins.property
    @pulumi.getter(name="offeringId")
    def offering_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "offering_id")

    @_builtins.property
    @pulumi.getter(name="offeringIdentifier")
    def offering_identifier(self) -> pulumi.Output[_builtins.str]:
        """
        Computed Offering ID.
        """
        return pulumi.get(self, "offering_identifier")

    @_builtins.property
    @pulumi.getter(name="offeringSupportUrl")
    @_utilities.deprecated("""Deprecated""")
    def offering_support_url(self) -> pulumi.Output[_builtins.str]:
        """
        [deprecated] - Use offering.support instead. URL to be displayed in the Consumption UI for getting support on this
        offering.
        """
        return pulumi.get(self, "offering_support_url")

    @_builtins.property
    @pulumi.getter(name="pcManaged")
    def pc_managed(self) -> pulumi.Output[_builtins.bool]:
        """
        Offering is managed by Partner Center.
        """
        return pulumi.get(self, "pc_managed")

    @_builtins.property
    @pulumi.getter(name="portalApprovalRecord")
    def portal_approval_record(self) -> pulumi.Output[_builtins.str]:
        """
        The portal's approval record ID.
        """
        return pulumi.get(self, "portal_approval_record")

    @_builtins.property
    @pulumi.getter(name="portalUiUrl")
    def portal_ui_url(self) -> pulumi.Output[_builtins.str]:
        """
        The portal UI URL.
        """
        return pulumi.get(self, "portal_ui_url")

    @_builtins.property
    @pulumi.getter(name="productKind")
    def product_kind(self) -> pulumi.Output[_builtins.str]:
        """
        The product kind. Valid values are module, solution, or empty string.
        """
        return pulumi.get(self, "product_kind")

    @_builtins.property
    @pulumi.getter(name="providerInfo")
    def provider_info(self) -> pulumi.Output[Optional['outputs.CmOfferingProviderInfo']]:
        """
        Information on the provider for this offering, or omitted if no provider information is given.
        """
        return pulumi.get(self, "provider_info")

    @_builtins.property
    @pulumi.getter(name="publicOriginalCrn")
    def public_original_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The original offering CRN that this publish entry came from.
        """
        return pulumi.get(self, "public_original_crn")

    @_builtins.property
    @pulumi.getter(name="publishApproved")
    def publish_approved(self) -> pulumi.Output[_builtins.bool]:
        """
        Offering has been approved to publish to permitted to IBM or Public Catalog.
        """
        return pulumi.get(self, "publish_approved")

    @_builtins.property
    @pulumi.getter(name="publishPublicCrn")
    def publish_public_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the public catalog entry of this offering.
        """
        return pulumi.get(self, "publish_public_crn")

    @_builtins.property
    @pulumi.getter
    def ratings(self) -> pulumi.Output[Sequence['outputs.CmOfferingRating']]:
        """
        Repository info for offerings.
        """
        return pulumi.get(self, "ratings")

    @_builtins.property
    @pulumi.getter(name="repoInfos")
    def repo_infos(self) -> pulumi.Output[Sequence['outputs.CmOfferingRepoInfo']]:
        """
        Repository info for offerings.
        """
        return pulumi.get(self, "repo_infos")

    @_builtins.property
    @pulumi.getter
    def rev(self) -> pulumi.Output[_builtins.str]:
        """
        Cloudant revision.
        """
        return pulumi.get(self, "rev")

    @_builtins.property
    @pulumi.getter(name="shareEnabled")
    def share_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Denotes sharing including access list availability of an Offering is enabled.
        """
        return pulumi.get(self, "share_enabled")

    @_builtins.property
    @pulumi.getter(name="shareWithAccessLists")
    def share_with_access_lists(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        A list of account IDs to add to this offering's access list.
        """
        return pulumi.get(self, "share_with_access_lists")

    @_builtins.property
    @pulumi.getter(name="shareWithAll")
    def share_with_all(self) -> pulumi.Output[_builtins.bool]:
        """
        Denotes public availability of an Offering - if share_enabled is true.
        """
        return pulumi.get(self, "share_with_all")

    @_builtins.property
    @pulumi.getter(name="shareWithIbm")
    def share_with_ibm(self) -> pulumi.Output[_builtins.bool]:
        """
        Denotes IBM employee availability of an Offering - if share_enabled is true.
        """
        return pulumi.get(self, "share_with_ibm")

    @_builtins.property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> pulumi.Output[_builtins.str]:
        """
        Short description in the requested language.
        """
        return pulumi.get(self, "short_description")

    @_builtins.property
    @pulumi.getter(name="shortDescriptionI18n")
    def short_description_i18n(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "short_description_i18n")

    @_builtins.property
    @pulumi.getter
    def supports(self) -> pulumi.Output[Sequence['outputs.CmOfferingSupport']]:
        """
        Offering Support information.
        """
        return pulumi.get(self, "supports")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of tags associated with this catalog.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time this catalog was last updated.
        """
        return pulumi.get(self, "updated")

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Output[_builtins.str]:
        """
        The url for this specific offering.
        """
        return pulumi.get(self, "url")

