# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IamAccessTagArgs', 'IamAccessTag']

@pulumi.input_type
class IamAccessTagArgs:
    def __init__(__self__, *,
                 iam_access_tag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamAccessTag resource.
        :param pulumi.Input[_builtins.str] name: Name of the access tag
        """
        if iam_access_tag_id is not None:
            pulumi.set(__self__, "iam_access_tag_id", iam_access_tag_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="iamAccessTagId")
    def iam_access_tag_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_access_tag_id")

    @iam_access_tag_id.setter
    def iam_access_tag_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_access_tag_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the access tag
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _IamAccessTagState:
    def __init__(__self__, *,
                 iam_access_tag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamAccessTag resources.
        :param pulumi.Input[_builtins.str] name: Name of the access tag
        :param pulumi.Input[_builtins.str] tag_type: Type of the tag(access)
        """
        if iam_access_tag_id is not None:
            pulumi.set(__self__, "iam_access_tag_id", iam_access_tag_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @_builtins.property
    @pulumi.getter(name="iamAccessTagId")
    def iam_access_tag_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_access_tag_id")

    @iam_access_tag_id.setter
    def iam_access_tag_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_access_tag_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the access tag
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the tag(access)
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.type_token("ibm:index/iamAccessTag:IamAccessTag")
class IamAccessTag(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iam_access_tag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IamAccessTag resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Name of the access tag
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IamAccessTagArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamAccessTag resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamAccessTagArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamAccessTagArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iam_access_tag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamAccessTagArgs.__new__(IamAccessTagArgs)

            __props__.__dict__["iam_access_tag_id"] = iam_access_tag_id
            __props__.__dict__["name"] = name
            __props__.__dict__["tag_type"] = None
        super(IamAccessTag, __self__).__init__(
            'ibm:index/iamAccessTag:IamAccessTag',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            iam_access_tag_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            tag_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamAccessTag':
        """
        Get an existing IamAccessTag resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Name of the access tag
        :param pulumi.Input[_builtins.str] tag_type: Type of the tag(access)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamAccessTagState.__new__(_IamAccessTagState)

        __props__.__dict__["iam_access_tag_id"] = iam_access_tag_id
        __props__.__dict__["name"] = name
        __props__.__dict__["tag_type"] = tag_type
        return IamAccessTag(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="iamAccessTagId")
    def iam_access_tag_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_access_tag_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the access tag
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the tag(access)
        """
        return pulumi.get(self, "tag_type")

