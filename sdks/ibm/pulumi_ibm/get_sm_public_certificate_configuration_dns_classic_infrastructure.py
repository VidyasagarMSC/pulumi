# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSmPublicCertificateConfigurationDnsClassicInfrastructureResult',
    'AwaitableGetSmPublicCertificateConfigurationDnsClassicInfrastructureResult',
    'get_sm_public_certificate_configuration_dns_classic_infrastructure',
    'get_sm_public_certificate_configuration_dns_classic_infrastructure_output',
]

@pulumi.output_type
class GetSmPublicCertificateConfigurationDnsClassicInfrastructureResult:
    """
    A collection of values returned by getSmPublicCertificateConfigurationDnsClassicInfrastructure.
    """
    def __init__(__self__, classic_infrastructure_password=None, classic_infrastructure_username=None, config_type=None, created_at=None, created_by=None, endpoint_type=None, id=None, instance_id=None, name=None, region=None, secret_type=None, updated_at=None):
        if classic_infrastructure_password and not isinstance(classic_infrastructure_password, str):
            raise TypeError("Expected argument 'classic_infrastructure_password' to be a str")
        pulumi.set(__self__, "classic_infrastructure_password", classic_infrastructure_password)
        if classic_infrastructure_username and not isinstance(classic_infrastructure_username, str):
            raise TypeError("Expected argument 'classic_infrastructure_username' to be a str")
        pulumi.set(__self__, "classic_infrastructure_username", classic_infrastructure_username)
        if config_type and not isinstance(config_type, str):
            raise TypeError("Expected argument 'config_type' to be a str")
        pulumi.set(__self__, "config_type", config_type)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if secret_type and not isinstance(secret_type, str):
            raise TypeError("Expected argument 'secret_type' to be a str")
        pulumi.set(__self__, "secret_type", secret_type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="classicInfrastructurePassword")
    def classic_infrastructure_password(self) -> _builtins.str:
        return pulumi.get(self, "classic_infrastructure_password")

    @_builtins.property
    @pulumi.getter(name="classicInfrastructureUsername")
    def classic_infrastructure_username(self) -> _builtins.str:
        return pulumi.get(self, "classic_infrastructure_username")

    @_builtins.property
    @pulumi.getter(name="configType")
    def config_type(self) -> _builtins.str:
        return pulumi.get(self, "config_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> _builtins.str:
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetSmPublicCertificateConfigurationDnsClassicInfrastructureResult(GetSmPublicCertificateConfigurationDnsClassicInfrastructureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSmPublicCertificateConfigurationDnsClassicInfrastructureResult(
            classic_infrastructure_password=self.classic_infrastructure_password,
            classic_infrastructure_username=self.classic_infrastructure_username,
            config_type=self.config_type,
            created_at=self.created_at,
            created_by=self.created_by,
            endpoint_type=self.endpoint_type,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region,
            secret_type=self.secret_type,
            updated_at=self.updated_at)


def get_sm_public_certificate_configuration_dns_classic_infrastructure(endpoint_type: Optional[_builtins.str] = None,
                                                                       id: Optional[_builtins.str] = None,
                                                                       instance_id: Optional[_builtins.str] = None,
                                                                       name: Optional[_builtins.str] = None,
                                                                       region: Optional[_builtins.str] = None,
                                                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSmPublicCertificateConfigurationDnsClassicInfrastructureResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSmPublicCertificateConfigurationDnsClassicInfrastructure:getSmPublicCertificateConfigurationDnsClassicInfrastructure', __args__, opts=opts, typ=GetSmPublicCertificateConfigurationDnsClassicInfrastructureResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSmPublicCertificateConfigurationDnsClassicInfrastructureResult(
        classic_infrastructure_password=pulumi.get(__ret__, 'classic_infrastructure_password'),
        classic_infrastructure_username=pulumi.get(__ret__, 'classic_infrastructure_username'),
        config_type=pulumi.get(__ret__, 'config_type'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        secret_type=pulumi.get(__ret__, 'secret_type'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_sm_public_certificate_configuration_dns_classic_infrastructure_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                              id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                              instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                                              name: Optional[pulumi.Input[_builtins.str]] = None,
                                                                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSmPublicCertificateConfigurationDnsClassicInfrastructureResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSmPublicCertificateConfigurationDnsClassicInfrastructure:getSmPublicCertificateConfigurationDnsClassicInfrastructure', __args__, opts=opts, typ=GetSmPublicCertificateConfigurationDnsClassicInfrastructureResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSmPublicCertificateConfigurationDnsClassicInfrastructureResult(
        classic_infrastructure_password=pulumi.get(__response__, 'classic_infrastructure_password'),
        classic_infrastructure_username=pulumi.get(__response__, 'classic_infrastructure_username'),
        config_type=pulumi.get(__response__, 'config_type'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        secret_type=pulumi.get(__response__, 'secret_type'),
        updated_at=pulumi.get(__response__, 'updated_at')))
