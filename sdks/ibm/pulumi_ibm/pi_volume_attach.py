# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiVolumeAttachArgs', 'PiVolumeAttach']

@pulumi.input_type
class PiVolumeAttachArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_instance_id: pulumi.Input[_builtins.str],
                 pi_volume_id: pulumi.Input[_builtins.str],
                 pi_volume_attach_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiVolumeAttachTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiVolumeAttach resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_id: PI Instance Id
        :param pulumi.Input[_builtins.str] pi_volume_id: Id of the volume to attach. Note these volumes should have been created
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_instance_id", pi_instance_id)
        pulumi.set(__self__, "pi_volume_id", pi_volume_id)
        if pi_volume_attach_id is not None:
            pulumi.set(__self__, "pi_volume_attach_id", pi_volume_attach_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        PI Instance Id
        """
        return pulumi.get(self, "pi_instance_id")

    @pi_instance_id.setter
    def pi_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeId")
    def pi_volume_id(self) -> pulumi.Input[_builtins.str]:
        """
        Id of the volume to attach. Note these volumes should have been created
        """
        return pulumi.get(self, "pi_volume_id")

    @pi_volume_id.setter
    def pi_volume_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_volume_id", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeAttachId")
    def pi_volume_attach_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_volume_attach_id")

    @pi_volume_attach_id.setter
    def pi_volume_attach_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_attach_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiVolumeAttachTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiVolumeAttachTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiVolumeAttachState:
    def __init__(__self__, *,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_attach_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiVolumeAttachTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiVolumeAttach resources.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_id: PI Instance Id
        :param pulumi.Input[_builtins.str] pi_volume_id: Id of the volume to attach. Note these volumes should have been created
        :param pulumi.Input[_builtins.str] status: The status of the volume.
        """
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_instance_id is not None:
            pulumi.set(__self__, "pi_instance_id", pi_instance_id)
        if pi_volume_attach_id is not None:
            pulumi.set(__self__, "pi_volume_attach_id", pi_volume_attach_id)
        if pi_volume_id is not None:
            pulumi.set(__self__, "pi_volume_id", pi_volume_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PI Instance Id
        """
        return pulumi.get(self, "pi_instance_id")

    @pi_instance_id.setter
    def pi_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeAttachId")
    def pi_volume_attach_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_volume_attach_id")

    @pi_volume_attach_id.setter
    def pi_volume_attach_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_attach_id", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeId")
    def pi_volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Id of the volume to attach. Note these volumes should have been created
        """
        return pulumi.get(self, "pi_volume_id")

    @pi_volume_id.setter
    def pi_volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the volume.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiVolumeAttachTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiVolumeAttachTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piVolumeAttach:PiVolumeAttach")
class PiVolumeAttach(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_attach_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiVolumeAttachTimeoutsArgs', 'PiVolumeAttachTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiVolumeAttach resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_id: PI Instance Id
        :param pulumi.Input[_builtins.str] pi_volume_id: Id of the volume to attach. Note these volumes should have been created
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiVolumeAttachArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiVolumeAttach resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiVolumeAttachArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiVolumeAttachArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_attach_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiVolumeAttachTimeoutsArgs', 'PiVolumeAttachTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiVolumeAttachArgs.__new__(PiVolumeAttachArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            if pi_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_instance_id'")
            __props__.__dict__["pi_instance_id"] = pi_instance_id
            __props__.__dict__["pi_volume_attach_id"] = pi_volume_attach_id
            if pi_volume_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_volume_id'")
            __props__.__dict__["pi_volume_id"] = pi_volume_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["status"] = None
        super(PiVolumeAttach, __self__).__init__(
            'ibm:index/piVolumeAttach:PiVolumeAttach',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_volume_attach_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiVolumeAttachTimeoutsArgs', 'PiVolumeAttachTimeoutsArgsDict']]] = None) -> 'PiVolumeAttach':
        """
        Get an existing PiVolumeAttach resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_id: PI Instance Id
        :param pulumi.Input[_builtins.str] pi_volume_id: Id of the volume to attach. Note these volumes should have been created
        :param pulumi.Input[_builtins.str] status: The status of the volume.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiVolumeAttachState.__new__(_PiVolumeAttachState)

        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_instance_id"] = pi_instance_id
        __props__.__dict__["pi_volume_attach_id"] = pi_volume_attach_id
        __props__.__dict__["pi_volume_id"] = pi_volume_id
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        return PiVolumeAttach(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        PI Instance Id
        """
        return pulumi.get(self, "pi_instance_id")

    @_builtins.property
    @pulumi.getter(name="piVolumeAttachId")
    def pi_volume_attach_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_volume_attach_id")

    @_builtins.property
    @pulumi.getter(name="piVolumeId")
    def pi_volume_id(self) -> pulumi.Output[_builtins.str]:
        """
        Id of the volume to attach. Note these volumes should have been created
        """
        return pulumi.get(self, "pi_volume_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the volume.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiVolumeAttachTimeouts']]:
        return pulumi.get(self, "timeouts")

