# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCmAccountResult',
    'AwaitableGetCmAccountResult',
    'get_cm_account',
    'get_cm_account_output',
]

@pulumi.output_type
class GetCmAccountResult:
    """
    A collection of values returned by getCmAccount.
    """
    def __init__(__self__, account_filters=None, hide_ibm_cloud_catalog=None, id=None, region_filter=None, rev=None):
        if account_filters and not isinstance(account_filters, list):
            raise TypeError("Expected argument 'account_filters' to be a list")
        pulumi.set(__self__, "account_filters", account_filters)
        if hide_ibm_cloud_catalog and not isinstance(hide_ibm_cloud_catalog, bool):
            raise TypeError("Expected argument 'hide_ibm_cloud_catalog' to be a bool")
        pulumi.set(__self__, "hide_ibm_cloud_catalog", hide_ibm_cloud_catalog)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region_filter and not isinstance(region_filter, str):
            raise TypeError("Expected argument 'region_filter' to be a str")
        pulumi.set(__self__, "region_filter", region_filter)
        if rev and not isinstance(rev, str):
            raise TypeError("Expected argument 'rev' to be a str")
        pulumi.set(__self__, "rev", rev)

    @_builtins.property
    @pulumi.getter(name="accountFilters")
    def account_filters(self) -> Sequence['outputs.GetCmAccountAccountFilterResult']:
        return pulumi.get(self, "account_filters")

    @_builtins.property
    @pulumi.getter(name="hideIbmCloudCatalog")
    def hide_ibm_cloud_catalog(self) -> _builtins.bool:
        return pulumi.get(self, "hide_ibm_cloud_catalog")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="regionFilter")
    def region_filter(self) -> _builtins.str:
        return pulumi.get(self, "region_filter")

    @_builtins.property
    @pulumi.getter
    def rev(self) -> _builtins.str:
        return pulumi.get(self, "rev")


class AwaitableGetCmAccountResult(GetCmAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCmAccountResult(
            account_filters=self.account_filters,
            hide_ibm_cloud_catalog=self.hide_ibm_cloud_catalog,
            id=self.id,
            region_filter=self.region_filter,
            rev=self.rev)


def get_cm_account(id: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCmAccountResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCmAccount:getCmAccount', __args__, opts=opts, typ=GetCmAccountResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCmAccountResult(
        account_filters=pulumi.get(__ret__, 'account_filters'),
        hide_ibm_cloud_catalog=pulumi.get(__ret__, 'hide_ibm_cloud_catalog'),
        id=pulumi.get(__ret__, 'id'),
        region_filter=pulumi.get(__ret__, 'region_filter'),
        rev=pulumi.get(__ret__, 'rev'))
def get_cm_account_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCmAccountResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCmAccount:getCmAccount', __args__, opts=opts, typ=GetCmAccountResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCmAccountResult(
        account_filters=pulumi.get(__response__, 'account_filters'),
        hide_ibm_cloud_catalog=pulumi.get(__response__, 'hide_ibm_cloud_catalog'),
        id=pulumi.get(__response__, 'id'),
        region_filter=pulumi.get(__response__, 'region_filter'),
        rev=pulumi.get(__response__, 'rev')))
