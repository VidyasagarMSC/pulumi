# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SatelliteClusterArgs', 'SatelliteCluster']

@pulumi.input_type
class SatelliteClusterArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 calico_ip_autodetection: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 crn_token: Optional[pulumi.Input[_builtins.str]] = None,
                 default_worker_pool_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 disable_public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_config_admin: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 host_labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 infrastructure_topology: Optional[pulumi.Input[_builtins.str]] = None,
                 kube_version: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 patch_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 pull_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
                 satellite_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['SatelliteClusterTimeoutsArgs']] = None,
                 wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteClusterZoneArgs']]]] = None):
        """
        The set of arguments for constructing a SatelliteCluster resource.
        :param pulumi.Input[_builtins.str] location: The name or ID of the Satellite location
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] calico_ip_autodetection: Set IP autodetection to use correct interface for Calico
        :param pulumi.Input[_builtins.str] crn_token: The IBM Cloud Identity and Access Management (IAM) service CRN token for the service that creates the cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] default_worker_pool_labels: Labels on the default worker pool
        :param pulumi.Input[_builtins.bool] disable_public_service_endpoint: Boolean value true if Public service endpoint to be disabled
        :param pulumi.Input[_builtins.bool] enable_config_admin: Grant cluster admin access to Satellite Config to manage Kubernetes resources.
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_labels: Labels that describe a Satellite host for default workerpool
        :param pulumi.Input[_builtins.str] infrastructure_topology: String value for single node cluster option. Available options: single-replica, highly-available (default:
               highly-available)
        :param pulumi.Input[_builtins.str] kube_version: The OpenShift Container Platform version
        :param pulumi.Input[_builtins.str] name: The unique name for the new IBM Cloud Satellite cluster
        :param pulumi.Input[_builtins.str] operating_system: Operating system of the default worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        :param pulumi.Input[_builtins.str] patch_version: Kubernetes patch version
        :param pulumi.Input[_builtins.str] pod_subnet: User provided value for the pod subnet
        :param pulumi.Input[_builtins.str] pull_secret: The RedHat pull secret to create the OpenShift cluster
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] retry_patch_version: Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
               if the previous apply fails
        :param pulumi.Input[_builtins.str] service_subnet: User provided value for service subnet
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resources
        :param pulumi.Input[_builtins.bool] wait_for_worker_update: Wait for worker node to update during kube version update.
        :param pulumi.Input[_builtins.float] worker_count: The number of worker nodes per zone in the default worker pool. Required when '--host-label' is specified. (default: 0)
        :param pulumi.Input[Sequence[pulumi.Input['SatelliteClusterZoneArgs']]] zones: Zone info for worker pool
        """
        pulumi.set(__self__, "location", location)
        if calico_ip_autodetection is not None:
            pulumi.set(__self__, "calico_ip_autodetection", calico_ip_autodetection)
        if crn_token is not None:
            pulumi.set(__self__, "crn_token", crn_token)
        if default_worker_pool_labels is not None:
            pulumi.set(__self__, "default_worker_pool_labels", default_worker_pool_labels)
        if disable_public_service_endpoint is not None:
            pulumi.set(__self__, "disable_public_service_endpoint", disable_public_service_endpoint)
        if enable_config_admin is not None:
            pulumi.set(__self__, "enable_config_admin", enable_config_admin)
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)
        if host_labels is not None:
            pulumi.set(__self__, "host_labels", host_labels)
        if infrastructure_topology is not None:
            pulumi.set(__self__, "infrastructure_topology", infrastructure_topology)
        if kube_version is not None:
            pulumi.set(__self__, "kube_version", kube_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if patch_version is not None:
            pulumi.set(__self__, "patch_version", patch_version)
        if pod_subnet is not None:
            pulumi.set(__self__, "pod_subnet", pod_subnet)
        if pull_secret is not None:
            pulumi.set(__self__, "pull_secret", pull_secret)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if retry_patch_version is not None:
            pulumi.set(__self__, "retry_patch_version", retry_patch_version)
        if satellite_cluster_id is not None:
            pulumi.set(__self__, "satellite_cluster_id", satellite_cluster_id)
        if service_subnet is not None:
            pulumi.set(__self__, "service_subnet", service_subnet)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if wait_for_worker_update is not None:
            pulumi.set(__self__, "wait_for_worker_update", wait_for_worker_update)
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        The name or ID of the Satellite location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="calicoIpAutodetection")
    def calico_ip_autodetection(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Set IP autodetection to use correct interface for Calico
        """
        return pulumi.get(self, "calico_ip_autodetection")

    @calico_ip_autodetection.setter
    def calico_ip_autodetection(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "calico_ip_autodetection", value)

    @_builtins.property
    @pulumi.getter(name="crnToken")
    def crn_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IBM Cloud Identity and Access Management (IAM) service CRN token for the service that creates the cluster.
        """
        return pulumi.get(self, "crn_token")

    @crn_token.setter
    def crn_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn_token", value)

    @_builtins.property
    @pulumi.getter(name="defaultWorkerPoolLabels")
    def default_worker_pool_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels on the default worker pool
        """
        return pulumi.get(self, "default_worker_pool_labels")

    @default_worker_pool_labels.setter
    def default_worker_pool_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "default_worker_pool_labels", value)

    @_builtins.property
    @pulumi.getter(name="disablePublicServiceEndpoint")
    def disable_public_service_endpoint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value true if Public service endpoint to be disabled
        """
        return pulumi.get(self, "disable_public_service_endpoint")

    @disable_public_service_endpoint.setter
    def disable_public_service_endpoint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_public_service_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="enableConfigAdmin")
    def enable_config_admin(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Grant cluster admin access to Satellite Config to manage Kubernetes resources.
        """
        return pulumi.get(self, "enable_config_admin")

    @enable_config_admin.setter
    def enable_config_admin(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_config_admin", value)

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entitlement", value)

    @_builtins.property
    @pulumi.getter(name="hostLabels")
    def host_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Labels that describe a Satellite host for default workerpool
        """
        return pulumi.get(self, "host_labels")

    @host_labels.setter
    def host_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_labels", value)

    @_builtins.property
    @pulumi.getter(name="infrastructureTopology")
    def infrastructure_topology(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        String value for single node cluster option. Available options: single-replica, highly-available (default:
        highly-available)
        """
        return pulumi.get(self, "infrastructure_topology")

    @infrastructure_topology.setter
    def infrastructure_topology(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "infrastructure_topology", value)

    @_builtins.property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OpenShift Container Platform version
        """
        return pulumi.get(self, "kube_version")

    @kube_version.setter
    def kube_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kube_version", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique name for the new IBM Cloud Satellite cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Operating system of the default worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="patchVersion")
    def patch_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes patch version
        """
        return pulumi.get(self, "patch_version")

    @patch_version.setter
    def patch_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "patch_version", value)

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User provided value for the pod subnet
        """
        return pulumi.get(self, "pod_subnet")

    @pod_subnet.setter
    def pod_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_subnet", value)

    @_builtins.property
    @pulumi.getter(name="pullSecret")
    def pull_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RedHat pull secret to create the OpenShift cluster
        """
        return pulumi.get(self, "pull_secret")

    @pull_secret.setter
    def pull_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pull_secret", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="retryPatchVersion")
    def retry_patch_version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
        if the previous apply fails
        """
        return pulumi.get(self, "retry_patch_version")

    @retry_patch_version.setter
    def retry_patch_version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retry_patch_version", value)

    @_builtins.property
    @pulumi.getter(name="satelliteClusterId")
    def satellite_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_cluster_id")

    @satellite_cluster_id.setter
    def satellite_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User provided value for service subnet
        """
        return pulumi.get(self, "service_subnet")

    @service_subnet.setter
    def service_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_subnet", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for the resources
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SatelliteClusterTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SatelliteClusterTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="waitForWorkerUpdate")
    def wait_for_worker_update(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Wait for worker node to update during kube version update.
        """
        return pulumi.get(self, "wait_for_worker_update")

    @wait_for_worker_update.setter
    def wait_for_worker_update(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_for_worker_update", value)

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of worker nodes per zone in the default worker pool. Required when '--host-label' is specified. (default: 0)
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "worker_count", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteClusterZoneArgs']]]]:
        """
        Zone info for worker pool
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteClusterZoneArgs']]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class _SatelliteClusterState:
    def __init__(__self__, *,
                 calico_ip_autodetection: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 crn_token: Optional[pulumi.Input[_builtins.str]] = None,
                 default_worker_pool_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 disable_public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_config_admin: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 host_labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 infrastructure_topology: Optional[pulumi.Input[_builtins.str]] = None,
                 ingress_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 ingress_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 kube_version: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 master_status: Optional[pulumi.Input[_builtins.str]] = None,
                 master_url: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 patch_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_service_endpoint_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 public_service_endpoint_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 pull_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
                 satellite_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['SatelliteClusterTimeoutsArgs']] = None,
                 wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteClusterZoneArgs']]]] = None):
        """
        Input properties used for looking up and filtering SatelliteCluster resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] calico_ip_autodetection: Set IP autodetection to use correct interface for Calico
        :param pulumi.Input[_builtins.str] crn: CRN of resource instance
        :param pulumi.Input[_builtins.str] crn_token: The IBM Cloud Identity and Access Management (IAM) service CRN token for the service that creates the cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] default_worker_pool_labels: Labels on the default worker pool
        :param pulumi.Input[_builtins.bool] disable_public_service_endpoint: Boolean value true if Public service endpoint to be disabled
        :param pulumi.Input[_builtins.bool] enable_config_admin: Grant cluster admin access to Satellite Config to manage Kubernetes resources.
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_labels: Labels that describe a Satellite host for default workerpool
        :param pulumi.Input[_builtins.str] infrastructure_topology: String value for single node cluster option. Available options: single-replica, highly-available (default:
               highly-available)
        :param pulumi.Input[_builtins.str] kube_version: The OpenShift Container Platform version
        :param pulumi.Input[_builtins.str] location: The name or ID of the Satellite location
        :param pulumi.Input[_builtins.str] name: The unique name for the new IBM Cloud Satellite cluster
        :param pulumi.Input[_builtins.str] operating_system: Operating system of the default worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        :param pulumi.Input[_builtins.str] patch_version: Kubernetes patch version
        :param pulumi.Input[_builtins.str] pod_subnet: User provided value for the pod subnet
        :param pulumi.Input[_builtins.str] pull_secret: The RedHat pull secret to create the OpenShift cluster
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.float] retry_patch_version: Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
               if the previous apply fails
        :param pulumi.Input[_builtins.str] service_subnet: User provided value for service subnet
        :param pulumi.Input[_builtins.str] state: The lifecycle state of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resources
        :param pulumi.Input[_builtins.bool] wait_for_worker_update: Wait for worker node to update during kube version update.
        :param pulumi.Input[_builtins.float] worker_count: The number of worker nodes per zone in the default worker pool. Required when '--host-label' is specified. (default: 0)
        :param pulumi.Input[Sequence[pulumi.Input['SatelliteClusterZoneArgs']]] zones: Zone info for worker pool
        """
        if calico_ip_autodetection is not None:
            pulumi.set(__self__, "calico_ip_autodetection", calico_ip_autodetection)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if crn_token is not None:
            pulumi.set(__self__, "crn_token", crn_token)
        if default_worker_pool_labels is not None:
            pulumi.set(__self__, "default_worker_pool_labels", default_worker_pool_labels)
        if disable_public_service_endpoint is not None:
            pulumi.set(__self__, "disable_public_service_endpoint", disable_public_service_endpoint)
        if enable_config_admin is not None:
            pulumi.set(__self__, "enable_config_admin", enable_config_admin)
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)
        if host_labels is not None:
            pulumi.set(__self__, "host_labels", host_labels)
        if infrastructure_topology is not None:
            pulumi.set(__self__, "infrastructure_topology", infrastructure_topology)
        if ingress_hostname is not None:
            pulumi.set(__self__, "ingress_hostname", ingress_hostname)
        if ingress_secret is not None:
            pulumi.set(__self__, "ingress_secret", ingress_secret)
        if kube_version is not None:
            pulumi.set(__self__, "kube_version", kube_version)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if master_status is not None:
            pulumi.set(__self__, "master_status", master_status)
        if master_url is not None:
            pulumi.set(__self__, "master_url", master_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if patch_version is not None:
            pulumi.set(__self__, "patch_version", patch_version)
        if pod_subnet is not None:
            pulumi.set(__self__, "pod_subnet", pod_subnet)
        if private_service_endpoint_enabled is not None:
            pulumi.set(__self__, "private_service_endpoint_enabled", private_service_endpoint_enabled)
        if private_service_endpoint_url is not None:
            pulumi.set(__self__, "private_service_endpoint_url", private_service_endpoint_url)
        if public_service_endpoint_enabled is not None:
            pulumi.set(__self__, "public_service_endpoint_enabled", public_service_endpoint_enabled)
        if public_service_endpoint_url is not None:
            pulumi.set(__self__, "public_service_endpoint_url", public_service_endpoint_url)
        if pull_secret is not None:
            pulumi.set(__self__, "pull_secret", pull_secret)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if retry_patch_version is not None:
            pulumi.set(__self__, "retry_patch_version", retry_patch_version)
        if satellite_cluster_id is not None:
            pulumi.set(__self__, "satellite_cluster_id", satellite_cluster_id)
        if service_subnet is not None:
            pulumi.set(__self__, "service_subnet", service_subnet)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if wait_for_worker_update is not None:
            pulumi.set(__self__, "wait_for_worker_update", wait_for_worker_update)
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="calicoIpAutodetection")
    def calico_ip_autodetection(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Set IP autodetection to use correct interface for Calico
        """
        return pulumi.get(self, "calico_ip_autodetection")

    @calico_ip_autodetection.setter
    def calico_ip_autodetection(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "calico_ip_autodetection", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of resource instance
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="crnToken")
    def crn_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IBM Cloud Identity and Access Management (IAM) service CRN token for the service that creates the cluster.
        """
        return pulumi.get(self, "crn_token")

    @crn_token.setter
    def crn_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn_token", value)

    @_builtins.property
    @pulumi.getter(name="defaultWorkerPoolLabels")
    def default_worker_pool_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels on the default worker pool
        """
        return pulumi.get(self, "default_worker_pool_labels")

    @default_worker_pool_labels.setter
    def default_worker_pool_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "default_worker_pool_labels", value)

    @_builtins.property
    @pulumi.getter(name="disablePublicServiceEndpoint")
    def disable_public_service_endpoint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value true if Public service endpoint to be disabled
        """
        return pulumi.get(self, "disable_public_service_endpoint")

    @disable_public_service_endpoint.setter
    def disable_public_service_endpoint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_public_service_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="enableConfigAdmin")
    def enable_config_admin(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Grant cluster admin access to Satellite Config to manage Kubernetes resources.
        """
        return pulumi.get(self, "enable_config_admin")

    @enable_config_admin.setter
    def enable_config_admin(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_config_admin", value)

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entitlement", value)

    @_builtins.property
    @pulumi.getter(name="hostLabels")
    def host_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Labels that describe a Satellite host for default workerpool
        """
        return pulumi.get(self, "host_labels")

    @host_labels.setter
    def host_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_labels", value)

    @_builtins.property
    @pulumi.getter(name="infrastructureTopology")
    def infrastructure_topology(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        String value for single node cluster option. Available options: single-replica, highly-available (default:
        highly-available)
        """
        return pulumi.get(self, "infrastructure_topology")

    @infrastructure_topology.setter
    def infrastructure_topology(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "infrastructure_topology", value)

    @_builtins.property
    @pulumi.getter(name="ingressHostname")
    def ingress_hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ingress_hostname")

    @ingress_hostname.setter
    def ingress_hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ingress_hostname", value)

    @_builtins.property
    @pulumi.getter(name="ingressSecret")
    def ingress_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ingress_secret")

    @ingress_secret.setter
    def ingress_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ingress_secret", value)

    @_builtins.property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OpenShift Container Platform version
        """
        return pulumi.get(self, "kube_version")

    @kube_version.setter
    def kube_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kube_version", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name or ID of the Satellite location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="masterStatus")
    def master_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "master_status")

    @master_status.setter
    def master_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_status", value)

    @_builtins.property
    @pulumi.getter(name="masterUrl")
    def master_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "master_url")

    @master_url.setter
    def master_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_url", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique name for the new IBM Cloud Satellite cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Operating system of the default worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="patchVersion")
    def patch_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes patch version
        """
        return pulumi.get(self, "patch_version")

    @patch_version.setter
    def patch_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "patch_version", value)

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User provided value for the pod subnet
        """
        return pulumi.get(self, "pod_subnet")

    @pod_subnet.setter
    def pod_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_subnet", value)

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpointEnabled")
    def private_service_endpoint_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "private_service_endpoint_enabled")

    @private_service_endpoint_enabled.setter
    def private_service_endpoint_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_service_endpoint_enabled", value)

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpointUrl")
    def private_service_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_service_endpoint_url")

    @private_service_endpoint_url.setter
    def private_service_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_service_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpointEnabled")
    def public_service_endpoint_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "public_service_endpoint_enabled")

    @public_service_endpoint_enabled.setter
    def public_service_endpoint_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public_service_endpoint_enabled", value)

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpointUrl")
    def public_service_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_service_endpoint_url")

    @public_service_endpoint_url.setter
    def public_service_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_service_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="pullSecret")
    def pull_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RedHat pull secret to create the OpenShift cluster
        """
        return pulumi.get(self, "pull_secret")

    @pull_secret.setter
    def pull_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pull_secret", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="retryPatchVersion")
    def retry_patch_version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
        if the previous apply fails
        """
        return pulumi.get(self, "retry_patch_version")

    @retry_patch_version.setter
    def retry_patch_version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retry_patch_version", value)

    @_builtins.property
    @pulumi.getter(name="satelliteClusterId")
    def satellite_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_cluster_id")

    @satellite_cluster_id.setter
    def satellite_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User provided value for service subnet
        """
        return pulumi.get(self, "service_subnet")

    @service_subnet.setter
    def service_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_subnet", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the cluster.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for the resources
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SatelliteClusterTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SatelliteClusterTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="waitForWorkerUpdate")
    def wait_for_worker_update(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Wait for worker node to update during kube version update.
        """
        return pulumi.get(self, "wait_for_worker_update")

    @wait_for_worker_update.setter
    def wait_for_worker_update(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_for_worker_update", value)

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of worker nodes per zone in the default worker pool. Required when '--host-label' is specified. (default: 0)
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "worker_count", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteClusterZoneArgs']]]]:
        """
        Zone info for worker pool
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteClusterZoneArgs']]]]):
        pulumi.set(self, "zones", value)


@pulumi.type_token("ibm:index/satelliteCluster:SatelliteCluster")
class SatelliteCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 calico_ip_autodetection: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 crn_token: Optional[pulumi.Input[_builtins.str]] = None,
                 default_worker_pool_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 disable_public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_config_admin: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 host_labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 infrastructure_topology: Optional[pulumi.Input[_builtins.str]] = None,
                 kube_version: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 patch_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 pull_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
                 satellite_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['SatelliteClusterTimeoutsArgs', 'SatelliteClusterTimeoutsArgsDict']]] = None,
                 wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SatelliteClusterZoneArgs', 'SatelliteClusterZoneArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a SatelliteCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] calico_ip_autodetection: Set IP autodetection to use correct interface for Calico
        :param pulumi.Input[_builtins.str] crn_token: The IBM Cloud Identity and Access Management (IAM) service CRN token for the service that creates the cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] default_worker_pool_labels: Labels on the default worker pool
        :param pulumi.Input[_builtins.bool] disable_public_service_endpoint: Boolean value true if Public service endpoint to be disabled
        :param pulumi.Input[_builtins.bool] enable_config_admin: Grant cluster admin access to Satellite Config to manage Kubernetes resources.
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_labels: Labels that describe a Satellite host for default workerpool
        :param pulumi.Input[_builtins.str] infrastructure_topology: String value for single node cluster option. Available options: single-replica, highly-available (default:
               highly-available)
        :param pulumi.Input[_builtins.str] kube_version: The OpenShift Container Platform version
        :param pulumi.Input[_builtins.str] location: The name or ID of the Satellite location
        :param pulumi.Input[_builtins.str] name: The unique name for the new IBM Cloud Satellite cluster
        :param pulumi.Input[_builtins.str] operating_system: Operating system of the default worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        :param pulumi.Input[_builtins.str] patch_version: Kubernetes patch version
        :param pulumi.Input[_builtins.str] pod_subnet: User provided value for the pod subnet
        :param pulumi.Input[_builtins.str] pull_secret: The RedHat pull secret to create the OpenShift cluster
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] retry_patch_version: Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
               if the previous apply fails
        :param pulumi.Input[_builtins.str] service_subnet: User provided value for service subnet
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resources
        :param pulumi.Input[_builtins.bool] wait_for_worker_update: Wait for worker node to update during kube version update.
        :param pulumi.Input[_builtins.float] worker_count: The number of worker nodes per zone in the default worker pool. Required when '--host-label' is specified. (default: 0)
        :param pulumi.Input[Sequence[pulumi.Input[Union['SatelliteClusterZoneArgs', 'SatelliteClusterZoneArgsDict']]]] zones: Zone info for worker pool
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SatelliteClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SatelliteCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SatelliteClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SatelliteClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 calico_ip_autodetection: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 crn_token: Optional[pulumi.Input[_builtins.str]] = None,
                 default_worker_pool_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 disable_public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_config_admin: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 host_labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 infrastructure_topology: Optional[pulumi.Input[_builtins.str]] = None,
                 kube_version: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 patch_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 pull_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
                 satellite_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['SatelliteClusterTimeoutsArgs', 'SatelliteClusterTimeoutsArgsDict']]] = None,
                 wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SatelliteClusterZoneArgs', 'SatelliteClusterZoneArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SatelliteClusterArgs.__new__(SatelliteClusterArgs)

            __props__.__dict__["calico_ip_autodetection"] = calico_ip_autodetection
            __props__.__dict__["crn_token"] = None if crn_token is None else pulumi.Output.secret(crn_token)
            __props__.__dict__["default_worker_pool_labels"] = default_worker_pool_labels
            __props__.__dict__["disable_public_service_endpoint"] = disable_public_service_endpoint
            __props__.__dict__["enable_config_admin"] = enable_config_admin
            __props__.__dict__["entitlement"] = entitlement
            __props__.__dict__["host_labels"] = host_labels
            __props__.__dict__["infrastructure_topology"] = infrastructure_topology
            __props__.__dict__["kube_version"] = kube_version
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["operating_system"] = operating_system
            __props__.__dict__["patch_version"] = patch_version
            __props__.__dict__["pod_subnet"] = pod_subnet
            __props__.__dict__["pull_secret"] = pull_secret
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["retry_patch_version"] = retry_patch_version
            __props__.__dict__["satellite_cluster_id"] = satellite_cluster_id
            __props__.__dict__["service_subnet"] = service_subnet
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["wait_for_worker_update"] = wait_for_worker_update
            __props__.__dict__["worker_count"] = worker_count
            __props__.__dict__["zones"] = zones
            __props__.__dict__["crn"] = None
            __props__.__dict__["ingress_hostname"] = None
            __props__.__dict__["ingress_secret"] = None
            __props__.__dict__["master_status"] = None
            __props__.__dict__["master_url"] = None
            __props__.__dict__["private_service_endpoint_enabled"] = None
            __props__.__dict__["private_service_endpoint_url"] = None
            __props__.__dict__["public_service_endpoint_enabled"] = None
            __props__.__dict__["public_service_endpoint_url"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["state"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["crnToken", "ingressSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SatelliteCluster, __self__).__init__(
            'ibm:index/satelliteCluster:SatelliteCluster',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            calico_ip_autodetection: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            crn_token: Optional[pulumi.Input[_builtins.str]] = None,
            default_worker_pool_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            disable_public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_config_admin: Optional[pulumi.Input[_builtins.bool]] = None,
            entitlement: Optional[pulumi.Input[_builtins.str]] = None,
            host_labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            infrastructure_topology: Optional[pulumi.Input[_builtins.str]] = None,
            ingress_hostname: Optional[pulumi.Input[_builtins.str]] = None,
            ingress_secret: Optional[pulumi.Input[_builtins.str]] = None,
            kube_version: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            master_status: Optional[pulumi.Input[_builtins.str]] = None,
            master_url: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            operating_system: Optional[pulumi.Input[_builtins.str]] = None,
            patch_version: Optional[pulumi.Input[_builtins.str]] = None,
            pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            private_service_endpoint_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            private_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
            public_service_endpoint_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            public_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
            pull_secret: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
            satellite_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['SatelliteClusterTimeoutsArgs', 'SatelliteClusterTimeoutsArgsDict']]] = None,
            wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
            worker_count: Optional[pulumi.Input[_builtins.float]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SatelliteClusterZoneArgs', 'SatelliteClusterZoneArgsDict']]]]] = None) -> 'SatelliteCluster':
        """
        Get an existing SatelliteCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] calico_ip_autodetection: Set IP autodetection to use correct interface for Calico
        :param pulumi.Input[_builtins.str] crn: CRN of resource instance
        :param pulumi.Input[_builtins.str] crn_token: The IBM Cloud Identity and Access Management (IAM) service CRN token for the service that creates the cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] default_worker_pool_labels: Labels on the default worker pool
        :param pulumi.Input[_builtins.bool] disable_public_service_endpoint: Boolean value true if Public service endpoint to be disabled
        :param pulumi.Input[_builtins.bool] enable_config_admin: Grant cluster admin access to Satellite Config to manage Kubernetes resources.
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_labels: Labels that describe a Satellite host for default workerpool
        :param pulumi.Input[_builtins.str] infrastructure_topology: String value for single node cluster option. Available options: single-replica, highly-available (default:
               highly-available)
        :param pulumi.Input[_builtins.str] kube_version: The OpenShift Container Platform version
        :param pulumi.Input[_builtins.str] location: The name or ID of the Satellite location
        :param pulumi.Input[_builtins.str] name: The unique name for the new IBM Cloud Satellite cluster
        :param pulumi.Input[_builtins.str] operating_system: Operating system of the default worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        :param pulumi.Input[_builtins.str] patch_version: Kubernetes patch version
        :param pulumi.Input[_builtins.str] pod_subnet: User provided value for the pod subnet
        :param pulumi.Input[_builtins.str] pull_secret: The RedHat pull secret to create the OpenShift cluster
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.float] retry_patch_version: Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
               if the previous apply fails
        :param pulumi.Input[_builtins.str] service_subnet: User provided value for service subnet
        :param pulumi.Input[_builtins.str] state: The lifecycle state of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resources
        :param pulumi.Input[_builtins.bool] wait_for_worker_update: Wait for worker node to update during kube version update.
        :param pulumi.Input[_builtins.float] worker_count: The number of worker nodes per zone in the default worker pool. Required when '--host-label' is specified. (default: 0)
        :param pulumi.Input[Sequence[pulumi.Input[Union['SatelliteClusterZoneArgs', 'SatelliteClusterZoneArgsDict']]]] zones: Zone info for worker pool
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SatelliteClusterState.__new__(_SatelliteClusterState)

        __props__.__dict__["calico_ip_autodetection"] = calico_ip_autodetection
        __props__.__dict__["crn"] = crn
        __props__.__dict__["crn_token"] = crn_token
        __props__.__dict__["default_worker_pool_labels"] = default_worker_pool_labels
        __props__.__dict__["disable_public_service_endpoint"] = disable_public_service_endpoint
        __props__.__dict__["enable_config_admin"] = enable_config_admin
        __props__.__dict__["entitlement"] = entitlement
        __props__.__dict__["host_labels"] = host_labels
        __props__.__dict__["infrastructure_topology"] = infrastructure_topology
        __props__.__dict__["ingress_hostname"] = ingress_hostname
        __props__.__dict__["ingress_secret"] = ingress_secret
        __props__.__dict__["kube_version"] = kube_version
        __props__.__dict__["location"] = location
        __props__.__dict__["master_status"] = master_status
        __props__.__dict__["master_url"] = master_url
        __props__.__dict__["name"] = name
        __props__.__dict__["operating_system"] = operating_system
        __props__.__dict__["patch_version"] = patch_version
        __props__.__dict__["pod_subnet"] = pod_subnet
        __props__.__dict__["private_service_endpoint_enabled"] = private_service_endpoint_enabled
        __props__.__dict__["private_service_endpoint_url"] = private_service_endpoint_url
        __props__.__dict__["public_service_endpoint_enabled"] = public_service_endpoint_enabled
        __props__.__dict__["public_service_endpoint_url"] = public_service_endpoint_url
        __props__.__dict__["pull_secret"] = pull_secret
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["retry_patch_version"] = retry_patch_version
        __props__.__dict__["satellite_cluster_id"] = satellite_cluster_id
        __props__.__dict__["service_subnet"] = service_subnet
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["wait_for_worker_update"] = wait_for_worker_update
        __props__.__dict__["worker_count"] = worker_count
        __props__.__dict__["zones"] = zones
        return SatelliteCluster(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="calicoIpAutodetection")
    def calico_ip_autodetection(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Set IP autodetection to use correct interface for Calico
        """
        return pulumi.get(self, "calico_ip_autodetection")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        CRN of resource instance
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="crnToken")
    def crn_token(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The IBM Cloud Identity and Access Management (IAM) service CRN token for the service that creates the cluster.
        """
        return pulumi.get(self, "crn_token")

    @_builtins.property
    @pulumi.getter(name="defaultWorkerPoolLabels")
    def default_worker_pool_labels(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Labels on the default worker pool
        """
        return pulumi.get(self, "default_worker_pool_labels")

    @_builtins.property
    @pulumi.getter(name="disablePublicServiceEndpoint")
    def disable_public_service_endpoint(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Boolean value true if Public service endpoint to be disabled
        """
        return pulumi.get(self, "disable_public_service_endpoint")

    @_builtins.property
    @pulumi.getter(name="enableConfigAdmin")
    def enable_config_admin(self) -> pulumi.Output[_builtins.bool]:
        """
        Grant cluster admin access to Satellite Config to manage Kubernetes resources.
        """
        return pulumi.get(self, "enable_config_admin")

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @_builtins.property
    @pulumi.getter(name="hostLabels")
    def host_labels(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Labels that describe a Satellite host for default workerpool
        """
        return pulumi.get(self, "host_labels")

    @_builtins.property
    @pulumi.getter(name="infrastructureTopology")
    def infrastructure_topology(self) -> pulumi.Output[_builtins.str]:
        """
        String value for single node cluster option. Available options: single-replica, highly-available (default:
        highly-available)
        """
        return pulumi.get(self, "infrastructure_topology")

    @_builtins.property
    @pulumi.getter(name="ingressHostname")
    def ingress_hostname(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ingress_hostname")

    @_builtins.property
    @pulumi.getter(name="ingressSecret")
    def ingress_secret(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ingress_secret")

    @_builtins.property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> pulumi.Output[_builtins.str]:
        """
        The OpenShift Container Platform version
        """
        return pulumi.get(self, "kube_version")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        The name or ID of the Satellite location
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="masterStatus")
    def master_status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "master_status")

    @_builtins.property
    @pulumi.getter(name="masterUrl")
    def master_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "master_url")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The unique name for the new IBM Cloud Satellite cluster
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Output[_builtins.str]:
        """
        Operating system of the default worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="patchVersion")
    def patch_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Kubernetes patch version
        """
        return pulumi.get(self, "patch_version")

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> pulumi.Output[_builtins.str]:
        """
        User provided value for the pod subnet
        """
        return pulumi.get(self, "pod_subnet")

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpointEnabled")
    def private_service_endpoint_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "private_service_endpoint_enabled")

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpointUrl")
    def private_service_endpoint_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "private_service_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpointEnabled")
    def public_service_endpoint_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "public_service_endpoint_enabled")

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpointUrl")
    def public_service_endpoint_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "public_service_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="pullSecret")
    def pull_secret(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The RedHat pull secret to create the OpenShift cluster
        """
        return pulumi.get(self, "pull_secret")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="retryPatchVersion")
    def retry_patch_version(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
        if the previous apply fails
        """
        return pulumi.get(self, "retry_patch_version")

    @_builtins.property
    @pulumi.getter(name="satelliteClusterId")
    def satellite_cluster_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "satellite_cluster_id")

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> pulumi.Output[_builtins.str]:
        """
        User provided value for service subnet
        """
        return pulumi.get(self, "service_subnet")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the cluster.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of tags for the resources
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.SatelliteClusterTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="waitForWorkerUpdate")
    def wait_for_worker_update(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Wait for worker node to update during kube version update.
        """
        return pulumi.get(self, "wait_for_worker_update")

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> pulumi.Output[_builtins.float]:
        """
        The number of worker nodes per zone in the default worker pool. Required when '--host-label' is specified. (default: 0)
        """
        return pulumi.get(self, "worker_count")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Optional[Sequence['outputs.SatelliteClusterZone']]]:
        """
        Zone info for worker pool
        """
        return pulumi.get(self, "zones")

