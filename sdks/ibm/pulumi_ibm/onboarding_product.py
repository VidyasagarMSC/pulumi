# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OnboardingProductArgs', 'OnboardingProduct']

@pulumi.input_type
class OnboardingProductArgs:
    def __init__(__self__, *,
                 primary_contact: pulumi.Input['OnboardingProductPrimaryContactArgs'],
                 type: pulumi.Input[_builtins.str],
                 eccn_number: Optional[pulumi.Input[_builtins.str]] = None,
                 ero_class: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 support: Optional[pulumi.Input['OnboardingProductSupportArgs']] = None,
                 tax_assessment: Optional[pulumi.Input[_builtins.str]] = None,
                 unspsc: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a OnboardingProduct resource.
        :param pulumi.Input['OnboardingProductPrimaryContactArgs'] primary_contact: The primary contact for your product.
        :param pulumi.Input[_builtins.str] type: The type of the product.
        :param pulumi.Input[_builtins.str] eccn_number: The Export Control Classification Number of your product.
        :param pulumi.Input[_builtins.str] ero_class: The ERO class of your product.
        :param pulumi.Input['OnboardingProductSupportArgs'] support: The support information that is not displayed in the catalog, but available in ServiceNow.
        :param pulumi.Input[_builtins.str] tax_assessment: The tax assessment type of your product.
        :param pulumi.Input[_builtins.float] unspsc: The United Nations Standard Products and Services Code of your product.
        """
        pulumi.set(__self__, "primary_contact", primary_contact)
        pulumi.set(__self__, "type", type)
        if eccn_number is not None:
            pulumi.set(__self__, "eccn_number", eccn_number)
        if ero_class is not None:
            pulumi.set(__self__, "ero_class", ero_class)
        if onboarding_product_id is not None:
            pulumi.set(__self__, "onboarding_product_id", onboarding_product_id)
        if support is not None:
            pulumi.set(__self__, "support", support)
        if tax_assessment is not None:
            pulumi.set(__self__, "tax_assessment", tax_assessment)
        if unspsc is not None:
            pulumi.set(__self__, "unspsc", unspsc)

    @_builtins.property
    @pulumi.getter(name="primaryContact")
    def primary_contact(self) -> pulumi.Input['OnboardingProductPrimaryContactArgs']:
        """
        The primary contact for your product.
        """
        return pulumi.get(self, "primary_contact")

    @primary_contact.setter
    def primary_contact(self, value: pulumi.Input['OnboardingProductPrimaryContactArgs']):
        pulumi.set(self, "primary_contact", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the product.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="eccnNumber")
    def eccn_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Export Control Classification Number of your product.
        """
        return pulumi.get(self, "eccn_number")

    @eccn_number.setter
    def eccn_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eccn_number", value)

    @_builtins.property
    @pulumi.getter(name="eroClass")
    def ero_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ERO class of your product.
        """
        return pulumi.get(self, "ero_class")

    @ero_class.setter
    def ero_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ero_class", value)

    @_builtins.property
    @pulumi.getter(name="onboardingProductId")
    def onboarding_product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "onboarding_product_id")

    @onboarding_product_id.setter
    def onboarding_product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "onboarding_product_id", value)

    @_builtins.property
    @pulumi.getter
    def support(self) -> Optional[pulumi.Input['OnboardingProductSupportArgs']]:
        """
        The support information that is not displayed in the catalog, but available in ServiceNow.
        """
        return pulumi.get(self, "support")

    @support.setter
    def support(self, value: Optional[pulumi.Input['OnboardingProductSupportArgs']]):
        pulumi.set(self, "support", value)

    @_builtins.property
    @pulumi.getter(name="taxAssessment")
    def tax_assessment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The tax assessment type of your product.
        """
        return pulumi.get(self, "tax_assessment")

    @tax_assessment.setter
    def tax_assessment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tax_assessment", value)

    @_builtins.property
    @pulumi.getter
    def unspsc(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The United Nations Standard Products and Services Code of your product.
        """
        return pulumi.get(self, "unspsc")

    @unspsc.setter
    def unspsc(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "unspsc", value)


@pulumi.input_type
class _OnboardingProductState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 approver_resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 eccn_number: Optional[pulumi.Input[_builtins.str]] = None,
                 ero_class: Optional[pulumi.Input[_builtins.str]] = None,
                 global_catalog_offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_contact: Optional[pulumi.Input['OnboardingProductPrimaryContactArgs']] = None,
                 private_catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_catalog_offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 staging_global_catalog_offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 support: Optional[pulumi.Input['OnboardingProductSupportArgs']] = None,
                 tax_assessment: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 unspsc: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering OnboardingProduct resources.
        :param pulumi.Input[_builtins.str] account_id: The IBM Cloud account ID of the provider.
        :param pulumi.Input[_builtins.str] approver_resource_id: The ID of the approval workflow of your product.
        :param pulumi.Input[_builtins.str] eccn_number: The Export Control Classification Number of your product.
        :param pulumi.Input[_builtins.str] ero_class: The ERO class of your product.
        :param pulumi.Input[_builtins.str] global_catalog_offering_id: The ID of a global catalog object.
        :param pulumi.Input[_builtins.str] iam_registration_id: IAM registration identifier.
        :param pulumi.Input['OnboardingProductPrimaryContactArgs'] primary_contact: The primary contact for your product.
        :param pulumi.Input[_builtins.str] private_catalog_id: The ID of the private catalog that contains the product. Only applicable for software type products.
        :param pulumi.Input[_builtins.str] private_catalog_offering_id: The ID of the linked private catalog product. Only applicable for software type products.
        :param pulumi.Input[_builtins.str] staging_global_catalog_offering_id: The ID of a global catalog object.
        :param pulumi.Input['OnboardingProductSupportArgs'] support: The support information that is not displayed in the catalog, but available in ServiceNow.
        :param pulumi.Input[_builtins.str] tax_assessment: The tax assessment type of your product.
        :param pulumi.Input[_builtins.str] type: The type of the product.
        :param pulumi.Input[_builtins.float] unspsc: The United Nations Standard Products and Services Code of your product.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if approver_resource_id is not None:
            pulumi.set(__self__, "approver_resource_id", approver_resource_id)
        if eccn_number is not None:
            pulumi.set(__self__, "eccn_number", eccn_number)
        if ero_class is not None:
            pulumi.set(__self__, "ero_class", ero_class)
        if global_catalog_offering_id is not None:
            pulumi.set(__self__, "global_catalog_offering_id", global_catalog_offering_id)
        if iam_registration_id is not None:
            pulumi.set(__self__, "iam_registration_id", iam_registration_id)
        if onboarding_product_id is not None:
            pulumi.set(__self__, "onboarding_product_id", onboarding_product_id)
        if primary_contact is not None:
            pulumi.set(__self__, "primary_contact", primary_contact)
        if private_catalog_id is not None:
            pulumi.set(__self__, "private_catalog_id", private_catalog_id)
        if private_catalog_offering_id is not None:
            pulumi.set(__self__, "private_catalog_offering_id", private_catalog_offering_id)
        if staging_global_catalog_offering_id is not None:
            pulumi.set(__self__, "staging_global_catalog_offering_id", staging_global_catalog_offering_id)
        if support is not None:
            pulumi.set(__self__, "support", support)
        if tax_assessment is not None:
            pulumi.set(__self__, "tax_assessment", tax_assessment)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unspsc is not None:
            pulumi.set(__self__, "unspsc", unspsc)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IBM Cloud account ID of the provider.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="approverResourceId")
    def approver_resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the approval workflow of your product.
        """
        return pulumi.get(self, "approver_resource_id")

    @approver_resource_id.setter
    def approver_resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "approver_resource_id", value)

    @_builtins.property
    @pulumi.getter(name="eccnNumber")
    def eccn_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Export Control Classification Number of your product.
        """
        return pulumi.get(self, "eccn_number")

    @eccn_number.setter
    def eccn_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eccn_number", value)

    @_builtins.property
    @pulumi.getter(name="eroClass")
    def ero_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ERO class of your product.
        """
        return pulumi.get(self, "ero_class")

    @ero_class.setter
    def ero_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ero_class", value)

    @_builtins.property
    @pulumi.getter(name="globalCatalogOfferingId")
    def global_catalog_offering_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of a global catalog object.
        """
        return pulumi.get(self, "global_catalog_offering_id")

    @global_catalog_offering_id.setter
    def global_catalog_offering_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_catalog_offering_id", value)

    @_builtins.property
    @pulumi.getter(name="iamRegistrationId")
    def iam_registration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IAM registration identifier.
        """
        return pulumi.get(self, "iam_registration_id")

    @iam_registration_id.setter
    def iam_registration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_registration_id", value)

    @_builtins.property
    @pulumi.getter(name="onboardingProductId")
    def onboarding_product_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "onboarding_product_id")

    @onboarding_product_id.setter
    def onboarding_product_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "onboarding_product_id", value)

    @_builtins.property
    @pulumi.getter(name="primaryContact")
    def primary_contact(self) -> Optional[pulumi.Input['OnboardingProductPrimaryContactArgs']]:
        """
        The primary contact for your product.
        """
        return pulumi.get(self, "primary_contact")

    @primary_contact.setter
    def primary_contact(self, value: Optional[pulumi.Input['OnboardingProductPrimaryContactArgs']]):
        pulumi.set(self, "primary_contact", value)

    @_builtins.property
    @pulumi.getter(name="privateCatalogId")
    def private_catalog_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the private catalog that contains the product. Only applicable for software type products.
        """
        return pulumi.get(self, "private_catalog_id")

    @private_catalog_id.setter
    def private_catalog_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_catalog_id", value)

    @_builtins.property
    @pulumi.getter(name="privateCatalogOfferingId")
    def private_catalog_offering_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the linked private catalog product. Only applicable for software type products.
        """
        return pulumi.get(self, "private_catalog_offering_id")

    @private_catalog_offering_id.setter
    def private_catalog_offering_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_catalog_offering_id", value)

    @_builtins.property
    @pulumi.getter(name="stagingGlobalCatalogOfferingId")
    def staging_global_catalog_offering_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of a global catalog object.
        """
        return pulumi.get(self, "staging_global_catalog_offering_id")

    @staging_global_catalog_offering_id.setter
    def staging_global_catalog_offering_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "staging_global_catalog_offering_id", value)

    @_builtins.property
    @pulumi.getter
    def support(self) -> Optional[pulumi.Input['OnboardingProductSupportArgs']]:
        """
        The support information that is not displayed in the catalog, but available in ServiceNow.
        """
        return pulumi.get(self, "support")

    @support.setter
    def support(self, value: Optional[pulumi.Input['OnboardingProductSupportArgs']]):
        pulumi.set(self, "support", value)

    @_builtins.property
    @pulumi.getter(name="taxAssessment")
    def tax_assessment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The tax assessment type of your product.
        """
        return pulumi.get(self, "tax_assessment")

    @tax_assessment.setter
    def tax_assessment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tax_assessment", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the product.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def unspsc(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The United Nations Standard Products and Services Code of your product.
        """
        return pulumi.get(self, "unspsc")

    @unspsc.setter
    def unspsc(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "unspsc", value)


@pulumi.type_token("ibm:index/onboardingProduct:OnboardingProduct")
class OnboardingProduct(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 eccn_number: Optional[pulumi.Input[_builtins.str]] = None,
                 ero_class: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_contact: Optional[pulumi.Input[Union['OnboardingProductPrimaryContactArgs', 'OnboardingProductPrimaryContactArgsDict']]] = None,
                 support: Optional[pulumi.Input[Union['OnboardingProductSupportArgs', 'OnboardingProductSupportArgsDict']]] = None,
                 tax_assessment: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 unspsc: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a OnboardingProduct resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] eccn_number: The Export Control Classification Number of your product.
        :param pulumi.Input[_builtins.str] ero_class: The ERO class of your product.
        :param pulumi.Input[Union['OnboardingProductPrimaryContactArgs', 'OnboardingProductPrimaryContactArgsDict']] primary_contact: The primary contact for your product.
        :param pulumi.Input[Union['OnboardingProductSupportArgs', 'OnboardingProductSupportArgsDict']] support: The support information that is not displayed in the catalog, but available in ServiceNow.
        :param pulumi.Input[_builtins.str] tax_assessment: The tax assessment type of your product.
        :param pulumi.Input[_builtins.str] type: The type of the product.
        :param pulumi.Input[_builtins.float] unspsc: The United Nations Standard Products and Services Code of your product.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OnboardingProductArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OnboardingProduct resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OnboardingProductArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OnboardingProductArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 eccn_number: Optional[pulumi.Input[_builtins.str]] = None,
                 ero_class: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_contact: Optional[pulumi.Input[Union['OnboardingProductPrimaryContactArgs', 'OnboardingProductPrimaryContactArgsDict']]] = None,
                 support: Optional[pulumi.Input[Union['OnboardingProductSupportArgs', 'OnboardingProductSupportArgsDict']]] = None,
                 tax_assessment: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 unspsc: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OnboardingProductArgs.__new__(OnboardingProductArgs)

            __props__.__dict__["eccn_number"] = eccn_number
            __props__.__dict__["ero_class"] = ero_class
            __props__.__dict__["onboarding_product_id"] = onboarding_product_id
            if primary_contact is None and not opts.urn:
                raise TypeError("Missing required property 'primary_contact'")
            __props__.__dict__["primary_contact"] = primary_contact
            __props__.__dict__["support"] = support
            __props__.__dict__["tax_assessment"] = tax_assessment
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["unspsc"] = unspsc
            __props__.__dict__["account_id"] = None
            __props__.__dict__["approver_resource_id"] = None
            __props__.__dict__["global_catalog_offering_id"] = None
            __props__.__dict__["iam_registration_id"] = None
            __props__.__dict__["private_catalog_id"] = None
            __props__.__dict__["private_catalog_offering_id"] = None
            __props__.__dict__["staging_global_catalog_offering_id"] = None
        super(OnboardingProduct, __self__).__init__(
            'ibm:index/onboardingProduct:OnboardingProduct',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            approver_resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            eccn_number: Optional[pulumi.Input[_builtins.str]] = None,
            ero_class: Optional[pulumi.Input[_builtins.str]] = None,
            global_catalog_offering_id: Optional[pulumi.Input[_builtins.str]] = None,
            iam_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
            onboarding_product_id: Optional[pulumi.Input[_builtins.str]] = None,
            primary_contact: Optional[pulumi.Input[Union['OnboardingProductPrimaryContactArgs', 'OnboardingProductPrimaryContactArgsDict']]] = None,
            private_catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
            private_catalog_offering_id: Optional[pulumi.Input[_builtins.str]] = None,
            staging_global_catalog_offering_id: Optional[pulumi.Input[_builtins.str]] = None,
            support: Optional[pulumi.Input[Union['OnboardingProductSupportArgs', 'OnboardingProductSupportArgsDict']]] = None,
            tax_assessment: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            unspsc: Optional[pulumi.Input[_builtins.float]] = None) -> 'OnboardingProduct':
        """
        Get an existing OnboardingProduct resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: The IBM Cloud account ID of the provider.
        :param pulumi.Input[_builtins.str] approver_resource_id: The ID of the approval workflow of your product.
        :param pulumi.Input[_builtins.str] eccn_number: The Export Control Classification Number of your product.
        :param pulumi.Input[_builtins.str] ero_class: The ERO class of your product.
        :param pulumi.Input[_builtins.str] global_catalog_offering_id: The ID of a global catalog object.
        :param pulumi.Input[_builtins.str] iam_registration_id: IAM registration identifier.
        :param pulumi.Input[Union['OnboardingProductPrimaryContactArgs', 'OnboardingProductPrimaryContactArgsDict']] primary_contact: The primary contact for your product.
        :param pulumi.Input[_builtins.str] private_catalog_id: The ID of the private catalog that contains the product. Only applicable for software type products.
        :param pulumi.Input[_builtins.str] private_catalog_offering_id: The ID of the linked private catalog product. Only applicable for software type products.
        :param pulumi.Input[_builtins.str] staging_global_catalog_offering_id: The ID of a global catalog object.
        :param pulumi.Input[Union['OnboardingProductSupportArgs', 'OnboardingProductSupportArgsDict']] support: The support information that is not displayed in the catalog, but available in ServiceNow.
        :param pulumi.Input[_builtins.str] tax_assessment: The tax assessment type of your product.
        :param pulumi.Input[_builtins.str] type: The type of the product.
        :param pulumi.Input[_builtins.float] unspsc: The United Nations Standard Products and Services Code of your product.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OnboardingProductState.__new__(_OnboardingProductState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["approver_resource_id"] = approver_resource_id
        __props__.__dict__["eccn_number"] = eccn_number
        __props__.__dict__["ero_class"] = ero_class
        __props__.__dict__["global_catalog_offering_id"] = global_catalog_offering_id
        __props__.__dict__["iam_registration_id"] = iam_registration_id
        __props__.__dict__["onboarding_product_id"] = onboarding_product_id
        __props__.__dict__["primary_contact"] = primary_contact
        __props__.__dict__["private_catalog_id"] = private_catalog_id
        __props__.__dict__["private_catalog_offering_id"] = private_catalog_offering_id
        __props__.__dict__["staging_global_catalog_offering_id"] = staging_global_catalog_offering_id
        __props__.__dict__["support"] = support
        __props__.__dict__["tax_assessment"] = tax_assessment
        __props__.__dict__["type"] = type
        __props__.__dict__["unspsc"] = unspsc
        return OnboardingProduct(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The IBM Cloud account ID of the provider.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="approverResourceId")
    def approver_resource_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the approval workflow of your product.
        """
        return pulumi.get(self, "approver_resource_id")

    @_builtins.property
    @pulumi.getter(name="eccnNumber")
    def eccn_number(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Export Control Classification Number of your product.
        """
        return pulumi.get(self, "eccn_number")

    @_builtins.property
    @pulumi.getter(name="eroClass")
    def ero_class(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ERO class of your product.
        """
        return pulumi.get(self, "ero_class")

    @_builtins.property
    @pulumi.getter(name="globalCatalogOfferingId")
    def global_catalog_offering_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of a global catalog object.
        """
        return pulumi.get(self, "global_catalog_offering_id")

    @_builtins.property
    @pulumi.getter(name="iamRegistrationId")
    def iam_registration_id(self) -> pulumi.Output[_builtins.str]:
        """
        IAM registration identifier.
        """
        return pulumi.get(self, "iam_registration_id")

    @_builtins.property
    @pulumi.getter(name="onboardingProductId")
    def onboarding_product_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "onboarding_product_id")

    @_builtins.property
    @pulumi.getter(name="primaryContact")
    def primary_contact(self) -> pulumi.Output['outputs.OnboardingProductPrimaryContact']:
        """
        The primary contact for your product.
        """
        return pulumi.get(self, "primary_contact")

    @_builtins.property
    @pulumi.getter(name="privateCatalogId")
    def private_catalog_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the private catalog that contains the product. Only applicable for software type products.
        """
        return pulumi.get(self, "private_catalog_id")

    @_builtins.property
    @pulumi.getter(name="privateCatalogOfferingId")
    def private_catalog_offering_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the linked private catalog product. Only applicable for software type products.
        """
        return pulumi.get(self, "private_catalog_offering_id")

    @_builtins.property
    @pulumi.getter(name="stagingGlobalCatalogOfferingId")
    def staging_global_catalog_offering_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of a global catalog object.
        """
        return pulumi.get(self, "staging_global_catalog_offering_id")

    @_builtins.property
    @pulumi.getter
    def support(self) -> pulumi.Output[Optional['outputs.OnboardingProductSupport']]:
        """
        The support information that is not displayed in the catalog, but available in ServiceNow.
        """
        return pulumi.get(self, "support")

    @_builtins.property
    @pulumi.getter(name="taxAssessment")
    def tax_assessment(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The tax assessment type of your product.
        """
        return pulumi.get(self, "tax_assessment")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the product.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unspsc(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The United Nations Standard Products and Services Code of your product.
        """
        return pulumi.get(self, "unspsc")

