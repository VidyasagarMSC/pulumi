# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSchematicsAgentDeployResult',
    'AwaitableGetSchematicsAgentDeployResult',
    'get_schematics_agent_deploy',
    'get_schematics_agent_deploy_output',
]

@pulumi.output_type
class GetSchematicsAgentDeployResult:
    """
    A collection of values returned by getSchematicsAgentDeploy.
    """
    def __init__(__self__, agent_id=None, agent_version=None, id=None, is_redeployed=None, job_id=None, log_url=None, status_code=None, status_message=None, updated_at=None, updated_by=None):
        if agent_id and not isinstance(agent_id, str):
            raise TypeError("Expected argument 'agent_id' to be a str")
        pulumi.set(__self__, "agent_id", agent_id)
        if agent_version and not isinstance(agent_version, str):
            raise TypeError("Expected argument 'agent_version' to be a str")
        pulumi.set(__self__, "agent_version", agent_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_redeployed and not isinstance(is_redeployed, bool):
            raise TypeError("Expected argument 'is_redeployed' to be a bool")
        pulumi.set(__self__, "is_redeployed", is_redeployed)
        if job_id and not isinstance(job_id, str):
            raise TypeError("Expected argument 'job_id' to be a str")
        pulumi.set(__self__, "job_id", job_id)
        if log_url and not isinstance(log_url, str):
            raise TypeError("Expected argument 'log_url' to be a str")
        pulumi.set(__self__, "log_url", log_url)
        if status_code and not isinstance(status_code, str):
            raise TypeError("Expected argument 'status_code' to be a str")
        pulumi.set(__self__, "status_code", status_code)
        if status_message and not isinstance(status_message, str):
            raise TypeError("Expected argument 'status_message' to be a str")
        pulumi.set(__self__, "status_message", status_message)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> _builtins.str:
        return pulumi.get(self, "agent_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isRedeployed")
    def is_redeployed(self) -> _builtins.bool:
        return pulumi.get(self, "is_redeployed")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="logUrl")
    def log_url(self) -> _builtins.str:
        return pulumi.get(self, "log_url")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.str:
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> _builtins.str:
        return pulumi.get(self, "status_message")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")


class AwaitableGetSchematicsAgentDeployResult(GetSchematicsAgentDeployResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchematicsAgentDeployResult(
            agent_id=self.agent_id,
            agent_version=self.agent_version,
            id=self.id,
            is_redeployed=self.is_redeployed,
            job_id=self.job_id,
            log_url=self.log_url,
            status_code=self.status_code,
            status_message=self.status_message,
            updated_at=self.updated_at,
            updated_by=self.updated_by)


def get_schematics_agent_deploy(agent_id: Optional[_builtins.str] = None,
                                id: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchematicsAgentDeployResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['agentId'] = agent_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSchematicsAgentDeploy:getSchematicsAgentDeploy', __args__, opts=opts, typ=GetSchematicsAgentDeployResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSchematicsAgentDeployResult(
        agent_id=pulumi.get(__ret__, 'agent_id'),
        agent_version=pulumi.get(__ret__, 'agent_version'),
        id=pulumi.get(__ret__, 'id'),
        is_redeployed=pulumi.get(__ret__, 'is_redeployed'),
        job_id=pulumi.get(__ret__, 'job_id'),
        log_url=pulumi.get(__ret__, 'log_url'),
        status_code=pulumi.get(__ret__, 'status_code'),
        status_message=pulumi.get(__ret__, 'status_message'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        updated_by=pulumi.get(__ret__, 'updated_by'))
def get_schematics_agent_deploy_output(agent_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSchematicsAgentDeployResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['agentId'] = agent_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSchematicsAgentDeploy:getSchematicsAgentDeploy', __args__, opts=opts, typ=GetSchematicsAgentDeployResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSchematicsAgentDeployResult(
        agent_id=pulumi.get(__response__, 'agent_id'),
        agent_version=pulumi.get(__response__, 'agent_version'),
        id=pulumi.get(__response__, 'id'),
        is_redeployed=pulumi.get(__response__, 'is_redeployed'),
        job_id=pulumi.get(__response__, 'job_id'),
        log_url=pulumi.get(__response__, 'log_url'),
        status_code=pulumi.get(__response__, 'status_code'),
        status_message=pulumi.get(__response__, 'status_message'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        updated_by=pulumi.get(__response__, 'updated_by')))
