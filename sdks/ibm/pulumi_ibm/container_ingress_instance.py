# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerIngressInstanceArgs', 'ContainerIngressInstance']

@pulumi.input_type
class ContainerIngressInstanceArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[_builtins.str],
                 instance_crn: pulumi.Input[_builtins.str],
                 container_ingress_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 secret_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerIngressInstanceTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ContainerIngressInstance resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster ID
        :param pulumi.Input[_builtins.str] instance_crn: Instance CRN id
        :param pulumi.Input[_builtins.bool] is_default: Designates if the instance is the default for the cluster
        :param pulumi.Input[_builtins.str] secret_group_id: Secret group for the instance registration
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "instance_crn", instance_crn)
        if container_ingress_instance_id is not None:
            pulumi.set(__self__, "container_ingress_instance_id", container_ingress_instance_id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if secret_group_id is not None:
            pulumi.set(__self__, "secret_group_id", secret_group_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster ID
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="instanceCrn")
    def instance_crn(self) -> pulumi.Input[_builtins.str]:
        """
        Instance CRN id
        """
        return pulumi.get(self, "instance_crn")

    @instance_crn.setter
    def instance_crn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_crn", value)

    @_builtins.property
    @pulumi.getter(name="containerIngressInstanceId")
    def container_ingress_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_ingress_instance_id")

    @container_ingress_instance_id.setter
    def container_ingress_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_ingress_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Designates if the instance is the default for the cluster
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter(name="secretGroupId")
    def secret_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Secret group for the instance registration
        """
        return pulumi.get(self, "secret_group_id")

    @secret_group_id.setter
    def secret_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_group_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerIngressInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerIngressInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ContainerIngressInstanceState:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_ingress_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 secret_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerIngressInstanceTimeoutsArgs']] = None,
                 user_managed: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering ContainerIngressInstance resources.
        :param pulumi.Input[_builtins.str] cluster: Cluster ID
        :param pulumi.Input[_builtins.str] instance_crn: Instance CRN id
        :param pulumi.Input[_builtins.str] instance_name: Instance registration name
        :param pulumi.Input[_builtins.str] instance_type: Instance type
        :param pulumi.Input[_builtins.bool] is_default: Designates if the instance is the default for the cluster
        :param pulumi.Input[_builtins.str] secret_group_id: Secret group for the instance registration
        :param pulumi.Input[_builtins.str] secret_group_name: Name of the secret group for the instance
        :param pulumi.Input[_builtins.str] status: Instance registration status
        :param pulumi.Input[_builtins.bool] user_managed: If the instance was created by the user
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if container_ingress_instance_id is not None:
            pulumi.set(__self__, "container_ingress_instance_id", container_ingress_instance_id)
        if instance_crn is not None:
            pulumi.set(__self__, "instance_crn", instance_crn)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if secret_group_id is not None:
            pulumi.set(__self__, "secret_group_id", secret_group_id)
        if secret_group_name is not None:
            pulumi.set(__self__, "secret_group_name", secret_group_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if user_managed is not None:
            pulumi.set(__self__, "user_managed", user_managed)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster ID
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerIngressInstanceId")
    def container_ingress_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_ingress_instance_id")

    @container_ingress_instance_id.setter
    def container_ingress_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_ingress_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceCrn")
    def instance_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance CRN id
        """
        return pulumi.get(self, "instance_crn")

    @instance_crn.setter
    def instance_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_crn", value)

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance registration name
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_name", value)

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance type
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_type", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Designates if the instance is the default for the cluster
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter(name="secretGroupId")
    def secret_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Secret group for the instance registration
        """
        return pulumi.get(self, "secret_group_id")

    @secret_group_id.setter
    def secret_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_group_id", value)

    @_builtins.property
    @pulumi.getter(name="secretGroupName")
    def secret_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the secret group for the instance
        """
        return pulumi.get(self, "secret_group_name")

    @secret_group_name.setter
    def secret_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_group_name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance registration status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerIngressInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerIngressInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="userManaged")
    def user_managed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If the instance was created by the user
        """
        return pulumi.get(self, "user_managed")

    @user_managed.setter
    def user_managed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "user_managed", value)


@pulumi.type_token("ibm:index/containerIngressInstance:ContainerIngressInstance")
class ContainerIngressInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_ingress_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 secret_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerIngressInstanceTimeoutsArgs', 'ContainerIngressInstanceTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a ContainerIngressInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster ID
        :param pulumi.Input[_builtins.str] instance_crn: Instance CRN id
        :param pulumi.Input[_builtins.bool] is_default: Designates if the instance is the default for the cluster
        :param pulumi.Input[_builtins.str] secret_group_id: Secret group for the instance registration
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerIngressInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerIngressInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerIngressInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerIngressInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_ingress_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 secret_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerIngressInstanceTimeoutsArgs', 'ContainerIngressInstanceTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerIngressInstanceArgs.__new__(ContainerIngressInstanceArgs)

            if cluster is None and not opts.urn:
                raise TypeError("Missing required property 'cluster'")
            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["container_ingress_instance_id"] = container_ingress_instance_id
            if instance_crn is None and not opts.urn:
                raise TypeError("Missing required property 'instance_crn'")
            __props__.__dict__["instance_crn"] = instance_crn
            __props__.__dict__["is_default"] = is_default
            __props__.__dict__["secret_group_id"] = secret_group_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["instance_name"] = None
            __props__.__dict__["instance_type"] = None
            __props__.__dict__["secret_group_name"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["user_managed"] = None
        super(ContainerIngressInstance, __self__).__init__(
            'ibm:index/containerIngressInstance:ContainerIngressInstance',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            container_ingress_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
            instance_name: Optional[pulumi.Input[_builtins.str]] = None,
            instance_type: Optional[pulumi.Input[_builtins.str]] = None,
            is_default: Optional[pulumi.Input[_builtins.bool]] = None,
            secret_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            secret_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerIngressInstanceTimeoutsArgs', 'ContainerIngressInstanceTimeoutsArgsDict']]] = None,
            user_managed: Optional[pulumi.Input[_builtins.bool]] = None) -> 'ContainerIngressInstance':
        """
        Get an existing ContainerIngressInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster ID
        :param pulumi.Input[_builtins.str] instance_crn: Instance CRN id
        :param pulumi.Input[_builtins.str] instance_name: Instance registration name
        :param pulumi.Input[_builtins.str] instance_type: Instance type
        :param pulumi.Input[_builtins.bool] is_default: Designates if the instance is the default for the cluster
        :param pulumi.Input[_builtins.str] secret_group_id: Secret group for the instance registration
        :param pulumi.Input[_builtins.str] secret_group_name: Name of the secret group for the instance
        :param pulumi.Input[_builtins.str] status: Instance registration status
        :param pulumi.Input[_builtins.bool] user_managed: If the instance was created by the user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerIngressInstanceState.__new__(_ContainerIngressInstanceState)

        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["container_ingress_instance_id"] = container_ingress_instance_id
        __props__.__dict__["instance_crn"] = instance_crn
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["secret_group_id"] = secret_group_id
        __props__.__dict__["secret_group_name"] = secret_group_name
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["user_managed"] = user_managed
        return ContainerIngressInstance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster ID
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="containerIngressInstanceId")
    def container_ingress_instance_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_ingress_instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceCrn")
    def instance_crn(self) -> pulumi.Output[_builtins.str]:
        """
        Instance CRN id
        """
        return pulumi.get(self, "instance_crn")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[_builtins.str]:
        """
        Instance registration name
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[_builtins.str]:
        """
        Instance type
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Designates if the instance is the default for the cluster
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter(name="secretGroupId")
    def secret_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Secret group for the instance registration
        """
        return pulumi.get(self, "secret_group_id")

    @_builtins.property
    @pulumi.getter(name="secretGroupName")
    def secret_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the secret group for the instance
        """
        return pulumi.get(self, "secret_group_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Instance registration status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerIngressInstanceTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="userManaged")
    def user_managed(self) -> pulumi.Output[_builtins.bool]:
        """
        If the instance was created by the user
        """
        return pulumi.get(self, "user_managed")

