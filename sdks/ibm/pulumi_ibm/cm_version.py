# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CmVersionArgs', 'CmVersion']

@pulumi.input_type
class CmVersionArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[_builtins.str],
                 offering_id: pulumi.Input[_builtins.str],
                 cm_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionConfigurationArgs']]]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 deprecate: Optional[pulumi.Input[_builtins.bool]] = None,
                 flavor: Optional[pulumi.Input['CmVersionFlavorArgs']] = None,
                 format_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionIamPermissionArgs']]]] = None,
                 import_metadata: Optional[pulumi.Input['CmVersionImportMetadataArgs']] = None,
                 import_sha: Optional[pulumi.Input[_builtins.str]] = None,
                 include_config: Optional[pulumi.Input[_builtins.bool]] = None,
                 install: Optional[pulumi.Input['CmVersionInstallArgs']] = None,
                 install_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vsi: Optional[pulumi.Input[_builtins.bool]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 licenses: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionLicenseArgs']]]] = None,
                 long_description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_installs: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionPreInstallArgs']]]] = None,
                 product_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 repotype: Optional[pulumi.Input[_builtins.str]] = None,
                 required_resources: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionRequiredResourceArgs']]]] = None,
                 solution_info: Optional[pulumi.Input['CmVersionSolutionInfoArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_kinds: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None,
                 terraform_version: Optional[pulumi.Input[_builtins.str]] = None,
                 usage: Optional[pulumi.Input[_builtins.str]] = None,
                 working_directory: Optional[pulumi.Input[_builtins.str]] = None,
                 x_auth_token: Optional[pulumi.Input[_builtins.str]] = None,
                 zipurl: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CmVersion resource.
        :param pulumi.Input[_builtins.str] catalog_id: Catalog identifier.
        :param pulumi.Input[_builtins.str] offering_id: Offering identification.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionConfigurationArgs']]] configurations: List of user solicited overrides.
        :param pulumi.Input[_builtins.str] content: Byte array representing the content to be imported. Only supported for OVA images at this time.
        :param pulumi.Input[_builtins.bool] deprecate: Deprecate this version.
        :param pulumi.Input['CmVersionFlavorArgs'] flavor: Version Flavor Information. Only supported for Product kind Solution.
        :param pulumi.Input[_builtins.str] format_kind: Format of content being onboarded. Example: vsi-image. Required for virtual server image for VPC.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionIamPermissionArgs']]] iam_permissions: List of IAM permissions that are required to consume this version.
        :param pulumi.Input['CmVersionImportMetadataArgs'] import_metadata: Generic data to be included with content being onboarded. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] import_sha: SHA256 fingerprint of the image file. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.bool] include_config: Add all possible configuration values to this version when importing.
        :param pulumi.Input['CmVersionInstallArgs'] install: Script information.
        :param pulumi.Input[_builtins.str] install_kind: Install type. Example: instance. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] label: Display name of version. Required for virtual server image for VPC.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionLicenseArgs']]] licenses: List of licenses the product was built with.
        :param pulumi.Input[_builtins.str] long_description: Long description for version.
        :param pulumi.Input[_builtins.str] name: Name of version. Required for virtual server image for VPC.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionPreInstallArgs']]] pre_installs: Optional pre-install instructions.
        :param pulumi.Input[_builtins.str] product_kind: Optional product kind for the software being onboarded. Valid values are software, module, or solution. Default value is
               software.
        :param pulumi.Input[_builtins.str] repotype: The type of repository containing this version. Valid values are 'public_git' or 'enterprise_git'.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionRequiredResourceArgs']]] required_resources: Resource requirments for installation.
        :param pulumi.Input['CmVersionSolutionInfoArgs'] solution_info: Version Solution Information. Only supported for Product kind Solution.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags array.
        :param pulumi.Input[_builtins.str] target_version: The semver value for this new version, if not found in the zip url package content.
        :param pulumi.Input[_builtins.str] usage: The usage text for this version.
        :param pulumi.Input[_builtins.str] working_directory: Optional - The sub-folder within the specified tgz file that contains the software being onboarded.
        :param pulumi.Input[_builtins.str] x_auth_token: Authentication token used to access the specified zip file.
        :param pulumi.Input[_builtins.str] zipurl: URL path to zip location. If not specified, must provide content in the body of this call.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "offering_id", offering_id)
        if cm_version_id is not None:
            pulumi.set(__self__, "cm_version_id", cm_version_id)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if deprecate is not None:
            pulumi.set(__self__, "deprecate", deprecate)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if format_kind is not None:
            pulumi.set(__self__, "format_kind", format_kind)
        if iam_permissions is not None:
            pulumi.set(__self__, "iam_permissions", iam_permissions)
        if import_metadata is not None:
            pulumi.set(__self__, "import_metadata", import_metadata)
        if import_sha is not None:
            pulumi.set(__self__, "import_sha", import_sha)
        if include_config is not None:
            pulumi.set(__self__, "include_config", include_config)
        if install is not None:
            pulumi.set(__self__, "install", install)
        if install_kind is not None:
            pulumi.set(__self__, "install_kind", install_kind)
        if is_vsi is not None:
            pulumi.set(__self__, "is_vsi", is_vsi)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if licenses is not None:
            pulumi.set(__self__, "licenses", licenses)
        if long_description is not None:
            pulumi.set(__self__, "long_description", long_description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pre_installs is not None:
            pulumi.set(__self__, "pre_installs", pre_installs)
        if product_kind is not None:
            pulumi.set(__self__, "product_kind", product_kind)
        if repotype is not None:
            pulumi.set(__self__, "repotype", repotype)
        if required_resources is not None:
            pulumi.set(__self__, "required_resources", required_resources)
        if solution_info is not None:
            pulumi.set(__self__, "solution_info", solution_info)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_kinds is not None:
            pulumi.set(__self__, "target_kinds", target_kinds)
        if target_version is not None:
            pulumi.set(__self__, "target_version", target_version)
        if terraform_version is not None:
            pulumi.set(__self__, "terraform_version", terraform_version)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)
        if x_auth_token is not None:
            pulumi.set(__self__, "x_auth_token", x_auth_token)
        if zipurl is not None:
            pulumi.set(__self__, "zipurl", zipurl)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[_builtins.str]:
        """
        Catalog identifier.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "catalog_id", value)

    @_builtins.property
    @pulumi.getter(name="offeringId")
    def offering_id(self) -> pulumi.Input[_builtins.str]:
        """
        Offering identification.
        """
        return pulumi.get(self, "offering_id")

    @offering_id.setter
    def offering_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "offering_id", value)

    @_builtins.property
    @pulumi.getter(name="cmVersionId")
    def cm_version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cm_version_id")

    @cm_version_id.setter
    def cm_version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cm_version_id", value)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionConfigurationArgs']]]]:
        """
        List of user solicited overrides.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Byte array representing the content to be imported. Only supported for OVA images at this time.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def deprecate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deprecate this version.
        """
        return pulumi.get(self, "deprecate")

    @deprecate.setter
    def deprecate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deprecate", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input['CmVersionFlavorArgs']]:
        """
        Version Flavor Information. Only supported for Product kind Solution.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input['CmVersionFlavorArgs']]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="formatKind")
    def format_kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Format of content being onboarded. Example: vsi-image. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "format_kind")

    @format_kind.setter
    def format_kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format_kind", value)

    @_builtins.property
    @pulumi.getter(name="iamPermissions")
    def iam_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionIamPermissionArgs']]]]:
        """
        List of IAM permissions that are required to consume this version.
        """
        return pulumi.get(self, "iam_permissions")

    @iam_permissions.setter
    def iam_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionIamPermissionArgs']]]]):
        pulumi.set(self, "iam_permissions", value)

    @_builtins.property
    @pulumi.getter(name="importMetadata")
    def import_metadata(self) -> Optional[pulumi.Input['CmVersionImportMetadataArgs']]:
        """
        Generic data to be included with content being onboarded. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "import_metadata")

    @import_metadata.setter
    def import_metadata(self, value: Optional[pulumi.Input['CmVersionImportMetadataArgs']]):
        pulumi.set(self, "import_metadata", value)

    @_builtins.property
    @pulumi.getter(name="importSha")
    def import_sha(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SHA256 fingerprint of the image file. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "import_sha")

    @import_sha.setter
    def import_sha(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "import_sha", value)

    @_builtins.property
    @pulumi.getter(name="includeConfig")
    def include_config(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Add all possible configuration values to this version when importing.
        """
        return pulumi.get(self, "include_config")

    @include_config.setter
    def include_config(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "include_config", value)

    @_builtins.property
    @pulumi.getter
    def install(self) -> Optional[pulumi.Input['CmVersionInstallArgs']]:
        """
        Script information.
        """
        return pulumi.get(self, "install")

    @install.setter
    def install(self, value: Optional[pulumi.Input['CmVersionInstallArgs']]):
        pulumi.set(self, "install", value)

    @_builtins.property
    @pulumi.getter(name="installKind")
    def install_kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Install type. Example: instance. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "install_kind")

    @install_kind.setter
    def install_kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "install_kind", value)

    @_builtins.property
    @pulumi.getter(name="isVsi")
    def is_vsi(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_vsi")

    @is_vsi.setter
    def is_vsi(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_vsi", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Display name of version. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter
    def licenses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionLicenseArgs']]]]:
        """
        List of licenses the product was built with.
        """
        return pulumi.get(self, "licenses")

    @licenses.setter
    def licenses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionLicenseArgs']]]]):
        pulumi.set(self, "licenses", value)

    @_builtins.property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Long description for version.
        """
        return pulumi.get(self, "long_description")

    @long_description.setter
    def long_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "long_description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of version. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="preInstalls")
    def pre_installs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionPreInstallArgs']]]]:
        """
        Optional pre-install instructions.
        """
        return pulumi.get(self, "pre_installs")

    @pre_installs.setter
    def pre_installs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionPreInstallArgs']]]]):
        pulumi.set(self, "pre_installs", value)

    @_builtins.property
    @pulumi.getter(name="productKind")
    def product_kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional product kind for the software being onboarded. Valid values are software, module, or solution. Default value is
        software.
        """
        return pulumi.get(self, "product_kind")

    @product_kind.setter
    def product_kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_kind", value)

    @_builtins.property
    @pulumi.getter
    def repotype(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of repository containing this version. Valid values are 'public_git' or 'enterprise_git'.
        """
        return pulumi.get(self, "repotype")

    @repotype.setter
    def repotype(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repotype", value)

    @_builtins.property
    @pulumi.getter(name="requiredResources")
    def required_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionRequiredResourceArgs']]]]:
        """
        Resource requirments for installation.
        """
        return pulumi.get(self, "required_resources")

    @required_resources.setter
    def required_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionRequiredResourceArgs']]]]):
        pulumi.set(self, "required_resources", value)

    @_builtins.property
    @pulumi.getter(name="solutionInfo")
    def solution_info(self) -> Optional[pulumi.Input['CmVersionSolutionInfoArgs']]:
        """
        Version Solution Information. Only supported for Product kind Solution.
        """
        return pulumi.get(self, "solution_info")

    @solution_info.setter
    def solution_info(self, value: Optional[pulumi.Input['CmVersionSolutionInfoArgs']]):
        pulumi.set(self, "solution_info", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags array.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="targetKinds")
    def target_kinds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "target_kinds")

    @target_kinds.setter
    def target_kinds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "target_kinds", value)

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The semver value for this new version, if not found in the zip url package content.
        """
        return pulumi.get(self, "target_version")

    @target_version.setter
    def target_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_version", value)

    @_builtins.property
    @pulumi.getter(name="terraformVersion")
    def terraform_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "terraform_version")

    @terraform_version.setter
    def terraform_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "terraform_version", value)

    @_builtins.property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The usage text for this version.
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "usage", value)

    @_builtins.property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional - The sub-folder within the specified tgz file that contains the software being onboarded.
        """
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "working_directory", value)

    @_builtins.property
    @pulumi.getter(name="xAuthToken")
    def x_auth_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authentication token used to access the specified zip file.
        """
        return pulumi.get(self, "x_auth_token")

    @x_auth_token.setter
    def x_auth_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_auth_token", value)

    @_builtins.property
    @pulumi.getter
    def zipurl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL path to zip location. If not specified, must provide content in the body of this call.
        """
        return pulumi.get(self, "zipurl")

    @zipurl.setter
    def zipurl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zipurl", value)


@pulumi.input_type
class _CmVersionState:
    def __init__(__self__, *,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionConfigurationArgs']]]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 created: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 deprecate: Optional[pulumi.Input[_builtins.bool]] = None,
                 deprecate_pendings: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionDeprecatePendingArgs']]]] = None,
                 deprecated: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlements: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionEntitlementArgs']]]] = None,
                 flavor: Optional[pulumi.Input['CmVersionFlavorArgs']] = None,
                 format_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionIamPermissionArgs']]]] = None,
                 image_manifest_url: Optional[pulumi.Input[_builtins.str]] = None,
                 image_pull_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 import_metadata: Optional[pulumi.Input['CmVersionImportMetadataArgs']] = None,
                 import_sha: Optional[pulumi.Input[_builtins.str]] = None,
                 include_config: Optional[pulumi.Input[_builtins.bool]] = None,
                 install: Optional[pulumi.Input['CmVersionInstallArgs']] = None,
                 install_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 is_consumable: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vsi: Optional[pulumi.Input[_builtins.bool]] = None,
                 kind_id: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 licenses: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionLicenseArgs']]]] = None,
                 long_description: Optional[pulumi.Input[_builtins.str]] = None,
                 long_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionMetadataArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 outputs: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionOutputArgs']]]] = None,
                 package_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_installs: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionPreInstallArgs']]]] = None,
                 product_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 repo_url: Optional[pulumi.Input[_builtins.str]] = None,
                 repotype: Optional[pulumi.Input[_builtins.str]] = None,
                 required_resources: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionRequiredResourceArgs']]]] = None,
                 rev: Optional[pulumi.Input[_builtins.str]] = None,
                 sha: Optional[pulumi.Input[_builtins.str]] = None,
                 single_instance: Optional[pulumi.Input[_builtins.bool]] = None,
                 solution_info: Optional[pulumi.Input['CmVersionSolutionInfoArgs']] = None,
                 source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 states: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionStateArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_kinds: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None,
                 terraform_version: Optional[pulumi.Input[_builtins.str]] = None,
                 tgz_url: Optional[pulumi.Input[_builtins.str]] = None,
                 updated: Optional[pulumi.Input[_builtins.str]] = None,
                 usage: Optional[pulumi.Input[_builtins.str]] = None,
                 validations: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionValidationArgs']]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version_locator: Optional[pulumi.Input[_builtins.str]] = None,
                 working_directory: Optional[pulumi.Input[_builtins.str]] = None,
                 x_auth_token: Optional[pulumi.Input[_builtins.str]] = None,
                 zipurl: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CmVersion resources.
        :param pulumi.Input[_builtins.str] catalog_id: Catalog identifier.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionConfigurationArgs']]] configurations: List of user solicited overrides.
        :param pulumi.Input[_builtins.str] content: Byte array representing the content to be imported. Only supported for OVA images at this time.
        :param pulumi.Input[_builtins.str] created: The date and time this version was created.
        :param pulumi.Input[_builtins.str] crn: Version's CRN.
        :param pulumi.Input[_builtins.bool] deprecate: Deprecate this version.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionDeprecatePendingArgs']]] deprecate_pendings: Deprecation information for a Version.
        :param pulumi.Input[_builtins.bool] deprecated: read only field, indicating if this version is deprecated.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionEntitlementArgs']]] entitlements: Entitlement license info.
        :param pulumi.Input['CmVersionFlavorArgs'] flavor: Version Flavor Information. Only supported for Product kind Solution.
        :param pulumi.Input[_builtins.str] format_kind: Format of content being onboarded. Example: vsi-image. Required for virtual server image for VPC.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionIamPermissionArgs']]] iam_permissions: List of IAM permissions that are required to consume this version.
        :param pulumi.Input[_builtins.str] image_manifest_url: If set, denotes a url to a YAML file with list of container images used by this version.
        :param pulumi.Input[_builtins.str] image_pull_key_name: ID of the image pull key to use from Offering.ImagePullKeys.
        :param pulumi.Input['CmVersionImportMetadataArgs'] import_metadata: Generic data to be included with content being onboarded. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] import_sha: SHA256 fingerprint of the image file. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.bool] include_config: Add all possible configuration values to this version when importing.
        :param pulumi.Input['CmVersionInstallArgs'] install: Script information.
        :param pulumi.Input[_builtins.str] install_kind: Install type. Example: instance. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.bool] is_consumable: Is the version able to be shared.
        :param pulumi.Input[_builtins.str] kind_id: Kind ID.
        :param pulumi.Input[_builtins.str] label: Display name of version. Required for virtual server image for VPC.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionLicenseArgs']]] licenses: List of licenses the product was built with.
        :param pulumi.Input[_builtins.str] long_description: Long description for version.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] long_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionMetadataArgs']]] metadatas: Generic data to be included with content being onboarded. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] name: Name of version. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] offering_id: Offering identification.
        :param pulumi.Input[_builtins.str] offering_identifier: Offering ID, in the format of <account_id>:o:<offering_id>.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionOutputArgs']]] outputs: List of output values for this version.
        :param pulumi.Input[_builtins.str] package_version: Version of the package used to create this version.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionPreInstallArgs']]] pre_installs: Optional pre-install instructions.
        :param pulumi.Input[_builtins.str] product_kind: Optional product kind for the software being onboarded. Valid values are software, module, or solution. Default value is
               software.
        :param pulumi.Input[_builtins.str] repo_url: Content's repo URL.
        :param pulumi.Input[_builtins.str] repotype: The type of repository containing this version. Valid values are 'public_git' or 'enterprise_git'.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionRequiredResourceArgs']]] required_resources: Resource requirments for installation.
        :param pulumi.Input[_builtins.str] rev: Cloudant revision.
        :param pulumi.Input[_builtins.str] sha: SHA256 fingerprint of the image file. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.bool] single_instance: Denotes if single instance can be deployed to a given cluster.
        :param pulumi.Input['CmVersionSolutionInfoArgs'] solution_info: Version Solution Information. Only supported for Product kind Solution.
        :param pulumi.Input[_builtins.str] source_url: Content's source URL (e.g git repo).
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionStateArgs']]] states: Offering state.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags array.
        :param pulumi.Input[_builtins.str] target_version: The semver value for this new version, if not found in the zip url package content.
        :param pulumi.Input[_builtins.str] tgz_url: File used to on-board this version.
        :param pulumi.Input[_builtins.str] updated: The date and time this version was last updated.
        :param pulumi.Input[_builtins.str] usage: The usage text for this version.
        :param pulumi.Input[Sequence[pulumi.Input['CmVersionValidationArgs']]] validations: Validation response.
        :param pulumi.Input[_builtins.str] version: Semantic version of the software being onboarded. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] version_id: Unique ID.
        :param pulumi.Input[_builtins.str] version_locator: A dotted value of `catalogID`.`versionID`.
        :param pulumi.Input[_builtins.str] working_directory: Optional - The sub-folder within the specified tgz file that contains the software being onboarded.
        :param pulumi.Input[_builtins.str] x_auth_token: Authentication token used to access the specified zip file.
        :param pulumi.Input[_builtins.str] zipurl: URL path to zip location. If not specified, must provide content in the body of this call.
        """
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if cm_version_id is not None:
            pulumi.set(__self__, "cm_version_id", cm_version_id)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if deprecate is not None:
            pulumi.set(__self__, "deprecate", deprecate)
        if deprecate_pendings is not None:
            pulumi.set(__self__, "deprecate_pendings", deprecate_pendings)
        if deprecated is not None:
            pulumi.set(__self__, "deprecated", deprecated)
        if entitlements is not None:
            pulumi.set(__self__, "entitlements", entitlements)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if format_kind is not None:
            pulumi.set(__self__, "format_kind", format_kind)
        if iam_permissions is not None:
            pulumi.set(__self__, "iam_permissions", iam_permissions)
        if image_manifest_url is not None:
            pulumi.set(__self__, "image_manifest_url", image_manifest_url)
        if image_pull_key_name is not None:
            pulumi.set(__self__, "image_pull_key_name", image_pull_key_name)
        if import_metadata is not None:
            pulumi.set(__self__, "import_metadata", import_metadata)
        if import_sha is not None:
            pulumi.set(__self__, "import_sha", import_sha)
        if include_config is not None:
            pulumi.set(__self__, "include_config", include_config)
        if install is not None:
            pulumi.set(__self__, "install", install)
        if install_kind is not None:
            pulumi.set(__self__, "install_kind", install_kind)
        if is_consumable is not None:
            pulumi.set(__self__, "is_consumable", is_consumable)
        if is_vsi is not None:
            pulumi.set(__self__, "is_vsi", is_vsi)
        if kind_id is not None:
            pulumi.set(__self__, "kind_id", kind_id)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if licenses is not None:
            pulumi.set(__self__, "licenses", licenses)
        if long_description is not None:
            pulumi.set(__self__, "long_description", long_description)
        if long_description_i18n is not None:
            pulumi.set(__self__, "long_description_i18n", long_description_i18n)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if offering_id is not None:
            pulumi.set(__self__, "offering_id", offering_id)
        if offering_identifier is not None:
            pulumi.set(__self__, "offering_identifier", offering_identifier)
        if outputs is not None:
            pulumi.set(__self__, "outputs", outputs)
        if package_version is not None:
            pulumi.set(__self__, "package_version", package_version)
        if pre_installs is not None:
            pulumi.set(__self__, "pre_installs", pre_installs)
        if product_kind is not None:
            pulumi.set(__self__, "product_kind", product_kind)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if repotype is not None:
            pulumi.set(__self__, "repotype", repotype)
        if required_resources is not None:
            pulumi.set(__self__, "required_resources", required_resources)
        if rev is not None:
            pulumi.set(__self__, "rev", rev)
        if sha is not None:
            pulumi.set(__self__, "sha", sha)
        if single_instance is not None:
            pulumi.set(__self__, "single_instance", single_instance)
        if solution_info is not None:
            pulumi.set(__self__, "solution_info", solution_info)
        if source_url is not None:
            pulumi.set(__self__, "source_url", source_url)
        if states is not None:
            pulumi.set(__self__, "states", states)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_kinds is not None:
            pulumi.set(__self__, "target_kinds", target_kinds)
        if target_version is not None:
            pulumi.set(__self__, "target_version", target_version)
        if terraform_version is not None:
            pulumi.set(__self__, "terraform_version", terraform_version)
        if tgz_url is not None:
            pulumi.set(__self__, "tgz_url", tgz_url)
        if updated is not None:
            pulumi.set(__self__, "updated", updated)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)
        if validations is not None:
            pulumi.set(__self__, "validations", validations)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)
        if version_locator is not None:
            pulumi.set(__self__, "version_locator", version_locator)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)
        if x_auth_token is not None:
            pulumi.set(__self__, "x_auth_token", x_auth_token)
        if zipurl is not None:
            pulumi.set(__self__, "zipurl", zipurl)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Catalog identifier.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_id", value)

    @_builtins.property
    @pulumi.getter(name="cmVersionId")
    def cm_version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cm_version_id")

    @cm_version_id.setter
    def cm_version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cm_version_id", value)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionConfigurationArgs']]]]:
        """
        List of user solicited overrides.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Byte array representing the content to be imported. Only supported for OVA images at this time.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time this version was created.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version's CRN.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def deprecate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deprecate this version.
        """
        return pulumi.get(self, "deprecate")

    @deprecate.setter
    def deprecate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deprecate", value)

    @_builtins.property
    @pulumi.getter(name="deprecatePendings")
    def deprecate_pendings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionDeprecatePendingArgs']]]]:
        """
        Deprecation information for a Version.
        """
        return pulumi.get(self, "deprecate_pendings")

    @deprecate_pendings.setter
    def deprecate_pendings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionDeprecatePendingArgs']]]]):
        pulumi.set(self, "deprecate_pendings", value)

    @_builtins.property
    @pulumi.getter
    def deprecated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        read only field, indicating if this version is deprecated.
        """
        return pulumi.get(self, "deprecated")

    @deprecated.setter
    def deprecated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deprecated", value)

    @_builtins.property
    @pulumi.getter
    def entitlements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionEntitlementArgs']]]]:
        """
        Entitlement license info.
        """
        return pulumi.get(self, "entitlements")

    @entitlements.setter
    def entitlements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionEntitlementArgs']]]]):
        pulumi.set(self, "entitlements", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input['CmVersionFlavorArgs']]:
        """
        Version Flavor Information. Only supported for Product kind Solution.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input['CmVersionFlavorArgs']]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="formatKind")
    def format_kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Format of content being onboarded. Example: vsi-image. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "format_kind")

    @format_kind.setter
    def format_kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format_kind", value)

    @_builtins.property
    @pulumi.getter(name="iamPermissions")
    def iam_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionIamPermissionArgs']]]]:
        """
        List of IAM permissions that are required to consume this version.
        """
        return pulumi.get(self, "iam_permissions")

    @iam_permissions.setter
    def iam_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionIamPermissionArgs']]]]):
        pulumi.set(self, "iam_permissions", value)

    @_builtins.property
    @pulumi.getter(name="imageManifestUrl")
    def image_manifest_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If set, denotes a url to a YAML file with list of container images used by this version.
        """
        return pulumi.get(self, "image_manifest_url")

    @image_manifest_url.setter
    def image_manifest_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_manifest_url", value)

    @_builtins.property
    @pulumi.getter(name="imagePullKeyName")
    def image_pull_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the image pull key to use from Offering.ImagePullKeys.
        """
        return pulumi.get(self, "image_pull_key_name")

    @image_pull_key_name.setter
    def image_pull_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_pull_key_name", value)

    @_builtins.property
    @pulumi.getter(name="importMetadata")
    def import_metadata(self) -> Optional[pulumi.Input['CmVersionImportMetadataArgs']]:
        """
        Generic data to be included with content being onboarded. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "import_metadata")

    @import_metadata.setter
    def import_metadata(self, value: Optional[pulumi.Input['CmVersionImportMetadataArgs']]):
        pulumi.set(self, "import_metadata", value)

    @_builtins.property
    @pulumi.getter(name="importSha")
    def import_sha(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SHA256 fingerprint of the image file. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "import_sha")

    @import_sha.setter
    def import_sha(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "import_sha", value)

    @_builtins.property
    @pulumi.getter(name="includeConfig")
    def include_config(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Add all possible configuration values to this version when importing.
        """
        return pulumi.get(self, "include_config")

    @include_config.setter
    def include_config(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "include_config", value)

    @_builtins.property
    @pulumi.getter
    def install(self) -> Optional[pulumi.Input['CmVersionInstallArgs']]:
        """
        Script information.
        """
        return pulumi.get(self, "install")

    @install.setter
    def install(self, value: Optional[pulumi.Input['CmVersionInstallArgs']]):
        pulumi.set(self, "install", value)

    @_builtins.property
    @pulumi.getter(name="installKind")
    def install_kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Install type. Example: instance. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "install_kind")

    @install_kind.setter
    def install_kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "install_kind", value)

    @_builtins.property
    @pulumi.getter(name="isConsumable")
    def is_consumable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Is the version able to be shared.
        """
        return pulumi.get(self, "is_consumable")

    @is_consumable.setter
    def is_consumable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_consumable", value)

    @_builtins.property
    @pulumi.getter(name="isVsi")
    def is_vsi(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_vsi")

    @is_vsi.setter
    def is_vsi(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_vsi", value)

    @_builtins.property
    @pulumi.getter(name="kindId")
    def kind_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kind ID.
        """
        return pulumi.get(self, "kind_id")

    @kind_id.setter
    def kind_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind_id", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Display name of version. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter
    def licenses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionLicenseArgs']]]]:
        """
        List of licenses the product was built with.
        """
        return pulumi.get(self, "licenses")

    @licenses.setter
    def licenses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionLicenseArgs']]]]):
        pulumi.set(self, "licenses", value)

    @_builtins.property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Long description for version.
        """
        return pulumi.get(self, "long_description")

    @long_description.setter
    def long_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "long_description", value)

    @_builtins.property
    @pulumi.getter(name="longDescriptionI18n")
    def long_description_i18n(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "long_description_i18n")

    @long_description_i18n.setter
    def long_description_i18n(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "long_description_i18n", value)

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionMetadataArgs']]]]:
        """
        Generic data to be included with content being onboarded. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of version. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="offeringId")
    def offering_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Offering identification.
        """
        return pulumi.get(self, "offering_id")

    @offering_id.setter
    def offering_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offering_id", value)

    @_builtins.property
    @pulumi.getter(name="offeringIdentifier")
    def offering_identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Offering ID, in the format of <account_id>:o:<offering_id>.
        """
        return pulumi.get(self, "offering_identifier")

    @offering_identifier.setter
    def offering_identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offering_identifier", value)

    @_builtins.property
    @pulumi.getter
    def outputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionOutputArgs']]]]:
        """
        List of output values for this version.
        """
        return pulumi.get(self, "outputs")

    @outputs.setter
    def outputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionOutputArgs']]]]):
        pulumi.set(self, "outputs", value)

    @_builtins.property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the package used to create this version.
        """
        return pulumi.get(self, "package_version")

    @package_version.setter
    def package_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "package_version", value)

    @_builtins.property
    @pulumi.getter(name="preInstalls")
    def pre_installs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionPreInstallArgs']]]]:
        """
        Optional pre-install instructions.
        """
        return pulumi.get(self, "pre_installs")

    @pre_installs.setter
    def pre_installs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionPreInstallArgs']]]]):
        pulumi.set(self, "pre_installs", value)

    @_builtins.property
    @pulumi.getter(name="productKind")
    def product_kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional product kind for the software being onboarded. Valid values are software, module, or solution. Default value is
        software.
        """
        return pulumi.get(self, "product_kind")

    @product_kind.setter
    def product_kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "product_kind", value)

    @_builtins.property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Content's repo URL.
        """
        return pulumi.get(self, "repo_url")

    @repo_url.setter
    def repo_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repo_url", value)

    @_builtins.property
    @pulumi.getter
    def repotype(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of repository containing this version. Valid values are 'public_git' or 'enterprise_git'.
        """
        return pulumi.get(self, "repotype")

    @repotype.setter
    def repotype(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "repotype", value)

    @_builtins.property
    @pulumi.getter(name="requiredResources")
    def required_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionRequiredResourceArgs']]]]:
        """
        Resource requirments for installation.
        """
        return pulumi.get(self, "required_resources")

    @required_resources.setter
    def required_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionRequiredResourceArgs']]]]):
        pulumi.set(self, "required_resources", value)

    @_builtins.property
    @pulumi.getter
    def rev(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloudant revision.
        """
        return pulumi.get(self, "rev")

    @rev.setter
    def rev(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rev", value)

    @_builtins.property
    @pulumi.getter
    def sha(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SHA256 fingerprint of the image file. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "sha")

    @sha.setter
    def sha(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sha", value)

    @_builtins.property
    @pulumi.getter(name="singleInstance")
    def single_instance(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Denotes if single instance can be deployed to a given cluster.
        """
        return pulumi.get(self, "single_instance")

    @single_instance.setter
    def single_instance(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "single_instance", value)

    @_builtins.property
    @pulumi.getter(name="solutionInfo")
    def solution_info(self) -> Optional[pulumi.Input['CmVersionSolutionInfoArgs']]:
        """
        Version Solution Information. Only supported for Product kind Solution.
        """
        return pulumi.get(self, "solution_info")

    @solution_info.setter
    def solution_info(self, value: Optional[pulumi.Input['CmVersionSolutionInfoArgs']]):
        pulumi.set(self, "solution_info", value)

    @_builtins.property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Content's source URL (e.g git repo).
        """
        return pulumi.get(self, "source_url")

    @source_url.setter
    def source_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_url", value)

    @_builtins.property
    @pulumi.getter
    def states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionStateArgs']]]]:
        """
        Offering state.
        """
        return pulumi.get(self, "states")

    @states.setter
    def states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionStateArgs']]]]):
        pulumi.set(self, "states", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags array.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="targetKinds")
    def target_kinds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "target_kinds")

    @target_kinds.setter
    def target_kinds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "target_kinds", value)

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The semver value for this new version, if not found in the zip url package content.
        """
        return pulumi.get(self, "target_version")

    @target_version.setter
    def target_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_version", value)

    @_builtins.property
    @pulumi.getter(name="terraformVersion")
    def terraform_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "terraform_version")

    @terraform_version.setter
    def terraform_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "terraform_version", value)

    @_builtins.property
    @pulumi.getter(name="tgzUrl")
    def tgz_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        File used to on-board this version.
        """
        return pulumi.get(self, "tgz_url")

    @tgz_url.setter
    def tgz_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tgz_url", value)

    @_builtins.property
    @pulumi.getter
    def updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time this version was last updated.
        """
        return pulumi.get(self, "updated")

    @updated.setter
    def updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated", value)

    @_builtins.property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The usage text for this version.
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "usage", value)

    @_builtins.property
    @pulumi.getter
    def validations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionValidationArgs']]]]:
        """
        Validation response.
        """
        return pulumi.get(self, "validations")

    @validations.setter
    def validations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmVersionValidationArgs']]]]):
        pulumi.set(self, "validations", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Semantic version of the software being onboarded. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique ID.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_id", value)

    @_builtins.property
    @pulumi.getter(name="versionLocator")
    def version_locator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A dotted value of `catalogID`.`versionID`.
        """
        return pulumi.get(self, "version_locator")

    @version_locator.setter
    def version_locator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_locator", value)

    @_builtins.property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional - The sub-folder within the specified tgz file that contains the software being onboarded.
        """
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "working_directory", value)

    @_builtins.property
    @pulumi.getter(name="xAuthToken")
    def x_auth_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authentication token used to access the specified zip file.
        """
        return pulumi.get(self, "x_auth_token")

    @x_auth_token.setter
    def x_auth_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_auth_token", value)

    @_builtins.property
    @pulumi.getter
    def zipurl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL path to zip location. If not specified, must provide content in the body of this call.
        """
        return pulumi.get(self, "zipurl")

    @zipurl.setter
    def zipurl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zipurl", value)


@pulumi.type_token("ibm:index/cmVersion:CmVersion")
class CmVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionConfigurationArgs', 'CmVersionConfigurationArgsDict']]]]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 deprecate: Optional[pulumi.Input[_builtins.bool]] = None,
                 flavor: Optional[pulumi.Input[Union['CmVersionFlavorArgs', 'CmVersionFlavorArgsDict']]] = None,
                 format_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionIamPermissionArgs', 'CmVersionIamPermissionArgsDict']]]]] = None,
                 import_metadata: Optional[pulumi.Input[Union['CmVersionImportMetadataArgs', 'CmVersionImportMetadataArgsDict']]] = None,
                 import_sha: Optional[pulumi.Input[_builtins.str]] = None,
                 include_config: Optional[pulumi.Input[_builtins.bool]] = None,
                 install: Optional[pulumi.Input[Union['CmVersionInstallArgs', 'CmVersionInstallArgsDict']]] = None,
                 install_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vsi: Optional[pulumi.Input[_builtins.bool]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 licenses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionLicenseArgs', 'CmVersionLicenseArgsDict']]]]] = None,
                 long_description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_installs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionPreInstallArgs', 'CmVersionPreInstallArgsDict']]]]] = None,
                 product_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 repotype: Optional[pulumi.Input[_builtins.str]] = None,
                 required_resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionRequiredResourceArgs', 'CmVersionRequiredResourceArgsDict']]]]] = None,
                 solution_info: Optional[pulumi.Input[Union['CmVersionSolutionInfoArgs', 'CmVersionSolutionInfoArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_kinds: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None,
                 terraform_version: Optional[pulumi.Input[_builtins.str]] = None,
                 usage: Optional[pulumi.Input[_builtins.str]] = None,
                 working_directory: Optional[pulumi.Input[_builtins.str]] = None,
                 x_auth_token: Optional[pulumi.Input[_builtins.str]] = None,
                 zipurl: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CmVersion resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] catalog_id: Catalog identifier.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionConfigurationArgs', 'CmVersionConfigurationArgsDict']]]] configurations: List of user solicited overrides.
        :param pulumi.Input[_builtins.str] content: Byte array representing the content to be imported. Only supported for OVA images at this time.
        :param pulumi.Input[_builtins.bool] deprecate: Deprecate this version.
        :param pulumi.Input[Union['CmVersionFlavorArgs', 'CmVersionFlavorArgsDict']] flavor: Version Flavor Information. Only supported for Product kind Solution.
        :param pulumi.Input[_builtins.str] format_kind: Format of content being onboarded. Example: vsi-image. Required for virtual server image for VPC.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionIamPermissionArgs', 'CmVersionIamPermissionArgsDict']]]] iam_permissions: List of IAM permissions that are required to consume this version.
        :param pulumi.Input[Union['CmVersionImportMetadataArgs', 'CmVersionImportMetadataArgsDict']] import_metadata: Generic data to be included with content being onboarded. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] import_sha: SHA256 fingerprint of the image file. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.bool] include_config: Add all possible configuration values to this version when importing.
        :param pulumi.Input[Union['CmVersionInstallArgs', 'CmVersionInstallArgsDict']] install: Script information.
        :param pulumi.Input[_builtins.str] install_kind: Install type. Example: instance. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] label: Display name of version. Required for virtual server image for VPC.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionLicenseArgs', 'CmVersionLicenseArgsDict']]]] licenses: List of licenses the product was built with.
        :param pulumi.Input[_builtins.str] long_description: Long description for version.
        :param pulumi.Input[_builtins.str] name: Name of version. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] offering_id: Offering identification.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionPreInstallArgs', 'CmVersionPreInstallArgsDict']]]] pre_installs: Optional pre-install instructions.
        :param pulumi.Input[_builtins.str] product_kind: Optional product kind for the software being onboarded. Valid values are software, module, or solution. Default value is
               software.
        :param pulumi.Input[_builtins.str] repotype: The type of repository containing this version. Valid values are 'public_git' or 'enterprise_git'.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionRequiredResourceArgs', 'CmVersionRequiredResourceArgsDict']]]] required_resources: Resource requirments for installation.
        :param pulumi.Input[Union['CmVersionSolutionInfoArgs', 'CmVersionSolutionInfoArgsDict']] solution_info: Version Solution Information. Only supported for Product kind Solution.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags array.
        :param pulumi.Input[_builtins.str] target_version: The semver value for this new version, if not found in the zip url package content.
        :param pulumi.Input[_builtins.str] usage: The usage text for this version.
        :param pulumi.Input[_builtins.str] working_directory: Optional - The sub-folder within the specified tgz file that contains the software being onboarded.
        :param pulumi.Input[_builtins.str] x_auth_token: Authentication token used to access the specified zip file.
        :param pulumi.Input[_builtins.str] zipurl: URL path to zip location. If not specified, must provide content in the body of this call.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CmVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CmVersion resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CmVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CmVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionConfigurationArgs', 'CmVersionConfigurationArgsDict']]]]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 deprecate: Optional[pulumi.Input[_builtins.bool]] = None,
                 flavor: Optional[pulumi.Input[Union['CmVersionFlavorArgs', 'CmVersionFlavorArgsDict']]] = None,
                 format_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionIamPermissionArgs', 'CmVersionIamPermissionArgsDict']]]]] = None,
                 import_metadata: Optional[pulumi.Input[Union['CmVersionImportMetadataArgs', 'CmVersionImportMetadataArgsDict']]] = None,
                 import_sha: Optional[pulumi.Input[_builtins.str]] = None,
                 include_config: Optional[pulumi.Input[_builtins.bool]] = None,
                 install: Optional[pulumi.Input[Union['CmVersionInstallArgs', 'CmVersionInstallArgsDict']]] = None,
                 install_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vsi: Optional[pulumi.Input[_builtins.bool]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 licenses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionLicenseArgs', 'CmVersionLicenseArgsDict']]]]] = None,
                 long_description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pre_installs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionPreInstallArgs', 'CmVersionPreInstallArgsDict']]]]] = None,
                 product_kind: Optional[pulumi.Input[_builtins.str]] = None,
                 repotype: Optional[pulumi.Input[_builtins.str]] = None,
                 required_resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionRequiredResourceArgs', 'CmVersionRequiredResourceArgsDict']]]]] = None,
                 solution_info: Optional[pulumi.Input[Union['CmVersionSolutionInfoArgs', 'CmVersionSolutionInfoArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_kinds: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None,
                 terraform_version: Optional[pulumi.Input[_builtins.str]] = None,
                 usage: Optional[pulumi.Input[_builtins.str]] = None,
                 working_directory: Optional[pulumi.Input[_builtins.str]] = None,
                 x_auth_token: Optional[pulumi.Input[_builtins.str]] = None,
                 zipurl: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CmVersionArgs.__new__(CmVersionArgs)

            if catalog_id is None and not opts.urn:
                raise TypeError("Missing required property 'catalog_id'")
            __props__.__dict__["catalog_id"] = catalog_id
            __props__.__dict__["cm_version_id"] = cm_version_id
            __props__.__dict__["configurations"] = configurations
            __props__.__dict__["content"] = content
            __props__.__dict__["deprecate"] = deprecate
            __props__.__dict__["flavor"] = flavor
            __props__.__dict__["format_kind"] = format_kind
            __props__.__dict__["iam_permissions"] = iam_permissions
            __props__.__dict__["import_metadata"] = import_metadata
            __props__.__dict__["import_sha"] = import_sha
            __props__.__dict__["include_config"] = include_config
            __props__.__dict__["install"] = install
            __props__.__dict__["install_kind"] = install_kind
            __props__.__dict__["is_vsi"] = is_vsi
            __props__.__dict__["label"] = label
            __props__.__dict__["licenses"] = licenses
            __props__.__dict__["long_description"] = long_description
            __props__.__dict__["name"] = name
            if offering_id is None and not opts.urn:
                raise TypeError("Missing required property 'offering_id'")
            __props__.__dict__["offering_id"] = offering_id
            __props__.__dict__["pre_installs"] = pre_installs
            __props__.__dict__["product_kind"] = product_kind
            __props__.__dict__["repotype"] = repotype
            __props__.__dict__["required_resources"] = required_resources
            __props__.__dict__["solution_info"] = solution_info
            __props__.__dict__["tags"] = tags
            __props__.__dict__["target_kinds"] = target_kinds
            __props__.__dict__["target_version"] = target_version
            __props__.__dict__["terraform_version"] = terraform_version
            __props__.__dict__["usage"] = usage
            __props__.__dict__["working_directory"] = working_directory
            __props__.__dict__["x_auth_token"] = None if x_auth_token is None else pulumi.Output.secret(x_auth_token)
            __props__.__dict__["zipurl"] = zipurl
            __props__.__dict__["created"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["deprecate_pendings"] = None
            __props__.__dict__["deprecated"] = None
            __props__.__dict__["entitlements"] = None
            __props__.__dict__["image_manifest_url"] = None
            __props__.__dict__["image_pull_key_name"] = None
            __props__.__dict__["is_consumable"] = None
            __props__.__dict__["kind_id"] = None
            __props__.__dict__["long_description_i18n"] = None
            __props__.__dict__["metadatas"] = None
            __props__.__dict__["offering_identifier"] = None
            __props__.__dict__["outputs"] = None
            __props__.__dict__["package_version"] = None
            __props__.__dict__["repo_url"] = None
            __props__.__dict__["rev"] = None
            __props__.__dict__["sha"] = None
            __props__.__dict__["single_instance"] = None
            __props__.__dict__["source_url"] = None
            __props__.__dict__["states"] = None
            __props__.__dict__["tgz_url"] = None
            __props__.__dict__["updated"] = None
            __props__.__dict__["validations"] = None
            __props__.__dict__["version"] = None
            __props__.__dict__["version_id"] = None
            __props__.__dict__["version_locator"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["xAuthToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CmVersion, __self__).__init__(
            'ibm:index/cmVersion:CmVersion',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
            cm_version_id: Optional[pulumi.Input[_builtins.str]] = None,
            configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionConfigurationArgs', 'CmVersionConfigurationArgsDict']]]]] = None,
            content: Optional[pulumi.Input[_builtins.str]] = None,
            created: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            deprecate: Optional[pulumi.Input[_builtins.bool]] = None,
            deprecate_pendings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionDeprecatePendingArgs', 'CmVersionDeprecatePendingArgsDict']]]]] = None,
            deprecated: Optional[pulumi.Input[_builtins.bool]] = None,
            entitlements: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionEntitlementArgs', 'CmVersionEntitlementArgsDict']]]]] = None,
            flavor: Optional[pulumi.Input[Union['CmVersionFlavorArgs', 'CmVersionFlavorArgsDict']]] = None,
            format_kind: Optional[pulumi.Input[_builtins.str]] = None,
            iam_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionIamPermissionArgs', 'CmVersionIamPermissionArgsDict']]]]] = None,
            image_manifest_url: Optional[pulumi.Input[_builtins.str]] = None,
            image_pull_key_name: Optional[pulumi.Input[_builtins.str]] = None,
            import_metadata: Optional[pulumi.Input[Union['CmVersionImportMetadataArgs', 'CmVersionImportMetadataArgsDict']]] = None,
            import_sha: Optional[pulumi.Input[_builtins.str]] = None,
            include_config: Optional[pulumi.Input[_builtins.bool]] = None,
            install: Optional[pulumi.Input[Union['CmVersionInstallArgs', 'CmVersionInstallArgsDict']]] = None,
            install_kind: Optional[pulumi.Input[_builtins.str]] = None,
            is_consumable: Optional[pulumi.Input[_builtins.bool]] = None,
            is_vsi: Optional[pulumi.Input[_builtins.bool]] = None,
            kind_id: Optional[pulumi.Input[_builtins.str]] = None,
            label: Optional[pulumi.Input[_builtins.str]] = None,
            licenses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionLicenseArgs', 'CmVersionLicenseArgsDict']]]]] = None,
            long_description: Optional[pulumi.Input[_builtins.str]] = None,
            long_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionMetadataArgs', 'CmVersionMetadataArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            offering_id: Optional[pulumi.Input[_builtins.str]] = None,
            offering_identifier: Optional[pulumi.Input[_builtins.str]] = None,
            outputs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionOutputArgs', 'CmVersionOutputArgsDict']]]]] = None,
            package_version: Optional[pulumi.Input[_builtins.str]] = None,
            pre_installs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionPreInstallArgs', 'CmVersionPreInstallArgsDict']]]]] = None,
            product_kind: Optional[pulumi.Input[_builtins.str]] = None,
            repo_url: Optional[pulumi.Input[_builtins.str]] = None,
            repotype: Optional[pulumi.Input[_builtins.str]] = None,
            required_resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionRequiredResourceArgs', 'CmVersionRequiredResourceArgsDict']]]]] = None,
            rev: Optional[pulumi.Input[_builtins.str]] = None,
            sha: Optional[pulumi.Input[_builtins.str]] = None,
            single_instance: Optional[pulumi.Input[_builtins.bool]] = None,
            solution_info: Optional[pulumi.Input[Union['CmVersionSolutionInfoArgs', 'CmVersionSolutionInfoArgsDict']]] = None,
            source_url: Optional[pulumi.Input[_builtins.str]] = None,
            states: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionStateArgs', 'CmVersionStateArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            target_kinds: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            target_version: Optional[pulumi.Input[_builtins.str]] = None,
            terraform_version: Optional[pulumi.Input[_builtins.str]] = None,
            tgz_url: Optional[pulumi.Input[_builtins.str]] = None,
            updated: Optional[pulumi.Input[_builtins.str]] = None,
            usage: Optional[pulumi.Input[_builtins.str]] = None,
            validations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmVersionValidationArgs', 'CmVersionValidationArgsDict']]]]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            version_id: Optional[pulumi.Input[_builtins.str]] = None,
            version_locator: Optional[pulumi.Input[_builtins.str]] = None,
            working_directory: Optional[pulumi.Input[_builtins.str]] = None,
            x_auth_token: Optional[pulumi.Input[_builtins.str]] = None,
            zipurl: Optional[pulumi.Input[_builtins.str]] = None) -> 'CmVersion':
        """
        Get an existing CmVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] catalog_id: Catalog identifier.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionConfigurationArgs', 'CmVersionConfigurationArgsDict']]]] configurations: List of user solicited overrides.
        :param pulumi.Input[_builtins.str] content: Byte array representing the content to be imported. Only supported for OVA images at this time.
        :param pulumi.Input[_builtins.str] created: The date and time this version was created.
        :param pulumi.Input[_builtins.str] crn: Version's CRN.
        :param pulumi.Input[_builtins.bool] deprecate: Deprecate this version.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionDeprecatePendingArgs', 'CmVersionDeprecatePendingArgsDict']]]] deprecate_pendings: Deprecation information for a Version.
        :param pulumi.Input[_builtins.bool] deprecated: read only field, indicating if this version is deprecated.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionEntitlementArgs', 'CmVersionEntitlementArgsDict']]]] entitlements: Entitlement license info.
        :param pulumi.Input[Union['CmVersionFlavorArgs', 'CmVersionFlavorArgsDict']] flavor: Version Flavor Information. Only supported for Product kind Solution.
        :param pulumi.Input[_builtins.str] format_kind: Format of content being onboarded. Example: vsi-image. Required for virtual server image for VPC.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionIamPermissionArgs', 'CmVersionIamPermissionArgsDict']]]] iam_permissions: List of IAM permissions that are required to consume this version.
        :param pulumi.Input[_builtins.str] image_manifest_url: If set, denotes a url to a YAML file with list of container images used by this version.
        :param pulumi.Input[_builtins.str] image_pull_key_name: ID of the image pull key to use from Offering.ImagePullKeys.
        :param pulumi.Input[Union['CmVersionImportMetadataArgs', 'CmVersionImportMetadataArgsDict']] import_metadata: Generic data to be included with content being onboarded. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] import_sha: SHA256 fingerprint of the image file. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.bool] include_config: Add all possible configuration values to this version when importing.
        :param pulumi.Input[Union['CmVersionInstallArgs', 'CmVersionInstallArgsDict']] install: Script information.
        :param pulumi.Input[_builtins.str] install_kind: Install type. Example: instance. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.bool] is_consumable: Is the version able to be shared.
        :param pulumi.Input[_builtins.str] kind_id: Kind ID.
        :param pulumi.Input[_builtins.str] label: Display name of version. Required for virtual server image for VPC.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionLicenseArgs', 'CmVersionLicenseArgsDict']]]] licenses: List of licenses the product was built with.
        :param pulumi.Input[_builtins.str] long_description: Long description for version.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] long_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionMetadataArgs', 'CmVersionMetadataArgsDict']]]] metadatas: Generic data to be included with content being onboarded. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] name: Name of version. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] offering_id: Offering identification.
        :param pulumi.Input[_builtins.str] offering_identifier: Offering ID, in the format of <account_id>:o:<offering_id>.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionOutputArgs', 'CmVersionOutputArgsDict']]]] outputs: List of output values for this version.
        :param pulumi.Input[_builtins.str] package_version: Version of the package used to create this version.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionPreInstallArgs', 'CmVersionPreInstallArgsDict']]]] pre_installs: Optional pre-install instructions.
        :param pulumi.Input[_builtins.str] product_kind: Optional product kind for the software being onboarded. Valid values are software, module, or solution. Default value is
               software.
        :param pulumi.Input[_builtins.str] repo_url: Content's repo URL.
        :param pulumi.Input[_builtins.str] repotype: The type of repository containing this version. Valid values are 'public_git' or 'enterprise_git'.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionRequiredResourceArgs', 'CmVersionRequiredResourceArgsDict']]]] required_resources: Resource requirments for installation.
        :param pulumi.Input[_builtins.str] rev: Cloudant revision.
        :param pulumi.Input[_builtins.str] sha: SHA256 fingerprint of the image file. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.bool] single_instance: Denotes if single instance can be deployed to a given cluster.
        :param pulumi.Input[Union['CmVersionSolutionInfoArgs', 'CmVersionSolutionInfoArgsDict']] solution_info: Version Solution Information. Only supported for Product kind Solution.
        :param pulumi.Input[_builtins.str] source_url: Content's source URL (e.g git repo).
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionStateArgs', 'CmVersionStateArgsDict']]]] states: Offering state.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags array.
        :param pulumi.Input[_builtins.str] target_version: The semver value for this new version, if not found in the zip url package content.
        :param pulumi.Input[_builtins.str] tgz_url: File used to on-board this version.
        :param pulumi.Input[_builtins.str] updated: The date and time this version was last updated.
        :param pulumi.Input[_builtins.str] usage: The usage text for this version.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmVersionValidationArgs', 'CmVersionValidationArgsDict']]]] validations: Validation response.
        :param pulumi.Input[_builtins.str] version: Semantic version of the software being onboarded. Required for virtual server image for VPC.
        :param pulumi.Input[_builtins.str] version_id: Unique ID.
        :param pulumi.Input[_builtins.str] version_locator: A dotted value of `catalogID`.`versionID`.
        :param pulumi.Input[_builtins.str] working_directory: Optional - The sub-folder within the specified tgz file that contains the software being onboarded.
        :param pulumi.Input[_builtins.str] x_auth_token: Authentication token used to access the specified zip file.
        :param pulumi.Input[_builtins.str] zipurl: URL path to zip location. If not specified, must provide content in the body of this call.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CmVersionState.__new__(_CmVersionState)

        __props__.__dict__["catalog_id"] = catalog_id
        __props__.__dict__["cm_version_id"] = cm_version_id
        __props__.__dict__["configurations"] = configurations
        __props__.__dict__["content"] = content
        __props__.__dict__["created"] = created
        __props__.__dict__["crn"] = crn
        __props__.__dict__["deprecate"] = deprecate
        __props__.__dict__["deprecate_pendings"] = deprecate_pendings
        __props__.__dict__["deprecated"] = deprecated
        __props__.__dict__["entitlements"] = entitlements
        __props__.__dict__["flavor"] = flavor
        __props__.__dict__["format_kind"] = format_kind
        __props__.__dict__["iam_permissions"] = iam_permissions
        __props__.__dict__["image_manifest_url"] = image_manifest_url
        __props__.__dict__["image_pull_key_name"] = image_pull_key_name
        __props__.__dict__["import_metadata"] = import_metadata
        __props__.__dict__["import_sha"] = import_sha
        __props__.__dict__["include_config"] = include_config
        __props__.__dict__["install"] = install
        __props__.__dict__["install_kind"] = install_kind
        __props__.__dict__["is_consumable"] = is_consumable
        __props__.__dict__["is_vsi"] = is_vsi
        __props__.__dict__["kind_id"] = kind_id
        __props__.__dict__["label"] = label
        __props__.__dict__["licenses"] = licenses
        __props__.__dict__["long_description"] = long_description
        __props__.__dict__["long_description_i18n"] = long_description_i18n
        __props__.__dict__["metadatas"] = metadatas
        __props__.__dict__["name"] = name
        __props__.__dict__["offering_id"] = offering_id
        __props__.__dict__["offering_identifier"] = offering_identifier
        __props__.__dict__["outputs"] = outputs
        __props__.__dict__["package_version"] = package_version
        __props__.__dict__["pre_installs"] = pre_installs
        __props__.__dict__["product_kind"] = product_kind
        __props__.__dict__["repo_url"] = repo_url
        __props__.__dict__["repotype"] = repotype
        __props__.__dict__["required_resources"] = required_resources
        __props__.__dict__["rev"] = rev
        __props__.__dict__["sha"] = sha
        __props__.__dict__["single_instance"] = single_instance
        __props__.__dict__["solution_info"] = solution_info
        __props__.__dict__["source_url"] = source_url
        __props__.__dict__["states"] = states
        __props__.__dict__["tags"] = tags
        __props__.__dict__["target_kinds"] = target_kinds
        __props__.__dict__["target_version"] = target_version
        __props__.__dict__["terraform_version"] = terraform_version
        __props__.__dict__["tgz_url"] = tgz_url
        __props__.__dict__["updated"] = updated
        __props__.__dict__["usage"] = usage
        __props__.__dict__["validations"] = validations
        __props__.__dict__["version"] = version
        __props__.__dict__["version_id"] = version_id
        __props__.__dict__["version_locator"] = version_locator
        __props__.__dict__["working_directory"] = working_directory
        __props__.__dict__["x_auth_token"] = x_auth_token
        __props__.__dict__["zipurl"] = zipurl
        return CmVersion(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Output[_builtins.str]:
        """
        Catalog identifier.
        """
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter(name="cmVersionId")
    def cm_version_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cm_version_id")

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> pulumi.Output[Sequence['outputs.CmVersionConfiguration']]:
        """
        List of user solicited overrides.
        """
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Byte array representing the content to be imported. Only supported for OVA images at this time.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def created(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time this version was created.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        Version's CRN.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def deprecate(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Deprecate this version.
        """
        return pulumi.get(self, "deprecate")

    @_builtins.property
    @pulumi.getter(name="deprecatePendings")
    def deprecate_pendings(self) -> pulumi.Output[Sequence['outputs.CmVersionDeprecatePending']]:
        """
        Deprecation information for a Version.
        """
        return pulumi.get(self, "deprecate_pendings")

    @_builtins.property
    @pulumi.getter
    def deprecated(self) -> pulumi.Output[_builtins.bool]:
        """
        read only field, indicating if this version is deprecated.
        """
        return pulumi.get(self, "deprecated")

    @_builtins.property
    @pulumi.getter
    def entitlements(self) -> pulumi.Output[Sequence['outputs.CmVersionEntitlement']]:
        """
        Entitlement license info.
        """
        return pulumi.get(self, "entitlements")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Output[Optional['outputs.CmVersionFlavor']]:
        """
        Version Flavor Information. Only supported for Product kind Solution.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="formatKind")
    def format_kind(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Format of content being onboarded. Example: vsi-image. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "format_kind")

    @_builtins.property
    @pulumi.getter(name="iamPermissions")
    def iam_permissions(self) -> pulumi.Output[Optional[Sequence['outputs.CmVersionIamPermission']]]:
        """
        List of IAM permissions that are required to consume this version.
        """
        return pulumi.get(self, "iam_permissions")

    @_builtins.property
    @pulumi.getter(name="imageManifestUrl")
    def image_manifest_url(self) -> pulumi.Output[_builtins.str]:
        """
        If set, denotes a url to a YAML file with list of container images used by this version.
        """
        return pulumi.get(self, "image_manifest_url")

    @_builtins.property
    @pulumi.getter(name="imagePullKeyName")
    def image_pull_key_name(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the image pull key to use from Offering.ImagePullKeys.
        """
        return pulumi.get(self, "image_pull_key_name")

    @_builtins.property
    @pulumi.getter(name="importMetadata")
    def import_metadata(self) -> pulumi.Output[Optional['outputs.CmVersionImportMetadata']]:
        """
        Generic data to be included with content being onboarded. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "import_metadata")

    @_builtins.property
    @pulumi.getter(name="importSha")
    def import_sha(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        SHA256 fingerprint of the image file. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "import_sha")

    @_builtins.property
    @pulumi.getter(name="includeConfig")
    def include_config(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Add all possible configuration values to this version when importing.
        """
        return pulumi.get(self, "include_config")

    @_builtins.property
    @pulumi.getter
    def install(self) -> pulumi.Output[Optional['outputs.CmVersionInstall']]:
        """
        Script information.
        """
        return pulumi.get(self, "install")

    @_builtins.property
    @pulumi.getter(name="installKind")
    def install_kind(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Install type. Example: instance. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "install_kind")

    @_builtins.property
    @pulumi.getter(name="isConsumable")
    def is_consumable(self) -> pulumi.Output[_builtins.bool]:
        """
        Is the version able to be shared.
        """
        return pulumi.get(self, "is_consumable")

    @_builtins.property
    @pulumi.getter(name="isVsi")
    def is_vsi(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "is_vsi")

    @_builtins.property
    @pulumi.getter(name="kindId")
    def kind_id(self) -> pulumi.Output[_builtins.str]:
        """
        Kind ID.
        """
        return pulumi.get(self, "kind_id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Display name of version. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter
    def licenses(self) -> pulumi.Output[Optional[Sequence['outputs.CmVersionLicense']]]:
        """
        List of licenses the product was built with.
        """
        return pulumi.get(self, "licenses")

    @_builtins.property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> pulumi.Output[_builtins.str]:
        """
        Long description for version.
        """
        return pulumi.get(self, "long_description")

    @_builtins.property
    @pulumi.getter(name="longDescriptionI18n")
    def long_description_i18n(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "long_description_i18n")

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> pulumi.Output[Sequence['outputs.CmVersionMetadata']]:
        """
        Generic data to be included with content being onboarded. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "metadatas")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of version. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="offeringId")
    def offering_id(self) -> pulumi.Output[_builtins.str]:
        """
        Offering identification.
        """
        return pulumi.get(self, "offering_id")

    @_builtins.property
    @pulumi.getter(name="offeringIdentifier")
    def offering_identifier(self) -> pulumi.Output[_builtins.str]:
        """
        Offering ID, in the format of <account_id>:o:<offering_id>.
        """
        return pulumi.get(self, "offering_identifier")

    @_builtins.property
    @pulumi.getter
    def outputs(self) -> pulumi.Output[Sequence['outputs.CmVersionOutput']]:
        """
        List of output values for this version.
        """
        return pulumi.get(self, "outputs")

    @_builtins.property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> pulumi.Output[_builtins.str]:
        """
        Version of the package used to create this version.
        """
        return pulumi.get(self, "package_version")

    @_builtins.property
    @pulumi.getter(name="preInstalls")
    def pre_installs(self) -> pulumi.Output[Optional[Sequence['outputs.CmVersionPreInstall']]]:
        """
        Optional pre-install instructions.
        """
        return pulumi.get(self, "pre_installs")

    @_builtins.property
    @pulumi.getter(name="productKind")
    def product_kind(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional product kind for the software being onboarded. Valid values are software, module, or solution. Default value is
        software.
        """
        return pulumi.get(self, "product_kind")

    @_builtins.property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> pulumi.Output[_builtins.str]:
        """
        Content's repo URL.
        """
        return pulumi.get(self, "repo_url")

    @_builtins.property
    @pulumi.getter
    def repotype(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The type of repository containing this version. Valid values are 'public_git' or 'enterprise_git'.
        """
        return pulumi.get(self, "repotype")

    @_builtins.property
    @pulumi.getter(name="requiredResources")
    def required_resources(self) -> pulumi.Output[Optional[Sequence['outputs.CmVersionRequiredResource']]]:
        """
        Resource requirments for installation.
        """
        return pulumi.get(self, "required_resources")

    @_builtins.property
    @pulumi.getter
    def rev(self) -> pulumi.Output[_builtins.str]:
        """
        Cloudant revision.
        """
        return pulumi.get(self, "rev")

    @_builtins.property
    @pulumi.getter
    def sha(self) -> pulumi.Output[_builtins.str]:
        """
        SHA256 fingerprint of the image file. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "sha")

    @_builtins.property
    @pulumi.getter(name="singleInstance")
    def single_instance(self) -> pulumi.Output[_builtins.bool]:
        """
        Denotes if single instance can be deployed to a given cluster.
        """
        return pulumi.get(self, "single_instance")

    @_builtins.property
    @pulumi.getter(name="solutionInfo")
    def solution_info(self) -> pulumi.Output[Optional['outputs.CmVersionSolutionInfo']]:
        """
        Version Solution Information. Only supported for Product kind Solution.
        """
        return pulumi.get(self, "solution_info")

    @_builtins.property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> pulumi.Output[_builtins.str]:
        """
        Content's source URL (e.g git repo).
        """
        return pulumi.get(self, "source_url")

    @_builtins.property
    @pulumi.getter
    def states(self) -> pulumi.Output[Sequence['outputs.CmVersionState']]:
        """
        Offering state.
        """
        return pulumi.get(self, "states")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Tags array.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="targetKinds")
    def target_kinds(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "target_kinds")

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The semver value for this new version, if not found in the zip url package content.
        """
        return pulumi.get(self, "target_version")

    @_builtins.property
    @pulumi.getter(name="terraformVersion")
    def terraform_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "terraform_version")

    @_builtins.property
    @pulumi.getter(name="tgzUrl")
    def tgz_url(self) -> pulumi.Output[_builtins.str]:
        """
        File used to on-board this version.
        """
        return pulumi.get(self, "tgz_url")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time this version was last updated.
        """
        return pulumi.get(self, "updated")

    @_builtins.property
    @pulumi.getter
    def usage(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The usage text for this version.
        """
        return pulumi.get(self, "usage")

    @_builtins.property
    @pulumi.getter
    def validations(self) -> pulumi.Output[Sequence['outputs.CmVersionValidation']]:
        """
        Validation response.
        """
        return pulumi.get(self, "validations")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Semantic version of the software being onboarded. Required for virtual server image for VPC.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique ID.
        """
        return pulumi.get(self, "version_id")

    @_builtins.property
    @pulumi.getter(name="versionLocator")
    def version_locator(self) -> pulumi.Output[_builtins.str]:
        """
        A dotted value of `catalogID`.`versionID`.
        """
        return pulumi.get(self, "version_locator")

    @_builtins.property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional - The sub-folder within the specified tgz file that contains the software being onboarded.
        """
        return pulumi.get(self, "working_directory")

    @_builtins.property
    @pulumi.getter(name="xAuthToken")
    def x_auth_token(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Authentication token used to access the specified zip file.
        """
        return pulumi.get(self, "x_auth_token")

    @_builtins.property
    @pulumi.getter
    def zipurl(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        URL path to zip location. If not specified, must provide content in the body of this call.
        """
        return pulumi.get(self, "zipurl")

