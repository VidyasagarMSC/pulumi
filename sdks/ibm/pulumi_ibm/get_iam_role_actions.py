# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIamRoleActionsResult',
    'AwaitableGetIamRoleActionsResult',
    'get_iam_role_actions',
    'get_iam_role_actions_output',
]

@pulumi.output_type
class GetIamRoleActionsResult:
    """
    A collection of values returned by getIamRoleActions.
    """
    def __init__(__self__, actions=None, id=None, managers=None, reader_pluses=None, readers=None, service=None, writers=None):
        if actions and not isinstance(actions, dict):
            raise TypeError("Expected argument 'actions' to be a dict")
        pulumi.set(__self__, "actions", actions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if managers and not isinstance(managers, list):
            raise TypeError("Expected argument 'managers' to be a list")
        pulumi.set(__self__, "managers", managers)
        if reader_pluses and not isinstance(reader_pluses, list):
            raise TypeError("Expected argument 'reader_pluses' to be a list")
        pulumi.set(__self__, "reader_pluses", reader_pluses)
        if readers and not isinstance(readers, list):
            raise TypeError("Expected argument 'readers' to be a list")
        pulumi.set(__self__, "readers", readers)
        if service and not isinstance(service, str):
            raise TypeError("Expected argument 'service' to be a str")
        pulumi.set(__self__, "service", service)
        if writers and not isinstance(writers, list):
            raise TypeError("Expected argument 'writers' to be a list")
        pulumi.set(__self__, "writers", writers)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def managers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "managers")

    @_builtins.property
    @pulumi.getter(name="readerPluses")
    def reader_pluses(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "reader_pluses")

    @_builtins.property
    @pulumi.getter
    def readers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "readers")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter
    def writers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "writers")


class AwaitableGetIamRoleActionsResult(GetIamRoleActionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamRoleActionsResult(
            actions=self.actions,
            id=self.id,
            managers=self.managers,
            reader_pluses=self.reader_pluses,
            readers=self.readers,
            service=self.service,
            writers=self.writers)


def get_iam_role_actions(id: Optional[_builtins.str] = None,
                         service: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamRoleActionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['service'] = service
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamRoleActions:getIamRoleActions', __args__, opts=opts, typ=GetIamRoleActionsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamRoleActionsResult(
        actions=pulumi.get(__ret__, 'actions'),
        id=pulumi.get(__ret__, 'id'),
        managers=pulumi.get(__ret__, 'managers'),
        reader_pluses=pulumi.get(__ret__, 'reader_pluses'),
        readers=pulumi.get(__ret__, 'readers'),
        service=pulumi.get(__ret__, 'service'),
        writers=pulumi.get(__ret__, 'writers'))
def get_iam_role_actions_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                service: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamRoleActionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['service'] = service
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamRoleActions:getIamRoleActions', __args__, opts=opts, typ=GetIamRoleActionsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamRoleActionsResult(
        actions=pulumi.get(__response__, 'actions'),
        id=pulumi.get(__response__, 'id'),
        managers=pulumi.get(__response__, 'managers'),
        reader_pluses=pulumi.get(__response__, 'reader_pluses'),
        readers=pulumi.get(__response__, 'readers'),
        service=pulumi.get(__response__, 'service'),
        writers=pulumi.get(__response__, 'writers')))
