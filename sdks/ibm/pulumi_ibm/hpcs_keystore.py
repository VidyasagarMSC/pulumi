# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HpcsKeystoreArgs', 'HpcsKeystore']

@pulumi.input_type
class HpcsKeystoreArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 region: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 uko_vault: pulumi.Input[_builtins.str],
                 vaults: pulumi.Input[Sequence[pulumi.Input['HpcsKeystoreVaultArgs']]],
                 aws_access_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_region: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_secret_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_environment: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_location: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_service_principal_client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_service_principal_password: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_tenant: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dry_run: Optional[pulumi.Input[_builtins.bool]] = None,
                 google_credentials: Optional[pulumi.Input[_builtins.str]] = None,
                 google_key_ring: Optional[pulumi.Input[_builtins.str]] = None,
                 google_location: Optional[pulumi.Input[_builtins.str]] = None,
                 google_private_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 google_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 hpcs_keystore_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_api_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_iam_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_key_ring: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_variant: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a HpcsKeystore resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] region: The region of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] type: Type of keystore.
        :param pulumi.Input[_builtins.str] uko_vault: The UUID of the Vault in which the update is to take place.
        :param pulumi.Input[Sequence[pulumi.Input['HpcsKeystoreVaultArgs']]] vaults: Reference to a vault.
        :param pulumi.Input[_builtins.str] aws_access_key_id: The access key id used for connecting to this instance of AWS KMS.
        :param pulumi.Input[_builtins.str] aws_region: AWS Region.
        :param pulumi.Input[_builtins.str] aws_secret_access_key: The secret access key used for connecting to this instance of AWS KMS.
        :param pulumi.Input[_builtins.str] azure_environment: Azure environment, usually 'Azure'.
        :param pulumi.Input[_builtins.str] azure_location: Location of the Azure Key Vault.
        :param pulumi.Input[_builtins.str] azure_resource_group: Resource group in Azure.
        :param pulumi.Input[_builtins.str] azure_service_name: Service name of the key vault instance from the Azure portal.
        :param pulumi.Input[_builtins.str] azure_service_principal_client_id: Azure service principal client ID.
        :param pulumi.Input[_builtins.str] azure_service_principal_password: Azure service principal password.
        :param pulumi.Input[_builtins.str] azure_subscription_id: Subscription ID in Azure.
        :param pulumi.Input[_builtins.str] azure_tenant: Azure tenant that the Key Vault is associated with,.
        :param pulumi.Input[_builtins.str] description: Description of the keystore.
        :param pulumi.Input[_builtins.bool] dry_run: Do not create a keystore, only verify if keystore created with given parameters can be communciated with successfully.
        :param pulumi.Input[_builtins.str] google_credentials: The value of the JSON key represented in the Base64 format.
        :param pulumi.Input[_builtins.str] google_key_ring: A key ring organizes keys in a specific Google Cloud location and allows you to manage access control on groups of keys.
        :param pulumi.Input[_builtins.str] google_location: Location represents the geographical region where a Cloud KMS resource is stored and can be accessed. A key's location
               impacts the performance of applications using the key.
        :param pulumi.Input[_builtins.str] google_private_key_id: The private key id associated with this keystore.
        :param pulumi.Input[_builtins.str] google_project_id: The project id associated with this keystore.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] groups: List of groups that this keystore belongs to.
        :param pulumi.Input[_builtins.str] ibm_api_endpoint: API endpoint of the IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_api_key: The IBM Cloud API key to be used for connecting to this IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_iam_endpoint: Endpoint of the IAM service for this IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_instance_id: The instance ID of the IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_key_ring: The key ring of an IBM Cloud KMS Keystore.
        :param pulumi.Input[_builtins.str] ibm_variant: Possible IBM Cloud KMS variants.
        :param pulumi.Input[_builtins.str] name: Name of the target keystore. It can be changed in the future.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uko_vault", uko_vault)
        pulumi.set(__self__, "vaults", vaults)
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        if azure_environment is not None:
            pulumi.set(__self__, "azure_environment", azure_environment)
        if azure_location is not None:
            pulumi.set(__self__, "azure_location", azure_location)
        if azure_resource_group is not None:
            pulumi.set(__self__, "azure_resource_group", azure_resource_group)
        if azure_service_name is not None:
            pulumi.set(__self__, "azure_service_name", azure_service_name)
        if azure_service_principal_client_id is not None:
            pulumi.set(__self__, "azure_service_principal_client_id", azure_service_principal_client_id)
        if azure_service_principal_password is not None:
            pulumi.set(__self__, "azure_service_principal_password", azure_service_principal_password)
        if azure_subscription_id is not None:
            pulumi.set(__self__, "azure_subscription_id", azure_subscription_id)
        if azure_tenant is not None:
            pulumi.set(__self__, "azure_tenant", azure_tenant)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if google_credentials is not None:
            pulumi.set(__self__, "google_credentials", google_credentials)
        if google_key_ring is not None:
            pulumi.set(__self__, "google_key_ring", google_key_ring)
        if google_location is not None:
            pulumi.set(__self__, "google_location", google_location)
        if google_private_key_id is not None:
            pulumi.set(__self__, "google_private_key_id", google_private_key_id)
        if google_project_id is not None:
            pulumi.set(__self__, "google_project_id", google_project_id)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if hpcs_keystore_id is not None:
            pulumi.set(__self__, "hpcs_keystore_id", hpcs_keystore_id)
        if ibm_api_endpoint is not None:
            pulumi.set(__self__, "ibm_api_endpoint", ibm_api_endpoint)
        if ibm_api_key is not None:
            pulumi.set(__self__, "ibm_api_key", ibm_api_key)
        if ibm_iam_endpoint is not None:
            pulumi.set(__self__, "ibm_iam_endpoint", ibm_iam_endpoint)
        if ibm_instance_id is not None:
            pulumi.set(__self__, "ibm_instance_id", ibm_instance_id)
        if ibm_key_ring is not None:
            pulumi.set(__self__, "ibm_key_ring", ibm_key_ring)
        if ibm_variant is not None:
            pulumi.set(__self__, "ibm_variant", ibm_variant)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        The region of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of keystore.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="ukoVault")
    def uko_vault(self) -> pulumi.Input[_builtins.str]:
        """
        The UUID of the Vault in which the update is to take place.
        """
        return pulumi.get(self, "uko_vault")

    @uko_vault.setter
    def uko_vault(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "uko_vault", value)

    @_builtins.property
    @pulumi.getter
    def vaults(self) -> pulumi.Input[Sequence[pulumi.Input['HpcsKeystoreVaultArgs']]]:
        """
        Reference to a vault.
        """
        return pulumi.get(self, "vaults")

    @vaults.setter
    def vaults(self, value: pulumi.Input[Sequence[pulumi.Input['HpcsKeystoreVaultArgs']]]):
        pulumi.set(self, "vaults", value)

    @_builtins.property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The access key id used for connecting to this instance of AWS KMS.
        """
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aws_access_key_id", value)

    @_builtins.property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AWS Region.
        """
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aws_region", value)

    @_builtins.property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secret access key used for connecting to this instance of AWS KMS.
        """
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aws_secret_access_key", value)

    @_builtins.property
    @pulumi.getter(name="azureEnvironment")
    def azure_environment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Azure environment, usually 'Azure'.
        """
        return pulumi.get(self, "azure_environment")

    @azure_environment.setter
    def azure_environment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_environment", value)

    @_builtins.property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Location of the Azure Key Vault.
        """
        return pulumi.get(self, "azure_location")

    @azure_location.setter
    def azure_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_location", value)

    @_builtins.property
    @pulumi.getter(name="azureResourceGroup")
    def azure_resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group in Azure.
        """
        return pulumi.get(self, "azure_resource_group")

    @azure_resource_group.setter
    def azure_resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_resource_group", value)

    @_builtins.property
    @pulumi.getter(name="azureServiceName")
    def azure_service_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service name of the key vault instance from the Azure portal.
        """
        return pulumi.get(self, "azure_service_name")

    @azure_service_name.setter
    def azure_service_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_service_name", value)

    @_builtins.property
    @pulumi.getter(name="azureServicePrincipalClientId")
    def azure_service_principal_client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Azure service principal client ID.
        """
        return pulumi.get(self, "azure_service_principal_client_id")

    @azure_service_principal_client_id.setter
    def azure_service_principal_client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_service_principal_client_id", value)

    @_builtins.property
    @pulumi.getter(name="azureServicePrincipalPassword")
    def azure_service_principal_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Azure service principal password.
        """
        return pulumi.get(self, "azure_service_principal_password")

    @azure_service_principal_password.setter
    def azure_service_principal_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_service_principal_password", value)

    @_builtins.property
    @pulumi.getter(name="azureSubscriptionId")
    def azure_subscription_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subscription ID in Azure.
        """
        return pulumi.get(self, "azure_subscription_id")

    @azure_subscription_id.setter
    def azure_subscription_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_subscription_id", value)

    @_builtins.property
    @pulumi.getter(name="azureTenant")
    def azure_tenant(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Azure tenant that the Key Vault is associated with,.
        """
        return pulumi.get(self, "azure_tenant")

    @azure_tenant.setter
    def azure_tenant(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_tenant", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the keystore.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not create a keystore, only verify if keystore created with given parameters can be communciated with successfully.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dry_run", value)

    @_builtins.property
    @pulumi.getter(name="googleCredentials")
    def google_credentials(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The value of the JSON key represented in the Base64 format.
        """
        return pulumi.get(self, "google_credentials")

    @google_credentials.setter
    def google_credentials(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google_credentials", value)

    @_builtins.property
    @pulumi.getter(name="googleKeyRing")
    def google_key_ring(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A key ring organizes keys in a specific Google Cloud location and allows you to manage access control on groups of keys.
        """
        return pulumi.get(self, "google_key_ring")

    @google_key_ring.setter
    def google_key_ring(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google_key_ring", value)

    @_builtins.property
    @pulumi.getter(name="googleLocation")
    def google_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Location represents the geographical region where a Cloud KMS resource is stored and can be accessed. A key's location
        impacts the performance of applications using the key.
        """
        return pulumi.get(self, "google_location")

    @google_location.setter
    def google_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google_location", value)

    @_builtins.property
    @pulumi.getter(name="googlePrivateKeyId")
    def google_private_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The private key id associated with this keystore.
        """
        return pulumi.get(self, "google_private_key_id")

    @google_private_key_id.setter
    def google_private_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google_private_key_id", value)

    @_builtins.property
    @pulumi.getter(name="googleProjectId")
    def google_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The project id associated with this keystore.
        """
        return pulumi.get(self, "google_project_id")

    @google_project_id.setter
    def google_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google_project_id", value)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of groups that this keystore belongs to.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter(name="hpcsKeystoreId")
    def hpcs_keystore_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hpcs_keystore_id")

    @hpcs_keystore_id.setter
    def hpcs_keystore_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hpcs_keystore_id", value)

    @_builtins.property
    @pulumi.getter(name="ibmApiEndpoint")
    def ibm_api_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API endpoint of the IBM Cloud keystore.
        """
        return pulumi.get(self, "ibm_api_endpoint")

    @ibm_api_endpoint.setter
    def ibm_api_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_api_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="ibmApiKey")
    def ibm_api_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IBM Cloud API key to be used for connecting to this IBM Cloud keystore.
        """
        return pulumi.get(self, "ibm_api_key")

    @ibm_api_key.setter
    def ibm_api_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_api_key", value)

    @_builtins.property
    @pulumi.getter(name="ibmIamEndpoint")
    def ibm_iam_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint of the IAM service for this IBM Cloud keystore.
        """
        return pulumi.get(self, "ibm_iam_endpoint")

    @ibm_iam_endpoint.setter
    def ibm_iam_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_iam_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="ibmInstanceId")
    def ibm_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The instance ID of the IBM Cloud keystore.
        """
        return pulumi.get(self, "ibm_instance_id")

    @ibm_instance_id.setter
    def ibm_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="ibmKeyRing")
    def ibm_key_ring(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The key ring of an IBM Cloud KMS Keystore.
        """
        return pulumi.get(self, "ibm_key_ring")

    @ibm_key_ring.setter
    def ibm_key_ring(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_key_ring", value)

    @_builtins.property
    @pulumi.getter(name="ibmVariant")
    def ibm_variant(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Possible IBM Cloud KMS variants.
        """
        return pulumi.get(self, "ibm_variant")

    @ibm_variant.setter
    def ibm_variant(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_variant", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the target keystore. It can be changed in the future.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _HpcsKeystoreState:
    def __init__(__self__, *,
                 aws_access_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_region: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_secret_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_environment: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_location: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_service_principal_client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_service_principal_password: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_tenant: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dry_run: Optional[pulumi.Input[_builtins.bool]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 google_credentials: Optional[pulumi.Input[_builtins.str]] = None,
                 google_key_ring: Optional[pulumi.Input[_builtins.str]] = None,
                 google_location: Optional[pulumi.Input[_builtins.str]] = None,
                 google_private_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 google_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 hpcs_keystore_id: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_api_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_iam_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_key_ring: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_variant: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 vaults: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsKeystoreVaultArgs']]]] = None):
        """
        Input properties used for looking up and filtering HpcsKeystore resources.
        :param pulumi.Input[_builtins.str] aws_access_key_id: The access key id used for connecting to this instance of AWS KMS.
        :param pulumi.Input[_builtins.str] aws_region: AWS Region.
        :param pulumi.Input[_builtins.str] aws_secret_access_key: The secret access key used for connecting to this instance of AWS KMS.
        :param pulumi.Input[_builtins.str] azure_environment: Azure environment, usually 'Azure'.
        :param pulumi.Input[_builtins.str] azure_location: Location of the Azure Key Vault.
        :param pulumi.Input[_builtins.str] azure_resource_group: Resource group in Azure.
        :param pulumi.Input[_builtins.str] azure_service_name: Service name of the key vault instance from the Azure portal.
        :param pulumi.Input[_builtins.str] azure_service_principal_client_id: Azure service principal client ID.
        :param pulumi.Input[_builtins.str] azure_service_principal_password: Azure service principal password.
        :param pulumi.Input[_builtins.str] azure_subscription_id: Subscription ID in Azure.
        :param pulumi.Input[_builtins.str] azure_tenant: Azure tenant that the Key Vault is associated with,.
        :param pulumi.Input[_builtins.str] created_at: Date and time when the target keystore was created.
        :param pulumi.Input[_builtins.str] created_by: ID of the user that created the key.
        :param pulumi.Input[_builtins.str] description: Description of the keystore.
        :param pulumi.Input[_builtins.bool] dry_run: Do not create a keystore, only verify if keystore created with given parameters can be communciated with successfully.
        :param pulumi.Input[_builtins.str] google_credentials: The value of the JSON key represented in the Base64 format.
        :param pulumi.Input[_builtins.str] google_key_ring: A key ring organizes keys in a specific Google Cloud location and allows you to manage access control on groups of keys.
        :param pulumi.Input[_builtins.str] google_location: Location represents the geographical region where a Cloud KMS resource is stored and can be accessed. A key's location
               impacts the performance of applications using the key.
        :param pulumi.Input[_builtins.str] google_private_key_id: The private key id associated with this keystore.
        :param pulumi.Input[_builtins.str] google_project_id: The project id associated with this keystore.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] groups: List of groups that this keystore belongs to.
        :param pulumi.Input[_builtins.str] href: A URL that uniquely identifies your cloud resource.
        :param pulumi.Input[_builtins.str] ibm_api_endpoint: API endpoint of the IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_api_key: The IBM Cloud API key to be used for connecting to this IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_iam_endpoint: Endpoint of the IAM service for this IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_instance_id: The instance ID of the IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_key_ring: The key ring of an IBM Cloud KMS Keystore.
        :param pulumi.Input[_builtins.str] ibm_variant: Possible IBM Cloud KMS variants.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] location: Geographic location of the keystore, if available.
        :param pulumi.Input[_builtins.str] name: Name of the target keystore. It can be changed in the future.
        :param pulumi.Input[_builtins.str] region: The region of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] type: Type of keystore.
        :param pulumi.Input[_builtins.str] uko_vault: The UUID of the Vault in which the update is to take place.
        :param pulumi.Input[_builtins.str] updated_at: Date and time when the target keystore was last updated.
        :param pulumi.Input[_builtins.str] updated_by: ID of the user that last updated the key.
        :param pulumi.Input[Sequence[pulumi.Input['HpcsKeystoreVaultArgs']]] vaults: Reference to a vault.
        """
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        if azure_environment is not None:
            pulumi.set(__self__, "azure_environment", azure_environment)
        if azure_location is not None:
            pulumi.set(__self__, "azure_location", azure_location)
        if azure_resource_group is not None:
            pulumi.set(__self__, "azure_resource_group", azure_resource_group)
        if azure_service_name is not None:
            pulumi.set(__self__, "azure_service_name", azure_service_name)
        if azure_service_principal_client_id is not None:
            pulumi.set(__self__, "azure_service_principal_client_id", azure_service_principal_client_id)
        if azure_service_principal_password is not None:
            pulumi.set(__self__, "azure_service_principal_password", azure_service_principal_password)
        if azure_subscription_id is not None:
            pulumi.set(__self__, "azure_subscription_id", azure_subscription_id)
        if azure_tenant is not None:
            pulumi.set(__self__, "azure_tenant", azure_tenant)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if google_credentials is not None:
            pulumi.set(__self__, "google_credentials", google_credentials)
        if google_key_ring is not None:
            pulumi.set(__self__, "google_key_ring", google_key_ring)
        if google_location is not None:
            pulumi.set(__self__, "google_location", google_location)
        if google_private_key_id is not None:
            pulumi.set(__self__, "google_private_key_id", google_private_key_id)
        if google_project_id is not None:
            pulumi.set(__self__, "google_project_id", google_project_id)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if hpcs_keystore_id is not None:
            pulumi.set(__self__, "hpcs_keystore_id", hpcs_keystore_id)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if ibm_api_endpoint is not None:
            pulumi.set(__self__, "ibm_api_endpoint", ibm_api_endpoint)
        if ibm_api_key is not None:
            pulumi.set(__self__, "ibm_api_key", ibm_api_key)
        if ibm_iam_endpoint is not None:
            pulumi.set(__self__, "ibm_iam_endpoint", ibm_iam_endpoint)
        if ibm_instance_id is not None:
            pulumi.set(__self__, "ibm_instance_id", ibm_instance_id)
        if ibm_key_ring is not None:
            pulumi.set(__self__, "ibm_key_ring", ibm_key_ring)
        if ibm_variant is not None:
            pulumi.set(__self__, "ibm_variant", ibm_variant)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uko_vault is not None:
            pulumi.set(__self__, "uko_vault", uko_vault)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if vaults is not None:
            pulumi.set(__self__, "vaults", vaults)

    @_builtins.property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The access key id used for connecting to this instance of AWS KMS.
        """
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aws_access_key_id", value)

    @_builtins.property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AWS Region.
        """
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aws_region", value)

    @_builtins.property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secret access key used for connecting to this instance of AWS KMS.
        """
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aws_secret_access_key", value)

    @_builtins.property
    @pulumi.getter(name="azureEnvironment")
    def azure_environment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Azure environment, usually 'Azure'.
        """
        return pulumi.get(self, "azure_environment")

    @azure_environment.setter
    def azure_environment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_environment", value)

    @_builtins.property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Location of the Azure Key Vault.
        """
        return pulumi.get(self, "azure_location")

    @azure_location.setter
    def azure_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_location", value)

    @_builtins.property
    @pulumi.getter(name="azureResourceGroup")
    def azure_resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group in Azure.
        """
        return pulumi.get(self, "azure_resource_group")

    @azure_resource_group.setter
    def azure_resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_resource_group", value)

    @_builtins.property
    @pulumi.getter(name="azureServiceName")
    def azure_service_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service name of the key vault instance from the Azure portal.
        """
        return pulumi.get(self, "azure_service_name")

    @azure_service_name.setter
    def azure_service_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_service_name", value)

    @_builtins.property
    @pulumi.getter(name="azureServicePrincipalClientId")
    def azure_service_principal_client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Azure service principal client ID.
        """
        return pulumi.get(self, "azure_service_principal_client_id")

    @azure_service_principal_client_id.setter
    def azure_service_principal_client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_service_principal_client_id", value)

    @_builtins.property
    @pulumi.getter(name="azureServicePrincipalPassword")
    def azure_service_principal_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Azure service principal password.
        """
        return pulumi.get(self, "azure_service_principal_password")

    @azure_service_principal_password.setter
    def azure_service_principal_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_service_principal_password", value)

    @_builtins.property
    @pulumi.getter(name="azureSubscriptionId")
    def azure_subscription_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subscription ID in Azure.
        """
        return pulumi.get(self, "azure_subscription_id")

    @azure_subscription_id.setter
    def azure_subscription_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_subscription_id", value)

    @_builtins.property
    @pulumi.getter(name="azureTenant")
    def azure_tenant(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Azure tenant that the Key Vault is associated with,.
        """
        return pulumi.get(self, "azure_tenant")

    @azure_tenant.setter
    def azure_tenant(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_tenant", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date and time when the target keystore was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the user that created the key.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the keystore.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not create a keystore, only verify if keystore created with given parameters can be communciated with successfully.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dry_run", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter(name="googleCredentials")
    def google_credentials(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The value of the JSON key represented in the Base64 format.
        """
        return pulumi.get(self, "google_credentials")

    @google_credentials.setter
    def google_credentials(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google_credentials", value)

    @_builtins.property
    @pulumi.getter(name="googleKeyRing")
    def google_key_ring(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A key ring organizes keys in a specific Google Cloud location and allows you to manage access control on groups of keys.
        """
        return pulumi.get(self, "google_key_ring")

    @google_key_ring.setter
    def google_key_ring(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google_key_ring", value)

    @_builtins.property
    @pulumi.getter(name="googleLocation")
    def google_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Location represents the geographical region where a Cloud KMS resource is stored and can be accessed. A key's location
        impacts the performance of applications using the key.
        """
        return pulumi.get(self, "google_location")

    @google_location.setter
    def google_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google_location", value)

    @_builtins.property
    @pulumi.getter(name="googlePrivateKeyId")
    def google_private_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The private key id associated with this keystore.
        """
        return pulumi.get(self, "google_private_key_id")

    @google_private_key_id.setter
    def google_private_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google_private_key_id", value)

    @_builtins.property
    @pulumi.getter(name="googleProjectId")
    def google_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The project id associated with this keystore.
        """
        return pulumi.get(self, "google_project_id")

    @google_project_id.setter
    def google_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google_project_id", value)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of groups that this keystore belongs to.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter(name="hpcsKeystoreId")
    def hpcs_keystore_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hpcs_keystore_id")

    @hpcs_keystore_id.setter
    def hpcs_keystore_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hpcs_keystore_id", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A URL that uniquely identifies your cloud resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="ibmApiEndpoint")
    def ibm_api_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API endpoint of the IBM Cloud keystore.
        """
        return pulumi.get(self, "ibm_api_endpoint")

    @ibm_api_endpoint.setter
    def ibm_api_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_api_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="ibmApiKey")
    def ibm_api_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IBM Cloud API key to be used for connecting to this IBM Cloud keystore.
        """
        return pulumi.get(self, "ibm_api_key")

    @ibm_api_key.setter
    def ibm_api_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_api_key", value)

    @_builtins.property
    @pulumi.getter(name="ibmIamEndpoint")
    def ibm_iam_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint of the IAM service for this IBM Cloud keystore.
        """
        return pulumi.get(self, "ibm_iam_endpoint")

    @ibm_iam_endpoint.setter
    def ibm_iam_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_iam_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="ibmInstanceId")
    def ibm_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The instance ID of the IBM Cloud keystore.
        """
        return pulumi.get(self, "ibm_instance_id")

    @ibm_instance_id.setter
    def ibm_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="ibmKeyRing")
    def ibm_key_ring(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The key ring of an IBM Cloud KMS Keystore.
        """
        return pulumi.get(self, "ibm_key_ring")

    @ibm_key_ring.setter
    def ibm_key_ring(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_key_ring", value)

    @_builtins.property
    @pulumi.getter(name="ibmVariant")
    def ibm_variant(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Possible IBM Cloud KMS variants.
        """
        return pulumi.get(self, "ibm_variant")

    @ibm_variant.setter
    def ibm_variant(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_variant", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Geographic location of the keystore, if available.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the target keystore. It can be changed in the future.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of keystore.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="ukoVault")
    def uko_vault(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The UUID of the Vault in which the update is to take place.
        """
        return pulumi.get(self, "uko_vault")

    @uko_vault.setter
    def uko_vault(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uko_vault", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date and time when the target keystore was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the user that last updated the key.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter
    def vaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpcsKeystoreVaultArgs']]]]:
        """
        Reference to a vault.
        """
        return pulumi.get(self, "vaults")

    @vaults.setter
    def vaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsKeystoreVaultArgs']]]]):
        pulumi.set(self, "vaults", value)


@pulumi.type_token("ibm:index/hpcsKeystore:HpcsKeystore")
class HpcsKeystore(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_access_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_region: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_secret_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_environment: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_location: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_service_principal_client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_service_principal_password: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_tenant: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dry_run: Optional[pulumi.Input[_builtins.bool]] = None,
                 google_credentials: Optional[pulumi.Input[_builtins.str]] = None,
                 google_key_ring: Optional[pulumi.Input[_builtins.str]] = None,
                 google_location: Optional[pulumi.Input[_builtins.str]] = None,
                 google_private_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 google_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 hpcs_keystore_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_api_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_iam_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_key_ring: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_variant: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
                 vaults: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsKeystoreVaultArgs', 'HpcsKeystoreVaultArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a HpcsKeystore resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] aws_access_key_id: The access key id used for connecting to this instance of AWS KMS.
        :param pulumi.Input[_builtins.str] aws_region: AWS Region.
        :param pulumi.Input[_builtins.str] aws_secret_access_key: The secret access key used for connecting to this instance of AWS KMS.
        :param pulumi.Input[_builtins.str] azure_environment: Azure environment, usually 'Azure'.
        :param pulumi.Input[_builtins.str] azure_location: Location of the Azure Key Vault.
        :param pulumi.Input[_builtins.str] azure_resource_group: Resource group in Azure.
        :param pulumi.Input[_builtins.str] azure_service_name: Service name of the key vault instance from the Azure portal.
        :param pulumi.Input[_builtins.str] azure_service_principal_client_id: Azure service principal client ID.
        :param pulumi.Input[_builtins.str] azure_service_principal_password: Azure service principal password.
        :param pulumi.Input[_builtins.str] azure_subscription_id: Subscription ID in Azure.
        :param pulumi.Input[_builtins.str] azure_tenant: Azure tenant that the Key Vault is associated with,.
        :param pulumi.Input[_builtins.str] description: Description of the keystore.
        :param pulumi.Input[_builtins.bool] dry_run: Do not create a keystore, only verify if keystore created with given parameters can be communciated with successfully.
        :param pulumi.Input[_builtins.str] google_credentials: The value of the JSON key represented in the Base64 format.
        :param pulumi.Input[_builtins.str] google_key_ring: A key ring organizes keys in a specific Google Cloud location and allows you to manage access control on groups of keys.
        :param pulumi.Input[_builtins.str] google_location: Location represents the geographical region where a Cloud KMS resource is stored and can be accessed. A key's location
               impacts the performance of applications using the key.
        :param pulumi.Input[_builtins.str] google_private_key_id: The private key id associated with this keystore.
        :param pulumi.Input[_builtins.str] google_project_id: The project id associated with this keystore.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] groups: List of groups that this keystore belongs to.
        :param pulumi.Input[_builtins.str] ibm_api_endpoint: API endpoint of the IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_api_key: The IBM Cloud API key to be used for connecting to this IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_iam_endpoint: Endpoint of the IAM service for this IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_instance_id: The instance ID of the IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_key_ring: The key ring of an IBM Cloud KMS Keystore.
        :param pulumi.Input[_builtins.str] ibm_variant: Possible IBM Cloud KMS variants.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] name: Name of the target keystore. It can be changed in the future.
        :param pulumi.Input[_builtins.str] region: The region of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] type: Type of keystore.
        :param pulumi.Input[_builtins.str] uko_vault: The UUID of the Vault in which the update is to take place.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsKeystoreVaultArgs', 'HpcsKeystoreVaultArgsDict']]]] vaults: Reference to a vault.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HpcsKeystoreArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a HpcsKeystore resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HpcsKeystoreArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HpcsKeystoreArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_access_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_region: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_secret_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_environment: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_location: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_service_principal_client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_service_principal_password: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_tenant: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dry_run: Optional[pulumi.Input[_builtins.bool]] = None,
                 google_credentials: Optional[pulumi.Input[_builtins.str]] = None,
                 google_key_ring: Optional[pulumi.Input[_builtins.str]] = None,
                 google_location: Optional[pulumi.Input[_builtins.str]] = None,
                 google_private_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 google_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 hpcs_keystore_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_api_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_iam_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_key_ring: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_variant: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
                 vaults: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsKeystoreVaultArgs', 'HpcsKeystoreVaultArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HpcsKeystoreArgs.__new__(HpcsKeystoreArgs)

            __props__.__dict__["aws_access_key_id"] = None if aws_access_key_id is None else pulumi.Output.secret(aws_access_key_id)
            __props__.__dict__["aws_region"] = aws_region
            __props__.__dict__["aws_secret_access_key"] = None if aws_secret_access_key is None else pulumi.Output.secret(aws_secret_access_key)
            __props__.__dict__["azure_environment"] = azure_environment
            __props__.__dict__["azure_location"] = azure_location
            __props__.__dict__["azure_resource_group"] = azure_resource_group
            __props__.__dict__["azure_service_name"] = azure_service_name
            __props__.__dict__["azure_service_principal_client_id"] = azure_service_principal_client_id
            __props__.__dict__["azure_service_principal_password"] = None if azure_service_principal_password is None else pulumi.Output.secret(azure_service_principal_password)
            __props__.__dict__["azure_subscription_id"] = azure_subscription_id
            __props__.__dict__["azure_tenant"] = azure_tenant
            __props__.__dict__["description"] = description
            __props__.__dict__["dry_run"] = dry_run
            __props__.__dict__["google_credentials"] = None if google_credentials is None else pulumi.Output.secret(google_credentials)
            __props__.__dict__["google_key_ring"] = google_key_ring
            __props__.__dict__["google_location"] = google_location
            __props__.__dict__["google_private_key_id"] = google_private_key_id
            __props__.__dict__["google_project_id"] = google_project_id
            __props__.__dict__["groups"] = groups
            __props__.__dict__["hpcs_keystore_id"] = hpcs_keystore_id
            __props__.__dict__["ibm_api_endpoint"] = ibm_api_endpoint
            __props__.__dict__["ibm_api_key"] = None if ibm_api_key is None else pulumi.Output.secret(ibm_api_key)
            __props__.__dict__["ibm_iam_endpoint"] = ibm_iam_endpoint
            __props__.__dict__["ibm_instance_id"] = ibm_instance_id
            __props__.__dict__["ibm_key_ring"] = ibm_key_ring
            __props__.__dict__["ibm_variant"] = ibm_variant
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if uko_vault is None and not opts.urn:
                raise TypeError("Missing required property 'uko_vault'")
            __props__.__dict__["uko_vault"] = uko_vault
            if vaults is None and not opts.urn:
                raise TypeError("Missing required property 'vaults'")
            __props__.__dict__["vaults"] = vaults
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["location"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["awsAccessKeyId", "awsSecretAccessKey", "azureServicePrincipalPassword", "googleCredentials", "ibmApiKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(HpcsKeystore, __self__).__init__(
            'ibm:index/hpcsKeystore:HpcsKeystore',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aws_access_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            aws_region: Optional[pulumi.Input[_builtins.str]] = None,
            aws_secret_access_key: Optional[pulumi.Input[_builtins.str]] = None,
            azure_environment: Optional[pulumi.Input[_builtins.str]] = None,
            azure_location: Optional[pulumi.Input[_builtins.str]] = None,
            azure_resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            azure_service_name: Optional[pulumi.Input[_builtins.str]] = None,
            azure_service_principal_client_id: Optional[pulumi.Input[_builtins.str]] = None,
            azure_service_principal_password: Optional[pulumi.Input[_builtins.str]] = None,
            azure_subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
            azure_tenant: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dry_run: Optional[pulumi.Input[_builtins.bool]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            google_credentials: Optional[pulumi.Input[_builtins.str]] = None,
            google_key_ring: Optional[pulumi.Input[_builtins.str]] = None,
            google_location: Optional[pulumi.Input[_builtins.str]] = None,
            google_private_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            google_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            hpcs_keystore_id: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            ibm_api_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            ibm_api_key: Optional[pulumi.Input[_builtins.str]] = None,
            ibm_iam_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            ibm_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            ibm_key_ring: Optional[pulumi.Input[_builtins.str]] = None,
            ibm_variant: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            vaults: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsKeystoreVaultArgs', 'HpcsKeystoreVaultArgsDict']]]]] = None) -> 'HpcsKeystore':
        """
        Get an existing HpcsKeystore resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] aws_access_key_id: The access key id used for connecting to this instance of AWS KMS.
        :param pulumi.Input[_builtins.str] aws_region: AWS Region.
        :param pulumi.Input[_builtins.str] aws_secret_access_key: The secret access key used for connecting to this instance of AWS KMS.
        :param pulumi.Input[_builtins.str] azure_environment: Azure environment, usually 'Azure'.
        :param pulumi.Input[_builtins.str] azure_location: Location of the Azure Key Vault.
        :param pulumi.Input[_builtins.str] azure_resource_group: Resource group in Azure.
        :param pulumi.Input[_builtins.str] azure_service_name: Service name of the key vault instance from the Azure portal.
        :param pulumi.Input[_builtins.str] azure_service_principal_client_id: Azure service principal client ID.
        :param pulumi.Input[_builtins.str] azure_service_principal_password: Azure service principal password.
        :param pulumi.Input[_builtins.str] azure_subscription_id: Subscription ID in Azure.
        :param pulumi.Input[_builtins.str] azure_tenant: Azure tenant that the Key Vault is associated with,.
        :param pulumi.Input[_builtins.str] created_at: Date and time when the target keystore was created.
        :param pulumi.Input[_builtins.str] created_by: ID of the user that created the key.
        :param pulumi.Input[_builtins.str] description: Description of the keystore.
        :param pulumi.Input[_builtins.bool] dry_run: Do not create a keystore, only verify if keystore created with given parameters can be communciated with successfully.
        :param pulumi.Input[_builtins.str] google_credentials: The value of the JSON key represented in the Base64 format.
        :param pulumi.Input[_builtins.str] google_key_ring: A key ring organizes keys in a specific Google Cloud location and allows you to manage access control on groups of keys.
        :param pulumi.Input[_builtins.str] google_location: Location represents the geographical region where a Cloud KMS resource is stored and can be accessed. A key's location
               impacts the performance of applications using the key.
        :param pulumi.Input[_builtins.str] google_private_key_id: The private key id associated with this keystore.
        :param pulumi.Input[_builtins.str] google_project_id: The project id associated with this keystore.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] groups: List of groups that this keystore belongs to.
        :param pulumi.Input[_builtins.str] href: A URL that uniquely identifies your cloud resource.
        :param pulumi.Input[_builtins.str] ibm_api_endpoint: API endpoint of the IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_api_key: The IBM Cloud API key to be used for connecting to this IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_iam_endpoint: Endpoint of the IAM service for this IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_instance_id: The instance ID of the IBM Cloud keystore.
        :param pulumi.Input[_builtins.str] ibm_key_ring: The key ring of an IBM Cloud KMS Keystore.
        :param pulumi.Input[_builtins.str] ibm_variant: Possible IBM Cloud KMS variants.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] location: Geographic location of the keystore, if available.
        :param pulumi.Input[_builtins.str] name: Name of the target keystore. It can be changed in the future.
        :param pulumi.Input[_builtins.str] region: The region of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] type: Type of keystore.
        :param pulumi.Input[_builtins.str] uko_vault: The UUID of the Vault in which the update is to take place.
        :param pulumi.Input[_builtins.str] updated_at: Date and time when the target keystore was last updated.
        :param pulumi.Input[_builtins.str] updated_by: ID of the user that last updated the key.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsKeystoreVaultArgs', 'HpcsKeystoreVaultArgsDict']]]] vaults: Reference to a vault.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HpcsKeystoreState.__new__(_HpcsKeystoreState)

        __props__.__dict__["aws_access_key_id"] = aws_access_key_id
        __props__.__dict__["aws_region"] = aws_region
        __props__.__dict__["aws_secret_access_key"] = aws_secret_access_key
        __props__.__dict__["azure_environment"] = azure_environment
        __props__.__dict__["azure_location"] = azure_location
        __props__.__dict__["azure_resource_group"] = azure_resource_group
        __props__.__dict__["azure_service_name"] = azure_service_name
        __props__.__dict__["azure_service_principal_client_id"] = azure_service_principal_client_id
        __props__.__dict__["azure_service_principal_password"] = azure_service_principal_password
        __props__.__dict__["azure_subscription_id"] = azure_subscription_id
        __props__.__dict__["azure_tenant"] = azure_tenant
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["dry_run"] = dry_run
        __props__.__dict__["etag"] = etag
        __props__.__dict__["google_credentials"] = google_credentials
        __props__.__dict__["google_key_ring"] = google_key_ring
        __props__.__dict__["google_location"] = google_location
        __props__.__dict__["google_private_key_id"] = google_private_key_id
        __props__.__dict__["google_project_id"] = google_project_id
        __props__.__dict__["groups"] = groups
        __props__.__dict__["hpcs_keystore_id"] = hpcs_keystore_id
        __props__.__dict__["href"] = href
        __props__.__dict__["ibm_api_endpoint"] = ibm_api_endpoint
        __props__.__dict__["ibm_api_key"] = ibm_api_key
        __props__.__dict__["ibm_iam_endpoint"] = ibm_iam_endpoint
        __props__.__dict__["ibm_instance_id"] = ibm_instance_id
        __props__.__dict__["ibm_key_ring"] = ibm_key_ring
        __props__.__dict__["ibm_variant"] = ibm_variant
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["uko_vault"] = uko_vault
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["vaults"] = vaults
        return HpcsKeystore(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The access key id used for connecting to this instance of AWS KMS.
        """
        return pulumi.get(self, "aws_access_key_id")

    @_builtins.property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        AWS Region.
        """
        return pulumi.get(self, "aws_region")

    @_builtins.property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The secret access key used for connecting to this instance of AWS KMS.
        """
        return pulumi.get(self, "aws_secret_access_key")

    @_builtins.property
    @pulumi.getter(name="azureEnvironment")
    def azure_environment(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Azure environment, usually 'Azure'.
        """
        return pulumi.get(self, "azure_environment")

    @_builtins.property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Location of the Azure Key Vault.
        """
        return pulumi.get(self, "azure_location")

    @_builtins.property
    @pulumi.getter(name="azureResourceGroup")
    def azure_resource_group(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Resource group in Azure.
        """
        return pulumi.get(self, "azure_resource_group")

    @_builtins.property
    @pulumi.getter(name="azureServiceName")
    def azure_service_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Service name of the key vault instance from the Azure portal.
        """
        return pulumi.get(self, "azure_service_name")

    @_builtins.property
    @pulumi.getter(name="azureServicePrincipalClientId")
    def azure_service_principal_client_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Azure service principal client ID.
        """
        return pulumi.get(self, "azure_service_principal_client_id")

    @_builtins.property
    @pulumi.getter(name="azureServicePrincipalPassword")
    def azure_service_principal_password(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Azure service principal password.
        """
        return pulumi.get(self, "azure_service_principal_password")

    @_builtins.property
    @pulumi.getter(name="azureSubscriptionId")
    def azure_subscription_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Subscription ID in Azure.
        """
        return pulumi.get(self, "azure_subscription_id")

    @_builtins.property
    @pulumi.getter(name="azureTenant")
    def azure_tenant(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Azure tenant that the Key Vault is associated with,.
        """
        return pulumi.get(self, "azure_tenant")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Date and time when the target keystore was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the user that created the key.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the keystore.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Do not create a keystore, only verify if keystore created with given parameters can be communciated with successfully.
        """
        return pulumi.get(self, "dry_run")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter(name="googleCredentials")
    def google_credentials(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The value of the JSON key represented in the Base64 format.
        """
        return pulumi.get(self, "google_credentials")

    @_builtins.property
    @pulumi.getter(name="googleKeyRing")
    def google_key_ring(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A key ring organizes keys in a specific Google Cloud location and allows you to manage access control on groups of keys.
        """
        return pulumi.get(self, "google_key_ring")

    @_builtins.property
    @pulumi.getter(name="googleLocation")
    def google_location(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Location represents the geographical region where a Cloud KMS resource is stored and can be accessed. A key's location
        impacts the performance of applications using the key.
        """
        return pulumi.get(self, "google_location")

    @_builtins.property
    @pulumi.getter(name="googlePrivateKeyId")
    def google_private_key_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The private key id associated with this keystore.
        """
        return pulumi.get(self, "google_private_key_id")

    @_builtins.property
    @pulumi.getter(name="googleProjectId")
    def google_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The project id associated with this keystore.
        """
        return pulumi.get(self, "google_project_id")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of groups that this keystore belongs to.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter(name="hpcsKeystoreId")
    def hpcs_keystore_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "hpcs_keystore_id")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        A URL that uniquely identifies your cloud resource.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="ibmApiEndpoint")
    def ibm_api_endpoint(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        API endpoint of the IBM Cloud keystore.
        """
        return pulumi.get(self, "ibm_api_endpoint")

    @_builtins.property
    @pulumi.getter(name="ibmApiKey")
    def ibm_api_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The IBM Cloud API key to be used for connecting to this IBM Cloud keystore.
        """
        return pulumi.get(self, "ibm_api_key")

    @_builtins.property
    @pulumi.getter(name="ibmIamEndpoint")
    def ibm_iam_endpoint(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Endpoint of the IAM service for this IBM Cloud keystore.
        """
        return pulumi.get(self, "ibm_iam_endpoint")

    @_builtins.property
    @pulumi.getter(name="ibmInstanceId")
    def ibm_instance_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The instance ID of the IBM Cloud keystore.
        """
        return pulumi.get(self, "ibm_instance_id")

    @_builtins.property
    @pulumi.getter(name="ibmKeyRing")
    def ibm_key_ring(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The key ring of an IBM Cloud KMS Keystore.
        """
        return pulumi.get(self, "ibm_key_ring")

    @_builtins.property
    @pulumi.getter(name="ibmVariant")
    def ibm_variant(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Possible IBM Cloud KMS variants.
        """
        return pulumi.get(self, "ibm_variant")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        Geographic location of the keystore, if available.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the target keystore. It can be changed in the future.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of keystore.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="ukoVault")
    def uko_vault(self) -> pulumi.Output[_builtins.str]:
        """
        The UUID of the Vault in which the update is to take place.
        """
        return pulumi.get(self, "uko_vault")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Date and time when the target keystore was last updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the user that last updated the key.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter
    def vaults(self) -> pulumi.Output[Sequence['outputs.HpcsKeystoreVault']]:
        """
        Reference to a vault.
        """
        return pulumi.get(self, "vaults")

