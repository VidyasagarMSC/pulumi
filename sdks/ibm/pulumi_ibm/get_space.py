# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSpaceResult',
    'AwaitableGetSpaceResult',
    'get_space',
    'get_space_output',
]

@pulumi.output_type
class GetSpaceResult:
    """
    A collection of values returned by getSpace.
    """
    def __init__(__self__, auditors=None, developers=None, id=None, managers=None, name=None, org=None, space=None):
        if auditors and not isinstance(auditors, list):
            raise TypeError("Expected argument 'auditors' to be a list")
        pulumi.set(__self__, "auditors", auditors)
        if developers and not isinstance(developers, list):
            raise TypeError("Expected argument 'developers' to be a list")
        pulumi.set(__self__, "developers", developers)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if managers and not isinstance(managers, list):
            raise TypeError("Expected argument 'managers' to be a list")
        pulumi.set(__self__, "managers", managers)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org and not isinstance(org, str):
            raise TypeError("Expected argument 'org' to be a str")
        pulumi.set(__self__, "org", org)
        if space and not isinstance(space, str):
            raise TypeError("Expected argument 'space' to be a str")
        pulumi.set(__self__, "space", space)

    @_builtins.property
    @pulumi.getter
    def auditors(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "auditors")

    @_builtins.property
    @pulumi.getter
    def developers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "developers")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def managers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "managers")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def org(self) -> _builtins.str:
        return pulumi.get(self, "org")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def space(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "space")


class AwaitableGetSpaceResult(GetSpaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSpaceResult(
            auditors=self.auditors,
            developers=self.developers,
            id=self.id,
            managers=self.managers,
            name=self.name,
            org=self.org,
            space=self.space)


def get_space(id: Optional[_builtins.str] = None,
              name: Optional[_builtins.str] = None,
              org: Optional[_builtins.str] = None,
              space: Optional[_builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSpaceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['org'] = org
    __args__['space'] = space
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSpace:getSpace', __args__, opts=opts, typ=GetSpaceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSpaceResult(
        auditors=pulumi.get(__ret__, 'auditors'),
        developers=pulumi.get(__ret__, 'developers'),
        id=pulumi.get(__ret__, 'id'),
        managers=pulumi.get(__ret__, 'managers'),
        name=pulumi.get(__ret__, 'name'),
        org=pulumi.get(__ret__, 'org'),
        space=pulumi.get(__ret__, 'space'))
def get_space_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     org: Optional[pulumi.Input[_builtins.str]] = None,
                     space: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSpaceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['org'] = org
    __args__['space'] = space
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSpace:getSpace', __args__, opts=opts, typ=GetSpaceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSpaceResult(
        auditors=pulumi.get(__response__, 'auditors'),
        developers=pulumi.get(__response__, 'developers'),
        id=pulumi.get(__response__, 'id'),
        managers=pulumi.get(__response__, 'managers'),
        name=pulumi.get(__response__, 'name'),
        org=pulumi.get(__response__, 'org'),
        space=pulumi.get(__response__, 'space')))
