# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['EnSmtpUserArgs', 'EnSmtpUser']

@pulumi.input_type
class EnSmtpUserArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 en_smtp_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 smtp_config_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EnSmtpUser resource.
        :param pulumi.Input[_builtins.str] instance_id: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] description: SMTP User description.
        :param pulumi.Input[_builtins.str] smtp_config_id: SMTP confg Id.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if en_smtp_user_id is not None:
            pulumi.set(__self__, "en_smtp_user_id", en_smtp_user_id)
        if smtp_config_id is not None:
            pulumi.set(__self__, "smtp_config_id", smtp_config_id)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SMTP User description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enSmtpUserId")
    def en_smtp_user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "en_smtp_user_id")

    @en_smtp_user_id.setter
    def en_smtp_user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "en_smtp_user_id", value)

    @_builtins.property
    @pulumi.getter(name="smtpConfigId")
    def smtp_config_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SMTP confg Id.
        """
        return pulumi.get(self, "smtp_config_id")

    @smtp_config_id.setter
    def smtp_config_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "smtp_config_id", value)


@pulumi.input_type
class _EnSmtpUserState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 en_smtp_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 smtp_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EnSmtpUser resources.
        :param pulumi.Input[_builtins.str] created_at: Updated time.
        :param pulumi.Input[_builtins.str] description: SMTP User description.
        :param pulumi.Input[_builtins.str] domain: Domain Name.
        :param pulumi.Input[_builtins.str] instance_id: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] password: SMTP user password.
        :param pulumi.Input[_builtins.str] smtp_config_id: SMTP confg Id.
        :param pulumi.Input[_builtins.str] updated_at: Updated time.
        :param pulumi.Input[_builtins.str] user_id: Id.
        :param pulumi.Input[_builtins.str] username: SMTP user name.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if en_smtp_user_id is not None:
            pulumi.set(__self__, "en_smtp_user_id", en_smtp_user_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if smtp_config_id is not None:
            pulumi.set(__self__, "smtp_config_id", smtp_config_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Updated time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SMTP User description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Domain Name.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="enSmtpUserId")
    def en_smtp_user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "en_smtp_user_id")

    @en_smtp_user_id.setter
    def en_smtp_user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "en_smtp_user_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SMTP user password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="smtpConfigId")
    def smtp_config_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SMTP confg Id.
        """
        return pulumi.get(self, "smtp_config_id")

    @smtp_config_id.setter
    def smtp_config_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "smtp_config_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Updated time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Id.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SMTP user name.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


@pulumi.type_token("ibm:index/enSmtpUser:EnSmtpUser")
class EnSmtpUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 en_smtp_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 smtp_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a EnSmtpUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: SMTP User description.
        :param pulumi.Input[_builtins.str] instance_id: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] smtp_config_id: SMTP confg Id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnSmtpUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EnSmtpUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EnSmtpUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnSmtpUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 en_smtp_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 smtp_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnSmtpUserArgs.__new__(EnSmtpUserArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["en_smtp_user_id"] = en_smtp_user_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["smtp_config_id"] = smtp_config_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["domain"] = None
            __props__.__dict__["password"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["user_id"] = None
            __props__.__dict__["username"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(EnSmtpUser, __self__).__init__(
            'ibm:index/enSmtpUser:EnSmtpUser',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            domain: Optional[pulumi.Input[_builtins.str]] = None,
            en_smtp_user_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            smtp_config_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            user_id: Optional[pulumi.Input[_builtins.str]] = None,
            username: Optional[pulumi.Input[_builtins.str]] = None) -> 'EnSmtpUser':
        """
        Get an existing EnSmtpUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Updated time.
        :param pulumi.Input[_builtins.str] description: SMTP User description.
        :param pulumi.Input[_builtins.str] domain: Domain Name.
        :param pulumi.Input[_builtins.str] instance_id: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] password: SMTP user password.
        :param pulumi.Input[_builtins.str] smtp_config_id: SMTP confg Id.
        :param pulumi.Input[_builtins.str] updated_at: Updated time.
        :param pulumi.Input[_builtins.str] user_id: Id.
        :param pulumi.Input[_builtins.str] username: SMTP user name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnSmtpUserState.__new__(_EnSmtpUserState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["domain"] = domain
        __props__.__dict__["en_smtp_user_id"] = en_smtp_user_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["password"] = password
        __props__.__dict__["smtp_config_id"] = smtp_config_id
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["username"] = username
        return EnSmtpUser(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Updated time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        SMTP User description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Output[_builtins.str]:
        """
        Domain Name.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="enSmtpUserId")
    def en_smtp_user_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "en_smtp_user_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[_builtins.str]:
        """
        SMTP user password.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="smtpConfigId")
    def smtp_config_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        SMTP confg Id.
        """
        return pulumi.get(self, "smtp_config_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Updated time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[_builtins.str]:
        """
        Id.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Output[_builtins.str]:
        """
        SMTP user name.
        """
        return pulumi.get(self, "username")

