# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccReportControlsResult',
    'AwaitableGetSccReportControlsResult',
    'get_scc_report_controls',
    'get_scc_report_controls_output',
]

@pulumi.output_type
class GetSccReportControlsResult:
    """
    A collection of values returned by getSccReportControls.
    """
    def __init__(__self__, compliant_count=None, control_category=None, control_description=None, control_id=None, control_name=None, controls=None, home_account_id=None, id=None, instance_id=None, not_compliant_count=None, report_id=None, sort=None, status=None, total_count=None, unable_to_perform_count=None, user_evaluation_required_count=None):
        if compliant_count and not isinstance(compliant_count, float):
            raise TypeError("Expected argument 'compliant_count' to be a float")
        pulumi.set(__self__, "compliant_count", compliant_count)
        if control_category and not isinstance(control_category, str):
            raise TypeError("Expected argument 'control_category' to be a str")
        pulumi.set(__self__, "control_category", control_category)
        if control_description and not isinstance(control_description, str):
            raise TypeError("Expected argument 'control_description' to be a str")
        pulumi.set(__self__, "control_description", control_description)
        if control_id and not isinstance(control_id, str):
            raise TypeError("Expected argument 'control_id' to be a str")
        pulumi.set(__self__, "control_id", control_id)
        if control_name and not isinstance(control_name, str):
            raise TypeError("Expected argument 'control_name' to be a str")
        pulumi.set(__self__, "control_name", control_name)
        if controls and not isinstance(controls, list):
            raise TypeError("Expected argument 'controls' to be a list")
        pulumi.set(__self__, "controls", controls)
        if home_account_id and not isinstance(home_account_id, str):
            raise TypeError("Expected argument 'home_account_id' to be a str")
        pulumi.set(__self__, "home_account_id", home_account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if not_compliant_count and not isinstance(not_compliant_count, float):
            raise TypeError("Expected argument 'not_compliant_count' to be a float")
        pulumi.set(__self__, "not_compliant_count", not_compliant_count)
        if report_id and not isinstance(report_id, str):
            raise TypeError("Expected argument 'report_id' to be a str")
        pulumi.set(__self__, "report_id", report_id)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        pulumi.set(__self__, "total_count", total_count)
        if unable_to_perform_count and not isinstance(unable_to_perform_count, float):
            raise TypeError("Expected argument 'unable_to_perform_count' to be a float")
        pulumi.set(__self__, "unable_to_perform_count", unable_to_perform_count)
        if user_evaluation_required_count and not isinstance(user_evaluation_required_count, float):
            raise TypeError("Expected argument 'user_evaluation_required_count' to be a float")
        pulumi.set(__self__, "user_evaluation_required_count", user_evaluation_required_count)

    @_builtins.property
    @pulumi.getter(name="compliantCount")
    def compliant_count(self) -> _builtins.float:
        return pulumi.get(self, "compliant_count")

    @_builtins.property
    @pulumi.getter(name="controlCategory")
    def control_category(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "control_category")

    @_builtins.property
    @pulumi.getter(name="controlDescription")
    def control_description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "control_description")

    @_builtins.property
    @pulumi.getter(name="controlId")
    def control_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "control_id")

    @_builtins.property
    @pulumi.getter(name="controlName")
    def control_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "control_name")

    @_builtins.property
    @pulumi.getter
    def controls(self) -> Sequence['outputs.GetSccReportControlsControlResult']:
        return pulumi.get(self, "controls")

    @_builtins.property
    @pulumi.getter(name="homeAccountId")
    def home_account_id(self) -> _builtins.str:
        return pulumi.get(self, "home_account_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="notCompliantCount")
    def not_compliant_count(self) -> _builtins.float:
        return pulumi.get(self, "not_compliant_count")

    @_builtins.property
    @pulumi.getter(name="reportId")
    def report_id(self) -> _builtins.str:
        return pulumi.get(self, "report_id")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.float:
        return pulumi.get(self, "total_count")

    @_builtins.property
    @pulumi.getter(name="unableToPerformCount")
    def unable_to_perform_count(self) -> _builtins.float:
        return pulumi.get(self, "unable_to_perform_count")

    @_builtins.property
    @pulumi.getter(name="userEvaluationRequiredCount")
    def user_evaluation_required_count(self) -> _builtins.float:
        return pulumi.get(self, "user_evaluation_required_count")


class AwaitableGetSccReportControlsResult(GetSccReportControlsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccReportControlsResult(
            compliant_count=self.compliant_count,
            control_category=self.control_category,
            control_description=self.control_description,
            control_id=self.control_id,
            control_name=self.control_name,
            controls=self.controls,
            home_account_id=self.home_account_id,
            id=self.id,
            instance_id=self.instance_id,
            not_compliant_count=self.not_compliant_count,
            report_id=self.report_id,
            sort=self.sort,
            status=self.status,
            total_count=self.total_count,
            unable_to_perform_count=self.unable_to_perform_count,
            user_evaluation_required_count=self.user_evaluation_required_count)


def get_scc_report_controls(control_category: Optional[_builtins.str] = None,
                            control_description: Optional[_builtins.str] = None,
                            control_id: Optional[_builtins.str] = None,
                            control_name: Optional[_builtins.str] = None,
                            id: Optional[_builtins.str] = None,
                            instance_id: Optional[_builtins.str] = None,
                            report_id: Optional[_builtins.str] = None,
                            sort: Optional[_builtins.str] = None,
                            status: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccReportControlsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['controlCategory'] = control_category
    __args__['controlDescription'] = control_description
    __args__['controlId'] = control_id
    __args__['controlName'] = control_name
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    __args__['sort'] = sort
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccReportControls:getSccReportControls', __args__, opts=opts, typ=GetSccReportControlsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccReportControlsResult(
        compliant_count=pulumi.get(__ret__, 'compliant_count'),
        control_category=pulumi.get(__ret__, 'control_category'),
        control_description=pulumi.get(__ret__, 'control_description'),
        control_id=pulumi.get(__ret__, 'control_id'),
        control_name=pulumi.get(__ret__, 'control_name'),
        controls=pulumi.get(__ret__, 'controls'),
        home_account_id=pulumi.get(__ret__, 'home_account_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        not_compliant_count=pulumi.get(__ret__, 'not_compliant_count'),
        report_id=pulumi.get(__ret__, 'report_id'),
        sort=pulumi.get(__ret__, 'sort'),
        status=pulumi.get(__ret__, 'status'),
        total_count=pulumi.get(__ret__, 'total_count'),
        unable_to_perform_count=pulumi.get(__ret__, 'unable_to_perform_count'),
        user_evaluation_required_count=pulumi.get(__ret__, 'user_evaluation_required_count'))
def get_scc_report_controls_output(control_category: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   control_description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   control_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   control_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   report_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccReportControlsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['controlCategory'] = control_category
    __args__['controlDescription'] = control_description
    __args__['controlId'] = control_id
    __args__['controlName'] = control_name
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    __args__['sort'] = sort
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccReportControls:getSccReportControls', __args__, opts=opts, typ=GetSccReportControlsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccReportControlsResult(
        compliant_count=pulumi.get(__response__, 'compliant_count'),
        control_category=pulumi.get(__response__, 'control_category'),
        control_description=pulumi.get(__response__, 'control_description'),
        control_id=pulumi.get(__response__, 'control_id'),
        control_name=pulumi.get(__response__, 'control_name'),
        controls=pulumi.get(__response__, 'controls'),
        home_account_id=pulumi.get(__response__, 'home_account_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        not_compliant_count=pulumi.get(__response__, 'not_compliant_count'),
        report_id=pulumi.get(__response__, 'report_id'),
        sort=pulumi.get(__response__, 'sort'),
        status=pulumi.get(__response__, 'status'),
        total_count=pulumi.get(__response__, 'total_count'),
        unable_to_perform_count=pulumi.get(__response__, 'unable_to_perform_count'),
        user_evaluation_required_count=pulumi.get(__response__, 'user_evaluation_required_count')))
