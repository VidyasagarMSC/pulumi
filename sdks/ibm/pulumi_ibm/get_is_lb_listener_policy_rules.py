# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsLbListenerPolicyRulesResult',
    'AwaitableGetIsLbListenerPolicyRulesResult',
    'get_is_lb_listener_policy_rules',
    'get_is_lb_listener_policy_rules_output',
]

@pulumi.output_type
class GetIsLbListenerPolicyRulesResult:
    """
    A collection of values returned by getIsLbListenerPolicyRules.
    """
    def __init__(__self__, id=None, lb=None, listener=None, policy=None, rules=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lb and not isinstance(lb, str):
            raise TypeError("Expected argument 'lb' to be a str")
        pulumi.set(__self__, "lb", lb)
        if listener and not isinstance(listener, str):
            raise TypeError("Expected argument 'listener' to be a str")
        pulumi.set(__self__, "listener", listener)
        if policy and not isinstance(policy, str):
            raise TypeError("Expected argument 'policy' to be a str")
        pulumi.set(__self__, "policy", policy)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lb(self) -> _builtins.str:
        return pulumi.get(self, "lb")

    @_builtins.property
    @pulumi.getter
    def listener(self) -> _builtins.str:
        return pulumi.get(self, "listener")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> _builtins.str:
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetIsLbListenerPolicyRulesRuleResult']:
        return pulumi.get(self, "rules")


class AwaitableGetIsLbListenerPolicyRulesResult(GetIsLbListenerPolicyRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsLbListenerPolicyRulesResult(
            id=self.id,
            lb=self.lb,
            listener=self.listener,
            policy=self.policy,
            rules=self.rules)


def get_is_lb_listener_policy_rules(id: Optional[_builtins.str] = None,
                                    lb: Optional[_builtins.str] = None,
                                    listener: Optional[_builtins.str] = None,
                                    policy: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsLbListenerPolicyRulesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    __args__['listener'] = listener
    __args__['policy'] = policy
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsLbListenerPolicyRules:getIsLbListenerPolicyRules', __args__, opts=opts, typ=GetIsLbListenerPolicyRulesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsLbListenerPolicyRulesResult(
        id=pulumi.get(__ret__, 'id'),
        lb=pulumi.get(__ret__, 'lb'),
        listener=pulumi.get(__ret__, 'listener'),
        policy=pulumi.get(__ret__, 'policy'),
        rules=pulumi.get(__ret__, 'rules'))
def get_is_lb_listener_policy_rules_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           lb: Optional[pulumi.Input[_builtins.str]] = None,
                                           listener: Optional[pulumi.Input[_builtins.str]] = None,
                                           policy: Optional[pulumi.Input[_builtins.str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsLbListenerPolicyRulesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    __args__['listener'] = listener
    __args__['policy'] = policy
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsLbListenerPolicyRules:getIsLbListenerPolicyRules', __args__, opts=opts, typ=GetIsLbListenerPolicyRulesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsLbListenerPolicyRulesResult(
        id=pulumi.get(__response__, 'id'),
        lb=pulumi.get(__response__, 'lb'),
        listener=pulumi.get(__response__, 'listener'),
        policy=pulumi.get(__response__, 'policy'),
        rules=pulumi.get(__response__, 'rules')))
