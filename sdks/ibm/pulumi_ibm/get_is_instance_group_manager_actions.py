# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsInstanceGroupManagerActionsResult',
    'AwaitableGetIsInstanceGroupManagerActionsResult',
    'get_is_instance_group_manager_actions',
    'get_is_instance_group_manager_actions_output',
]

@pulumi.output_type
class GetIsInstanceGroupManagerActionsResult:
    """
    A collection of values returned by getIsInstanceGroupManagerActions.
    """
    def __init__(__self__, id=None, instance_group=None, instance_group_manager=None, instance_group_manager_actions=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_group and not isinstance(instance_group, str):
            raise TypeError("Expected argument 'instance_group' to be a str")
        pulumi.set(__self__, "instance_group", instance_group)
        if instance_group_manager and not isinstance(instance_group_manager, str):
            raise TypeError("Expected argument 'instance_group_manager' to be a str")
        pulumi.set(__self__, "instance_group_manager", instance_group_manager)
        if instance_group_manager_actions and not isinstance(instance_group_manager_actions, list):
            raise TypeError("Expected argument 'instance_group_manager_actions' to be a list")
        pulumi.set(__self__, "instance_group_manager_actions", instance_group_manager_actions)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> _builtins.str:
        return pulumi.get(self, "instance_group")

    @_builtins.property
    @pulumi.getter(name="instanceGroupManager")
    def instance_group_manager(self) -> _builtins.str:
        return pulumi.get(self, "instance_group_manager")

    @_builtins.property
    @pulumi.getter(name="instanceGroupManagerActions")
    def instance_group_manager_actions(self) -> Sequence['outputs.GetIsInstanceGroupManagerActionsInstanceGroupManagerActionResult']:
        return pulumi.get(self, "instance_group_manager_actions")


class AwaitableGetIsInstanceGroupManagerActionsResult(GetIsInstanceGroupManagerActionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceGroupManagerActionsResult(
            id=self.id,
            instance_group=self.instance_group,
            instance_group_manager=self.instance_group_manager,
            instance_group_manager_actions=self.instance_group_manager_actions)


def get_is_instance_group_manager_actions(id: Optional[_builtins.str] = None,
                                          instance_group: Optional[_builtins.str] = None,
                                          instance_group_manager: Optional[_builtins.str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceGroupManagerActionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGroup'] = instance_group
    __args__['instanceGroupManager'] = instance_group_manager
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceGroupManagerActions:getIsInstanceGroupManagerActions', __args__, opts=opts, typ=GetIsInstanceGroupManagerActionsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceGroupManagerActionsResult(
        id=pulumi.get(__ret__, 'id'),
        instance_group=pulumi.get(__ret__, 'instance_group'),
        instance_group_manager=pulumi.get(__ret__, 'instance_group_manager'),
        instance_group_manager_actions=pulumi.get(__ret__, 'instance_group_manager_actions'))
def get_is_instance_group_manager_actions_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                                                 instance_group_manager: Optional[pulumi.Input[_builtins.str]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceGroupManagerActionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGroup'] = instance_group
    __args__['instanceGroupManager'] = instance_group_manager
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceGroupManagerActions:getIsInstanceGroupManagerActions', __args__, opts=opts, typ=GetIsInstanceGroupManagerActionsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceGroupManagerActionsResult(
        id=pulumi.get(__response__, 'id'),
        instance_group=pulumi.get(__response__, 'instance_group'),
        instance_group_manager=pulumi.get(__response__, 'instance_group_manager'),
        instance_group_manager_actions=pulumi.get(__response__, 'instance_group_manager_actions')))
