# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsVpnGatewayConnectionArgs', 'IsVpnGatewayConnection']

@pulumi.input_type
class IsVpnGatewayConnectionArgs:
    def __init__(__self__, *,
                 preshared_key: pulumi.Input[_builtins.str],
                 vpn_gateway: pulumi.Input[_builtins.str],
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 distribute_traffic: Optional[pulumi.Input[_builtins.bool]] = None,
                 establish_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.float]] = None,
                 ipsec_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpn_gateway_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local: Optional[pulumi.Input['IsVpnGatewayConnectionLocalArgs']] = None,
                 local_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer: Optional[pulumi.Input['IsVpnGatewayConnectionPeerArgs']] = None,
                 peer_address: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 timeouts: Optional[pulumi.Input['IsVpnGatewayConnectionTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsVpnGatewayConnection resource.
        :param pulumi.Input[_builtins.str] preshared_key: vpn gateway
        :param pulumi.Input[_builtins.str] vpn_gateway: VPN Gateway info
        :param pulumi.Input[_builtins.str] action: Action detection for dead peer detection action
        :param pulumi.Input[_builtins.bool] admin_state_up: VPN gateway connection admin state
        :param pulumi.Input[_builtins.bool] distribute_traffic: Indicates whether the traffic is distributed between the `up` tunnels of the VPN gateway connection when the VPC route's
               next hop is a VPN connection. If `false`, the traffic is only routed through the `up` tunnel with the lower `public_ip`
               address.
        :param pulumi.Input[_builtins.str] establish_mode: The establish mode of the VPN gateway connection:- `bidirectional`: Either side of the VPN gateway can initiate IKE
               protocol negotiations or rekeying processes.- `peer_only`: Only the peer can initiate IKE protocol negotiations for this
               VPN gateway connection. Additionally, the peer is responsible for initiating the rekeying process after the connection
               is established. If rekeying does not occur, the VPN gateway connection will be brought down after its lifetime expires.
        :param pulumi.Input[_builtins.str] ike_policy: VPN gateway connection IKE Policy
        :param pulumi.Input[_builtins.float] interval: Interval for dead peer detection interval
        :param pulumi.Input[_builtins.str] ipsec_policy: IP security policy for vpn gateway connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] local_cidrs: VPN gateway connection local CIDRs
        :param pulumi.Input[_builtins.str] name: VPN Gateway connection name
        :param pulumi.Input[_builtins.str] peer_address: VPN gateway connection peer address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] peer_cidrs: VPN gateway connection peer CIDRs
        :param pulumi.Input[_builtins.float] timeout: Timeout for dead peer detection
        """
        pulumi.set(__self__, "preshared_key", preshared_key)
        pulumi.set(__self__, "vpn_gateway", vpn_gateway)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if distribute_traffic is not None:
            pulumi.set(__self__, "distribute_traffic", distribute_traffic)
        if establish_mode is not None:
            pulumi.set(__self__, "establish_mode", establish_mode)
        if ike_policy is not None:
            pulumi.set(__self__, "ike_policy", ike_policy)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if ipsec_policy is not None:
            pulumi.set(__self__, "ipsec_policy", ipsec_policy)
        if is_vpn_gateway_connection_id is not None:
            pulumi.set(__self__, "is_vpn_gateway_connection_id", is_vpn_gateway_connection_id)
        if local is not None:
            pulumi.set(__self__, "local", local)
        if local_cidrs is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""local_cidrs is deprecated: Deprecated""")
        if local_cidrs is not None:
            pulumi.set(__self__, "local_cidrs", local_cidrs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if peer_address is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""peer_address is deprecated: Deprecated""")
        if peer_address is not None:
            pulumi.set(__self__, "peer_address", peer_address)
        if peer_cidrs is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""peer_cidrs is deprecated: Deprecated""")
        if peer_cidrs is not None:
            pulumi.set(__self__, "peer_cidrs", peer_cidrs)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> pulumi.Input[_builtins.str]:
        """
        vpn gateway
        """
        return pulumi.get(self, "preshared_key")

    @preshared_key.setter
    def preshared_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "preshared_key", value)

    @_builtins.property
    @pulumi.getter(name="vpnGateway")
    def vpn_gateway(self) -> pulumi.Input[_builtins.str]:
        """
        VPN Gateway info
        """
        return pulumi.get(self, "vpn_gateway")

    @vpn_gateway.setter
    def vpn_gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpn_gateway", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Action detection for dead peer detection action
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        VPN gateway connection admin state
        """
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "admin_state_up", value)

    @_builtins.property
    @pulumi.getter(name="distributeTraffic")
    def distribute_traffic(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the traffic is distributed between the `up` tunnels of the VPN gateway connection when the VPC route's
        next hop is a VPN connection. If `false`, the traffic is only routed through the `up` tunnel with the lower `public_ip`
        address.
        """
        return pulumi.get(self, "distribute_traffic")

    @distribute_traffic.setter
    def distribute_traffic(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "distribute_traffic", value)

    @_builtins.property
    @pulumi.getter(name="establishMode")
    def establish_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The establish mode of the VPN gateway connection:- `bidirectional`: Either side of the VPN gateway can initiate IKE
        protocol negotiations or rekeying processes.- `peer_only`: Only the peer can initiate IKE protocol negotiations for this
        VPN gateway connection. Additionally, the peer is responsible for initiating the rekeying process after the connection
        is established. If rekeying does not occur, the VPN gateway connection will be brought down after its lifetime expires.
        """
        return pulumi.get(self, "establish_mode")

    @establish_mode.setter
    def establish_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "establish_mode", value)

    @_builtins.property
    @pulumi.getter(name="ikePolicy")
    def ike_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN gateway connection IKE Policy
        """
        return pulumi.get(self, "ike_policy")

    @ike_policy.setter
    def ike_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_policy", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Interval for dead peer detection interval
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="ipsecPolicy")
    def ipsec_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP security policy for vpn gateway connection
        """
        return pulumi.get(self, "ipsec_policy")

    @ipsec_policy.setter
    def ipsec_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsec_policy", value)

    @_builtins.property
    @pulumi.getter(name="isVpnGatewayConnectionId")
    def is_vpn_gateway_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpn_gateway_connection_id")

    @is_vpn_gateway_connection_id.setter
    def is_vpn_gateway_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpn_gateway_connection_id", value)

    @_builtins.property
    @pulumi.getter
    def local(self) -> Optional[pulumi.Input['IsVpnGatewayConnectionLocalArgs']]:
        return pulumi.get(self, "local")

    @local.setter
    def local(self, value: Optional[pulumi.Input['IsVpnGatewayConnectionLocalArgs']]):
        pulumi.set(self, "local", value)

    @_builtins.property
    @pulumi.getter(name="localCidrs")
    @_utilities.deprecated("""Deprecated""")
    def local_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        VPN gateway connection local CIDRs
        """
        return pulumi.get(self, "local_cidrs")

    @local_cidrs.setter
    def local_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "local_cidrs", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN Gateway connection name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input['IsVpnGatewayConnectionPeerArgs']]:
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input['IsVpnGatewayConnectionPeerArgs']]):
        pulumi.set(self, "peer", value)

    @_builtins.property
    @pulumi.getter(name="peerAddress")
    @_utilities.deprecated("""Deprecated""")
    def peer_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN gateway connection peer address
        """
        return pulumi.get(self, "peer_address")

    @peer_address.setter
    def peer_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_address", value)

    @_builtins.property
    @pulumi.getter(name="peerCidrs")
    @_utilities.deprecated("""Deprecated""")
    def peer_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        VPN gateway connection peer CIDRs
        """
        return pulumi.get(self, "peer_cidrs")

    @peer_cidrs.setter
    def peer_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "peer_cidrs", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timeout for dead peer detection
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpnGatewayConnectionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpnGatewayConnectionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsVpnGatewayConnectionState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 authentication_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 distribute_traffic: Optional[pulumi.Input[_builtins.bool]] = None,
                 establish_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_connection: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.float]] = None,
                 ipsec_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpn_gateway_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local: Optional[pulumi.Input['IsVpnGatewayConnectionLocalArgs']] = None,
                 local_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer: Optional[pulumi.Input['IsVpnGatewayConnectionPeerArgs']] = None,
                 peer_address: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 preshared_key: Optional[pulumi.Input[_builtins.str]] = None,
                 related_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayConnectionStatusReasonArgs']]]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 timeouts: Optional[pulumi.Input['IsVpnGatewayConnectionTimeoutsArgs']] = None,
                 tunnels: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayConnectionTunnelArgs']]]] = None,
                 vpn_gateway: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsVpnGatewayConnection resources.
        :param pulumi.Input[_builtins.str] action: Action detection for dead peer detection action
        :param pulumi.Input[_builtins.bool] admin_state_up: VPN gateway connection admin state
        :param pulumi.Input[_builtins.str] authentication_mode: The authentication mode
        :param pulumi.Input[_builtins.str] created_at: The date and time that this VPN gateway connection was created
        :param pulumi.Input[_builtins.bool] distribute_traffic: Indicates whether the traffic is distributed between the `up` tunnels of the VPN gateway connection when the VPC route's
               next hop is a VPN connection. If `false`, the traffic is only routed through the `up` tunnel with the lower `public_ip`
               address.
        :param pulumi.Input[_builtins.str] establish_mode: The establish mode of the VPN gateway connection:- `bidirectional`: Either side of the VPN gateway can initiate IKE
               protocol negotiations or rekeying processes.- `peer_only`: Only the peer can initiate IKE protocol negotiations for this
               VPN gateway connection. Additionally, the peer is responsible for initiating the rekeying process after the connection
               is established. If rekeying does not occur, the VPN gateway connection will be brought down after its lifetime expires.
        :param pulumi.Input[_builtins.str] gateway_connection: The unique identifier for this VPN gateway connection
        :param pulumi.Input[_builtins.str] href: Href of the VPN Gateway connection
        :param pulumi.Input[_builtins.str] ike_policy: VPN gateway connection IKE Policy
        :param pulumi.Input[_builtins.float] interval: Interval for dead peer detection interval
        :param pulumi.Input[_builtins.str] ipsec_policy: IP security policy for vpn gateway connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] local_cidrs: VPN gateway connection local CIDRs
        :param pulumi.Input[_builtins.str] mode: The mode of the VPN gateway
        :param pulumi.Input[_builtins.str] name: VPN Gateway connection name
        :param pulumi.Input[_builtins.str] peer_address: VPN gateway connection peer address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] peer_cidrs: VPN gateway connection peer CIDRs
        :param pulumi.Input[_builtins.str] preshared_key: vpn gateway
        :param pulumi.Input[_builtins.str] related_crn: The crn of the VPN Gateway resource
        :param pulumi.Input[_builtins.str] resource_type: The resource type
        :param pulumi.Input[_builtins.str] routing_protocol: Routing protocols for this VPN gateway connection.
        :param pulumi.Input[_builtins.str] status: VPN gateway connection status
        :param pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayConnectionStatusReasonArgs']]] status_reasons: The reasons for the current status (if any).
        :param pulumi.Input[_builtins.float] timeout: Timeout for dead peer detection
        :param pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayConnectionTunnelArgs']]] tunnels: The VPN tunnel configuration for this VPN gateway connection (in static route mode)
        :param pulumi.Input[_builtins.str] vpn_gateway: VPN Gateway info
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if authentication_mode is not None:
            pulumi.set(__self__, "authentication_mode", authentication_mode)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if distribute_traffic is not None:
            pulumi.set(__self__, "distribute_traffic", distribute_traffic)
        if establish_mode is not None:
            pulumi.set(__self__, "establish_mode", establish_mode)
        if gateway_connection is not None:
            pulumi.set(__self__, "gateway_connection", gateway_connection)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if ike_policy is not None:
            pulumi.set(__self__, "ike_policy", ike_policy)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if ipsec_policy is not None:
            pulumi.set(__self__, "ipsec_policy", ipsec_policy)
        if is_vpn_gateway_connection_id is not None:
            pulumi.set(__self__, "is_vpn_gateway_connection_id", is_vpn_gateway_connection_id)
        if local is not None:
            pulumi.set(__self__, "local", local)
        if local_cidrs is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""local_cidrs is deprecated: Deprecated""")
        if local_cidrs is not None:
            pulumi.set(__self__, "local_cidrs", local_cidrs)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if peer_address is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""peer_address is deprecated: Deprecated""")
        if peer_address is not None:
            pulumi.set(__self__, "peer_address", peer_address)
        if peer_cidrs is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""peer_cidrs is deprecated: Deprecated""")
        if peer_cidrs is not None:
            pulumi.set(__self__, "peer_cidrs", peer_cidrs)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if related_crn is not None:
            pulumi.set(__self__, "related_crn", related_crn)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if routing_protocol is not None:
            pulumi.set(__self__, "routing_protocol", routing_protocol)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if tunnels is not None:
            pulumi.set(__self__, "tunnels", tunnels)
        if vpn_gateway is not None:
            pulumi.set(__self__, "vpn_gateway", vpn_gateway)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Action detection for dead peer detection action
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        VPN gateway connection admin state
        """
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "admin_state_up", value)

    @_builtins.property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The authentication mode
        """
        return pulumi.get(self, "authentication_mode")

    @authentication_mode.setter
    def authentication_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_mode", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that this VPN gateway connection was created
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="distributeTraffic")
    def distribute_traffic(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the traffic is distributed between the `up` tunnels of the VPN gateway connection when the VPC route's
        next hop is a VPN connection. If `false`, the traffic is only routed through the `up` tunnel with the lower `public_ip`
        address.
        """
        return pulumi.get(self, "distribute_traffic")

    @distribute_traffic.setter
    def distribute_traffic(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "distribute_traffic", value)

    @_builtins.property
    @pulumi.getter(name="establishMode")
    def establish_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The establish mode of the VPN gateway connection:- `bidirectional`: Either side of the VPN gateway can initiate IKE
        protocol negotiations or rekeying processes.- `peer_only`: Only the peer can initiate IKE protocol negotiations for this
        VPN gateway connection. Additionally, the peer is responsible for initiating the rekeying process after the connection
        is established. If rekeying does not occur, the VPN gateway connection will be brought down after its lifetime expires.
        """
        return pulumi.get(self, "establish_mode")

    @establish_mode.setter
    def establish_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "establish_mode", value)

    @_builtins.property
    @pulumi.getter(name="gatewayConnection")
    def gateway_connection(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this VPN gateway connection
        """
        return pulumi.get(self, "gateway_connection")

    @gateway_connection.setter
    def gateway_connection(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway_connection", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Href of the VPN Gateway connection
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="ikePolicy")
    def ike_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN gateway connection IKE Policy
        """
        return pulumi.get(self, "ike_policy")

    @ike_policy.setter
    def ike_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_policy", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Interval for dead peer detection interval
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="ipsecPolicy")
    def ipsec_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP security policy for vpn gateway connection
        """
        return pulumi.get(self, "ipsec_policy")

    @ipsec_policy.setter
    def ipsec_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsec_policy", value)

    @_builtins.property
    @pulumi.getter(name="isVpnGatewayConnectionId")
    def is_vpn_gateway_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpn_gateway_connection_id")

    @is_vpn_gateway_connection_id.setter
    def is_vpn_gateway_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpn_gateway_connection_id", value)

    @_builtins.property
    @pulumi.getter
    def local(self) -> Optional[pulumi.Input['IsVpnGatewayConnectionLocalArgs']]:
        return pulumi.get(self, "local")

    @local.setter
    def local(self, value: Optional[pulumi.Input['IsVpnGatewayConnectionLocalArgs']]):
        pulumi.set(self, "local", value)

    @_builtins.property
    @pulumi.getter(name="localCidrs")
    @_utilities.deprecated("""Deprecated""")
    def local_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        VPN gateway connection local CIDRs
        """
        return pulumi.get(self, "local_cidrs")

    @local_cidrs.setter
    def local_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "local_cidrs", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The mode of the VPN gateway
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN Gateway connection name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input['IsVpnGatewayConnectionPeerArgs']]:
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input['IsVpnGatewayConnectionPeerArgs']]):
        pulumi.set(self, "peer", value)

    @_builtins.property
    @pulumi.getter(name="peerAddress")
    @_utilities.deprecated("""Deprecated""")
    def peer_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN gateway connection peer address
        """
        return pulumi.get(self, "peer_address")

    @peer_address.setter
    def peer_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_address", value)

    @_builtins.property
    @pulumi.getter(name="peerCidrs")
    @_utilities.deprecated("""Deprecated""")
    def peer_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        VPN gateway connection peer CIDRs
        """
        return pulumi.get(self, "peer_cidrs")

    @peer_cidrs.setter
    def peer_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "peer_cidrs", value)

    @_builtins.property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        vpn gateway
        """
        return pulumi.get(self, "preshared_key")

    @preshared_key.setter
    def preshared_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preshared_key", value)

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the VPN Gateway resource
        """
        return pulumi.get(self, "related_crn")

    @related_crn.setter
    def related_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="routingProtocol")
    def routing_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Routing protocols for this VPN gateway connection.
        """
        return pulumi.get(self, "routing_protocol")

    @routing_protocol.setter
    def routing_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_protocol", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN gateway connection status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayConnectionStatusReasonArgs']]]]:
        """
        The reasons for the current status (if any).
        """
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayConnectionStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timeout for dead peer detection
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpnGatewayConnectionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpnGatewayConnectionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def tunnels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayConnectionTunnelArgs']]]]:
        """
        The VPN tunnel configuration for this VPN gateway connection (in static route mode)
        """
        return pulumi.get(self, "tunnels")

    @tunnels.setter
    def tunnels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayConnectionTunnelArgs']]]]):
        pulumi.set(self, "tunnels", value)

    @_builtins.property
    @pulumi.getter(name="vpnGateway")
    def vpn_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN Gateway info
        """
        return pulumi.get(self, "vpn_gateway")

    @vpn_gateway.setter
    def vpn_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_gateway", value)


@pulumi.type_token("ibm:index/isVpnGatewayConnection:IsVpnGatewayConnection")
class IsVpnGatewayConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 distribute_traffic: Optional[pulumi.Input[_builtins.bool]] = None,
                 establish_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.float]] = None,
                 ipsec_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpn_gateway_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local: Optional[pulumi.Input[Union['IsVpnGatewayConnectionLocalArgs', 'IsVpnGatewayConnectionLocalArgsDict']]] = None,
                 local_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer: Optional[pulumi.Input[Union['IsVpnGatewayConnectionPeerArgs', 'IsVpnGatewayConnectionPeerArgsDict']]] = None,
                 peer_address: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 preshared_key: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpnGatewayConnectionTimeoutsArgs', 'IsVpnGatewayConnectionTimeoutsArgsDict']]] = None,
                 vpn_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsVpnGatewayConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Action detection for dead peer detection action
        :param pulumi.Input[_builtins.bool] admin_state_up: VPN gateway connection admin state
        :param pulumi.Input[_builtins.bool] distribute_traffic: Indicates whether the traffic is distributed between the `up` tunnels of the VPN gateway connection when the VPC route's
               next hop is a VPN connection. If `false`, the traffic is only routed through the `up` tunnel with the lower `public_ip`
               address.
        :param pulumi.Input[_builtins.str] establish_mode: The establish mode of the VPN gateway connection:- `bidirectional`: Either side of the VPN gateway can initiate IKE
               protocol negotiations or rekeying processes.- `peer_only`: Only the peer can initiate IKE protocol negotiations for this
               VPN gateway connection. Additionally, the peer is responsible for initiating the rekeying process after the connection
               is established. If rekeying does not occur, the VPN gateway connection will be brought down after its lifetime expires.
        :param pulumi.Input[_builtins.str] ike_policy: VPN gateway connection IKE Policy
        :param pulumi.Input[_builtins.float] interval: Interval for dead peer detection interval
        :param pulumi.Input[_builtins.str] ipsec_policy: IP security policy for vpn gateway connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] local_cidrs: VPN gateway connection local CIDRs
        :param pulumi.Input[_builtins.str] name: VPN Gateway connection name
        :param pulumi.Input[_builtins.str] peer_address: VPN gateway connection peer address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] peer_cidrs: VPN gateway connection peer CIDRs
        :param pulumi.Input[_builtins.str] preshared_key: vpn gateway
        :param pulumi.Input[_builtins.float] timeout: Timeout for dead peer detection
        :param pulumi.Input[_builtins.str] vpn_gateway: VPN Gateway info
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsVpnGatewayConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVpnGatewayConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVpnGatewayConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVpnGatewayConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
                 distribute_traffic: Optional[pulumi.Input[_builtins.bool]] = None,
                 establish_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.float]] = None,
                 ipsec_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpn_gateway_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local: Optional[pulumi.Input[Union['IsVpnGatewayConnectionLocalArgs', 'IsVpnGatewayConnectionLocalArgsDict']]] = None,
                 local_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peer: Optional[pulumi.Input[Union['IsVpnGatewayConnectionPeerArgs', 'IsVpnGatewayConnectionPeerArgsDict']]] = None,
                 peer_address: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 preshared_key: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpnGatewayConnectionTimeoutsArgs', 'IsVpnGatewayConnectionTimeoutsArgsDict']]] = None,
                 vpn_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVpnGatewayConnectionArgs.__new__(IsVpnGatewayConnectionArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["admin_state_up"] = admin_state_up
            __props__.__dict__["distribute_traffic"] = distribute_traffic
            __props__.__dict__["establish_mode"] = establish_mode
            __props__.__dict__["ike_policy"] = ike_policy
            __props__.__dict__["interval"] = interval
            __props__.__dict__["ipsec_policy"] = ipsec_policy
            __props__.__dict__["is_vpn_gateway_connection_id"] = is_vpn_gateway_connection_id
            __props__.__dict__["local"] = local
            __props__.__dict__["local_cidrs"] = local_cidrs
            __props__.__dict__["name"] = name
            __props__.__dict__["peer"] = peer
            __props__.__dict__["peer_address"] = peer_address
            __props__.__dict__["peer_cidrs"] = peer_cidrs
            if preshared_key is None and not opts.urn:
                raise TypeError("Missing required property 'preshared_key'")
            __props__.__dict__["preshared_key"] = preshared_key
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["timeouts"] = timeouts
            if vpn_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'vpn_gateway'")
            __props__.__dict__["vpn_gateway"] = vpn_gateway
            __props__.__dict__["authentication_mode"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["gateway_connection"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["mode"] = None
            __props__.__dict__["related_crn"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["routing_protocol"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
            __props__.__dict__["tunnels"] = None
        super(IsVpnGatewayConnection, __self__).__init__(
            'ibm:index/isVpnGatewayConnection:IsVpnGatewayConnection',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            admin_state_up: Optional[pulumi.Input[_builtins.bool]] = None,
            authentication_mode: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            distribute_traffic: Optional[pulumi.Input[_builtins.bool]] = None,
            establish_mode: Optional[pulumi.Input[_builtins.str]] = None,
            gateway_connection: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            ike_policy: Optional[pulumi.Input[_builtins.str]] = None,
            interval: Optional[pulumi.Input[_builtins.float]] = None,
            ipsec_policy: Optional[pulumi.Input[_builtins.str]] = None,
            is_vpn_gateway_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            local: Optional[pulumi.Input[Union['IsVpnGatewayConnectionLocalArgs', 'IsVpnGatewayConnectionLocalArgsDict']]] = None,
            local_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            mode: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            peer: Optional[pulumi.Input[Union['IsVpnGatewayConnectionPeerArgs', 'IsVpnGatewayConnectionPeerArgsDict']]] = None,
            peer_address: Optional[pulumi.Input[_builtins.str]] = None,
            peer_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            preshared_key: Optional[pulumi.Input[_builtins.str]] = None,
            related_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            routing_protocol: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnGatewayConnectionStatusReasonArgs', 'IsVpnGatewayConnectionStatusReasonArgsDict']]]]] = None,
            timeout: Optional[pulumi.Input[_builtins.float]] = None,
            timeouts: Optional[pulumi.Input[Union['IsVpnGatewayConnectionTimeoutsArgs', 'IsVpnGatewayConnectionTimeoutsArgsDict']]] = None,
            tunnels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnGatewayConnectionTunnelArgs', 'IsVpnGatewayConnectionTunnelArgsDict']]]]] = None,
            vpn_gateway: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsVpnGatewayConnection':
        """
        Get an existing IsVpnGatewayConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Action detection for dead peer detection action
        :param pulumi.Input[_builtins.bool] admin_state_up: VPN gateway connection admin state
        :param pulumi.Input[_builtins.str] authentication_mode: The authentication mode
        :param pulumi.Input[_builtins.str] created_at: The date and time that this VPN gateway connection was created
        :param pulumi.Input[_builtins.bool] distribute_traffic: Indicates whether the traffic is distributed between the `up` tunnels of the VPN gateway connection when the VPC route's
               next hop is a VPN connection. If `false`, the traffic is only routed through the `up` tunnel with the lower `public_ip`
               address.
        :param pulumi.Input[_builtins.str] establish_mode: The establish mode of the VPN gateway connection:- `bidirectional`: Either side of the VPN gateway can initiate IKE
               protocol negotiations or rekeying processes.- `peer_only`: Only the peer can initiate IKE protocol negotiations for this
               VPN gateway connection. Additionally, the peer is responsible for initiating the rekeying process after the connection
               is established. If rekeying does not occur, the VPN gateway connection will be brought down after its lifetime expires.
        :param pulumi.Input[_builtins.str] gateway_connection: The unique identifier for this VPN gateway connection
        :param pulumi.Input[_builtins.str] href: Href of the VPN Gateway connection
        :param pulumi.Input[_builtins.str] ike_policy: VPN gateway connection IKE Policy
        :param pulumi.Input[_builtins.float] interval: Interval for dead peer detection interval
        :param pulumi.Input[_builtins.str] ipsec_policy: IP security policy for vpn gateway connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] local_cidrs: VPN gateway connection local CIDRs
        :param pulumi.Input[_builtins.str] mode: The mode of the VPN gateway
        :param pulumi.Input[_builtins.str] name: VPN Gateway connection name
        :param pulumi.Input[_builtins.str] peer_address: VPN gateway connection peer address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] peer_cidrs: VPN gateway connection peer CIDRs
        :param pulumi.Input[_builtins.str] preshared_key: vpn gateway
        :param pulumi.Input[_builtins.str] related_crn: The crn of the VPN Gateway resource
        :param pulumi.Input[_builtins.str] resource_type: The resource type
        :param pulumi.Input[_builtins.str] routing_protocol: Routing protocols for this VPN gateway connection.
        :param pulumi.Input[_builtins.str] status: VPN gateway connection status
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpnGatewayConnectionStatusReasonArgs', 'IsVpnGatewayConnectionStatusReasonArgsDict']]]] status_reasons: The reasons for the current status (if any).
        :param pulumi.Input[_builtins.float] timeout: Timeout for dead peer detection
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpnGatewayConnectionTunnelArgs', 'IsVpnGatewayConnectionTunnelArgsDict']]]] tunnels: The VPN tunnel configuration for this VPN gateway connection (in static route mode)
        :param pulumi.Input[_builtins.str] vpn_gateway: VPN Gateway info
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVpnGatewayConnectionState.__new__(_IsVpnGatewayConnectionState)

        __props__.__dict__["action"] = action
        __props__.__dict__["admin_state_up"] = admin_state_up
        __props__.__dict__["authentication_mode"] = authentication_mode
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["distribute_traffic"] = distribute_traffic
        __props__.__dict__["establish_mode"] = establish_mode
        __props__.__dict__["gateway_connection"] = gateway_connection
        __props__.__dict__["href"] = href
        __props__.__dict__["ike_policy"] = ike_policy
        __props__.__dict__["interval"] = interval
        __props__.__dict__["ipsec_policy"] = ipsec_policy
        __props__.__dict__["is_vpn_gateway_connection_id"] = is_vpn_gateway_connection_id
        __props__.__dict__["local"] = local
        __props__.__dict__["local_cidrs"] = local_cidrs
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["peer"] = peer
        __props__.__dict__["peer_address"] = peer_address
        __props__.__dict__["peer_cidrs"] = peer_cidrs
        __props__.__dict__["preshared_key"] = preshared_key
        __props__.__dict__["related_crn"] = related_crn
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["routing_protocol"] = routing_protocol
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["tunnels"] = tunnels
        __props__.__dict__["vpn_gateway"] = vpn_gateway
        return IsVpnGatewayConnection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Action detection for dead peer detection action
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> pulumi.Output[_builtins.bool]:
        """
        VPN gateway connection admin state
        """
        return pulumi.get(self, "admin_state_up")

    @_builtins.property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> pulumi.Output[_builtins.str]:
        """
        The authentication mode
        """
        return pulumi.get(self, "authentication_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that this VPN gateway connection was created
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="distributeTraffic")
    def distribute_traffic(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates whether the traffic is distributed between the `up` tunnels of the VPN gateway connection when the VPC route's
        next hop is a VPN connection. If `false`, the traffic is only routed through the `up` tunnel with the lower `public_ip`
        address.
        """
        return pulumi.get(self, "distribute_traffic")

    @_builtins.property
    @pulumi.getter(name="establishMode")
    def establish_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The establish mode of the VPN gateway connection:- `bidirectional`: Either side of the VPN gateway can initiate IKE
        protocol negotiations or rekeying processes.- `peer_only`: Only the peer can initiate IKE protocol negotiations for this
        VPN gateway connection. Additionally, the peer is responsible for initiating the rekeying process after the connection
        is established. If rekeying does not occur, the VPN gateway connection will be brought down after its lifetime expires.
        """
        return pulumi.get(self, "establish_mode")

    @_builtins.property
    @pulumi.getter(name="gatewayConnection")
    def gateway_connection(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this VPN gateway connection
        """
        return pulumi.get(self, "gateway_connection")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        Href of the VPN Gateway connection
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="ikePolicy")
    def ike_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        VPN gateway connection IKE Policy
        """
        return pulumi.get(self, "ike_policy")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Interval for dead peer detection interval
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="ipsecPolicy")
    def ipsec_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IP security policy for vpn gateway connection
        """
        return pulumi.get(self, "ipsec_policy")

    @_builtins.property
    @pulumi.getter(name="isVpnGatewayConnectionId")
    def is_vpn_gateway_connection_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_vpn_gateway_connection_id")

    @_builtins.property
    @pulumi.getter
    def local(self) -> pulumi.Output[Optional['outputs.IsVpnGatewayConnectionLocal']]:
        return pulumi.get(self, "local")

    @_builtins.property
    @pulumi.getter(name="localCidrs")
    @_utilities.deprecated("""Deprecated""")
    def local_cidrs(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        VPN gateway connection local CIDRs
        """
        return pulumi.get(self, "local_cidrs")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Output[_builtins.str]:
        """
        The mode of the VPN gateway
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        VPN Gateway connection name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def peer(self) -> pulumi.Output[Optional['outputs.IsVpnGatewayConnectionPeer']]:
        return pulumi.get(self, "peer")

    @_builtins.property
    @pulumi.getter(name="peerAddress")
    @_utilities.deprecated("""Deprecated""")
    def peer_address(self) -> pulumi.Output[_builtins.str]:
        """
        VPN gateway connection peer address
        """
        return pulumi.get(self, "peer_address")

    @_builtins.property
    @pulumi.getter(name="peerCidrs")
    @_utilities.deprecated("""Deprecated""")
    def peer_cidrs(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        VPN gateway connection peer CIDRs
        """
        return pulumi.get(self, "peer_cidrs")

    @_builtins.property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> pulumi.Output[_builtins.str]:
        """
        vpn gateway
        """
        return pulumi.get(self, "preshared_key")

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the VPN Gateway resource
        """
        return pulumi.get(self, "related_crn")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="routingProtocol")
    def routing_protocol(self) -> pulumi.Output[_builtins.str]:
        """
        Routing protocols for this VPN gateway connection.
        """
        return pulumi.get(self, "routing_protocol")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        VPN gateway connection status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.IsVpnGatewayConnectionStatusReason']]:
        """
        The reasons for the current status (if any).
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Timeout for dead peer detection
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsVpnGatewayConnectionTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def tunnels(self) -> pulumi.Output[Sequence['outputs.IsVpnGatewayConnectionTunnel']]:
        """
        The VPN tunnel configuration for this VPN gateway connection (in static route mode)
        """
        return pulumi.get(self, "tunnels")

    @_builtins.property
    @pulumi.getter(name="vpnGateway")
    def vpn_gateway(self) -> pulumi.Output[_builtins.str]:
        """
        VPN Gateway info
        """
        return pulumi.get(self, "vpn_gateway")

