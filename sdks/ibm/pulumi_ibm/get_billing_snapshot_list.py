# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBillingSnapshotListResult',
    'AwaitableGetBillingSnapshotListResult',
    'get_billing_snapshot_list',
    'get_billing_snapshot_list_output',
]

@pulumi.output_type
class GetBillingSnapshotListResult:
    """
    A collection of values returned by getBillingSnapshotList.
    """
    def __init__(__self__, date_from=None, date_to=None, id=None, limit=None, month=None, snapshotcount=None, snapshots=None):
        if date_from and not isinstance(date_from, float):
            raise TypeError("Expected argument 'date_from' to be a float")
        pulumi.set(__self__, "date_from", date_from)
        if date_to and not isinstance(date_to, float):
            raise TypeError("Expected argument 'date_to' to be a float")
        pulumi.set(__self__, "date_to", date_to)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, float):
            raise TypeError("Expected argument 'limit' to be a float")
        pulumi.set(__self__, "limit", limit)
        if month and not isinstance(month, str):
            raise TypeError("Expected argument 'month' to be a str")
        pulumi.set(__self__, "month", month)
        if snapshotcount and not isinstance(snapshotcount, float):
            raise TypeError("Expected argument 'snapshotcount' to be a float")
        pulumi.set(__self__, "snapshotcount", snapshotcount)
        if snapshots and not isinstance(snapshots, list):
            raise TypeError("Expected argument 'snapshots' to be a list")
        pulumi.set(__self__, "snapshots", snapshots)

    @_builtins.property
    @pulumi.getter(name="dateFrom")
    def date_from(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "date_from")

    @_builtins.property
    @pulumi.getter(name="dateTo")
    def date_to(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "date_to")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def month(self) -> _builtins.str:
        return pulumi.get(self, "month")

    @_builtins.property
    @pulumi.getter
    def snapshotcount(self) -> _builtins.float:
        return pulumi.get(self, "snapshotcount")

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetBillingSnapshotListSnapshotResult']:
        return pulumi.get(self, "snapshots")


class AwaitableGetBillingSnapshotListResult(GetBillingSnapshotListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBillingSnapshotListResult(
            date_from=self.date_from,
            date_to=self.date_to,
            id=self.id,
            limit=self.limit,
            month=self.month,
            snapshotcount=self.snapshotcount,
            snapshots=self.snapshots)


def get_billing_snapshot_list(date_from: Optional[_builtins.float] = None,
                              date_to: Optional[_builtins.float] = None,
                              id: Optional[_builtins.str] = None,
                              limit: Optional[_builtins.float] = None,
                              month: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBillingSnapshotListResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['dateFrom'] = date_from
    __args__['dateTo'] = date_to
    __args__['id'] = id
    __args__['limit'] = limit
    __args__['month'] = month
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBillingSnapshotList:getBillingSnapshotList', __args__, opts=opts, typ=GetBillingSnapshotListResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBillingSnapshotListResult(
        date_from=pulumi.get(__ret__, 'date_from'),
        date_to=pulumi.get(__ret__, 'date_to'),
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        month=pulumi.get(__ret__, 'month'),
        snapshotcount=pulumi.get(__ret__, 'snapshotcount'),
        snapshots=pulumi.get(__ret__, 'snapshots'))
def get_billing_snapshot_list_output(date_from: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                     date_to: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     limit: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                     month: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBillingSnapshotListResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['dateFrom'] = date_from
    __args__['dateTo'] = date_to
    __args__['id'] = id
    __args__['limit'] = limit
    __args__['month'] = month
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBillingSnapshotList:getBillingSnapshotList', __args__, opts=opts, typ=GetBillingSnapshotListResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBillingSnapshotListResult(
        date_from=pulumi.get(__response__, 'date_from'),
        date_to=pulumi.get(__response__, 'date_to'),
        id=pulumi.get(__response__, 'id'),
        limit=pulumi.get(__response__, 'limit'),
        month=pulumi.get(__response__, 'month'),
        snapshotcount=pulumi.get(__response__, 'snapshotcount'),
        snapshots=pulumi.get(__response__, 'snapshots')))
