# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ComputeUserArgs', 'ComputeUser']

@pulumi.input_type
class ComputeUserArgs:
    def __init__(__self__, *,
                 address1: pulumi.Input[_builtins.str],
                 city: pulumi.Input[_builtins.str],
                 company_name: pulumi.Input[_builtins.str],
                 country: pulumi.Input[_builtins.str],
                 email: pulumi.Input[_builtins.str],
                 first_name: pulumi.Input[_builtins.str],
                 last_name: pulumi.Input[_builtins.str],
                 state: pulumi.Input[_builtins.str],
                 timezone: pulumi.Input[_builtins.str],
                 address2: Optional[pulumi.Input[_builtins.str]] = None,
                 api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 has_api_key: Optional[pulumi.Input[_builtins.bool]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 user_status: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ComputeUser resource.
        :param pulumi.Input[_builtins.str] address1: Address info of the user
        :param pulumi.Input[_builtins.str] city: City name
        :param pulumi.Input[_builtins.str] company_name: comapany name
        :param pulumi.Input[_builtins.str] country: Country name
        :param pulumi.Input[_builtins.str] email: email address of the user
        :param pulumi.Input[_builtins.str] first_name: First name of the user
        :param pulumi.Input[_builtins.str] last_name: Last name of the user
        :param pulumi.Input[_builtins.str] state: Satate name
        :param pulumi.Input[_builtins.str] timezone: time zone info
        :param pulumi.Input[_builtins.str] address2: Address info of the user
        :param pulumi.Input[_builtins.str] api_key: API key for the user
        :param pulumi.Input[_builtins.bool] has_api_key: API Key info of the user
        :param pulumi.Input[_builtins.str] password: password for the user
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permissions: set of persmissions assigned for the user
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for the resources
        :param pulumi.Input[_builtins.str] user_status: user status info
        :param pulumi.Input[_builtins.str] username: user name
        """
        pulumi.set(__self__, "address1", address1)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "company_name", company_name)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "timezone", timezone)
        if address2 is not None:
            pulumi.set(__self__, "address2", address2)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if compute_user_id is not None:
            pulumi.set(__self__, "compute_user_id", compute_user_id)
        if has_api_key is not None:
            pulumi.set(__self__, "has_api_key", has_api_key)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_status is not None:
            pulumi.set(__self__, "user_status", user_status)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def address1(self) -> pulumi.Input[_builtins.str]:
        """
        Address info of the user
        """
        return pulumi.get(self, "address1")

    @address1.setter
    def address1(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "address1", value)

    @_builtins.property
    @pulumi.getter
    def city(self) -> pulumi.Input[_builtins.str]:
        """
        City name
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "city", value)

    @_builtins.property
    @pulumi.getter(name="companyName")
    def company_name(self) -> pulumi.Input[_builtins.str]:
        """
        comapany name
        """
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "company_name", value)

    @_builtins.property
    @pulumi.getter
    def country(self) -> pulumi.Input[_builtins.str]:
        """
        Country name
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "country", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Input[_builtins.str]:
        """
        email address of the user
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Input[_builtins.str]:
        """
        First name of the user
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "first_name", value)

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Input[_builtins.str]:
        """
        Last name of the user
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "last_name", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Input[_builtins.str]:
        """
        Satate name
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> pulumi.Input[_builtins.str]:
        """
        time zone info
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "timezone", value)

    @_builtins.property
    @pulumi.getter
    def address2(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Address info of the user
        """
        return pulumi.get(self, "address2")

    @address2.setter
    def address2(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address2", value)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API key for the user
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_key", value)

    @_builtins.property
    @pulumi.getter(name="computeUserId")
    def compute_user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_user_id")

    @compute_user_id.setter
    def compute_user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_user_id", value)

    @_builtins.property
    @pulumi.getter(name="hasApiKey")
    def has_api_key(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        API Key info of the user
        """
        return pulumi.get(self, "has_api_key")

    @has_api_key.setter
    def has_api_key(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "has_api_key", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        password for the user
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        set of persmissions assigned for the user
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "permissions", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags set for the resources
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="userStatus")
    def user_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        user status info
        """
        return pulumi.get(self, "user_status")

    @user_status.setter
    def user_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_status", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        user name
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _ComputeUserState:
    def __init__(__self__, *,
                 address1: Optional[pulumi.Input[_builtins.str]] = None,
                 address2: Optional[pulumi.Input[_builtins.str]] = None,
                 api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 city: Optional[pulumi.Input[_builtins.str]] = None,
                 company_name: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 first_name: Optional[pulumi.Input[_builtins.str]] = None,
                 has_api_key: Optional[pulumi.Input[_builtins.bool]] = None,
                 ibm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_name: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 user_status: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ComputeUser resources.
        :param pulumi.Input[_builtins.str] address1: Address info of the user
        :param pulumi.Input[_builtins.str] address2: Address info of the user
        :param pulumi.Input[_builtins.str] api_key: API key for the user
        :param pulumi.Input[_builtins.str] city: City name
        :param pulumi.Input[_builtins.str] company_name: comapany name
        :param pulumi.Input[_builtins.str] country: Country name
        :param pulumi.Input[_builtins.str] email: email address of the user
        :param pulumi.Input[_builtins.str] first_name: First name of the user
        :param pulumi.Input[_builtins.bool] has_api_key: API Key info of the user
        :param pulumi.Input[_builtins.str] ibm_id: IBM ID of the user
        :param pulumi.Input[_builtins.str] last_name: Last name of the user
        :param pulumi.Input[_builtins.str] password: password for the user
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permissions: set of persmissions assigned for the user
        :param pulumi.Input[_builtins.str] state: Satate name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for the resources
        :param pulumi.Input[_builtins.str] timezone: time zone info
        :param pulumi.Input[_builtins.str] user_status: user status info
        :param pulumi.Input[_builtins.str] username: user name
        """
        if address1 is not None:
            pulumi.set(__self__, "address1", address1)
        if address2 is not None:
            pulumi.set(__self__, "address2", address2)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if compute_user_id is not None:
            pulumi.set(__self__, "compute_user_id", compute_user_id)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if has_api_key is not None:
            pulumi.set(__self__, "has_api_key", has_api_key)
        if ibm_id is not None:
            pulumi.set(__self__, "ibm_id", ibm_id)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if user_status is not None:
            pulumi.set(__self__, "user_status", user_status)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def address1(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Address info of the user
        """
        return pulumi.get(self, "address1")

    @address1.setter
    def address1(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address1", value)

    @_builtins.property
    @pulumi.getter
    def address2(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Address info of the user
        """
        return pulumi.get(self, "address2")

    @address2.setter
    def address2(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address2", value)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API key for the user
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_key", value)

    @_builtins.property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        City name
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "city", value)

    @_builtins.property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        comapany name
        """
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "company_name", value)

    @_builtins.property
    @pulumi.getter(name="computeUserId")
    def compute_user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_user_id")

    @compute_user_id.setter
    def compute_user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_user_id", value)

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Country name
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "country", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        email address of the user
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        First name of the user
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "first_name", value)

    @_builtins.property
    @pulumi.getter(name="hasApiKey")
    def has_api_key(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        API Key info of the user
        """
        return pulumi.get(self, "has_api_key")

    @has_api_key.setter
    def has_api_key(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "has_api_key", value)

    @_builtins.property
    @pulumi.getter(name="ibmId")
    def ibm_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IBM ID of the user
        """
        return pulumi.get(self, "ibm_id")

    @ibm_id.setter
    def ibm_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_id", value)

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last name of the user
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_name", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        password for the user
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        set of persmissions assigned for the user
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "permissions", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Satate name
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags set for the resources
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        time zone info
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timezone", value)

    @_builtins.property
    @pulumi.getter(name="userStatus")
    def user_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        user status info
        """
        return pulumi.get(self, "user_status")

    @user_status.setter
    def user_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_status", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        user name
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


@pulumi.type_token("ibm:index/computeUser:ComputeUser")
class ComputeUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address1: Optional[pulumi.Input[_builtins.str]] = None,
                 address2: Optional[pulumi.Input[_builtins.str]] = None,
                 api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 city: Optional[pulumi.Input[_builtins.str]] = None,
                 company_name: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 first_name: Optional[pulumi.Input[_builtins.str]] = None,
                 has_api_key: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_name: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 user_status: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ComputeUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] address1: Address info of the user
        :param pulumi.Input[_builtins.str] address2: Address info of the user
        :param pulumi.Input[_builtins.str] api_key: API key for the user
        :param pulumi.Input[_builtins.str] city: City name
        :param pulumi.Input[_builtins.str] company_name: comapany name
        :param pulumi.Input[_builtins.str] country: Country name
        :param pulumi.Input[_builtins.str] email: email address of the user
        :param pulumi.Input[_builtins.str] first_name: First name of the user
        :param pulumi.Input[_builtins.bool] has_api_key: API Key info of the user
        :param pulumi.Input[_builtins.str] last_name: Last name of the user
        :param pulumi.Input[_builtins.str] password: password for the user
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permissions: set of persmissions assigned for the user
        :param pulumi.Input[_builtins.str] state: Satate name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for the resources
        :param pulumi.Input[_builtins.str] timezone: time zone info
        :param pulumi.Input[_builtins.str] user_status: user status info
        :param pulumi.Input[_builtins.str] username: user name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputeUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComputeUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComputeUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address1: Optional[pulumi.Input[_builtins.str]] = None,
                 address2: Optional[pulumi.Input[_builtins.str]] = None,
                 api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 city: Optional[pulumi.Input[_builtins.str]] = None,
                 company_name: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 first_name: Optional[pulumi.Input[_builtins.str]] = None,
                 has_api_key: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_name: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 user_status: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeUserArgs.__new__(ComputeUserArgs)

            if address1 is None and not opts.urn:
                raise TypeError("Missing required property 'address1'")
            __props__.__dict__["address1"] = address1
            __props__.__dict__["address2"] = address2
            __props__.__dict__["api_key"] = None if api_key is None else pulumi.Output.secret(api_key)
            if city is None and not opts.urn:
                raise TypeError("Missing required property 'city'")
            __props__.__dict__["city"] = city
            if company_name is None and not opts.urn:
                raise TypeError("Missing required property 'company_name'")
            __props__.__dict__["company_name"] = company_name
            __props__.__dict__["compute_user_id"] = compute_user_id
            if country is None and not opts.urn:
                raise TypeError("Missing required property 'country'")
            __props__.__dict__["country"] = country
            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            if first_name is None and not opts.urn:
                raise TypeError("Missing required property 'first_name'")
            __props__.__dict__["first_name"] = first_name
            __props__.__dict__["has_api_key"] = has_api_key
            if last_name is None and not opts.urn:
                raise TypeError("Missing required property 'last_name'")
            __props__.__dict__["last_name"] = last_name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["permissions"] = permissions
            if state is None and not opts.urn:
                raise TypeError("Missing required property 'state'")
            __props__.__dict__["state"] = state
            __props__.__dict__["tags"] = tags
            if timezone is None and not opts.urn:
                raise TypeError("Missing required property 'timezone'")
            __props__.__dict__["timezone"] = timezone
            __props__.__dict__["user_status"] = user_status
            __props__.__dict__["username"] = username
            __props__.__dict__["ibm_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiKey", "password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ComputeUser, __self__).__init__(
            'ibm:index/computeUser:ComputeUser',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address1: Optional[pulumi.Input[_builtins.str]] = None,
            address2: Optional[pulumi.Input[_builtins.str]] = None,
            api_key: Optional[pulumi.Input[_builtins.str]] = None,
            city: Optional[pulumi.Input[_builtins.str]] = None,
            company_name: Optional[pulumi.Input[_builtins.str]] = None,
            compute_user_id: Optional[pulumi.Input[_builtins.str]] = None,
            country: Optional[pulumi.Input[_builtins.str]] = None,
            email: Optional[pulumi.Input[_builtins.str]] = None,
            first_name: Optional[pulumi.Input[_builtins.str]] = None,
            has_api_key: Optional[pulumi.Input[_builtins.bool]] = None,
            ibm_id: Optional[pulumi.Input[_builtins.str]] = None,
            last_name: Optional[pulumi.Input[_builtins.str]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            permissions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timezone: Optional[pulumi.Input[_builtins.str]] = None,
            user_status: Optional[pulumi.Input[_builtins.str]] = None,
            username: Optional[pulumi.Input[_builtins.str]] = None) -> 'ComputeUser':
        """
        Get an existing ComputeUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] address1: Address info of the user
        :param pulumi.Input[_builtins.str] address2: Address info of the user
        :param pulumi.Input[_builtins.str] api_key: API key for the user
        :param pulumi.Input[_builtins.str] city: City name
        :param pulumi.Input[_builtins.str] company_name: comapany name
        :param pulumi.Input[_builtins.str] country: Country name
        :param pulumi.Input[_builtins.str] email: email address of the user
        :param pulumi.Input[_builtins.str] first_name: First name of the user
        :param pulumi.Input[_builtins.bool] has_api_key: API Key info of the user
        :param pulumi.Input[_builtins.str] ibm_id: IBM ID of the user
        :param pulumi.Input[_builtins.str] last_name: Last name of the user
        :param pulumi.Input[_builtins.str] password: password for the user
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permissions: set of persmissions assigned for the user
        :param pulumi.Input[_builtins.str] state: Satate name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for the resources
        :param pulumi.Input[_builtins.str] timezone: time zone info
        :param pulumi.Input[_builtins.str] user_status: user status info
        :param pulumi.Input[_builtins.str] username: user name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeUserState.__new__(_ComputeUserState)

        __props__.__dict__["address1"] = address1
        __props__.__dict__["address2"] = address2
        __props__.__dict__["api_key"] = api_key
        __props__.__dict__["city"] = city
        __props__.__dict__["company_name"] = company_name
        __props__.__dict__["compute_user_id"] = compute_user_id
        __props__.__dict__["country"] = country
        __props__.__dict__["email"] = email
        __props__.__dict__["first_name"] = first_name
        __props__.__dict__["has_api_key"] = has_api_key
        __props__.__dict__["ibm_id"] = ibm_id
        __props__.__dict__["last_name"] = last_name
        __props__.__dict__["password"] = password
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timezone"] = timezone
        __props__.__dict__["user_status"] = user_status
        __props__.__dict__["username"] = username
        return ComputeUser(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def address1(self) -> pulumi.Output[_builtins.str]:
        """
        Address info of the user
        """
        return pulumi.get(self, "address1")

    @_builtins.property
    @pulumi.getter
    def address2(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Address info of the user
        """
        return pulumi.get(self, "address2")

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[_builtins.str]:
        """
        API key for the user
        """
        return pulumi.get(self, "api_key")

    @_builtins.property
    @pulumi.getter
    def city(self) -> pulumi.Output[_builtins.str]:
        """
        City name
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter(name="companyName")
    def company_name(self) -> pulumi.Output[_builtins.str]:
        """
        comapany name
        """
        return pulumi.get(self, "company_name")

    @_builtins.property
    @pulumi.getter(name="computeUserId")
    def compute_user_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "compute_user_id")

    @_builtins.property
    @pulumi.getter
    def country(self) -> pulumi.Output[_builtins.str]:
        """
        Country name
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Output[_builtins.str]:
        """
        email address of the user
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Output[_builtins.str]:
        """
        First name of the user
        """
        return pulumi.get(self, "first_name")

    @_builtins.property
    @pulumi.getter(name="hasApiKey")
    def has_api_key(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        API Key info of the user
        """
        return pulumi.get(self, "has_api_key")

    @_builtins.property
    @pulumi.getter(name="ibmId")
    def ibm_id(self) -> pulumi.Output[_builtins.str]:
        """
        IBM ID of the user
        """
        return pulumi.get(self, "ibm_id")

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Output[_builtins.str]:
        """
        Last name of the user
        """
        return pulumi.get(self, "last_name")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        password for the user
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        set of persmissions assigned for the user
        """
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        Satate name
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Tags set for the resources
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[_builtins.str]:
        """
        time zone info
        """
        return pulumi.get(self, "timezone")

    @_builtins.property
    @pulumi.getter(name="userStatus")
    def user_status(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        user status info
        """
        return pulumi.get(self, "user_status")

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Output[_builtins.str]:
        """
        user name
        """
        return pulumi.get(self, "username")

