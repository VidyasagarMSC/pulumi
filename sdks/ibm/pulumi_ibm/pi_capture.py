# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiCaptureArgs', 'PiCapture']

@pulumi.input_type
class PiCaptureArgs:
    def __init__(__self__, *,
                 pi_capture_destination: pulumi.Input[_builtins.str],
                 pi_capture_name: pulumi.Input[_builtins.str],
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_instance_name: pulumi.Input[_builtins.str],
                 pi_capture_cloud_storage_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_cloud_storage_region: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_cloud_storage_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_storage_image_path: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['PiCaptureTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiCapture resource.
        :param pulumi.Input[_builtins.str] pi_capture_destination: Destination for the deployable image
        :param pulumi.Input[_builtins.str] pi_capture_name: Name of the capture to create. Note : this must be unique
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_name: Instance Name of the Power VM
        :param pulumi.Input[_builtins.str] pi_capture_cloud_storage_access_key: Name of Cloud Storage Access Key
        :param pulumi.Input[_builtins.str] pi_capture_cloud_storage_region: List of Regions to use
        :param pulumi.Input[_builtins.str] pi_capture_cloud_storage_secret_key: Name of the Cloud Storage Secret Key
        :param pulumi.Input[_builtins.str] pi_capture_storage_image_path: Cloud Storage Image Path (bucket-name [/folder/../..])
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_capture_volume_ids: List of Data volume IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: List of user tags attached to the resource.
        """
        pulumi.set(__self__, "pi_capture_destination", pi_capture_destination)
        pulumi.set(__self__, "pi_capture_name", pi_capture_name)
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_instance_name", pi_instance_name)
        if pi_capture_cloud_storage_access_key is not None:
            pulumi.set(__self__, "pi_capture_cloud_storage_access_key", pi_capture_cloud_storage_access_key)
        if pi_capture_cloud_storage_region is not None:
            pulumi.set(__self__, "pi_capture_cloud_storage_region", pi_capture_cloud_storage_region)
        if pi_capture_cloud_storage_secret_key is not None:
            pulumi.set(__self__, "pi_capture_cloud_storage_secret_key", pi_capture_cloud_storage_secret_key)
        if pi_capture_id is not None:
            pulumi.set(__self__, "pi_capture_id", pi_capture_id)
        if pi_capture_storage_image_path is not None:
            pulumi.set(__self__, "pi_capture_storage_image_path", pi_capture_storage_image_path)
        if pi_capture_volume_ids is not None:
            pulumi.set(__self__, "pi_capture_volume_ids", pi_capture_volume_ids)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCaptureDestination")
    def pi_capture_destination(self) -> pulumi.Input[_builtins.str]:
        """
        Destination for the deployable image
        """
        return pulumi.get(self, "pi_capture_destination")

    @pi_capture_destination.setter
    def pi_capture_destination(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_capture_destination", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureName")
    def pi_capture_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the capture to create. Note : this must be unique
        """
        return pulumi.get(self, "pi_capture_name")

    @pi_capture_name.setter
    def pi_capture_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_capture_name", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> pulumi.Input[_builtins.str]:
        """
        Instance Name of the Power VM
        """
        return pulumi.get(self, "pi_instance_name")

    @pi_instance_name.setter
    def pi_instance_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_instance_name", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureCloudStorageAccessKey")
    def pi_capture_cloud_storage_access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of Cloud Storage Access Key
        """
        return pulumi.get(self, "pi_capture_cloud_storage_access_key")

    @pi_capture_cloud_storage_access_key.setter
    def pi_capture_cloud_storage_access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_capture_cloud_storage_access_key", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureCloudStorageRegion")
    def pi_capture_cloud_storage_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        List of Regions to use
        """
        return pulumi.get(self, "pi_capture_cloud_storage_region")

    @pi_capture_cloud_storage_region.setter
    def pi_capture_cloud_storage_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_capture_cloud_storage_region", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureCloudStorageSecretKey")
    def pi_capture_cloud_storage_secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Cloud Storage Secret Key
        """
        return pulumi.get(self, "pi_capture_cloud_storage_secret_key")

    @pi_capture_cloud_storage_secret_key.setter
    def pi_capture_cloud_storage_secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_capture_cloud_storage_secret_key", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureId")
    def pi_capture_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_capture_id")

    @pi_capture_id.setter
    def pi_capture_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_capture_id", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureStorageImagePath")
    def pi_capture_storage_image_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Storage Image Path (bucket-name [/folder/../..])
        """
        return pulumi.get(self, "pi_capture_storage_image_path")

    @pi_capture_storage_image_path.setter
    def pi_capture_storage_image_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_capture_storage_image_path", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureVolumeIds")
    def pi_capture_volume_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of Data volume IDs
        """
        return pulumi.get(self, "pi_capture_volume_ids")

    @pi_capture_volume_ids.setter
    def pi_capture_volume_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_capture_volume_ids", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiCaptureTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiCaptureTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiCaptureState:
    def __init__(__self__, *,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_cloud_storage_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_cloud_storage_region: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_cloud_storage_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_destination: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_storage_image_path: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['PiCaptureTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiCapture resources.
        :param pulumi.Input[_builtins.str] crn: The CRN of the resource.
        :param pulumi.Input[_builtins.str] image_id: The image id of the capture instance.
        :param pulumi.Input[_builtins.str] pi_capture_cloud_storage_access_key: Name of Cloud Storage Access Key
        :param pulumi.Input[_builtins.str] pi_capture_cloud_storage_region: List of Regions to use
        :param pulumi.Input[_builtins.str] pi_capture_cloud_storage_secret_key: Name of the Cloud Storage Secret Key
        :param pulumi.Input[_builtins.str] pi_capture_destination: Destination for the deployable image
        :param pulumi.Input[_builtins.str] pi_capture_name: Name of the capture to create. Note : this must be unique
        :param pulumi.Input[_builtins.str] pi_capture_storage_image_path: Cloud Storage Image Path (bucket-name [/folder/../..])
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_capture_volume_ids: List of Data volume IDs
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_name: Instance Name of the Power VM
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: List of user tags attached to the resource.
        """
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if pi_capture_cloud_storage_access_key is not None:
            pulumi.set(__self__, "pi_capture_cloud_storage_access_key", pi_capture_cloud_storage_access_key)
        if pi_capture_cloud_storage_region is not None:
            pulumi.set(__self__, "pi_capture_cloud_storage_region", pi_capture_cloud_storage_region)
        if pi_capture_cloud_storage_secret_key is not None:
            pulumi.set(__self__, "pi_capture_cloud_storage_secret_key", pi_capture_cloud_storage_secret_key)
        if pi_capture_destination is not None:
            pulumi.set(__self__, "pi_capture_destination", pi_capture_destination)
        if pi_capture_id is not None:
            pulumi.set(__self__, "pi_capture_id", pi_capture_id)
        if pi_capture_name is not None:
            pulumi.set(__self__, "pi_capture_name", pi_capture_name)
        if pi_capture_storage_image_path is not None:
            pulumi.set(__self__, "pi_capture_storage_image_path", pi_capture_storage_image_path)
        if pi_capture_volume_ids is not None:
            pulumi.set(__self__, "pi_capture_volume_ids", pi_capture_volume_ids)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_instance_name is not None:
            pulumi.set(__self__, "pi_instance_name", pi_instance_name)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of the resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image id of the capture instance.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureCloudStorageAccessKey")
    def pi_capture_cloud_storage_access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of Cloud Storage Access Key
        """
        return pulumi.get(self, "pi_capture_cloud_storage_access_key")

    @pi_capture_cloud_storage_access_key.setter
    def pi_capture_cloud_storage_access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_capture_cloud_storage_access_key", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureCloudStorageRegion")
    def pi_capture_cloud_storage_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        List of Regions to use
        """
        return pulumi.get(self, "pi_capture_cloud_storage_region")

    @pi_capture_cloud_storage_region.setter
    def pi_capture_cloud_storage_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_capture_cloud_storage_region", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureCloudStorageSecretKey")
    def pi_capture_cloud_storage_secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Cloud Storage Secret Key
        """
        return pulumi.get(self, "pi_capture_cloud_storage_secret_key")

    @pi_capture_cloud_storage_secret_key.setter
    def pi_capture_cloud_storage_secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_capture_cloud_storage_secret_key", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureDestination")
    def pi_capture_destination(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination for the deployable image
        """
        return pulumi.get(self, "pi_capture_destination")

    @pi_capture_destination.setter
    def pi_capture_destination(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_capture_destination", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureId")
    def pi_capture_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_capture_id")

    @pi_capture_id.setter
    def pi_capture_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_capture_id", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureName")
    def pi_capture_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the capture to create. Note : this must be unique
        """
        return pulumi.get(self, "pi_capture_name")

    @pi_capture_name.setter
    def pi_capture_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_capture_name", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureStorageImagePath")
    def pi_capture_storage_image_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Storage Image Path (bucket-name [/folder/../..])
        """
        return pulumi.get(self, "pi_capture_storage_image_path")

    @pi_capture_storage_image_path.setter
    def pi_capture_storage_image_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_capture_storage_image_path", value)

    @_builtins.property
    @pulumi.getter(name="piCaptureVolumeIds")
    def pi_capture_volume_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of Data volume IDs
        """
        return pulumi.get(self, "pi_capture_volume_ids")

    @pi_capture_volume_ids.setter
    def pi_capture_volume_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_capture_volume_ids", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance Name of the Power VM
        """
        return pulumi.get(self, "pi_instance_name")

    @pi_instance_name.setter
    def pi_instance_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_name", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiCaptureTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiCaptureTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piCapture:PiCapture")
class PiCapture(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_capture_cloud_storage_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_cloud_storage_region: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_cloud_storage_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_destination: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_storage_image_path: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiCaptureTimeoutsArgs', 'PiCaptureTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiCapture resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_capture_cloud_storage_access_key: Name of Cloud Storage Access Key
        :param pulumi.Input[_builtins.str] pi_capture_cloud_storage_region: List of Regions to use
        :param pulumi.Input[_builtins.str] pi_capture_cloud_storage_secret_key: Name of the Cloud Storage Secret Key
        :param pulumi.Input[_builtins.str] pi_capture_destination: Destination for the deployable image
        :param pulumi.Input[_builtins.str] pi_capture_name: Name of the capture to create. Note : this must be unique
        :param pulumi.Input[_builtins.str] pi_capture_storage_image_path: Cloud Storage Image Path (bucket-name [/folder/../..])
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_capture_volume_ids: List of Data volume IDs
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_name: Instance Name of the Power VM
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: List of user tags attached to the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiCaptureArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiCapture resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiCaptureArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiCaptureArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_capture_cloud_storage_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_cloud_storage_region: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_cloud_storage_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_destination: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_storage_image_path: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_capture_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiCaptureTimeoutsArgs', 'PiCaptureTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiCaptureArgs.__new__(PiCaptureArgs)

            __props__.__dict__["pi_capture_cloud_storage_access_key"] = None if pi_capture_cloud_storage_access_key is None else pulumi.Output.secret(pi_capture_cloud_storage_access_key)
            __props__.__dict__["pi_capture_cloud_storage_region"] = pi_capture_cloud_storage_region
            __props__.__dict__["pi_capture_cloud_storage_secret_key"] = None if pi_capture_cloud_storage_secret_key is None else pulumi.Output.secret(pi_capture_cloud_storage_secret_key)
            if pi_capture_destination is None and not opts.urn:
                raise TypeError("Missing required property 'pi_capture_destination'")
            __props__.__dict__["pi_capture_destination"] = pi_capture_destination
            __props__.__dict__["pi_capture_id"] = pi_capture_id
            if pi_capture_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_capture_name'")
            __props__.__dict__["pi_capture_name"] = pi_capture_name
            __props__.__dict__["pi_capture_storage_image_path"] = pi_capture_storage_image_path
            __props__.__dict__["pi_capture_volume_ids"] = pi_capture_volume_ids
            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            if pi_instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_instance_name'")
            __props__.__dict__["pi_instance_name"] = pi_instance_name
            __props__.__dict__["pi_user_tags"] = pi_user_tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["image_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["piCaptureCloudStorageAccessKey", "piCaptureCloudStorageSecretKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(PiCapture, __self__).__init__(
            'ibm:index/piCapture:PiCapture',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            image_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_capture_cloud_storage_access_key: Optional[pulumi.Input[_builtins.str]] = None,
            pi_capture_cloud_storage_region: Optional[pulumi.Input[_builtins.str]] = None,
            pi_capture_cloud_storage_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
            pi_capture_destination: Optional[pulumi.Input[_builtins.str]] = None,
            pi_capture_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_capture_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_capture_storage_image_path: Optional[pulumi.Input[_builtins.str]] = None,
            pi_capture_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['PiCaptureTimeoutsArgs', 'PiCaptureTimeoutsArgsDict']]] = None) -> 'PiCapture':
        """
        Get an existing PiCapture resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: The CRN of the resource.
        :param pulumi.Input[_builtins.str] image_id: The image id of the capture instance.
        :param pulumi.Input[_builtins.str] pi_capture_cloud_storage_access_key: Name of Cloud Storage Access Key
        :param pulumi.Input[_builtins.str] pi_capture_cloud_storage_region: List of Regions to use
        :param pulumi.Input[_builtins.str] pi_capture_cloud_storage_secret_key: Name of the Cloud Storage Secret Key
        :param pulumi.Input[_builtins.str] pi_capture_destination: Destination for the deployable image
        :param pulumi.Input[_builtins.str] pi_capture_name: Name of the capture to create. Note : this must be unique
        :param pulumi.Input[_builtins.str] pi_capture_storage_image_path: Cloud Storage Image Path (bucket-name [/folder/../..])
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_capture_volume_ids: List of Data volume IDs
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_name: Instance Name of the Power VM
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: List of user tags attached to the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiCaptureState.__new__(_PiCaptureState)

        __props__.__dict__["crn"] = crn
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["pi_capture_cloud_storage_access_key"] = pi_capture_cloud_storage_access_key
        __props__.__dict__["pi_capture_cloud_storage_region"] = pi_capture_cloud_storage_region
        __props__.__dict__["pi_capture_cloud_storage_secret_key"] = pi_capture_cloud_storage_secret_key
        __props__.__dict__["pi_capture_destination"] = pi_capture_destination
        __props__.__dict__["pi_capture_id"] = pi_capture_id
        __props__.__dict__["pi_capture_name"] = pi_capture_name
        __props__.__dict__["pi_capture_storage_image_path"] = pi_capture_storage_image_path
        __props__.__dict__["pi_capture_volume_ids"] = pi_capture_volume_ids
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_instance_name"] = pi_instance_name
        __props__.__dict__["pi_user_tags"] = pi_user_tags
        __props__.__dict__["timeouts"] = timeouts
        return PiCapture(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of the resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[_builtins.str]:
        """
        The image id of the capture instance.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="piCaptureCloudStorageAccessKey")
    def pi_capture_cloud_storage_access_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of Cloud Storage Access Key
        """
        return pulumi.get(self, "pi_capture_cloud_storage_access_key")

    @_builtins.property
    @pulumi.getter(name="piCaptureCloudStorageRegion")
    def pi_capture_cloud_storage_region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        List of Regions to use
        """
        return pulumi.get(self, "pi_capture_cloud_storage_region")

    @_builtins.property
    @pulumi.getter(name="piCaptureCloudStorageSecretKey")
    def pi_capture_cloud_storage_secret_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of the Cloud Storage Secret Key
        """
        return pulumi.get(self, "pi_capture_cloud_storage_secret_key")

    @_builtins.property
    @pulumi.getter(name="piCaptureDestination")
    def pi_capture_destination(self) -> pulumi.Output[_builtins.str]:
        """
        Destination for the deployable image
        """
        return pulumi.get(self, "pi_capture_destination")

    @_builtins.property
    @pulumi.getter(name="piCaptureId")
    def pi_capture_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_capture_id")

    @_builtins.property
    @pulumi.getter(name="piCaptureName")
    def pi_capture_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the capture to create. Note : this must be unique
        """
        return pulumi.get(self, "pi_capture_name")

    @_builtins.property
    @pulumi.getter(name="piCaptureStorageImagePath")
    def pi_capture_storage_image_path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Cloud Storage Image Path (bucket-name [/folder/../..])
        """
        return pulumi.get(self, "pi_capture_storage_image_path")

    @_builtins.property
    @pulumi.getter(name="piCaptureVolumeIds")
    def pi_capture_volume_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of Data volume IDs
        """
        return pulumi.get(self, "pi_capture_volume_ids")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> pulumi.Output[_builtins.str]:
        """
        Instance Name of the Power VM
        """
        return pulumi.get(self, "pi_instance_name")

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiCaptureTimeouts']]:
        return pulumi.get(self, "timeouts")

