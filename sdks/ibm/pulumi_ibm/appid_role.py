# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppidRoleArgs', 'AppidRole']

@pulumi.input_type
class AppidRoleArgs:
    def __init__(__self__, *,
                 tenant_id: pulumi.Input[_builtins.str],
                 accesses: Optional[pulumi.Input[Sequence[pulumi.Input['AppidRoleAccessArgs']]]] = None,
                 appid_role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppidRole resource.
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        :param pulumi.Input[_builtins.str] description: Optional role description
        :param pulumi.Input[_builtins.str] name: Unique role name
        """
        pulumi.set(__self__, "tenant_id", tenant_id)
        if accesses is not None:
            pulumi.set(__self__, "accesses", accesses)
        if appid_role_id is not None:
            pulumi.set(__self__, "appid_role_id", appid_role_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter
    def accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppidRoleAccessArgs']]]]:
        return pulumi.get(self, "accesses")

    @accesses.setter
    def accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppidRoleAccessArgs']]]]):
        pulumi.set(self, "accesses", value)

    @_builtins.property
    @pulumi.getter(name="appidRoleId")
    def appid_role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_role_id")

    @appid_role_id.setter
    def appid_role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_role_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional role description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique role name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AppidRoleState:
    def __init__(__self__, *,
                 accesses: Optional[pulumi.Input[Sequence[pulumi.Input['AppidRoleAccessArgs']]]] = None,
                 appid_role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppidRole resources.
        :param pulumi.Input[_builtins.str] description: Optional role description
        :param pulumi.Input[_builtins.str] name: Unique role name
        :param pulumi.Input[_builtins.str] role_id: Role ID
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        if accesses is not None:
            pulumi.set(__self__, "accesses", accesses)
        if appid_role_id is not None:
            pulumi.set(__self__, "appid_role_id", appid_role_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppidRoleAccessArgs']]]]:
        return pulumi.get(self, "accesses")

    @accesses.setter
    def accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppidRoleAccessArgs']]]]):
        pulumi.set(self, "accesses", value)

    @_builtins.property
    @pulumi.getter(name="appidRoleId")
    def appid_role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_role_id")

    @appid_role_id.setter
    def appid_role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_role_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional role description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique role name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Role ID
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.type_token("ibm:index/appidRole:AppidRole")
class AppidRole(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accesses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidRoleAccessArgs', 'AppidRoleAccessArgsDict']]]]] = None,
                 appid_role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppidRole resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Optional role description
        :param pulumi.Input[_builtins.str] name: Unique role name
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppidRoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppidRole resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppidRoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppidRoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accesses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidRoleAccessArgs', 'AppidRoleAccessArgsDict']]]]] = None,
                 appid_role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppidRoleArgs.__new__(AppidRoleArgs)

            __props__.__dict__["accesses"] = accesses
            __props__.__dict__["appid_role_id"] = appid_role_id
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["role_id"] = None
        super(AppidRole, __self__).__init__(
            'ibm:index/appidRole:AppidRole',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accesses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidRoleAccessArgs', 'AppidRoleAccessArgsDict']]]]] = None,
            appid_role_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            role_id: Optional[pulumi.Input[_builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppidRole':
        """
        Get an existing AppidRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Optional role description
        :param pulumi.Input[_builtins.str] name: Unique role name
        :param pulumi.Input[_builtins.str] role_id: Role ID
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppidRoleState.__new__(_AppidRoleState)

        __props__.__dict__["accesses"] = accesses
        __props__.__dict__["appid_role_id"] = appid_role_id
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["tenant_id"] = tenant_id
        return AppidRole(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def accesses(self) -> pulumi.Output[Optional[Sequence['outputs.AppidRoleAccess']]]:
        return pulumi.get(self, "accesses")

    @_builtins.property
    @pulumi.getter(name="appidRoleId")
    def appid_role_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "appid_role_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional role description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Unique role name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[_builtins.str]:
        """
        Role ID
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

