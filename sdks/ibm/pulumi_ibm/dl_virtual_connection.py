# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DlVirtualConnectionArgs', 'DlVirtualConnection']

@pulumi.input_type
class DlVirtualConnectionArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 dl_virtual_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['DlVirtualConnectionTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a DlVirtualConnection resource.
        :param pulumi.Input[_builtins.str] gateway: The Direct Link gateway identifier
        :param pulumi.Input[_builtins.str] type: The type of virtual connection.Allowable values (classic,vpc)
        :param pulumi.Input[_builtins.str] name: The user-defined name for this virtual connection. Virtualconnection names are unique within a gateway. This is the name
               of thevirtual connection itself, the network being connected may have its ownname attribute
        :param pulumi.Input[_builtins.str] network_id: Unique identifier of the target network. For type=vpc virtual connections this is the CRN of the target VPC. This field
               does not apply to type=classic connections.
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "type", type)
        if dl_virtual_connection_id is not None:
            pulumi.set(__self__, "dl_virtual_connection_id", dl_virtual_connection_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[_builtins.str]:
        """
        The Direct Link gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of virtual connection.Allowable values (classic,vpc)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="dlVirtualConnectionId")
    def dl_virtual_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dl_virtual_connection_id")

    @dl_virtual_connection_id.setter
    def dl_virtual_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dl_virtual_connection_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this virtual connection. Virtualconnection names are unique within a gateway. This is the name
        of thevirtual connection itself, the network being connected may have its ownname attribute
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier of the target network. For type=vpc virtual connections this is the CRN of the target VPC. This field
        does not apply to type=classic connections.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DlVirtualConnectionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DlVirtualConnectionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _DlVirtualConnectionState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 dl_virtual_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_account: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 related_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['DlVirtualConnectionTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_connection_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DlVirtualConnection resources.
        :param pulumi.Input[_builtins.str] created_at: The date and time resource was created
        :param pulumi.Input[_builtins.str] gateway: The Direct Link gateway identifier
        :param pulumi.Input[_builtins.str] name: The user-defined name for this virtual connection. Virtualconnection names are unique within a gateway. This is the name
               of thevirtual connection itself, the network being connected may have its ownname attribute
        :param pulumi.Input[_builtins.str] network_account: For virtual connections across two different IBM Cloud Accounts network_account indicates the account that owns the
               target network.
        :param pulumi.Input[_builtins.str] network_id: Unique identifier of the target network. For type=vpc virtual connections this is the CRN of the target VPC. This field
               does not apply to type=classic connections.
        :param pulumi.Input[_builtins.str] related_crn: The crn of the Direct link gateway
        :param pulumi.Input[_builtins.str] status: Status of the virtual connection.Possible values:
               [pending,attached,approval_pending,rejected,expired,deleting,detached_by_network_pending,detached_by_network]
        :param pulumi.Input[_builtins.str] type: The type of virtual connection.Allowable values (classic,vpc)
        :param pulumi.Input[_builtins.str] virtual_connection_id: The Direct Gateway virtual connection identifier
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dl_virtual_connection_id is not None:
            pulumi.set(__self__, "dl_virtual_connection_id", dl_virtual_connection_id)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_account is not None:
            pulumi.set(__self__, "network_account", network_account)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if related_crn is not None:
            pulumi.set(__self__, "related_crn", related_crn)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_connection_id is not None:
            pulumi.set(__self__, "virtual_connection_id", virtual_connection_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time resource was created
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dlVirtualConnectionId")
    def dl_virtual_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dl_virtual_connection_id")

    @dl_virtual_connection_id.setter
    def dl_virtual_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dl_virtual_connection_id", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Direct Link gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this virtual connection. Virtualconnection names are unique within a gateway. This is the name
        of thevirtual connection itself, the network being connected may have its ownname attribute
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAccount")
    def network_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        For virtual connections across two different IBM Cloud Accounts network_account indicates the account that owns the
        target network.
        """
        return pulumi.get(self, "network_account")

    @network_account.setter
    def network_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_account", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier of the target network. For type=vpc virtual connections this is the CRN of the target VPC. This field
        does not apply to type=classic connections.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the Direct link gateway
        """
        return pulumi.get(self, "related_crn")

    @related_crn.setter
    def related_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_crn", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the virtual connection.Possible values:
        [pending,attached,approval_pending,rejected,expired,deleting,detached_by_network_pending,detached_by_network]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DlVirtualConnectionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DlVirtualConnectionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of virtual connection.Allowable values (classic,vpc)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="virtualConnectionId")
    def virtual_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Direct Gateway virtual connection identifier
        """
        return pulumi.get(self, "virtual_connection_id")

    @virtual_connection_id.setter
    def virtual_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "virtual_connection_id", value)


@pulumi.type_token("ibm:index/dlVirtualConnection:DlVirtualConnection")
class DlVirtualConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dl_virtual_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DlVirtualConnectionTimeoutsArgs', 'DlVirtualConnectionTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a DlVirtualConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] gateway: The Direct Link gateway identifier
        :param pulumi.Input[_builtins.str] name: The user-defined name for this virtual connection. Virtualconnection names are unique within a gateway. This is the name
               of thevirtual connection itself, the network being connected may have its ownname attribute
        :param pulumi.Input[_builtins.str] network_id: Unique identifier of the target network. For type=vpc virtual connections this is the CRN of the target VPC. This field
               does not apply to type=classic connections.
        :param pulumi.Input[_builtins.str] type: The type of virtual connection.Allowable values (classic,vpc)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DlVirtualConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DlVirtualConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DlVirtualConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DlVirtualConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dl_virtual_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DlVirtualConnectionTimeoutsArgs', 'DlVirtualConnectionTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DlVirtualConnectionArgs.__new__(DlVirtualConnectionArgs)

            __props__.__dict__["dl_virtual_connection_id"] = dl_virtual_connection_id
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["name"] = name
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["timeouts"] = timeouts
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["network_account"] = None
            __props__.__dict__["related_crn"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["virtual_connection_id"] = None
        super(DlVirtualConnection, __self__).__init__(
            'ibm:index/dlVirtualConnection:DlVirtualConnection',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            dl_virtual_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            gateway: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_account: Optional[pulumi.Input[_builtins.str]] = None,
            network_id: Optional[pulumi.Input[_builtins.str]] = None,
            related_crn: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['DlVirtualConnectionTimeoutsArgs', 'DlVirtualConnectionTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_connection_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DlVirtualConnection':
        """
        Get an existing DlVirtualConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The date and time resource was created
        :param pulumi.Input[_builtins.str] gateway: The Direct Link gateway identifier
        :param pulumi.Input[_builtins.str] name: The user-defined name for this virtual connection. Virtualconnection names are unique within a gateway. This is the name
               of thevirtual connection itself, the network being connected may have its ownname attribute
        :param pulumi.Input[_builtins.str] network_account: For virtual connections across two different IBM Cloud Accounts network_account indicates the account that owns the
               target network.
        :param pulumi.Input[_builtins.str] network_id: Unique identifier of the target network. For type=vpc virtual connections this is the CRN of the target VPC. This field
               does not apply to type=classic connections.
        :param pulumi.Input[_builtins.str] related_crn: The crn of the Direct link gateway
        :param pulumi.Input[_builtins.str] status: Status of the virtual connection.Possible values:
               [pending,attached,approval_pending,rejected,expired,deleting,detached_by_network_pending,detached_by_network]
        :param pulumi.Input[_builtins.str] type: The type of virtual connection.Allowable values (classic,vpc)
        :param pulumi.Input[_builtins.str] virtual_connection_id: The Direct Gateway virtual connection identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DlVirtualConnectionState.__new__(_DlVirtualConnectionState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dl_virtual_connection_id"] = dl_virtual_connection_id
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["name"] = name
        __props__.__dict__["network_account"] = network_account
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["related_crn"] = related_crn
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["virtual_connection_id"] = virtual_connection_id
        return DlVirtualConnection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time resource was created
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dlVirtualConnectionId")
    def dl_virtual_connection_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dl_virtual_connection_id")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[_builtins.str]:
        """
        The Direct Link gateway identifier
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this virtual connection. Virtualconnection names are unique within a gateway. This is the name
        of thevirtual connection itself, the network being connected may have its ownname attribute
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAccount")
    def network_account(self) -> pulumi.Output[_builtins.str]:
        """
        For virtual connections across two different IBM Cloud Accounts network_account indicates the account that owns the
        target network.
        """
        return pulumi.get(self, "network_account")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier of the target network. For type=vpc virtual connections this is the CRN of the target VPC. This field
        does not apply to type=classic connections.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the Direct link gateway
        """
        return pulumi.get(self, "related_crn")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the virtual connection.Possible values:
        [pending,attached,approval_pending,rejected,expired,deleting,detached_by_network_pending,detached_by_network]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.DlVirtualConnectionTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of virtual connection.Allowable values (classic,vpc)
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="virtualConnectionId")
    def virtual_connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Direct Gateway virtual connection identifier
        """
        return pulumi.get(self, "virtual_connection_id")

