# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsVpcRoutingTableArgs', 'IsVpcRoutingTable']

@pulumi.input_type
class IsVpcRoutingTableArgs:
    def __init__(__self__, *,
                 vpc: pulumi.Input[_builtins.str],
                 accept_routes_from_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 advertise_routes_tos: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_vpc_routing_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 route_direct_link_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_internet_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_transit_gateway_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_vpc_zone_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsVpcRoutingTableTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsVpcRoutingTable resource.
        :param pulumi.Input[_builtins.str] vpc: The VPC identifier.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] accept_routes_from_resource_types: The filters specifying the resources that may create routes in this routing table, The resource type: vpn_gateway or
               vpn_server
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] advertise_routes_tos: The ingress sources to advertise routes to. Routes in the table with `advertise` enabled will be advertised to these
               sources.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this routing table.
        :param pulumi.Input[_builtins.bool] route_direct_link_ingress: If set to true, this routing table will be used to route traffic that originates from Direct Link to this VPC.
        :param pulumi.Input[_builtins.bool] route_internet_ingress: If set to true, this routing table will be used to route traffic that originates from the internet. For this to succeed,
               the VPC must not already have a routing table with this property set to true.
        :param pulumi.Input[_builtins.bool] route_transit_gateway_ingress: If set to true, this routing table will be used to route traffic that originates from Transit Gateway to this VPC.
        :param pulumi.Input[_builtins.bool] route_vpc_zone_ingress: If set to true, this routing table will be used to route traffic that originates from subnets in other zones in this
               VPC.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        pulumi.set(__self__, "vpc", vpc)
        if accept_routes_from_resource_types is not None:
            pulumi.set(__self__, "accept_routes_from_resource_types", accept_routes_from_resource_types)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if advertise_routes_tos is not None:
            pulumi.set(__self__, "advertise_routes_tos", advertise_routes_tos)
        if is_vpc_routing_table_id is not None:
            pulumi.set(__self__, "is_vpc_routing_table_id", is_vpc_routing_table_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_direct_link_ingress is not None:
            pulumi.set(__self__, "route_direct_link_ingress", route_direct_link_ingress)
        if route_internet_ingress is not None:
            pulumi.set(__self__, "route_internet_ingress", route_internet_ingress)
        if route_transit_gateway_ingress is not None:
            pulumi.set(__self__, "route_transit_gateway_ingress", route_transit_gateway_ingress)
        if route_vpc_zone_ingress is not None:
            pulumi.set(__self__, "route_vpc_zone_ingress", route_vpc_zone_ingress)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Input[_builtins.str]:
        """
        The VPC identifier.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter(name="acceptRoutesFromResourceTypes")
    def accept_routes_from_resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The filters specifying the resources that may create routes in this routing table, The resource type: vpn_gateway or
        vpn_server
        """
        return pulumi.get(self, "accept_routes_from_resource_types")

    @accept_routes_from_resource_types.setter
    def accept_routes_from_resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "accept_routes_from_resource_types", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="advertiseRoutesTos")
    def advertise_routes_tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The ingress sources to advertise routes to. Routes in the table with `advertise` enabled will be advertised to these
        sources.
        """
        return pulumi.get(self, "advertise_routes_tos")

    @advertise_routes_tos.setter
    def advertise_routes_tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "advertise_routes_tos", value)

    @_builtins.property
    @pulumi.getter(name="isVpcRoutingTableId")
    def is_vpc_routing_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpc_routing_table_id")

    @is_vpc_routing_table_id.setter
    def is_vpc_routing_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpc_routing_table_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this routing table.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="routeDirectLinkIngress")
    def route_direct_link_ingress(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this routing table will be used to route traffic that originates from Direct Link to this VPC.
        """
        return pulumi.get(self, "route_direct_link_ingress")

    @route_direct_link_ingress.setter
    def route_direct_link_ingress(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_direct_link_ingress", value)

    @_builtins.property
    @pulumi.getter(name="routeInternetIngress")
    def route_internet_ingress(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this routing table will be used to route traffic that originates from the internet. For this to succeed,
        the VPC must not already have a routing table with this property set to true.
        """
        return pulumi.get(self, "route_internet_ingress")

    @route_internet_ingress.setter
    def route_internet_ingress(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_internet_ingress", value)

    @_builtins.property
    @pulumi.getter(name="routeTransitGatewayIngress")
    def route_transit_gateway_ingress(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this routing table will be used to route traffic that originates from Transit Gateway to this VPC.
        """
        return pulumi.get(self, "route_transit_gateway_ingress")

    @route_transit_gateway_ingress.setter
    def route_transit_gateway_ingress(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_transit_gateway_ingress", value)

    @_builtins.property
    @pulumi.getter(name="routeVpcZoneIngress")
    def route_vpc_zone_ingress(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this routing table will be used to route traffic that originates from subnets in other zones in this
        VPC.
        """
        return pulumi.get(self, "route_vpc_zone_ingress")

    @route_vpc_zone_ingress.setter
    def route_vpc_zone_ingress(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_vpc_zone_ingress", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpcRoutingTableTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpcRoutingTableTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsVpcRoutingTableState:
    def __init__(__self__, *,
                 accept_routes_from_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 advertise_routes_tos: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vpc_routing_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcRoutingTableResourceGroupArgs']]]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 route_direct_link_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_internet_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_transit_gateway_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_vpc_zone_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcRoutingTableSubnetArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsVpcRoutingTableTimeoutsArgs']] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsVpcRoutingTable resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] accept_routes_from_resource_types: The filters specifying the resources that may create routes in this routing table, The resource type: vpn_gateway or
               vpn_server
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] advertise_routes_tos: The ingress sources to advertise routes to. Routes in the table with `advertise` enabled will be advertised to these
               sources.
        :param pulumi.Input[_builtins.str] created_at: Routing table Created At
        :param pulumi.Input[_builtins.str] crn: The routing table CRN.
        :param pulumi.Input[_builtins.str] href: Routing table Href
        :param pulumi.Input[_builtins.bool] is_default: Indicates whether this is the default routing table for this VPC
        :param pulumi.Input[_builtins.str] lifecycle_state: Routing table Lifecycle State
        :param pulumi.Input[_builtins.str] name: The user-defined name for this routing table.
        :param pulumi.Input[Sequence[pulumi.Input['IsVpcRoutingTableResourceGroupArgs']]] resource_groups: The resource group for this volume.
        :param pulumi.Input[_builtins.str] resource_type: Routing table Resource Type
        :param pulumi.Input[_builtins.bool] route_direct_link_ingress: If set to true, this routing table will be used to route traffic that originates from Direct Link to this VPC.
        :param pulumi.Input[_builtins.bool] route_internet_ingress: If set to true, this routing table will be used to route traffic that originates from the internet. For this to succeed,
               the VPC must not already have a routing table with this property set to true.
        :param pulumi.Input[_builtins.bool] route_transit_gateway_ingress: If set to true, this routing table will be used to route traffic that originates from Transit Gateway to this VPC.
        :param pulumi.Input[_builtins.bool] route_vpc_zone_ingress: If set to true, this routing table will be used to route traffic that originates from subnets in other zones in this
               VPC.
        :param pulumi.Input[_builtins.str] routing_table: The routing table identifier.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] vpc: The VPC identifier.
        """
        if accept_routes_from_resource_types is not None:
            pulumi.set(__self__, "accept_routes_from_resource_types", accept_routes_from_resource_types)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if advertise_routes_tos is not None:
            pulumi.set(__self__, "advertise_routes_tos", advertise_routes_tos)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_vpc_routing_table_id is not None:
            pulumi.set(__self__, "is_vpc_routing_table_id", is_vpc_routing_table_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_groups is not None:
            pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if route_direct_link_ingress is not None:
            pulumi.set(__self__, "route_direct_link_ingress", route_direct_link_ingress)
        if route_internet_ingress is not None:
            pulumi.set(__self__, "route_internet_ingress", route_internet_ingress)
        if route_transit_gateway_ingress is not None:
            pulumi.set(__self__, "route_transit_gateway_ingress", route_transit_gateway_ingress)
        if route_vpc_zone_ingress is not None:
            pulumi.set(__self__, "route_vpc_zone_ingress", route_vpc_zone_ingress)
        if routing_table is not None:
            pulumi.set(__self__, "routing_table", routing_table)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter(name="acceptRoutesFromResourceTypes")
    def accept_routes_from_resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The filters specifying the resources that may create routes in this routing table, The resource type: vpn_gateway or
        vpn_server
        """
        return pulumi.get(self, "accept_routes_from_resource_types")

    @accept_routes_from_resource_types.setter
    def accept_routes_from_resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "accept_routes_from_resource_types", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="advertiseRoutesTos")
    def advertise_routes_tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The ingress sources to advertise routes to. Routes in the table with `advertise` enabled will be advertised to these
        sources.
        """
        return pulumi.get(self, "advertise_routes_tos")

    @advertise_routes_tos.setter
    def advertise_routes_tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "advertise_routes_tos", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Routing table Created At
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The routing table CRN.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Routing table Href
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether this is the default routing table for this VPC
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter(name="isVpcRoutingTableId")
    def is_vpc_routing_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpc_routing_table_id")

    @is_vpc_routing_table_id.setter
    def is_vpc_routing_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpc_routing_table_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Routing table Lifecycle State
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this routing table.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcRoutingTableResourceGroupArgs']]]]:
        """
        The resource group for this volume.
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcRoutingTableResourceGroupArgs']]]]):
        pulumi.set(self, "resource_groups", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Routing table Resource Type
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="routeDirectLinkIngress")
    def route_direct_link_ingress(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this routing table will be used to route traffic that originates from Direct Link to this VPC.
        """
        return pulumi.get(self, "route_direct_link_ingress")

    @route_direct_link_ingress.setter
    def route_direct_link_ingress(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_direct_link_ingress", value)

    @_builtins.property
    @pulumi.getter(name="routeInternetIngress")
    def route_internet_ingress(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this routing table will be used to route traffic that originates from the internet. For this to succeed,
        the VPC must not already have a routing table with this property set to true.
        """
        return pulumi.get(self, "route_internet_ingress")

    @route_internet_ingress.setter
    def route_internet_ingress(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_internet_ingress", value)

    @_builtins.property
    @pulumi.getter(name="routeTransitGatewayIngress")
    def route_transit_gateway_ingress(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this routing table will be used to route traffic that originates from Transit Gateway to this VPC.
        """
        return pulumi.get(self, "route_transit_gateway_ingress")

    @route_transit_gateway_ingress.setter
    def route_transit_gateway_ingress(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_transit_gateway_ingress", value)

    @_builtins.property
    @pulumi.getter(name="routeVpcZoneIngress")
    def route_vpc_zone_ingress(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this routing table will be used to route traffic that originates from subnets in other zones in this
        VPC.
        """
        return pulumi.get(self, "route_vpc_zone_ingress")

    @route_vpc_zone_ingress.setter
    def route_vpc_zone_ingress(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_vpc_zone_ingress", value)

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The routing table identifier.
        """
        return pulumi.get(self, "routing_table")

    @routing_table.setter
    def routing_table(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_table", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcRoutingTableSubnetArgs']]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcRoutingTableSubnetArgs']]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpcRoutingTableTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpcRoutingTableTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC identifier.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)


@pulumi.type_token("ibm:index/isVpcRoutingTable:IsVpcRoutingTable")
class IsVpcRoutingTable(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_routes_from_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 advertise_routes_tos: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_vpc_routing_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 route_direct_link_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_internet_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_transit_gateway_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_vpc_zone_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpcRoutingTableTimeoutsArgs', 'IsVpcRoutingTableTimeoutsArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsVpcRoutingTable resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] accept_routes_from_resource_types: The filters specifying the resources that may create routes in this routing table, The resource type: vpn_gateway or
               vpn_server
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] advertise_routes_tos: The ingress sources to advertise routes to. Routes in the table with `advertise` enabled will be advertised to these
               sources.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this routing table.
        :param pulumi.Input[_builtins.bool] route_direct_link_ingress: If set to true, this routing table will be used to route traffic that originates from Direct Link to this VPC.
        :param pulumi.Input[_builtins.bool] route_internet_ingress: If set to true, this routing table will be used to route traffic that originates from the internet. For this to succeed,
               the VPC must not already have a routing table with this property set to true.
        :param pulumi.Input[_builtins.bool] route_transit_gateway_ingress: If set to true, this routing table will be used to route traffic that originates from Transit Gateway to this VPC.
        :param pulumi.Input[_builtins.bool] route_vpc_zone_ingress: If set to true, this routing table will be used to route traffic that originates from subnets in other zones in this
               VPC.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] vpc: The VPC identifier.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsVpcRoutingTableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVpcRoutingTable resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVpcRoutingTableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVpcRoutingTableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_routes_from_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 advertise_routes_tos: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_vpc_routing_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 route_direct_link_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_internet_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_transit_gateway_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_vpc_zone_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpcRoutingTableTimeoutsArgs', 'IsVpcRoutingTableTimeoutsArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVpcRoutingTableArgs.__new__(IsVpcRoutingTableArgs)

            __props__.__dict__["accept_routes_from_resource_types"] = accept_routes_from_resource_types
            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["advertise_routes_tos"] = advertise_routes_tos
            __props__.__dict__["is_vpc_routing_table_id"] = is_vpc_routing_table_id
            __props__.__dict__["name"] = name
            __props__.__dict__["route_direct_link_ingress"] = route_direct_link_ingress
            __props__.__dict__["route_internet_ingress"] = route_internet_ingress
            __props__.__dict__["route_transit_gateway_ingress"] = route_transit_gateway_ingress
            __props__.__dict__["route_vpc_zone_ingress"] = route_vpc_zone_ingress
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            if vpc is None and not opts.urn:
                raise TypeError("Missing required property 'vpc'")
            __props__.__dict__["vpc"] = vpc
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["is_default"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["resource_groups"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["routing_table"] = None
            __props__.__dict__["subnets"] = None
        super(IsVpcRoutingTable, __self__).__init__(
            'ibm:index/isVpcRoutingTable:IsVpcRoutingTable',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accept_routes_from_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            advertise_routes_tos: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_default: Optional[pulumi.Input[_builtins.bool]] = None,
            is_vpc_routing_table_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpcRoutingTableResourceGroupArgs', 'IsVpcRoutingTableResourceGroupArgsDict']]]]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            route_direct_link_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
            route_internet_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
            route_transit_gateway_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
            route_vpc_zone_ingress: Optional[pulumi.Input[_builtins.bool]] = None,
            routing_table: Optional[pulumi.Input[_builtins.str]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpcRoutingTableSubnetArgs', 'IsVpcRoutingTableSubnetArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsVpcRoutingTableTimeoutsArgs', 'IsVpcRoutingTableTimeoutsArgsDict']]] = None,
            vpc: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsVpcRoutingTable':
        """
        Get an existing IsVpcRoutingTable resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] accept_routes_from_resource_types: The filters specifying the resources that may create routes in this routing table, The resource type: vpn_gateway or
               vpn_server
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] advertise_routes_tos: The ingress sources to advertise routes to. Routes in the table with `advertise` enabled will be advertised to these
               sources.
        :param pulumi.Input[_builtins.str] created_at: Routing table Created At
        :param pulumi.Input[_builtins.str] crn: The routing table CRN.
        :param pulumi.Input[_builtins.str] href: Routing table Href
        :param pulumi.Input[_builtins.bool] is_default: Indicates whether this is the default routing table for this VPC
        :param pulumi.Input[_builtins.str] lifecycle_state: Routing table Lifecycle State
        :param pulumi.Input[_builtins.str] name: The user-defined name for this routing table.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpcRoutingTableResourceGroupArgs', 'IsVpcRoutingTableResourceGroupArgsDict']]]] resource_groups: The resource group for this volume.
        :param pulumi.Input[_builtins.str] resource_type: Routing table Resource Type
        :param pulumi.Input[_builtins.bool] route_direct_link_ingress: If set to true, this routing table will be used to route traffic that originates from Direct Link to this VPC.
        :param pulumi.Input[_builtins.bool] route_internet_ingress: If set to true, this routing table will be used to route traffic that originates from the internet. For this to succeed,
               the VPC must not already have a routing table with this property set to true.
        :param pulumi.Input[_builtins.bool] route_transit_gateway_ingress: If set to true, this routing table will be used to route traffic that originates from Transit Gateway to this VPC.
        :param pulumi.Input[_builtins.bool] route_vpc_zone_ingress: If set to true, this routing table will be used to route traffic that originates from subnets in other zones in this
               VPC.
        :param pulumi.Input[_builtins.str] routing_table: The routing table identifier.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] vpc: The VPC identifier.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVpcRoutingTableState.__new__(_IsVpcRoutingTableState)

        __props__.__dict__["accept_routes_from_resource_types"] = accept_routes_from_resource_types
        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["advertise_routes_tos"] = advertise_routes_tos
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["href"] = href
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["is_vpc_routing_table_id"] = is_vpc_routing_table_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_groups"] = resource_groups
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["route_direct_link_ingress"] = route_direct_link_ingress
        __props__.__dict__["route_internet_ingress"] = route_internet_ingress
        __props__.__dict__["route_transit_gateway_ingress"] = route_transit_gateway_ingress
        __props__.__dict__["route_vpc_zone_ingress"] = route_vpc_zone_ingress
        __props__.__dict__["routing_table"] = routing_table
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpc"] = vpc
        return IsVpcRoutingTable(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="acceptRoutesFromResourceTypes")
    def accept_routes_from_resource_types(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The filters specifying the resources that may create routes in this routing table, The resource type: vpn_gateway or
        vpn_server
        """
        return pulumi.get(self, "accept_routes_from_resource_types")

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="advertiseRoutesTos")
    def advertise_routes_tos(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The ingress sources to advertise routes to. Routes in the table with `advertise` enabled will be advertised to these
        sources.
        """
        return pulumi.get(self, "advertise_routes_tos")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Routing table Created At
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The routing table CRN.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        Routing table Href
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether this is the default routing table for this VPC
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter(name="isVpcRoutingTableId")
    def is_vpc_routing_table_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_vpc_routing_table_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        Routing table Lifecycle State
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this routing table.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> pulumi.Output[Sequence['outputs.IsVpcRoutingTableResourceGroup']]:
        """
        The resource group for this volume.
        """
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        Routing table Resource Type
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="routeDirectLinkIngress")
    def route_direct_link_ingress(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, this routing table will be used to route traffic that originates from Direct Link to this VPC.
        """
        return pulumi.get(self, "route_direct_link_ingress")

    @_builtins.property
    @pulumi.getter(name="routeInternetIngress")
    def route_internet_ingress(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, this routing table will be used to route traffic that originates from the internet. For this to succeed,
        the VPC must not already have a routing table with this property set to true.
        """
        return pulumi.get(self, "route_internet_ingress")

    @_builtins.property
    @pulumi.getter(name="routeTransitGatewayIngress")
    def route_transit_gateway_ingress(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, this routing table will be used to route traffic that originates from Transit Gateway to this VPC.
        """
        return pulumi.get(self, "route_transit_gateway_ingress")

    @_builtins.property
    @pulumi.getter(name="routeVpcZoneIngress")
    def route_vpc_zone_ingress(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, this routing table will be used to route traffic that originates from subnets in other zones in this
        VPC.
        """
        return pulumi.get(self, "route_vpc_zone_ingress")

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> pulumi.Output[_builtins.str]:
        """
        The routing table identifier.
        """
        return pulumi.get(self, "routing_table")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence['outputs.IsVpcRoutingTableSubnet']]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsVpcRoutingTableTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[_builtins.str]:
        """
        The VPC identifier.
        """
        return pulumi.get(self, "vpc")

