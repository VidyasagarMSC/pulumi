# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetContainerIngressInstanceResult',
    'AwaitableGetContainerIngressInstanceResult',
    'get_container_ingress_instance',
    'get_container_ingress_instance_output',
]

@pulumi.output_type
class GetContainerIngressInstanceResult:
    """
    A collection of values returned by getContainerIngressInstance.
    """
    def __init__(__self__, cluster=None, id=None, instance_crn=None, instance_name=None, instance_type=None, is_default=None, secret_group_id=None, secret_group_name=None, status=None, user_managed=None):
        if cluster and not isinstance(cluster, str):
            raise TypeError("Expected argument 'cluster' to be a str")
        pulumi.set(__self__, "cluster", cluster)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_crn and not isinstance(instance_crn, str):
            raise TypeError("Expected argument 'instance_crn' to be a str")
        pulumi.set(__self__, "instance_crn", instance_crn)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if secret_group_id and not isinstance(secret_group_id, str):
            raise TypeError("Expected argument 'secret_group_id' to be a str")
        pulumi.set(__self__, "secret_group_id", secret_group_id)
        if secret_group_name and not isinstance(secret_group_name, str):
            raise TypeError("Expected argument 'secret_group_name' to be a str")
        pulumi.set(__self__, "secret_group_name", secret_group_name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if user_managed and not isinstance(user_managed, bool):
            raise TypeError("Expected argument 'user_managed' to be a bool")
        pulumi.set(__self__, "user_managed", user_managed)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> _builtins.str:
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceCrn")
    def instance_crn(self) -> _builtins.str:
        return pulumi.get(self, "instance_crn")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter(name="secretGroupId")
    def secret_group_id(self) -> _builtins.str:
        return pulumi.get(self, "secret_group_id")

    @_builtins.property
    @pulumi.getter(name="secretGroupName")
    def secret_group_name(self) -> _builtins.str:
        return pulumi.get(self, "secret_group_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="userManaged")
    def user_managed(self) -> _builtins.bool:
        return pulumi.get(self, "user_managed")


class AwaitableGetContainerIngressInstanceResult(GetContainerIngressInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerIngressInstanceResult(
            cluster=self.cluster,
            id=self.id,
            instance_crn=self.instance_crn,
            instance_name=self.instance_name,
            instance_type=self.instance_type,
            is_default=self.is_default,
            secret_group_id=self.secret_group_id,
            secret_group_name=self.secret_group_name,
            status=self.status,
            user_managed=self.user_managed)


def get_container_ingress_instance(cluster: Optional[_builtins.str] = None,
                                   id: Optional[_builtins.str] = None,
                                   instance_name: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerIngressInstanceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['instanceName'] = instance_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerIngressInstance:getContainerIngressInstance', __args__, opts=opts, typ=GetContainerIngressInstanceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerIngressInstanceResult(
        cluster=pulumi.get(__ret__, 'cluster'),
        id=pulumi.get(__ret__, 'id'),
        instance_crn=pulumi.get(__ret__, 'instance_crn'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        instance_type=pulumi.get(__ret__, 'instance_type'),
        is_default=pulumi.get(__ret__, 'is_default'),
        secret_group_id=pulumi.get(__ret__, 'secret_group_id'),
        secret_group_name=pulumi.get(__ret__, 'secret_group_name'),
        status=pulumi.get(__ret__, 'status'),
        user_managed=pulumi.get(__ret__, 'user_managed'))
def get_container_ingress_instance_output(cluster: Optional[pulumi.Input[_builtins.str]] = None,
                                          id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerIngressInstanceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['instanceName'] = instance_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerIngressInstance:getContainerIngressInstance', __args__, opts=opts, typ=GetContainerIngressInstanceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerIngressInstanceResult(
        cluster=pulumi.get(__response__, 'cluster'),
        id=pulumi.get(__response__, 'id'),
        instance_crn=pulumi.get(__response__, 'instance_crn'),
        instance_name=pulumi.get(__response__, 'instance_name'),
        instance_type=pulumi.get(__response__, 'instance_type'),
        is_default=pulumi.get(__response__, 'is_default'),
        secret_group_id=pulumi.get(__response__, 'secret_group_id'),
        secret_group_name=pulumi.get(__response__, 'secret_group_name'),
        status=pulumi.get(__response__, 'status'),
        user_managed=pulumi.get(__response__, 'user_managed')))
