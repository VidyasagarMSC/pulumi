# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsIpsecPolicyArgs', 'IsIpsecPolicy']

@pulumi.input_type
class IsIpsecPolicyArgs:
    def __init__(__self__, *,
                 authentication_algorithm: pulumi.Input[_builtins.str],
                 encryption_algorithm: pulumi.Input[_builtins.str],
                 pfs: pulumi.Input[_builtins.str],
                 is_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_lifetime: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsIpsecPolicy resource.
        :param pulumi.Input[_builtins.str] authentication_algorithm: Authentication alorothm
        :param pulumi.Input[_builtins.str] encryption_algorithm: Encryption algorithm
        :param pulumi.Input[_builtins.str] pfs: PFS info
        :param pulumi.Input[_builtins.float] key_lifetime: IPSEC key lifetime
        :param pulumi.Input[_builtins.str] name: IPSEC name
        :param pulumi.Input[_builtins.str] resource_group: Resource group info
        """
        pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        pulumi.set(__self__, "pfs", pfs)
        if is_ipsec_policy_id is not None:
            pulumi.set(__self__, "is_ipsec_policy_id", is_ipsec_policy_id)
        if key_lifetime is not None:
            pulumi.set(__self__, "key_lifetime", key_lifetime)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> pulumi.Input[_builtins.str]:
        """
        Authentication alorothm
        """
        return pulumi.get(self, "authentication_algorithm")

    @authentication_algorithm.setter
    def authentication_algorithm(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "authentication_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> pulumi.Input[_builtins.str]:
        """
        Encryption algorithm
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "encryption_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def pfs(self) -> pulumi.Input[_builtins.str]:
        """
        PFS info
        """
        return pulumi.get(self, "pfs")

    @pfs.setter
    def pfs(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pfs", value)

    @_builtins.property
    @pulumi.getter(name="isIpsecPolicyId")
    def is_ipsec_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_ipsec_policy_id")

    @is_ipsec_policy_id.setter
    def is_ipsec_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_ipsec_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="keyLifetime")
    def key_lifetime(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IPSEC key lifetime
        """
        return pulumi.get(self, "key_lifetime")

    @key_lifetime.setter
    def key_lifetime(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "key_lifetime", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPSEC name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group info
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)


@pulumi.input_type
class _IsIpsecPolicyState:
    def __init__(__self__, *,
                 authentication_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 encapsulation_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 is_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_lifetime: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pfs: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 transform_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_connections: Optional[pulumi.Input[Sequence[pulumi.Input['IsIpsecPolicyVpnConnectionArgs']]]] = None):
        """
        Input properties used for looking up and filtering IsIpsecPolicy resources.
        :param pulumi.Input[_builtins.str] authentication_algorithm: Authentication alorothm
        :param pulumi.Input[_builtins.str] encapsulation_mode: IPSEC encapsulation mode
        :param pulumi.Input[_builtins.str] encryption_algorithm: Encryption algorithm
        :param pulumi.Input[_builtins.float] key_lifetime: IPSEC key lifetime
        :param pulumi.Input[_builtins.str] name: IPSEC name
        :param pulumi.Input[_builtins.str] pfs: PFS info
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: Resource group info
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] transform_protocol: IPSEC transform protocol
        """
        if authentication_algorithm is not None:
            pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        if encapsulation_mode is not None:
            pulumi.set(__self__, "encapsulation_mode", encapsulation_mode)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if is_ipsec_policy_id is not None:
            pulumi.set(__self__, "is_ipsec_policy_id", is_ipsec_policy_id)
        if key_lifetime is not None:
            pulumi.set(__self__, "key_lifetime", key_lifetime)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn is not None:
            pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if transform_protocol is not None:
            pulumi.set(__self__, "transform_protocol", transform_protocol)
        if vpn_connections is not None:
            pulumi.set(__self__, "vpn_connections", vpn_connections)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authentication alorothm
        """
        return pulumi.get(self, "authentication_algorithm")

    @authentication_algorithm.setter
    def authentication_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="encapsulationMode")
    def encapsulation_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPSEC encapsulation mode
        """
        return pulumi.get(self, "encapsulation_mode")

    @encapsulation_mode.setter
    def encapsulation_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation_mode", value)

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encryption algorithm
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="isIpsecPolicyId")
    def is_ipsec_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_ipsec_policy_id")

    @is_ipsec_policy_id.setter
    def is_ipsec_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_ipsec_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="keyLifetime")
    def key_lifetime(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IPSEC key lifetime
        """
        return pulumi.get(self, "key_lifetime")

    @key_lifetime.setter
    def key_lifetime(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "key_lifetime", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPSEC name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def pfs(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PFS info
        """
        return pulumi.get(self, "pfs")

    @pfs.setter
    def pfs(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pfs", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @resource_crn.setter
    def resource_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group info
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="transformProtocol")
    def transform_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPSEC transform protocol
        """
        return pulumi.get(self, "transform_protocol")

    @transform_protocol.setter
    def transform_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transform_protocol", value)

    @_builtins.property
    @pulumi.getter(name="vpnConnections")
    def vpn_connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsIpsecPolicyVpnConnectionArgs']]]]:
        return pulumi.get(self, "vpn_connections")

    @vpn_connections.setter
    def vpn_connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsIpsecPolicyVpnConnectionArgs']]]]):
        pulumi.set(self, "vpn_connections", value)


@pulumi.type_token("ibm:index/isIpsecPolicy:IsIpsecPolicy")
class IsIpsecPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 is_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_lifetime: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pfs: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsIpsecPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] authentication_algorithm: Authentication alorothm
        :param pulumi.Input[_builtins.str] encryption_algorithm: Encryption algorithm
        :param pulumi.Input[_builtins.float] key_lifetime: IPSEC key lifetime
        :param pulumi.Input[_builtins.str] name: IPSEC name
        :param pulumi.Input[_builtins.str] pfs: PFS info
        :param pulumi.Input[_builtins.str] resource_group: Resource group info
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsIpsecPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsIpsecPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsIpsecPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsIpsecPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 is_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_lifetime: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pfs: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsIpsecPolicyArgs.__new__(IsIpsecPolicyArgs)

            if authentication_algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'authentication_algorithm'")
            __props__.__dict__["authentication_algorithm"] = authentication_algorithm
            if encryption_algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'encryption_algorithm'")
            __props__.__dict__["encryption_algorithm"] = encryption_algorithm
            __props__.__dict__["is_ipsec_policy_id"] = is_ipsec_policy_id
            __props__.__dict__["key_lifetime"] = key_lifetime
            __props__.__dict__["name"] = name
            if pfs is None and not opts.urn:
                raise TypeError("Missing required property 'pfs'")
            __props__.__dict__["pfs"] = pfs
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["encapsulation_mode"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_crn"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["transform_protocol"] = None
            __props__.__dict__["vpn_connections"] = None
        super(IsIpsecPolicy, __self__).__init__(
            'ibm:index/isIpsecPolicy:IsIpsecPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            encapsulation_mode: Optional[pulumi.Input[_builtins.str]] = None,
            encryption_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            is_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            key_lifetime: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            pfs: Optional[pulumi.Input[_builtins.str]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            transform_protocol: Optional[pulumi.Input[_builtins.str]] = None,
            vpn_connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsIpsecPolicyVpnConnectionArgs', 'IsIpsecPolicyVpnConnectionArgsDict']]]]] = None) -> 'IsIpsecPolicy':
        """
        Get an existing IsIpsecPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] authentication_algorithm: Authentication alorothm
        :param pulumi.Input[_builtins.str] encapsulation_mode: IPSEC encapsulation mode
        :param pulumi.Input[_builtins.str] encryption_algorithm: Encryption algorithm
        :param pulumi.Input[_builtins.float] key_lifetime: IPSEC key lifetime
        :param pulumi.Input[_builtins.str] name: IPSEC name
        :param pulumi.Input[_builtins.str] pfs: PFS info
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: Resource group info
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] transform_protocol: IPSEC transform protocol
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsIpsecPolicyState.__new__(_IsIpsecPolicyState)

        __props__.__dict__["authentication_algorithm"] = authentication_algorithm
        __props__.__dict__["encapsulation_mode"] = encapsulation_mode
        __props__.__dict__["encryption_algorithm"] = encryption_algorithm
        __props__.__dict__["is_ipsec_policy_id"] = is_ipsec_policy_id
        __props__.__dict__["key_lifetime"] = key_lifetime
        __props__.__dict__["name"] = name
        __props__.__dict__["pfs"] = pfs
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_crn"] = resource_crn
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["transform_protocol"] = transform_protocol
        __props__.__dict__["vpn_connections"] = vpn_connections
        return IsIpsecPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        Authentication alorothm
        """
        return pulumi.get(self, "authentication_algorithm")

    @_builtins.property
    @pulumi.getter(name="encapsulationMode")
    def encapsulation_mode(self) -> pulumi.Output[_builtins.str]:
        """
        IPSEC encapsulation mode
        """
        return pulumi.get(self, "encapsulation_mode")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        Encryption algorithm
        """
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter(name="isIpsecPolicyId")
    def is_ipsec_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_ipsec_policy_id")

    @_builtins.property
    @pulumi.getter(name="keyLifetime")
    def key_lifetime(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        IPSEC key lifetime
        """
        return pulumi.get(self, "key_lifetime")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        IPSEC name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def pfs(self) -> pulumi.Output[_builtins.str]:
        """
        PFS info
        """
        return pulumi.get(self, "pfs")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Resource group info
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="transformProtocol")
    def transform_protocol(self) -> pulumi.Output[_builtins.str]:
        """
        IPSEC transform protocol
        """
        return pulumi.get(self, "transform_protocol")

    @_builtins.property
    @pulumi.getter(name="vpnConnections")
    def vpn_connections(self) -> pulumi.Output[Sequence['outputs.IsIpsecPolicyVpnConnection']]:
        return pulumi.get(self, "vpn_connections")

