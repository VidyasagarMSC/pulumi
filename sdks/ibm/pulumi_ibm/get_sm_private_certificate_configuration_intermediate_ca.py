# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSmPrivateCertificateConfigurationIntermediateCaResult',
    'AwaitableGetSmPrivateCertificateConfigurationIntermediateCaResult',
    'get_sm_private_certificate_configuration_intermediate_ca',
    'get_sm_private_certificate_configuration_intermediate_ca_output',
]

@pulumi.output_type
class GetSmPrivateCertificateConfigurationIntermediateCaResult:
    """
    A collection of values returned by getSmPrivateCertificateConfigurationIntermediateCa.
    """
    def __init__(__self__, alt_names=None, common_name=None, config_type=None, countries=None, crl_disable=None, crl_distribution_points_encoded=None, crl_expiry_seconds=None, crypto_keys=None, datas=None, endpoint_type=None, exclude_cn_from_sans=None, expiration_date=None, format=None, id=None, instance_id=None, ip_sans=None, issuer=None, issuing_certificates_urls_encoded=None, key_bits=None, key_type=None, localities=None, max_ttl_seconds=None, name=None, organizations=None, other_sans=None, ous=None, postal_codes=None, private_key_format=None, provinces=None, region=None, secret_type=None, serial_number=None, signing_method=None, status=None, street_addresses=None, uri_sans=None):
        if alt_names and not isinstance(alt_names, list):
            raise TypeError("Expected argument 'alt_names' to be a list")
        pulumi.set(__self__, "alt_names", alt_names)
        if common_name and not isinstance(common_name, str):
            raise TypeError("Expected argument 'common_name' to be a str")
        pulumi.set(__self__, "common_name", common_name)
        if config_type and not isinstance(config_type, str):
            raise TypeError("Expected argument 'config_type' to be a str")
        pulumi.set(__self__, "config_type", config_type)
        if countries and not isinstance(countries, list):
            raise TypeError("Expected argument 'countries' to be a list")
        pulumi.set(__self__, "countries", countries)
        if crl_disable and not isinstance(crl_disable, bool):
            raise TypeError("Expected argument 'crl_disable' to be a bool")
        pulumi.set(__self__, "crl_disable", crl_disable)
        if crl_distribution_points_encoded and not isinstance(crl_distribution_points_encoded, bool):
            raise TypeError("Expected argument 'crl_distribution_points_encoded' to be a bool")
        pulumi.set(__self__, "crl_distribution_points_encoded", crl_distribution_points_encoded)
        if crl_expiry_seconds and not isinstance(crl_expiry_seconds, float):
            raise TypeError("Expected argument 'crl_expiry_seconds' to be a float")
        pulumi.set(__self__, "crl_expiry_seconds", crl_expiry_seconds)
        if crypto_keys and not isinstance(crypto_keys, list):
            raise TypeError("Expected argument 'crypto_keys' to be a list")
        pulumi.set(__self__, "crypto_keys", crypto_keys)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if exclude_cn_from_sans and not isinstance(exclude_cn_from_sans, bool):
            raise TypeError("Expected argument 'exclude_cn_from_sans' to be a bool")
        pulumi.set(__self__, "exclude_cn_from_sans", exclude_cn_from_sans)
        if expiration_date and not isinstance(expiration_date, str):
            raise TypeError("Expected argument 'expiration_date' to be a str")
        pulumi.set(__self__, "expiration_date", expiration_date)
        if format and not isinstance(format, str):
            raise TypeError("Expected argument 'format' to be a str")
        pulumi.set(__self__, "format", format)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if ip_sans and not isinstance(ip_sans, str):
            raise TypeError("Expected argument 'ip_sans' to be a str")
        pulumi.set(__self__, "ip_sans", ip_sans)
        if issuer and not isinstance(issuer, str):
            raise TypeError("Expected argument 'issuer' to be a str")
        pulumi.set(__self__, "issuer", issuer)
        if issuing_certificates_urls_encoded and not isinstance(issuing_certificates_urls_encoded, bool):
            raise TypeError("Expected argument 'issuing_certificates_urls_encoded' to be a bool")
        pulumi.set(__self__, "issuing_certificates_urls_encoded", issuing_certificates_urls_encoded)
        if key_bits and not isinstance(key_bits, float):
            raise TypeError("Expected argument 'key_bits' to be a float")
        pulumi.set(__self__, "key_bits", key_bits)
        if key_type and not isinstance(key_type, str):
            raise TypeError("Expected argument 'key_type' to be a str")
        pulumi.set(__self__, "key_type", key_type)
        if localities and not isinstance(localities, list):
            raise TypeError("Expected argument 'localities' to be a list")
        pulumi.set(__self__, "localities", localities)
        if max_ttl_seconds and not isinstance(max_ttl_seconds, float):
            raise TypeError("Expected argument 'max_ttl_seconds' to be a float")
        pulumi.set(__self__, "max_ttl_seconds", max_ttl_seconds)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organizations and not isinstance(organizations, list):
            raise TypeError("Expected argument 'organizations' to be a list")
        pulumi.set(__self__, "organizations", organizations)
        if other_sans and not isinstance(other_sans, list):
            raise TypeError("Expected argument 'other_sans' to be a list")
        pulumi.set(__self__, "other_sans", other_sans)
        if ous and not isinstance(ous, list):
            raise TypeError("Expected argument 'ous' to be a list")
        pulumi.set(__self__, "ous", ous)
        if postal_codes and not isinstance(postal_codes, list):
            raise TypeError("Expected argument 'postal_codes' to be a list")
        pulumi.set(__self__, "postal_codes", postal_codes)
        if private_key_format and not isinstance(private_key_format, str):
            raise TypeError("Expected argument 'private_key_format' to be a str")
        pulumi.set(__self__, "private_key_format", private_key_format)
        if provinces and not isinstance(provinces, list):
            raise TypeError("Expected argument 'provinces' to be a list")
        pulumi.set(__self__, "provinces", provinces)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if secret_type and not isinstance(secret_type, str):
            raise TypeError("Expected argument 'secret_type' to be a str")
        pulumi.set(__self__, "secret_type", secret_type)
        if serial_number and not isinstance(serial_number, str):
            raise TypeError("Expected argument 'serial_number' to be a str")
        pulumi.set(__self__, "serial_number", serial_number)
        if signing_method and not isinstance(signing_method, str):
            raise TypeError("Expected argument 'signing_method' to be a str")
        pulumi.set(__self__, "signing_method", signing_method)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if street_addresses and not isinstance(street_addresses, list):
            raise TypeError("Expected argument 'street_addresses' to be a list")
        pulumi.set(__self__, "street_addresses", street_addresses)
        if uri_sans and not isinstance(uri_sans, str):
            raise TypeError("Expected argument 'uri_sans' to be a str")
        pulumi.set(__self__, "uri_sans", uri_sans)

    @_builtins.property
    @pulumi.getter(name="altNames")
    def alt_names(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "alt_names")

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> _builtins.str:
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter(name="configType")
    def config_type(self) -> _builtins.str:
        return pulumi.get(self, "config_type")

    @_builtins.property
    @pulumi.getter
    def countries(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "countries")

    @_builtins.property
    @pulumi.getter(name="crlDisable")
    def crl_disable(self) -> _builtins.bool:
        return pulumi.get(self, "crl_disable")

    @_builtins.property
    @pulumi.getter(name="crlDistributionPointsEncoded")
    def crl_distribution_points_encoded(self) -> _builtins.bool:
        return pulumi.get(self, "crl_distribution_points_encoded")

    @_builtins.property
    @pulumi.getter(name="crlExpirySeconds")
    def crl_expiry_seconds(self) -> _builtins.float:
        return pulumi.get(self, "crl_expiry_seconds")

    @_builtins.property
    @pulumi.getter(name="cryptoKeys")
    def crypto_keys(self) -> Sequence['outputs.GetSmPrivateCertificateConfigurationIntermediateCaCryptoKeyResult']:
        return pulumi.get(self, "crypto_keys")

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetSmPrivateCertificateConfigurationIntermediateCaDataResult']:
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="excludeCnFromSans")
    def exclude_cn_from_sans(self) -> _builtins.bool:
        return pulumi.get(self, "exclude_cn_from_sans")

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> _builtins.str:
        return pulumi.get(self, "expiration_date")

    @_builtins.property
    @pulumi.getter
    def format(self) -> _builtins.str:
        return pulumi.get(self, "format")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipSans")
    def ip_sans(self) -> _builtins.str:
        return pulumi.get(self, "ip_sans")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> _builtins.str:
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter(name="issuingCertificatesUrlsEncoded")
    def issuing_certificates_urls_encoded(self) -> _builtins.bool:
        return pulumi.get(self, "issuing_certificates_urls_encoded")

    @_builtins.property
    @pulumi.getter(name="keyBits")
    def key_bits(self) -> _builtins.float:
        return pulumi.get(self, "key_bits")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> _builtins.str:
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter
    def localities(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "localities")

    @_builtins.property
    @pulumi.getter(name="maxTtlSeconds")
    def max_ttl_seconds(self) -> _builtins.float:
        return pulumi.get(self, "max_ttl_seconds")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def organizations(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "organizations")

    @_builtins.property
    @pulumi.getter(name="otherSans")
    def other_sans(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "other_sans")

    @_builtins.property
    @pulumi.getter
    def ous(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ous")

    @_builtins.property
    @pulumi.getter(name="postalCodes")
    def postal_codes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "postal_codes")

    @_builtins.property
    @pulumi.getter(name="privateKeyFormat")
    def private_key_format(self) -> _builtins.str:
        return pulumi.get(self, "private_key_format")

    @_builtins.property
    @pulumi.getter
    def provinces(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "provinces")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> _builtins.str:
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="signingMethod")
    def signing_method(self) -> _builtins.str:
        return pulumi.get(self, "signing_method")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="streetAddresses")
    def street_addresses(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "street_addresses")

    @_builtins.property
    @pulumi.getter(name="uriSans")
    def uri_sans(self) -> _builtins.str:
        return pulumi.get(self, "uri_sans")


class AwaitableGetSmPrivateCertificateConfigurationIntermediateCaResult(GetSmPrivateCertificateConfigurationIntermediateCaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSmPrivateCertificateConfigurationIntermediateCaResult(
            alt_names=self.alt_names,
            common_name=self.common_name,
            config_type=self.config_type,
            countries=self.countries,
            crl_disable=self.crl_disable,
            crl_distribution_points_encoded=self.crl_distribution_points_encoded,
            crl_expiry_seconds=self.crl_expiry_seconds,
            crypto_keys=self.crypto_keys,
            datas=self.datas,
            endpoint_type=self.endpoint_type,
            exclude_cn_from_sans=self.exclude_cn_from_sans,
            expiration_date=self.expiration_date,
            format=self.format,
            id=self.id,
            instance_id=self.instance_id,
            ip_sans=self.ip_sans,
            issuer=self.issuer,
            issuing_certificates_urls_encoded=self.issuing_certificates_urls_encoded,
            key_bits=self.key_bits,
            key_type=self.key_type,
            localities=self.localities,
            max_ttl_seconds=self.max_ttl_seconds,
            name=self.name,
            organizations=self.organizations,
            other_sans=self.other_sans,
            ous=self.ous,
            postal_codes=self.postal_codes,
            private_key_format=self.private_key_format,
            provinces=self.provinces,
            region=self.region,
            secret_type=self.secret_type,
            serial_number=self.serial_number,
            signing_method=self.signing_method,
            status=self.status,
            street_addresses=self.street_addresses,
            uri_sans=self.uri_sans)


def get_sm_private_certificate_configuration_intermediate_ca(endpoint_type: Optional[_builtins.str] = None,
                                                             id: Optional[_builtins.str] = None,
                                                             instance_id: Optional[_builtins.str] = None,
                                                             name: Optional[_builtins.str] = None,
                                                             region: Optional[_builtins.str] = None,
                                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSmPrivateCertificateConfigurationIntermediateCaResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSmPrivateCertificateConfigurationIntermediateCa:getSmPrivateCertificateConfigurationIntermediateCa', __args__, opts=opts, typ=GetSmPrivateCertificateConfigurationIntermediateCaResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSmPrivateCertificateConfigurationIntermediateCaResult(
        alt_names=pulumi.get(__ret__, 'alt_names'),
        common_name=pulumi.get(__ret__, 'common_name'),
        config_type=pulumi.get(__ret__, 'config_type'),
        countries=pulumi.get(__ret__, 'countries'),
        crl_disable=pulumi.get(__ret__, 'crl_disable'),
        crl_distribution_points_encoded=pulumi.get(__ret__, 'crl_distribution_points_encoded'),
        crl_expiry_seconds=pulumi.get(__ret__, 'crl_expiry_seconds'),
        crypto_keys=pulumi.get(__ret__, 'crypto_keys'),
        datas=pulumi.get(__ret__, 'datas'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        exclude_cn_from_sans=pulumi.get(__ret__, 'exclude_cn_from_sans'),
        expiration_date=pulumi.get(__ret__, 'expiration_date'),
        format=pulumi.get(__ret__, 'format'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        ip_sans=pulumi.get(__ret__, 'ip_sans'),
        issuer=pulumi.get(__ret__, 'issuer'),
        issuing_certificates_urls_encoded=pulumi.get(__ret__, 'issuing_certificates_urls_encoded'),
        key_bits=pulumi.get(__ret__, 'key_bits'),
        key_type=pulumi.get(__ret__, 'key_type'),
        localities=pulumi.get(__ret__, 'localities'),
        max_ttl_seconds=pulumi.get(__ret__, 'max_ttl_seconds'),
        name=pulumi.get(__ret__, 'name'),
        organizations=pulumi.get(__ret__, 'organizations'),
        other_sans=pulumi.get(__ret__, 'other_sans'),
        ous=pulumi.get(__ret__, 'ous'),
        postal_codes=pulumi.get(__ret__, 'postal_codes'),
        private_key_format=pulumi.get(__ret__, 'private_key_format'),
        provinces=pulumi.get(__ret__, 'provinces'),
        region=pulumi.get(__ret__, 'region'),
        secret_type=pulumi.get(__ret__, 'secret_type'),
        serial_number=pulumi.get(__ret__, 'serial_number'),
        signing_method=pulumi.get(__ret__, 'signing_method'),
        status=pulumi.get(__ret__, 'status'),
        street_addresses=pulumi.get(__ret__, 'street_addresses'),
        uri_sans=pulumi.get(__ret__, 'uri_sans'))
def get_sm_private_certificate_configuration_intermediate_ca_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                    id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                    instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                                    name: Optional[pulumi.Input[_builtins.str]] = None,
                                                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSmPrivateCertificateConfigurationIntermediateCaResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSmPrivateCertificateConfigurationIntermediateCa:getSmPrivateCertificateConfigurationIntermediateCa', __args__, opts=opts, typ=GetSmPrivateCertificateConfigurationIntermediateCaResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSmPrivateCertificateConfigurationIntermediateCaResult(
        alt_names=pulumi.get(__response__, 'alt_names'),
        common_name=pulumi.get(__response__, 'common_name'),
        config_type=pulumi.get(__response__, 'config_type'),
        countries=pulumi.get(__response__, 'countries'),
        crl_disable=pulumi.get(__response__, 'crl_disable'),
        crl_distribution_points_encoded=pulumi.get(__response__, 'crl_distribution_points_encoded'),
        crl_expiry_seconds=pulumi.get(__response__, 'crl_expiry_seconds'),
        crypto_keys=pulumi.get(__response__, 'crypto_keys'),
        datas=pulumi.get(__response__, 'datas'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        exclude_cn_from_sans=pulumi.get(__response__, 'exclude_cn_from_sans'),
        expiration_date=pulumi.get(__response__, 'expiration_date'),
        format=pulumi.get(__response__, 'format'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        ip_sans=pulumi.get(__response__, 'ip_sans'),
        issuer=pulumi.get(__response__, 'issuer'),
        issuing_certificates_urls_encoded=pulumi.get(__response__, 'issuing_certificates_urls_encoded'),
        key_bits=pulumi.get(__response__, 'key_bits'),
        key_type=pulumi.get(__response__, 'key_type'),
        localities=pulumi.get(__response__, 'localities'),
        max_ttl_seconds=pulumi.get(__response__, 'max_ttl_seconds'),
        name=pulumi.get(__response__, 'name'),
        organizations=pulumi.get(__response__, 'organizations'),
        other_sans=pulumi.get(__response__, 'other_sans'),
        ous=pulumi.get(__response__, 'ous'),
        postal_codes=pulumi.get(__response__, 'postal_codes'),
        private_key_format=pulumi.get(__response__, 'private_key_format'),
        provinces=pulumi.get(__response__, 'provinces'),
        region=pulumi.get(__response__, 'region'),
        secret_type=pulumi.get(__response__, 'secret_type'),
        serial_number=pulumi.get(__response__, 'serial_number'),
        signing_method=pulumi.get(__response__, 'signing_method'),
        status=pulumi.get(__response__, 'status'),
        street_addresses=pulumi.get(__response__, 'street_addresses'),
        uri_sans=pulumi.get(__response__, 'uri_sans')))
