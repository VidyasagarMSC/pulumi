# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetProjectEnvironmentResult',
    'AwaitableGetProjectEnvironmentResult',
    'get_project_environment',
    'get_project_environment_output',
]

@pulumi.output_type
class GetProjectEnvironmentResult:
    """
    A collection of values returned by getProjectEnvironment.
    """
    def __init__(__self__, created_at=None, definitions=None, href=None, id=None, modified_at=None, project_environment_id=None, project_id=None, projects=None, target_account=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if definitions and not isinstance(definitions, list):
            raise TypeError("Expected argument 'definitions' to be a list")
        pulumi.set(__self__, "definitions", definitions)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if modified_at and not isinstance(modified_at, str):
            raise TypeError("Expected argument 'modified_at' to be a str")
        pulumi.set(__self__, "modified_at", modified_at)
        if project_environment_id and not isinstance(project_environment_id, str):
            raise TypeError("Expected argument 'project_environment_id' to be a str")
        pulumi.set(__self__, "project_environment_id", project_environment_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if projects and not isinstance(projects, list):
            raise TypeError("Expected argument 'projects' to be a list")
        pulumi.set(__self__, "projects", projects)
        if target_account and not isinstance(target_account, str):
            raise TypeError("Expected argument 'target_account' to be a str")
        pulumi.set(__self__, "target_account", target_account)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def definitions(self) -> Sequence['outputs.GetProjectEnvironmentDefinitionResult']:
        return pulumi.get(self, "definitions")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> _builtins.str:
        return pulumi.get(self, "modified_at")

    @_builtins.property
    @pulumi.getter(name="projectEnvironmentId")
    def project_environment_id(self) -> _builtins.str:
        return pulumi.get(self, "project_environment_id")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetProjectEnvironmentProjectResult']:
        return pulumi.get(self, "projects")

    @_builtins.property
    @pulumi.getter(name="targetAccount")
    def target_account(self) -> _builtins.str:
        return pulumi.get(self, "target_account")


class AwaitableGetProjectEnvironmentResult(GetProjectEnvironmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectEnvironmentResult(
            created_at=self.created_at,
            definitions=self.definitions,
            href=self.href,
            id=self.id,
            modified_at=self.modified_at,
            project_environment_id=self.project_environment_id,
            project_id=self.project_id,
            projects=self.projects,
            target_account=self.target_account)


def get_project_environment(id: Optional[_builtins.str] = None,
                            project_environment_id: Optional[_builtins.str] = None,
                            project_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectEnvironmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['projectEnvironmentId'] = project_environment_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getProjectEnvironment:getProjectEnvironment', __args__, opts=opts, typ=GetProjectEnvironmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetProjectEnvironmentResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        definitions=pulumi.get(__ret__, 'definitions'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        modified_at=pulumi.get(__ret__, 'modified_at'),
        project_environment_id=pulumi.get(__ret__, 'project_environment_id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        projects=pulumi.get(__ret__, 'projects'),
        target_account=pulumi.get(__ret__, 'target_account'))
def get_project_environment_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   project_environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProjectEnvironmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['projectEnvironmentId'] = project_environment_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getProjectEnvironment:getProjectEnvironment', __args__, opts=opts, typ=GetProjectEnvironmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetProjectEnvironmentResult(
        created_at=pulumi.get(__response__, 'created_at'),
        definitions=pulumi.get(__response__, 'definitions'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        modified_at=pulumi.get(__response__, 'modified_at'),
        project_environment_id=pulumi.get(__response__, 'project_environment_id'),
        project_id=pulumi.get(__response__, 'project_id'),
        projects=pulumi.get(__response__, 'projects'),
        target_account=pulumi.get(__response__, 'target_account')))
