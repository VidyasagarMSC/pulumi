# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetKmsInstancePoliciesResult',
    'AwaitableGetKmsInstancePoliciesResult',
    'get_kms_instance_policies',
    'get_kms_instance_policies_output',
]

@pulumi.output_type
class GetKmsInstancePoliciesResult:
    """
    A collection of values returned by getKmsInstancePolicies.
    """
    def __init__(__self__, dual_auth_deletes=None, id=None, instance_id=None, key_create_import_accesses=None, metrics=None, policy_type=None, rotations=None):
        if dual_auth_deletes and not isinstance(dual_auth_deletes, list):
            raise TypeError("Expected argument 'dual_auth_deletes' to be a list")
        pulumi.set(__self__, "dual_auth_deletes", dual_auth_deletes)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if key_create_import_accesses and not isinstance(key_create_import_accesses, list):
            raise TypeError("Expected argument 'key_create_import_accesses' to be a list")
        pulumi.set(__self__, "key_create_import_accesses", key_create_import_accesses)
        if metrics and not isinstance(metrics, list):
            raise TypeError("Expected argument 'metrics' to be a list")
        pulumi.set(__self__, "metrics", metrics)
        if policy_type and not isinstance(policy_type, str):
            raise TypeError("Expected argument 'policy_type' to be a str")
        pulumi.set(__self__, "policy_type", policy_type)
        if rotations and not isinstance(rotations, list):
            raise TypeError("Expected argument 'rotations' to be a list")
        pulumi.set(__self__, "rotations", rotations)

    @_builtins.property
    @pulumi.getter(name="dualAuthDeletes")
    def dual_auth_deletes(self) -> Sequence['outputs.GetKmsInstancePoliciesDualAuthDeleteResult']:
        return pulumi.get(self, "dual_auth_deletes")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="keyCreateImportAccesses")
    def key_create_import_accesses(self) -> Sequence['outputs.GetKmsInstancePoliciesKeyCreateImportAccessResult']:
        return pulumi.get(self, "key_create_import_accesses")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetKmsInstancePoliciesMetricResult']:
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_type")

    @_builtins.property
    @pulumi.getter
    def rotations(self) -> Sequence['outputs.GetKmsInstancePoliciesRotationResult']:
        return pulumi.get(self, "rotations")


class AwaitableGetKmsInstancePoliciesResult(GetKmsInstancePoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKmsInstancePoliciesResult(
            dual_auth_deletes=self.dual_auth_deletes,
            id=self.id,
            instance_id=self.instance_id,
            key_create_import_accesses=self.key_create_import_accesses,
            metrics=self.metrics,
            policy_type=self.policy_type,
            rotations=self.rotations)


def get_kms_instance_policies(id: Optional[_builtins.str] = None,
                              instance_id: Optional[_builtins.str] = None,
                              policy_type: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKmsInstancePoliciesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['policyType'] = policy_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getKmsInstancePolicies:getKmsInstancePolicies', __args__, opts=opts, typ=GetKmsInstancePoliciesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetKmsInstancePoliciesResult(
        dual_auth_deletes=pulumi.get(__ret__, 'dual_auth_deletes'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        key_create_import_accesses=pulumi.get(__ret__, 'key_create_import_accesses'),
        metrics=pulumi.get(__ret__, 'metrics'),
        policy_type=pulumi.get(__ret__, 'policy_type'),
        rotations=pulumi.get(__ret__, 'rotations'))
def get_kms_instance_policies_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     policy_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKmsInstancePoliciesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['policyType'] = policy_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getKmsInstancePolicies:getKmsInstancePolicies', __args__, opts=opts, typ=GetKmsInstancePoliciesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetKmsInstancePoliciesResult(
        dual_auth_deletes=pulumi.get(__response__, 'dual_auth_deletes'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        key_create_import_accesses=pulumi.get(__response__, 'key_create_import_accesses'),
        metrics=pulumi.get(__response__, 'metrics'),
        policy_type=pulumi.get(__response__, 'policy_type'),
        rotations=pulumi.get(__response__, 'rotations')))
