# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCisDomainResult',
    'AwaitableGetCisDomainResult',
    'get_cis_domain',
    'get_cis_domain_output',
]

@pulumi.output_type
class GetCisDomainResult:
    """
    A collection of values returned by getCisDomain.
    """
    def __init__(__self__, cis_id=None, cname_suffix=None, domain=None, domain_id=None, id=None, name_servers=None, original_name_servers=None, paused=None, status=None, type=None, verification_key=None):
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if cname_suffix and not isinstance(cname_suffix, str):
            raise TypeError("Expected argument 'cname_suffix' to be a str")
        pulumi.set(__self__, "cname_suffix", cname_suffix)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_servers and not isinstance(name_servers, list):
            raise TypeError("Expected argument 'name_servers' to be a list")
        pulumi.set(__self__, "name_servers", name_servers)
        if original_name_servers and not isinstance(original_name_servers, list):
            raise TypeError("Expected argument 'original_name_servers' to be a list")
        pulumi.set(__self__, "original_name_servers", original_name_servers)
        if paused and not isinstance(paused, bool):
            raise TypeError("Expected argument 'paused' to be a bool")
        pulumi.set(__self__, "paused", paused)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if verification_key and not isinstance(verification_key, str):
            raise TypeError("Expected argument 'verification_key' to be a str")
        pulumi.set(__self__, "verification_key", verification_key)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cnameSuffix")
    def cname_suffix(self) -> _builtins.str:
        return pulumi.get(self, "cname_suffix")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "name_servers")

    @_builtins.property
    @pulumi.getter(name="originalNameServers")
    def original_name_servers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "original_name_servers")

    @_builtins.property
    @pulumi.getter
    def paused(self) -> _builtins.bool:
        return pulumi.get(self, "paused")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="verificationKey")
    def verification_key(self) -> _builtins.str:
        return pulumi.get(self, "verification_key")


class AwaitableGetCisDomainResult(GetCisDomainResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisDomainResult(
            cis_id=self.cis_id,
            cname_suffix=self.cname_suffix,
            domain=self.domain,
            domain_id=self.domain_id,
            id=self.id,
            name_servers=self.name_servers,
            original_name_servers=self.original_name_servers,
            paused=self.paused,
            status=self.status,
            type=self.type,
            verification_key=self.verification_key)


def get_cis_domain(cis_id: Optional[_builtins.str] = None,
                   cname_suffix: Optional[_builtins.str] = None,
                   domain: Optional[_builtins.str] = None,
                   id: Optional[_builtins.str] = None,
                   verification_key: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisDomainResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['cnameSuffix'] = cname_suffix
    __args__['domain'] = domain
    __args__['id'] = id
    __args__['verificationKey'] = verification_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisDomain:getCisDomain', __args__, opts=opts, typ=GetCisDomainResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisDomainResult(
        cis_id=pulumi.get(__ret__, 'cis_id'),
        cname_suffix=pulumi.get(__ret__, 'cname_suffix'),
        domain=pulumi.get(__ret__, 'domain'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        name_servers=pulumi.get(__ret__, 'name_servers'),
        original_name_servers=pulumi.get(__ret__, 'original_name_servers'),
        paused=pulumi.get(__ret__, 'paused'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        verification_key=pulumi.get(__ret__, 'verification_key'))
def get_cis_domain_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                          cname_suffix: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          domain: Optional[pulumi.Input[_builtins.str]] = None,
                          id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          verification_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisDomainResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['cnameSuffix'] = cname_suffix
    __args__['domain'] = domain
    __args__['id'] = id
    __args__['verificationKey'] = verification_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisDomain:getCisDomain', __args__, opts=opts, typ=GetCisDomainResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisDomainResult(
        cis_id=pulumi.get(__response__, 'cis_id'),
        cname_suffix=pulumi.get(__response__, 'cname_suffix'),
        domain=pulumi.get(__response__, 'domain'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        id=pulumi.get(__response__, 'id'),
        name_servers=pulumi.get(__response__, 'name_servers'),
        original_name_servers=pulumi.get(__response__, 'original_name_servers'),
        paused=pulumi.get(__response__, 'paused'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        verification_key=pulumi.get(__response__, 'verification_key')))
