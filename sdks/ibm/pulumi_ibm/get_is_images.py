# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsImagesResult',
    'AwaitableGetIsImagesResult',
    'get_is_images',
    'get_is_images_output',
]

@pulumi.output_type
class GetIsImagesResult:
    """
    A collection of values returned by getIsImages.
    """
    def __init__(__self__, catalog_managed=None, id=None, images=None, name=None, remote_account_id=None, resource_group=None, status=None, user_data_formats=None, visibility=None):
        if catalog_managed and not isinstance(catalog_managed, bool):
            raise TypeError("Expected argument 'catalog_managed' to be a bool")
        pulumi.set(__self__, "catalog_managed", catalog_managed)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if images and not isinstance(images, list):
            raise TypeError("Expected argument 'images' to be a list")
        pulumi.set(__self__, "images", images)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if remote_account_id and not isinstance(remote_account_id, str):
            raise TypeError("Expected argument 'remote_account_id' to be a str")
        pulumi.set(__self__, "remote_account_id", remote_account_id)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if user_data_formats and not isinstance(user_data_formats, list):
            raise TypeError("Expected argument 'user_data_formats' to be a list")
        pulumi.set(__self__, "user_data_formats", user_data_formats)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)

    @_builtins.property
    @pulumi.getter(name="catalogManaged")
    def catalog_managed(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "catalog_managed")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def images(self) -> Sequence['outputs.GetIsImagesImageResult']:
        return pulumi.get(self, "images")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="remoteAccountId")
    def remote_account_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "remote_account_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="userDataFormats")
    def user_data_formats(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "user_data_formats")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "visibility")


class AwaitableGetIsImagesResult(GetIsImagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsImagesResult(
            catalog_managed=self.catalog_managed,
            id=self.id,
            images=self.images,
            name=self.name,
            remote_account_id=self.remote_account_id,
            resource_group=self.resource_group,
            status=self.status,
            user_data_formats=self.user_data_formats,
            visibility=self.visibility)


def get_is_images(catalog_managed: Optional[_builtins.bool] = None,
                  id: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  remote_account_id: Optional[_builtins.str] = None,
                  resource_group: Optional[_builtins.str] = None,
                  status: Optional[_builtins.str] = None,
                  user_data_formats: Optional[Sequence[_builtins.str]] = None,
                  visibility: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsImagesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['catalogManaged'] = catalog_managed
    __args__['id'] = id
    __args__['name'] = name
    __args__['remoteAccountId'] = remote_account_id
    __args__['resourceGroup'] = resource_group
    __args__['status'] = status
    __args__['userDataFormats'] = user_data_formats
    __args__['visibility'] = visibility
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsImages:getIsImages', __args__, opts=opts, typ=GetIsImagesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsImagesResult(
        catalog_managed=pulumi.get(__ret__, 'catalog_managed'),
        id=pulumi.get(__ret__, 'id'),
        images=pulumi.get(__ret__, 'images'),
        name=pulumi.get(__ret__, 'name'),
        remote_account_id=pulumi.get(__ret__, 'remote_account_id'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        status=pulumi.get(__ret__, 'status'),
        user_data_formats=pulumi.get(__ret__, 'user_data_formats'),
        visibility=pulumi.get(__ret__, 'visibility'))
def get_is_images_output(catalog_managed: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                         id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         remote_account_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         user_data_formats: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                         visibility: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsImagesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['catalogManaged'] = catalog_managed
    __args__['id'] = id
    __args__['name'] = name
    __args__['remoteAccountId'] = remote_account_id
    __args__['resourceGroup'] = resource_group
    __args__['status'] = status
    __args__['userDataFormats'] = user_data_formats
    __args__['visibility'] = visibility
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsImages:getIsImages', __args__, opts=opts, typ=GetIsImagesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsImagesResult(
        catalog_managed=pulumi.get(__response__, 'catalog_managed'),
        id=pulumi.get(__response__, 'id'),
        images=pulumi.get(__response__, 'images'),
        name=pulumi.get(__response__, 'name'),
        remote_account_id=pulumi.get(__response__, 'remote_account_id'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        status=pulumi.get(__response__, 'status'),
        user_data_formats=pulumi.get(__response__, 'user_data_formats'),
        visibility=pulumi.get(__response__, 'visibility')))
